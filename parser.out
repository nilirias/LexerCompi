Grammar:

Rule 0     S' -> program
Rule 1     program -> DRAWING ID declaration
Rule 2     declaration -> main
Rule 3     declaration -> var_declaration func_declaration main
Rule 4     var_declaration -> var_type ID multiple_var
Rule 5     multiple_var -> empty
Rule 6     multiple_var -> COMMA ID multiple_var
Rule 7     var_type -> BOOL
Rule 8     var_type -> WORD
Rule 9     var_type -> NUMBER
Rule 10    func_declaration -> empty
Rule 11    func_declaration -> func_type FUNC ID OPEN_PTH parameter CLOSE_PTH stmnt END
Rule 12    func_type -> BOOL
Rule 13    func_type -> WORD
Rule 14    func_type -> NUMBER
Rule 15    func_type -> VOID
Rule 16    parameter -> empty
Rule 17    parameter -> var_type ID multiple_parameters
Rule 18    multiple_parameters -> empty
Rule 19    multiple_parameters -> COMMA parameter
Rule 20    stmnt -> empty
Rule 21    stmnt -> var_declaration_func stmnt
Rule 22    stmnt -> pen_func stmnt
Rule 23    stmnt -> move_func stmnt
Rule 24    stmnt -> while_stmnt stmnt
Rule 25    stmnt -> if_stmnt stmnt
Rule 26    stmnt -> write stmnt
Rule 27    stmnt -> read stmnt
Rule 28    stmnt -> func_call stmnt
Rule 29    stmnt -> var_assignation stmnt
Rule 30    var_declaration_func -> var_type ID multiple_vars
Rule 31    rel_op -> MORE_OR_EQ_THAN
Rule 32    rel_op -> LESS_OR_EQ_THAN
Rule 33    rel_op -> DIFFERENT_TO
Rule 34    rel_op -> MORE_THAN
Rule 35    rel_op -> LESS_THAN
Rule 36    rel_op -> EQUAL_TO
Rule 37    var_assignation -> ID a1 assign expression quads
Rule 38    quads4 -> <empty>
Rule 39    assign -> ASSIGN
Rule 40    a1 -> <empty>
Rule 41    var_cte -> func_call
Rule 42    var_cte -> cte_bool
Rule 43    var_cte -> CTE_STR
Rule 44    var_cte -> CTE_NUM
Rule 45    var_cte -> variable
Rule 46    cte_bool -> FALSE
Rule 47    cte_bool -> TRUE
Rule 48    expression -> exp
Rule 49    expression -> exp e3 rel_op exp e3 quads
Rule 50    exp -> termino
Rule 51    exp -> termino e1 term_op e2 termino e1 quads1
Rule 52    termino -> factor
Rule 53    termino -> factor e1 fact_op factor e1 quads
Rule 54    factor -> term_op var_cte
Rule 55    factor -> var_cte
Rule 56    factor -> OPEN_PTH expression CLOSE_PTH
Rule 57    term_op -> SUB
Rule 58    term_op -> SUM
Rule 59    fact_op -> DIV
Rule 60    fact_op -> MULT
Rule 61    log_op -> OR
Rule 62    log_op -> AND
Rule 63    func_call -> ID OPEN_PTH func_call_param CLOSE_PTH
Rule 64    func_call_param -> expression multiple_fc_param
Rule 65    multiple_fc_param -> empty
Rule 66    multiple_fc_param -> COMMA func_call_param
Rule 67    read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH
Rule 68    variable -> ID array
Rule 69    array -> empty
Rule 70    array -> OPEN_SQR expression CLOSE_SQR matrix
Rule 71    matrix -> empty
Rule 72    matrix -> OPEN_SQR expression CLOSE_SQR
Rule 73    multiple_vars -> empty
Rule 74    multiple_vars -> COMMA variable
Rule 75    write -> WRITE OPEN_PTH expression CLOSE_PTH
Rule 76    if_stmnt -> IF log_exp stmnt else_stmnt
Rule 77    else_stmnt -> END
Rule 78    else_stmnt -> ELSE stmnt END
Rule 79    while_stmnt -> WHILE log_exp stmnt END
Rule 80    con_expression -> expression
Rule 81    con_expression -> con_expression
Rule 82    con_expression -> expression rel_op e4 expression quads
Rule 83    log_exp -> expression
Rule 84    log_exp -> con_expression log_op con_expression
Rule 85    move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH
Rule 86    move_type -> CENTER
Rule 87    move_type -> FORWARD
Rule 88    move_type -> RIGHT
Rule 89    move_type -> LEFT
Rule 90    pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH
Rule 91    pen_func -> PEN_UP OPEN_PTH CLOSE_PTH
Rule 92    main -> MAIN stmnt END
Rule 93    empty -> <empty>
Rule 94    e1 -> <empty>
Rule 95    e2 -> <empty>
Rule 96    e3 -> <empty>
Rule 97    e4 -> <empty>
Rule 98    quads -> <empty>
Rule 99    quads1 -> <empty>
Rule 100   lo1 -> <empty>

Terminals, with rules where they appear:

AND                  : 62
ASSIGN               : 39
BOOL                 : 7 12
CENTER               : 86
CLOSE_PTH            : 11 56 63 67 75 85 90 91
CLOSE_SQR            : 70 72
COMMA                : 6 19 66 74
CTE_NUM              : 44
CTE_STR              : 43
DIFFERENT_TO         : 33
DIV                  : 59
DRAWING              : 1
ELSE                 : 78
END                  : 11 77 78 79 92
EQUAL_TO             : 36
FALSE                : 46
FORWARD              : 87
FUNC                 : 11
ID                   : 1 4 6 11 17 30 37 63 68
IF                   : 76
LEFT                 : 89
LESS_OR_EQ_THAN      : 32
LESS_THAN            : 35
MAIN                 : 92
MORE_OR_EQ_THAN      : 31
MORE_THAN            : 34
MULT                 : 60
NUMBER               : 9 14
OPEN_PTH             : 11 56 63 67 75 85 90 91
OPEN_SQR             : 70 72
OR                   : 61
PEN_DOWN             : 90
PEN_UP               : 91
READ                 : 67
RIGHT                : 88
SUB                  : 57
SUM                  : 58
TRUE                 : 47
VOID                 : 15
WHILE                : 79
WORD                 : 8 13
WRITE                : 75
error                : 

Nonterminals, with rules where they appear:

a1                   : 37
array                : 68
assign               : 37
con_expression       : 81 84 84
cte_bool             : 42
declaration          : 1
e1                   : 51 51 53 53
e2                   : 51
e3                   : 49 49
e4                   : 82
else_stmnt           : 76
empty                : 5 10 16 18 20 65 69 71 73
exp                  : 48 49 49
expression           : 37 56 64 70 72 75 80 82 82 83
fact_op              : 53
factor               : 52 53 53
func_call            : 28 41
func_call_param      : 63 66 85
func_declaration     : 3
func_type            : 11
if_stmnt             : 25
lo1                  : 
log_exp              : 76 79
log_op               : 84
main                 : 2 3
matrix               : 70
move_func            : 23
move_type            : 85
multiple_fc_param    : 64
multiple_parameters  : 17
multiple_var         : 4 6
multiple_vars        : 30 67
parameter            : 11 19
pen_func             : 22
program              : 0
quads                : 37 49 53 82
quads1               : 51
quads4               : 
read                 : 27
rel_op               : 49 82
stmnt                : 11 21 22 23 24 25 26 27 28 29 76 78 79 92
term_op              : 51 54
termino              : 50 51 51
var_assignation      : 29
var_cte              : 54 55
var_declaration      : 3
var_declaration_func : 21
var_type             : 4 17 30
variable             : 45 67 74
while_stmnt          : 24
write                : 26


state 0

    (0) S' -> . program
    (1) program -> . DRAWING ID declaration
    DRAWING         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .


state 2

    (1) program -> DRAWING . ID declaration
    ID              shift and go to state 3


state 3

    (1) program -> DRAWING ID . declaration
    (2) declaration -> . main
    (3) declaration -> . var_declaration func_declaration main
    (92) main -> . MAIN stmnt END
    (4) var_declaration -> . var_type ID multiple_var
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    MAIN            shift and go to state 7
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11

    declaration                    shift and go to state 4
    main                           shift and go to state 5
    var_declaration                shift and go to state 6
    var_type                       shift and go to state 8

state 4

    (1) program -> DRAWING ID declaration .
    $end            reduce using rule 1 (program -> DRAWING ID declaration .)


state 5

    (2) declaration -> main .
    $end            reduce using rule 2 (declaration -> main .)


state 6

    (3) declaration -> var_declaration . func_declaration main
    (10) func_declaration -> . empty
    (11) func_declaration -> . func_type FUNC ID OPEN_PTH parameter CLOSE_PTH stmnt END
    (93) empty -> .
    (12) func_type -> . BOOL
    (13) func_type -> . WORD
    (14) func_type -> . NUMBER
    (15) func_type -> . VOID
    MAIN            reduce using rule 93 (empty -> .)
    BOOL            shift and go to state 15
    WORD            shift and go to state 16
    NUMBER          shift and go to state 17
    VOID            shift and go to state 18

    func_declaration               shift and go to state 12
    empty                          shift and go to state 13
    func_type                      shift and go to state 14

state 7

    (92) main -> MAIN . stmnt END
    (20) stmnt -> . empty
    (21) stmnt -> . var_declaration_func stmnt
    (22) stmnt -> . pen_func stmnt
    (23) stmnt -> . move_func stmnt
    (24) stmnt -> . while_stmnt stmnt
    (25) stmnt -> . if_stmnt stmnt
    (26) stmnt -> . write stmnt
    (27) stmnt -> . read stmnt
    (28) stmnt -> . func_call stmnt
    (29) stmnt -> . var_assignation stmnt
    (93) empty -> .
    (30) var_declaration_func -> . var_type ID multiple_vars
    (90) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (91) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (85) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (79) while_stmnt -> . WHILE log_exp stmnt END
    (76) if_stmnt -> . IF log_exp stmnt else_stmnt
    (75) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (67) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (63) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (37) var_assignation -> . ID a1 assign expression quads
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (86) move_type -> . CENTER
    (87) move_type -> . FORWARD
    (88) move_type -> . RIGHT
    (89) move_type -> . LEFT
    END             reduce using rule 93 (empty -> .)
    PEN_DOWN        shift and go to state 32
    PEN_UP          shift and go to state 33
    WHILE           shift and go to state 35
    IF              shift and go to state 36
    WRITE           shift and go to state 37
    READ            shift and go to state 38
    ID              shift and go to state 31
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11
    CENTER          shift and go to state 39
    FORWARD         shift and go to state 40
    RIGHT           shift and go to state 41
    LEFT            shift and go to state 42

    stmnt                          shift and go to state 19
    empty                          shift and go to state 20
    var_declaration_func           shift and go to state 21
    pen_func                       shift and go to state 22
    move_func                      shift and go to state 23
    while_stmnt                    shift and go to state 24
    if_stmnt                       shift and go to state 25
    write                          shift and go to state 26
    read                           shift and go to state 27
    func_call                      shift and go to state 28
    var_assignation                shift and go to state 29
    var_type                       shift and go to state 30
    move_type                      shift and go to state 34

state 8

    (4) var_declaration -> var_type . ID multiple_var
    ID              shift and go to state 43


state 9

    (7) var_type -> BOOL .
    ID              reduce using rule 7 (var_type -> BOOL .)


state 10

    (8) var_type -> WORD .
    ID              reduce using rule 8 (var_type -> WORD .)


state 11

    (9) var_type -> NUMBER .
    ID              reduce using rule 9 (var_type -> NUMBER .)


state 12

    (3) declaration -> var_declaration func_declaration . main
    (92) main -> . MAIN stmnt END
    MAIN            shift and go to state 7

    main                           shift and go to state 44

state 13

    (10) func_declaration -> empty .
    MAIN            reduce using rule 10 (func_declaration -> empty .)


state 14

    (11) func_declaration -> func_type . FUNC ID OPEN_PTH parameter CLOSE_PTH stmnt END
    FUNC            shift and go to state 45


state 15

    (12) func_type -> BOOL .
    FUNC            reduce using rule 12 (func_type -> BOOL .)


state 16

    (13) func_type -> WORD .
    FUNC            reduce using rule 13 (func_type -> WORD .)


state 17

    (14) func_type -> NUMBER .
    FUNC            reduce using rule 14 (func_type -> NUMBER .)


state 18

    (15) func_type -> VOID .
    FUNC            reduce using rule 15 (func_type -> VOID .)


state 19

    (92) main -> MAIN stmnt . END
    END             shift and go to state 46


state 20

    (20) stmnt -> empty .
    END             reduce using rule 20 (stmnt -> empty .)
    ELSE            reduce using rule 20 (stmnt -> empty .)


state 21

    (21) stmnt -> var_declaration_func . stmnt
    (20) stmnt -> . empty
    (21) stmnt -> . var_declaration_func stmnt
    (22) stmnt -> . pen_func stmnt
    (23) stmnt -> . move_func stmnt
    (24) stmnt -> . while_stmnt stmnt
    (25) stmnt -> . if_stmnt stmnt
    (26) stmnt -> . write stmnt
    (27) stmnt -> . read stmnt
    (28) stmnt -> . func_call stmnt
    (29) stmnt -> . var_assignation stmnt
    (93) empty -> .
    (30) var_declaration_func -> . var_type ID multiple_vars
    (90) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (91) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (85) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (79) while_stmnt -> . WHILE log_exp stmnt END
    (76) if_stmnt -> . IF log_exp stmnt else_stmnt
    (75) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (67) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (63) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (37) var_assignation -> . ID a1 assign expression quads
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (86) move_type -> . CENTER
    (87) move_type -> . FORWARD
    (88) move_type -> . RIGHT
    (89) move_type -> . LEFT
    END             reduce using rule 93 (empty -> .)
    ELSE            reduce using rule 93 (empty -> .)
    PEN_DOWN        shift and go to state 32
    PEN_UP          shift and go to state 33
    WHILE           shift and go to state 35
    IF              shift and go to state 36
    WRITE           shift and go to state 37
    READ            shift and go to state 38
    ID              shift and go to state 31
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11
    CENTER          shift and go to state 39
    FORWARD         shift and go to state 40
    RIGHT           shift and go to state 41
    LEFT            shift and go to state 42

    var_declaration_func           shift and go to state 21
    stmnt                          shift and go to state 47
    empty                          shift and go to state 20
    pen_func                       shift and go to state 22
    move_func                      shift and go to state 23
    while_stmnt                    shift and go to state 24
    if_stmnt                       shift and go to state 25
    write                          shift and go to state 26
    read                           shift and go to state 27
    func_call                      shift and go to state 28
    var_assignation                shift and go to state 29
    var_type                       shift and go to state 30
    move_type                      shift and go to state 34

state 22

    (22) stmnt -> pen_func . stmnt
    (20) stmnt -> . empty
    (21) stmnt -> . var_declaration_func stmnt
    (22) stmnt -> . pen_func stmnt
    (23) stmnt -> . move_func stmnt
    (24) stmnt -> . while_stmnt stmnt
    (25) stmnt -> . if_stmnt stmnt
    (26) stmnt -> . write stmnt
    (27) stmnt -> . read stmnt
    (28) stmnt -> . func_call stmnt
    (29) stmnt -> . var_assignation stmnt
    (93) empty -> .
    (30) var_declaration_func -> . var_type ID multiple_vars
    (90) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (91) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (85) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (79) while_stmnt -> . WHILE log_exp stmnt END
    (76) if_stmnt -> . IF log_exp stmnt else_stmnt
    (75) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (67) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (63) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (37) var_assignation -> . ID a1 assign expression quads
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (86) move_type -> . CENTER
    (87) move_type -> . FORWARD
    (88) move_type -> . RIGHT
    (89) move_type -> . LEFT
    END             reduce using rule 93 (empty -> .)
    ELSE            reduce using rule 93 (empty -> .)
    PEN_DOWN        shift and go to state 32
    PEN_UP          shift and go to state 33
    WHILE           shift and go to state 35
    IF              shift and go to state 36
    WRITE           shift and go to state 37
    READ            shift and go to state 38
    ID              shift and go to state 31
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11
    CENTER          shift and go to state 39
    FORWARD         shift and go to state 40
    RIGHT           shift and go to state 41
    LEFT            shift and go to state 42

    pen_func                       shift and go to state 22
    stmnt                          shift and go to state 48
    empty                          shift and go to state 20
    var_declaration_func           shift and go to state 21
    move_func                      shift and go to state 23
    while_stmnt                    shift and go to state 24
    if_stmnt                       shift and go to state 25
    write                          shift and go to state 26
    read                           shift and go to state 27
    func_call                      shift and go to state 28
    var_assignation                shift and go to state 29
    var_type                       shift and go to state 30
    move_type                      shift and go to state 34

state 23

    (23) stmnt -> move_func . stmnt
    (20) stmnt -> . empty
    (21) stmnt -> . var_declaration_func stmnt
    (22) stmnt -> . pen_func stmnt
    (23) stmnt -> . move_func stmnt
    (24) stmnt -> . while_stmnt stmnt
    (25) stmnt -> . if_stmnt stmnt
    (26) stmnt -> . write stmnt
    (27) stmnt -> . read stmnt
    (28) stmnt -> . func_call stmnt
    (29) stmnt -> . var_assignation stmnt
    (93) empty -> .
    (30) var_declaration_func -> . var_type ID multiple_vars
    (90) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (91) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (85) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (79) while_stmnt -> . WHILE log_exp stmnt END
    (76) if_stmnt -> . IF log_exp stmnt else_stmnt
    (75) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (67) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (63) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (37) var_assignation -> . ID a1 assign expression quads
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (86) move_type -> . CENTER
    (87) move_type -> . FORWARD
    (88) move_type -> . RIGHT
    (89) move_type -> . LEFT
    END             reduce using rule 93 (empty -> .)
    ELSE            reduce using rule 93 (empty -> .)
    PEN_DOWN        shift and go to state 32
    PEN_UP          shift and go to state 33
    WHILE           shift and go to state 35
    IF              shift and go to state 36
    WRITE           shift and go to state 37
    READ            shift and go to state 38
    ID              shift and go to state 31
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11
    CENTER          shift and go to state 39
    FORWARD         shift and go to state 40
    RIGHT           shift and go to state 41
    LEFT            shift and go to state 42

    move_func                      shift and go to state 23
    stmnt                          shift and go to state 49
    empty                          shift and go to state 20
    var_declaration_func           shift and go to state 21
    pen_func                       shift and go to state 22
    while_stmnt                    shift and go to state 24
    if_stmnt                       shift and go to state 25
    write                          shift and go to state 26
    read                           shift and go to state 27
    func_call                      shift and go to state 28
    var_assignation                shift and go to state 29
    var_type                       shift and go to state 30
    move_type                      shift and go to state 34

state 24

    (24) stmnt -> while_stmnt . stmnt
    (20) stmnt -> . empty
    (21) stmnt -> . var_declaration_func stmnt
    (22) stmnt -> . pen_func stmnt
    (23) stmnt -> . move_func stmnt
    (24) stmnt -> . while_stmnt stmnt
    (25) stmnt -> . if_stmnt stmnt
    (26) stmnt -> . write stmnt
    (27) stmnt -> . read stmnt
    (28) stmnt -> . func_call stmnt
    (29) stmnt -> . var_assignation stmnt
    (93) empty -> .
    (30) var_declaration_func -> . var_type ID multiple_vars
    (90) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (91) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (85) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (79) while_stmnt -> . WHILE log_exp stmnt END
    (76) if_stmnt -> . IF log_exp stmnt else_stmnt
    (75) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (67) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (63) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (37) var_assignation -> . ID a1 assign expression quads
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (86) move_type -> . CENTER
    (87) move_type -> . FORWARD
    (88) move_type -> . RIGHT
    (89) move_type -> . LEFT
    END             reduce using rule 93 (empty -> .)
    ELSE            reduce using rule 93 (empty -> .)
    PEN_DOWN        shift and go to state 32
    PEN_UP          shift and go to state 33
    WHILE           shift and go to state 35
    IF              shift and go to state 36
    WRITE           shift and go to state 37
    READ            shift and go to state 38
    ID              shift and go to state 31
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11
    CENTER          shift and go to state 39
    FORWARD         shift and go to state 40
    RIGHT           shift and go to state 41
    LEFT            shift and go to state 42

    while_stmnt                    shift and go to state 24
    stmnt                          shift and go to state 50
    empty                          shift and go to state 20
    var_declaration_func           shift and go to state 21
    pen_func                       shift and go to state 22
    move_func                      shift and go to state 23
    if_stmnt                       shift and go to state 25
    write                          shift and go to state 26
    read                           shift and go to state 27
    func_call                      shift and go to state 28
    var_assignation                shift and go to state 29
    var_type                       shift and go to state 30
    move_type                      shift and go to state 34

state 25

    (25) stmnt -> if_stmnt . stmnt
    (20) stmnt -> . empty
    (21) stmnt -> . var_declaration_func stmnt
    (22) stmnt -> . pen_func stmnt
    (23) stmnt -> . move_func stmnt
    (24) stmnt -> . while_stmnt stmnt
    (25) stmnt -> . if_stmnt stmnt
    (26) stmnt -> . write stmnt
    (27) stmnt -> . read stmnt
    (28) stmnt -> . func_call stmnt
    (29) stmnt -> . var_assignation stmnt
    (93) empty -> .
    (30) var_declaration_func -> . var_type ID multiple_vars
    (90) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (91) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (85) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (79) while_stmnt -> . WHILE log_exp stmnt END
    (76) if_stmnt -> . IF log_exp stmnt else_stmnt
    (75) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (67) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (63) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (37) var_assignation -> . ID a1 assign expression quads
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (86) move_type -> . CENTER
    (87) move_type -> . FORWARD
    (88) move_type -> . RIGHT
    (89) move_type -> . LEFT
    END             reduce using rule 93 (empty -> .)
    ELSE            reduce using rule 93 (empty -> .)
    PEN_DOWN        shift and go to state 32
    PEN_UP          shift and go to state 33
    WHILE           shift and go to state 35
    IF              shift and go to state 36
    WRITE           shift and go to state 37
    READ            shift and go to state 38
    ID              shift and go to state 31
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11
    CENTER          shift and go to state 39
    FORWARD         shift and go to state 40
    RIGHT           shift and go to state 41
    LEFT            shift and go to state 42

    if_stmnt                       shift and go to state 25
    stmnt                          shift and go to state 51
    empty                          shift and go to state 20
    var_declaration_func           shift and go to state 21
    pen_func                       shift and go to state 22
    move_func                      shift and go to state 23
    while_stmnt                    shift and go to state 24
    write                          shift and go to state 26
    read                           shift and go to state 27
    func_call                      shift and go to state 28
    var_assignation                shift and go to state 29
    var_type                       shift and go to state 30
    move_type                      shift and go to state 34

state 26

    (26) stmnt -> write . stmnt
    (20) stmnt -> . empty
    (21) stmnt -> . var_declaration_func stmnt
    (22) stmnt -> . pen_func stmnt
    (23) stmnt -> . move_func stmnt
    (24) stmnt -> . while_stmnt stmnt
    (25) stmnt -> . if_stmnt stmnt
    (26) stmnt -> . write stmnt
    (27) stmnt -> . read stmnt
    (28) stmnt -> . func_call stmnt
    (29) stmnt -> . var_assignation stmnt
    (93) empty -> .
    (30) var_declaration_func -> . var_type ID multiple_vars
    (90) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (91) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (85) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (79) while_stmnt -> . WHILE log_exp stmnt END
    (76) if_stmnt -> . IF log_exp stmnt else_stmnt
    (75) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (67) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (63) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (37) var_assignation -> . ID a1 assign expression quads
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (86) move_type -> . CENTER
    (87) move_type -> . FORWARD
    (88) move_type -> . RIGHT
    (89) move_type -> . LEFT
    END             reduce using rule 93 (empty -> .)
    ELSE            reduce using rule 93 (empty -> .)
    PEN_DOWN        shift and go to state 32
    PEN_UP          shift and go to state 33
    WHILE           shift and go to state 35
    IF              shift and go to state 36
    WRITE           shift and go to state 37
    READ            shift and go to state 38
    ID              shift and go to state 31
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11
    CENTER          shift and go to state 39
    FORWARD         shift and go to state 40
    RIGHT           shift and go to state 41
    LEFT            shift and go to state 42

    write                          shift and go to state 26
    stmnt                          shift and go to state 52
    empty                          shift and go to state 20
    var_declaration_func           shift and go to state 21
    pen_func                       shift and go to state 22
    move_func                      shift and go to state 23
    while_stmnt                    shift and go to state 24
    if_stmnt                       shift and go to state 25
    read                           shift and go to state 27
    func_call                      shift and go to state 28
    var_assignation                shift and go to state 29
    var_type                       shift and go to state 30
    move_type                      shift and go to state 34

state 27

    (27) stmnt -> read . stmnt
    (20) stmnt -> . empty
    (21) stmnt -> . var_declaration_func stmnt
    (22) stmnt -> . pen_func stmnt
    (23) stmnt -> . move_func stmnt
    (24) stmnt -> . while_stmnt stmnt
    (25) stmnt -> . if_stmnt stmnt
    (26) stmnt -> . write stmnt
    (27) stmnt -> . read stmnt
    (28) stmnt -> . func_call stmnt
    (29) stmnt -> . var_assignation stmnt
    (93) empty -> .
    (30) var_declaration_func -> . var_type ID multiple_vars
    (90) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (91) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (85) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (79) while_stmnt -> . WHILE log_exp stmnt END
    (76) if_stmnt -> . IF log_exp stmnt else_stmnt
    (75) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (67) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (63) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (37) var_assignation -> . ID a1 assign expression quads
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (86) move_type -> . CENTER
    (87) move_type -> . FORWARD
    (88) move_type -> . RIGHT
    (89) move_type -> . LEFT
    END             reduce using rule 93 (empty -> .)
    ELSE            reduce using rule 93 (empty -> .)
    PEN_DOWN        shift and go to state 32
    PEN_UP          shift and go to state 33
    WHILE           shift and go to state 35
    IF              shift and go to state 36
    WRITE           shift and go to state 37
    READ            shift and go to state 38
    ID              shift and go to state 31
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11
    CENTER          shift and go to state 39
    FORWARD         shift and go to state 40
    RIGHT           shift and go to state 41
    LEFT            shift and go to state 42

    read                           shift and go to state 27
    stmnt                          shift and go to state 53
    empty                          shift and go to state 20
    var_declaration_func           shift and go to state 21
    pen_func                       shift and go to state 22
    move_func                      shift and go to state 23
    while_stmnt                    shift and go to state 24
    if_stmnt                       shift and go to state 25
    write                          shift and go to state 26
    func_call                      shift and go to state 28
    var_assignation                shift and go to state 29
    var_type                       shift and go to state 30
    move_type                      shift and go to state 34

state 28

    (28) stmnt -> func_call . stmnt
    (20) stmnt -> . empty
    (21) stmnt -> . var_declaration_func stmnt
    (22) stmnt -> . pen_func stmnt
    (23) stmnt -> . move_func stmnt
    (24) stmnt -> . while_stmnt stmnt
    (25) stmnt -> . if_stmnt stmnt
    (26) stmnt -> . write stmnt
    (27) stmnt -> . read stmnt
    (28) stmnt -> . func_call stmnt
    (29) stmnt -> . var_assignation stmnt
    (93) empty -> .
    (30) var_declaration_func -> . var_type ID multiple_vars
    (90) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (91) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (85) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (79) while_stmnt -> . WHILE log_exp stmnt END
    (76) if_stmnt -> . IF log_exp stmnt else_stmnt
    (75) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (67) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (63) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (37) var_assignation -> . ID a1 assign expression quads
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (86) move_type -> . CENTER
    (87) move_type -> . FORWARD
    (88) move_type -> . RIGHT
    (89) move_type -> . LEFT
    END             reduce using rule 93 (empty -> .)
    ELSE            reduce using rule 93 (empty -> .)
    PEN_DOWN        shift and go to state 32
    PEN_UP          shift and go to state 33
    WHILE           shift and go to state 35
    IF              shift and go to state 36
    WRITE           shift and go to state 37
    READ            shift and go to state 38
    ID              shift and go to state 31
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11
    CENTER          shift and go to state 39
    FORWARD         shift and go to state 40
    RIGHT           shift and go to state 41
    LEFT            shift and go to state 42

    func_call                      shift and go to state 28
    stmnt                          shift and go to state 54
    empty                          shift and go to state 20
    var_declaration_func           shift and go to state 21
    pen_func                       shift and go to state 22
    move_func                      shift and go to state 23
    while_stmnt                    shift and go to state 24
    if_stmnt                       shift and go to state 25
    write                          shift and go to state 26
    read                           shift and go to state 27
    var_assignation                shift and go to state 29
    var_type                       shift and go to state 30
    move_type                      shift and go to state 34

state 29

    (29) stmnt -> var_assignation . stmnt
    (20) stmnt -> . empty
    (21) stmnt -> . var_declaration_func stmnt
    (22) stmnt -> . pen_func stmnt
    (23) stmnt -> . move_func stmnt
    (24) stmnt -> . while_stmnt stmnt
    (25) stmnt -> . if_stmnt stmnt
    (26) stmnt -> . write stmnt
    (27) stmnt -> . read stmnt
    (28) stmnt -> . func_call stmnt
    (29) stmnt -> . var_assignation stmnt
    (93) empty -> .
    (30) var_declaration_func -> . var_type ID multiple_vars
    (90) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (91) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (85) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (79) while_stmnt -> . WHILE log_exp stmnt END
    (76) if_stmnt -> . IF log_exp stmnt else_stmnt
    (75) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (67) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (63) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (37) var_assignation -> . ID a1 assign expression quads
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (86) move_type -> . CENTER
    (87) move_type -> . FORWARD
    (88) move_type -> . RIGHT
    (89) move_type -> . LEFT
    END             reduce using rule 93 (empty -> .)
    ELSE            reduce using rule 93 (empty -> .)
    PEN_DOWN        shift and go to state 32
    PEN_UP          shift and go to state 33
    WHILE           shift and go to state 35
    IF              shift and go to state 36
    WRITE           shift and go to state 37
    READ            shift and go to state 38
    ID              shift and go to state 31
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11
    CENTER          shift and go to state 39
    FORWARD         shift and go to state 40
    RIGHT           shift and go to state 41
    LEFT            shift and go to state 42

    var_assignation                shift and go to state 29
    stmnt                          shift and go to state 55
    empty                          shift and go to state 20
    var_declaration_func           shift and go to state 21
    pen_func                       shift and go to state 22
    move_func                      shift and go to state 23
    while_stmnt                    shift and go to state 24
    if_stmnt                       shift and go to state 25
    write                          shift and go to state 26
    read                           shift and go to state 27
    func_call                      shift and go to state 28
    var_type                       shift and go to state 30
    move_type                      shift and go to state 34

state 30

    (30) var_declaration_func -> var_type . ID multiple_vars
    ID              shift and go to state 56


state 31

    (63) func_call -> ID . OPEN_PTH func_call_param CLOSE_PTH
    (37) var_assignation -> ID . a1 assign expression quads
    (40) a1 -> .
    OPEN_PTH        shift and go to state 57
    ASSIGN          reduce using rule 40 (a1 -> .)

    a1                             shift and go to state 58

state 32

    (90) pen_func -> PEN_DOWN . OPEN_PTH CLOSE_PTH
    OPEN_PTH        shift and go to state 59


state 33

    (91) pen_func -> PEN_UP . OPEN_PTH CLOSE_PTH
    OPEN_PTH        shift and go to state 60


state 34

    (85) move_func -> move_type . OPEN_PTH func_call_param CLOSE_PTH
    OPEN_PTH        shift and go to state 61


state 35

    (79) while_stmnt -> WHILE . log_exp stmnt END
    (83) log_exp -> . expression
    (84) log_exp -> . con_expression log_op con_expression
    (48) expression -> . exp
    (49) expression -> . exp e3 rel_op exp e3 quads
    (80) con_expression -> . expression
    (81) con_expression -> . con_expression
    (82) con_expression -> . expression rel_op e4 expression quads
    (50) exp -> . termino
    (51) exp -> . termino e1 term_op e2 termino e1 quads1
    (52) termino -> . factor
    (53) termino -> . factor e1 fact_op factor e1 quads
    (54) factor -> . term_op var_cte
    (55) factor -> . var_cte
    (56) factor -> . OPEN_PTH expression CLOSE_PTH
    (57) term_op -> . SUB
    (58) term_op -> . SUM
    (41) var_cte -> . func_call
    (42) var_cte -> . cte_bool
    (43) var_cte -> . CTE_STR
    (44) var_cte -> . CTE_NUM
    (45) var_cte -> . variable
    (63) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (46) cte_bool -> . FALSE
    (47) cte_bool -> . TRUE
    (68) variable -> . ID array
    OPEN_PTH        shift and go to state 70
    SUB             shift and go to state 71
    SUM             shift and go to state 72
    CTE_STR         shift and go to state 75
    CTE_NUM         shift and go to state 76
    ID              shift and go to state 78
    FALSE           shift and go to state 79
    TRUE            shift and go to state 80

    log_exp                        shift and go to state 62
    expression                     shift and go to state 63
    con_expression                 shift and go to state 64
    exp                            shift and go to state 65
    termino                        shift and go to state 66
    term_op                        shift and go to state 67
    factor                         shift and go to state 68
    var_cte                        shift and go to state 69
    func_call                      shift and go to state 73
    cte_bool                       shift and go to state 74
    variable                       shift and go to state 77

state 36

    (76) if_stmnt -> IF . log_exp stmnt else_stmnt
    (83) log_exp -> . expression
    (84) log_exp -> . con_expression log_op con_expression
    (48) expression -> . exp
    (49) expression -> . exp e3 rel_op exp e3 quads
    (80) con_expression -> . expression
    (81) con_expression -> . con_expression
    (82) con_expression -> . expression rel_op e4 expression quads
    (50) exp -> . termino
    (51) exp -> . termino e1 term_op e2 termino e1 quads1
    (52) termino -> . factor
    (53) termino -> . factor e1 fact_op factor e1 quads
    (54) factor -> . term_op var_cte
    (55) factor -> . var_cte
    (56) factor -> . OPEN_PTH expression CLOSE_PTH
    (57) term_op -> . SUB
    (58) term_op -> . SUM
    (41) var_cte -> . func_call
    (42) var_cte -> . cte_bool
    (43) var_cte -> . CTE_STR
    (44) var_cte -> . CTE_NUM
    (45) var_cte -> . variable
    (63) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (46) cte_bool -> . FALSE
    (47) cte_bool -> . TRUE
    (68) variable -> . ID array
    OPEN_PTH        shift and go to state 70
    SUB             shift and go to state 71
    SUM             shift and go to state 72
    CTE_STR         shift and go to state 75
    CTE_NUM         shift and go to state 76
    ID              shift and go to state 78
    FALSE           shift and go to state 79
    TRUE            shift and go to state 80

    log_exp                        shift and go to state 81
    expression                     shift and go to state 63
    con_expression                 shift and go to state 64
    exp                            shift and go to state 65
    termino                        shift and go to state 66
    term_op                        shift and go to state 67
    factor                         shift and go to state 68
    var_cte                        shift and go to state 69
    func_call                      shift and go to state 73
    cte_bool                       shift and go to state 74
    variable                       shift and go to state 77

state 37

    (75) write -> WRITE . OPEN_PTH expression CLOSE_PTH
    OPEN_PTH        shift and go to state 82


state 38

    (67) read -> READ . OPEN_PTH variable multiple_vars CLOSE_PTH
    OPEN_PTH        shift and go to state 83


state 39

    (86) move_type -> CENTER .
    OPEN_PTH        reduce using rule 86 (move_type -> CENTER .)


state 40

    (87) move_type -> FORWARD .
    OPEN_PTH        reduce using rule 87 (move_type -> FORWARD .)


state 41

    (88) move_type -> RIGHT .
    OPEN_PTH        reduce using rule 88 (move_type -> RIGHT .)


state 42

    (89) move_type -> LEFT .
    OPEN_PTH        reduce using rule 89 (move_type -> LEFT .)


state 43

    (4) var_declaration -> var_type ID . multiple_var
    (5) multiple_var -> . empty
    (6) multiple_var -> . COMMA ID multiple_var
    (93) empty -> .
    COMMA           shift and go to state 86
    BOOL            reduce using rule 93 (empty -> .)
    WORD            reduce using rule 93 (empty -> .)
    NUMBER          reduce using rule 93 (empty -> .)
    VOID            reduce using rule 93 (empty -> .)
    MAIN            reduce using rule 93 (empty -> .)

    multiple_var                   shift and go to state 84
    empty                          shift and go to state 85

state 44

    (3) declaration -> var_declaration func_declaration main .
    $end            reduce using rule 3 (declaration -> var_declaration func_declaration main .)


state 45

    (11) func_declaration -> func_type FUNC . ID OPEN_PTH parameter CLOSE_PTH stmnt END
    ID              shift and go to state 87


state 46

    (92) main -> MAIN stmnt END .
    $end            reduce using rule 92 (main -> MAIN stmnt END .)


state 47

    (21) stmnt -> var_declaration_func stmnt .
    END             reduce using rule 21 (stmnt -> var_declaration_func stmnt .)
    ELSE            reduce using rule 21 (stmnt -> var_declaration_func stmnt .)


state 48

    (22) stmnt -> pen_func stmnt .
    END             reduce using rule 22 (stmnt -> pen_func stmnt .)
    ELSE            reduce using rule 22 (stmnt -> pen_func stmnt .)


state 49

    (23) stmnt -> move_func stmnt .
    END             reduce using rule 23 (stmnt -> move_func stmnt .)
    ELSE            reduce using rule 23 (stmnt -> move_func stmnt .)


state 50

    (24) stmnt -> while_stmnt stmnt .
    END             reduce using rule 24 (stmnt -> while_stmnt stmnt .)
    ELSE            reduce using rule 24 (stmnt -> while_stmnt stmnt .)


state 51

    (25) stmnt -> if_stmnt stmnt .
    END             reduce using rule 25 (stmnt -> if_stmnt stmnt .)
    ELSE            reduce using rule 25 (stmnt -> if_stmnt stmnt .)


state 52

    (26) stmnt -> write stmnt .
    END             reduce using rule 26 (stmnt -> write stmnt .)
    ELSE            reduce using rule 26 (stmnt -> write stmnt .)


state 53

    (27) stmnt -> read stmnt .
    END             reduce using rule 27 (stmnt -> read stmnt .)
    ELSE            reduce using rule 27 (stmnt -> read stmnt .)


state 54

    (28) stmnt -> func_call stmnt .
    END             reduce using rule 28 (stmnt -> func_call stmnt .)
    ELSE            reduce using rule 28 (stmnt -> func_call stmnt .)


state 55

    (29) stmnt -> var_assignation stmnt .
    END             reduce using rule 29 (stmnt -> var_assignation stmnt .)
    ELSE            reduce using rule 29 (stmnt -> var_assignation stmnt .)


state 56

    (30) var_declaration_func -> var_type ID . multiple_vars
    (73) multiple_vars -> . empty
    (74) multiple_vars -> . COMMA variable
    (93) empty -> .
    COMMA           shift and go to state 90
    PEN_DOWN        reduce using rule 93 (empty -> .)
    PEN_UP          reduce using rule 93 (empty -> .)
    WHILE           reduce using rule 93 (empty -> .)
    IF              reduce using rule 93 (empty -> .)
    WRITE           reduce using rule 93 (empty -> .)
    READ            reduce using rule 93 (empty -> .)
    ID              reduce using rule 93 (empty -> .)
    BOOL            reduce using rule 93 (empty -> .)
    WORD            reduce using rule 93 (empty -> .)
    NUMBER          reduce using rule 93 (empty -> .)
    CENTER          reduce using rule 93 (empty -> .)
    FORWARD         reduce using rule 93 (empty -> .)
    RIGHT           reduce using rule 93 (empty -> .)
    LEFT            reduce using rule 93 (empty -> .)
    END             reduce using rule 93 (empty -> .)
    ELSE            reduce using rule 93 (empty -> .)

    multiple_vars                  shift and go to state 88
    empty                          shift and go to state 89

state 57

    (63) func_call -> ID OPEN_PTH . func_call_param CLOSE_PTH
    (64) func_call_param -> . expression multiple_fc_param
    (48) expression -> . exp
    (49) expression -> . exp e3 rel_op exp e3 quads
    (50) exp -> . termino
    (51) exp -> . termino e1 term_op e2 termino e1 quads1
    (52) termino -> . factor
    (53) termino -> . factor e1 fact_op factor e1 quads
    (54) factor -> . term_op var_cte
    (55) factor -> . var_cte
    (56) factor -> . OPEN_PTH expression CLOSE_PTH
    (57) term_op -> . SUB
    (58) term_op -> . SUM
    (41) var_cte -> . func_call
    (42) var_cte -> . cte_bool
    (43) var_cte -> . CTE_STR
    (44) var_cte -> . CTE_NUM
    (45) var_cte -> . variable
    (63) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (46) cte_bool -> . FALSE
    (47) cte_bool -> . TRUE
    (68) variable -> . ID array
    OPEN_PTH        shift and go to state 70
    SUB             shift and go to state 71
    SUM             shift and go to state 72
    CTE_STR         shift and go to state 75
    CTE_NUM         shift and go to state 76
    ID              shift and go to state 78
    FALSE           shift and go to state 79
    TRUE            shift and go to state 80

    func_call_param                shift and go to state 91
    expression                     shift and go to state 92
    exp                            shift and go to state 65
    termino                        shift and go to state 66
    term_op                        shift and go to state 67
    factor                         shift and go to state 68
    var_cte                        shift and go to state 69
    func_call                      shift and go to state 73
    cte_bool                       shift and go to state 74
    variable                       shift and go to state 77

state 58

    (37) var_assignation -> ID a1 . assign expression quads
    (39) assign -> . ASSIGN
    ASSIGN          shift and go to state 94

    assign                         shift and go to state 93

state 59

    (90) pen_func -> PEN_DOWN OPEN_PTH . CLOSE_PTH
    CLOSE_PTH       shift and go to state 95


state 60

    (91) pen_func -> PEN_UP OPEN_PTH . CLOSE_PTH
    CLOSE_PTH       shift and go to state 96


state 61

    (85) move_func -> move_type OPEN_PTH . func_call_param CLOSE_PTH
    (64) func_call_param -> . expression multiple_fc_param
    (48) expression -> . exp
    (49) expression -> . exp e3 rel_op exp e3 quads
    (50) exp -> . termino
    (51) exp -> . termino e1 term_op e2 termino e1 quads1
    (52) termino -> . factor
    (53) termino -> . factor e1 fact_op factor e1 quads
    (54) factor -> . term_op var_cte
    (55) factor -> . var_cte
    (56) factor -> . OPEN_PTH expression CLOSE_PTH
    (57) term_op -> . SUB
    (58) term_op -> . SUM
    (41) var_cte -> . func_call
    (42) var_cte -> . cte_bool
    (43) var_cte -> . CTE_STR
    (44) var_cte -> . CTE_NUM
    (45) var_cte -> . variable
    (63) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (46) cte_bool -> . FALSE
    (47) cte_bool -> . TRUE
    (68) variable -> . ID array
    OPEN_PTH        shift and go to state 70
    SUB             shift and go to state 71
    SUM             shift and go to state 72
    CTE_STR         shift and go to state 75
    CTE_NUM         shift and go to state 76
    ID              shift and go to state 78
    FALSE           shift and go to state 79
    TRUE            shift and go to state 80

    func_call_param                shift and go to state 97
    expression                     shift and go to state 92
    exp                            shift and go to state 65
    termino                        shift and go to state 66
    term_op                        shift and go to state 67
    factor                         shift and go to state 68
    var_cte                        shift and go to state 69
    func_call                      shift and go to state 73
    cte_bool                       shift and go to state 74
    variable                       shift and go to state 77

state 62

    (79) while_stmnt -> WHILE log_exp . stmnt END
    (20) stmnt -> . empty
    (21) stmnt -> . var_declaration_func stmnt
    (22) stmnt -> . pen_func stmnt
    (23) stmnt -> . move_func stmnt
    (24) stmnt -> . while_stmnt stmnt
    (25) stmnt -> . if_stmnt stmnt
    (26) stmnt -> . write stmnt
    (27) stmnt -> . read stmnt
    (28) stmnt -> . func_call stmnt
    (29) stmnt -> . var_assignation stmnt
    (93) empty -> .
    (30) var_declaration_func -> . var_type ID multiple_vars
    (90) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (91) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (85) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (79) while_stmnt -> . WHILE log_exp stmnt END
    (76) if_stmnt -> . IF log_exp stmnt else_stmnt
    (75) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (67) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (63) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (37) var_assignation -> . ID a1 assign expression quads
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (86) move_type -> . CENTER
    (87) move_type -> . FORWARD
    (88) move_type -> . RIGHT
    (89) move_type -> . LEFT
    END             reduce using rule 93 (empty -> .)
    PEN_DOWN        shift and go to state 32
    PEN_UP          shift and go to state 33
    WHILE           shift and go to state 35
    IF              shift and go to state 36
    WRITE           shift and go to state 37
    READ            shift and go to state 38
    ID              shift and go to state 31
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11
    CENTER          shift and go to state 39
    FORWARD         shift and go to state 40
    RIGHT           shift and go to state 41
    LEFT            shift and go to state 42

    stmnt                          shift and go to state 98
    empty                          shift and go to state 20
    var_declaration_func           shift and go to state 21
    pen_func                       shift and go to state 22
    move_func                      shift and go to state 23
    while_stmnt                    shift and go to state 24
    if_stmnt                       shift and go to state 25
    write                          shift and go to state 26
    read                           shift and go to state 27
    func_call                      shift and go to state 28
    var_assignation                shift and go to state 29
    var_type                       shift and go to state 30
    move_type                      shift and go to state 34

state 63

    (83) log_exp -> expression .
    (80) con_expression -> expression .
    (82) con_expression -> expression . rel_op e4 expression quads
    (31) rel_op -> . MORE_OR_EQ_THAN
    (32) rel_op -> . LESS_OR_EQ_THAN
    (33) rel_op -> . DIFFERENT_TO
    (34) rel_op -> . MORE_THAN
    (35) rel_op -> . LESS_THAN
    (36) rel_op -> . EQUAL_TO
    PEN_DOWN        reduce using rule 83 (log_exp -> expression .)
    PEN_UP          reduce using rule 83 (log_exp -> expression .)
    WHILE           reduce using rule 83 (log_exp -> expression .)
    IF              reduce using rule 83 (log_exp -> expression .)
    WRITE           reduce using rule 83 (log_exp -> expression .)
    READ            reduce using rule 83 (log_exp -> expression .)
    ID              reduce using rule 83 (log_exp -> expression .)
    BOOL            reduce using rule 83 (log_exp -> expression .)
    WORD            reduce using rule 83 (log_exp -> expression .)
    NUMBER          reduce using rule 83 (log_exp -> expression .)
    CENTER          reduce using rule 83 (log_exp -> expression .)
    FORWARD         reduce using rule 83 (log_exp -> expression .)
    RIGHT           reduce using rule 83 (log_exp -> expression .)
    LEFT            reduce using rule 83 (log_exp -> expression .)
    END             reduce using rule 83 (log_exp -> expression .)
    ELSE            reduce using rule 83 (log_exp -> expression .)
    OR              reduce using rule 80 (con_expression -> expression .)
    AND             reduce using rule 80 (con_expression -> expression .)
    MORE_OR_EQ_THAN shift and go to state 100
    LESS_OR_EQ_THAN shift and go to state 101
    DIFFERENT_TO    shift and go to state 102
    MORE_THAN       shift and go to state 103
    LESS_THAN       shift and go to state 104
    EQUAL_TO        shift and go to state 105

    rel_op                         shift and go to state 99

state 64

    (84) log_exp -> con_expression . log_op con_expression
    (81) con_expression -> con_expression .
    (61) log_op -> . OR
    (62) log_op -> . AND
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    OR              shift and go to state 107
    AND             shift and go to state 108

    log_op                         shift and go to state 106

state 65

    (48) expression -> exp .
    (49) expression -> exp . e3 rel_op exp e3 quads
    (96) e3 -> .
  ! reduce/reduce conflict for MORE_OR_EQ_THAN resolved using rule 48 (expression -> exp .)
  ! reduce/reduce conflict for LESS_OR_EQ_THAN resolved using rule 48 (expression -> exp .)
  ! reduce/reduce conflict for DIFFERENT_TO resolved using rule 48 (expression -> exp .)
  ! reduce/reduce conflict for MORE_THAN resolved using rule 48 (expression -> exp .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 48 (expression -> exp .)
  ! reduce/reduce conflict for EQUAL_TO resolved using rule 48 (expression -> exp .)
    MORE_OR_EQ_THAN reduce using rule 48 (expression -> exp .)
    LESS_OR_EQ_THAN reduce using rule 48 (expression -> exp .)
    DIFFERENT_TO    reduce using rule 48 (expression -> exp .)
    MORE_THAN       reduce using rule 48 (expression -> exp .)
    LESS_THAN       reduce using rule 48 (expression -> exp .)
    EQUAL_TO        reduce using rule 48 (expression -> exp .)
    PEN_DOWN        reduce using rule 48 (expression -> exp .)
    PEN_UP          reduce using rule 48 (expression -> exp .)
    WHILE           reduce using rule 48 (expression -> exp .)
    IF              reduce using rule 48 (expression -> exp .)
    WRITE           reduce using rule 48 (expression -> exp .)
    READ            reduce using rule 48 (expression -> exp .)
    ID              reduce using rule 48 (expression -> exp .)
    BOOL            reduce using rule 48 (expression -> exp .)
    WORD            reduce using rule 48 (expression -> exp .)
    NUMBER          reduce using rule 48 (expression -> exp .)
    CENTER          reduce using rule 48 (expression -> exp .)
    FORWARD         reduce using rule 48 (expression -> exp .)
    RIGHT           reduce using rule 48 (expression -> exp .)
    LEFT            reduce using rule 48 (expression -> exp .)
    END             reduce using rule 48 (expression -> exp .)
    OR              reduce using rule 48 (expression -> exp .)
    AND             reduce using rule 48 (expression -> exp .)
    ELSE            reduce using rule 48 (expression -> exp .)
    COMMA           reduce using rule 48 (expression -> exp .)
    CLOSE_PTH       reduce using rule 48 (expression -> exp .)
    CLOSE_SQR       reduce using rule 48 (expression -> exp .)

    e3                             shift and go to state 109

state 66

    (50) exp -> termino .
    (51) exp -> termino . e1 term_op e2 termino e1 quads1
    (94) e1 -> .
    MORE_OR_EQ_THAN reduce using rule 50 (exp -> termino .)
    LESS_OR_EQ_THAN reduce using rule 50 (exp -> termino .)
    DIFFERENT_TO    reduce using rule 50 (exp -> termino .)
    MORE_THAN       reduce using rule 50 (exp -> termino .)
    LESS_THAN       reduce using rule 50 (exp -> termino .)
    EQUAL_TO        reduce using rule 50 (exp -> termino .)
    PEN_DOWN        reduce using rule 50 (exp -> termino .)
    PEN_UP          reduce using rule 50 (exp -> termino .)
    WHILE           reduce using rule 50 (exp -> termino .)
    IF              reduce using rule 50 (exp -> termino .)
    WRITE           reduce using rule 50 (exp -> termino .)
    READ            reduce using rule 50 (exp -> termino .)
    ID              reduce using rule 50 (exp -> termino .)
    BOOL            reduce using rule 50 (exp -> termino .)
    WORD            reduce using rule 50 (exp -> termino .)
    NUMBER          reduce using rule 50 (exp -> termino .)
    CENTER          reduce using rule 50 (exp -> termino .)
    FORWARD         reduce using rule 50 (exp -> termino .)
    RIGHT           reduce using rule 50 (exp -> termino .)
    LEFT            reduce using rule 50 (exp -> termino .)
    END             reduce using rule 50 (exp -> termino .)
    OR              reduce using rule 50 (exp -> termino .)
    AND             reduce using rule 50 (exp -> termino .)
    ELSE            reduce using rule 50 (exp -> termino .)
    COMMA           reduce using rule 50 (exp -> termino .)
    CLOSE_PTH       reduce using rule 50 (exp -> termino .)
    CLOSE_SQR       reduce using rule 50 (exp -> termino .)
    SUB             reduce using rule 94 (e1 -> .)
    SUM             reduce using rule 94 (e1 -> .)

    e1                             shift and go to state 110

state 67

    (54) factor -> term_op . var_cte
    (41) var_cte -> . func_call
    (42) var_cte -> . cte_bool
    (43) var_cte -> . CTE_STR
    (44) var_cte -> . CTE_NUM
    (45) var_cte -> . variable
    (63) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (46) cte_bool -> . FALSE
    (47) cte_bool -> . TRUE
    (68) variable -> . ID array
    CTE_STR         shift and go to state 75
    CTE_NUM         shift and go to state 76
    ID              shift and go to state 78
    FALSE           shift and go to state 79
    TRUE            shift and go to state 80

    var_cte                        shift and go to state 111
    func_call                      shift and go to state 73
    cte_bool                       shift and go to state 74
    variable                       shift and go to state 77

state 68

    (52) termino -> factor .
    (53) termino -> factor . e1 fact_op factor e1 quads
    (94) e1 -> .
    SUB             reduce using rule 52 (termino -> factor .)
    SUM             reduce using rule 52 (termino -> factor .)
    MORE_OR_EQ_THAN reduce using rule 52 (termino -> factor .)
    LESS_OR_EQ_THAN reduce using rule 52 (termino -> factor .)
    DIFFERENT_TO    reduce using rule 52 (termino -> factor .)
    MORE_THAN       reduce using rule 52 (termino -> factor .)
    LESS_THAN       reduce using rule 52 (termino -> factor .)
    EQUAL_TO        reduce using rule 52 (termino -> factor .)
    PEN_DOWN        reduce using rule 52 (termino -> factor .)
    PEN_UP          reduce using rule 52 (termino -> factor .)
    WHILE           reduce using rule 52 (termino -> factor .)
    IF              reduce using rule 52 (termino -> factor .)
    WRITE           reduce using rule 52 (termino -> factor .)
    READ            reduce using rule 52 (termino -> factor .)
    ID              reduce using rule 52 (termino -> factor .)
    BOOL            reduce using rule 52 (termino -> factor .)
    WORD            reduce using rule 52 (termino -> factor .)
    NUMBER          reduce using rule 52 (termino -> factor .)
    CENTER          reduce using rule 52 (termino -> factor .)
    FORWARD         reduce using rule 52 (termino -> factor .)
    RIGHT           reduce using rule 52 (termino -> factor .)
    LEFT            reduce using rule 52 (termino -> factor .)
    END             reduce using rule 52 (termino -> factor .)
    OR              reduce using rule 52 (termino -> factor .)
    AND             reduce using rule 52 (termino -> factor .)
    ELSE            reduce using rule 52 (termino -> factor .)
    COMMA           reduce using rule 52 (termino -> factor .)
    CLOSE_PTH       reduce using rule 52 (termino -> factor .)
    CLOSE_SQR       reduce using rule 52 (termino -> factor .)
    DIV             reduce using rule 94 (e1 -> .)
    MULT            reduce using rule 94 (e1 -> .)

    e1                             shift and go to state 112

state 69

    (55) factor -> var_cte .
    DIV             reduce using rule 55 (factor -> var_cte .)
    MULT            reduce using rule 55 (factor -> var_cte .)
    SUB             reduce using rule 55 (factor -> var_cte .)
    SUM             reduce using rule 55 (factor -> var_cte .)
    MORE_OR_EQ_THAN reduce using rule 55 (factor -> var_cte .)
    LESS_OR_EQ_THAN reduce using rule 55 (factor -> var_cte .)
    DIFFERENT_TO    reduce using rule 55 (factor -> var_cte .)
    MORE_THAN       reduce using rule 55 (factor -> var_cte .)
    LESS_THAN       reduce using rule 55 (factor -> var_cte .)
    EQUAL_TO        reduce using rule 55 (factor -> var_cte .)
    PEN_DOWN        reduce using rule 55 (factor -> var_cte .)
    PEN_UP          reduce using rule 55 (factor -> var_cte .)
    WHILE           reduce using rule 55 (factor -> var_cte .)
    IF              reduce using rule 55 (factor -> var_cte .)
    WRITE           reduce using rule 55 (factor -> var_cte .)
    READ            reduce using rule 55 (factor -> var_cte .)
    ID              reduce using rule 55 (factor -> var_cte .)
    BOOL            reduce using rule 55 (factor -> var_cte .)
    WORD            reduce using rule 55 (factor -> var_cte .)
    NUMBER          reduce using rule 55 (factor -> var_cte .)
    CENTER          reduce using rule 55 (factor -> var_cte .)
    FORWARD         reduce using rule 55 (factor -> var_cte .)
    RIGHT           reduce using rule 55 (factor -> var_cte .)
    LEFT            reduce using rule 55 (factor -> var_cte .)
    END             reduce using rule 55 (factor -> var_cte .)
    OR              reduce using rule 55 (factor -> var_cte .)
    AND             reduce using rule 55 (factor -> var_cte .)
    ELSE            reduce using rule 55 (factor -> var_cte .)
    COMMA           reduce using rule 55 (factor -> var_cte .)
    CLOSE_PTH       reduce using rule 55 (factor -> var_cte .)
    CLOSE_SQR       reduce using rule 55 (factor -> var_cte .)


state 70

    (56) factor -> OPEN_PTH . expression CLOSE_PTH
    (48) expression -> . exp
    (49) expression -> . exp e3 rel_op exp e3 quads
    (50) exp -> . termino
    (51) exp -> . termino e1 term_op e2 termino e1 quads1
    (52) termino -> . factor
    (53) termino -> . factor e1 fact_op factor e1 quads
    (54) factor -> . term_op var_cte
    (55) factor -> . var_cte
    (56) factor -> . OPEN_PTH expression CLOSE_PTH
    (57) term_op -> . SUB
    (58) term_op -> . SUM
    (41) var_cte -> . func_call
    (42) var_cte -> . cte_bool
    (43) var_cte -> . CTE_STR
    (44) var_cte -> . CTE_NUM
    (45) var_cte -> . variable
    (63) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (46) cte_bool -> . FALSE
    (47) cte_bool -> . TRUE
    (68) variable -> . ID array
    OPEN_PTH        shift and go to state 70
    SUB             shift and go to state 71
    SUM             shift and go to state 72
    CTE_STR         shift and go to state 75
    CTE_NUM         shift and go to state 76
    ID              shift and go to state 78
    FALSE           shift and go to state 79
    TRUE            shift and go to state 80

    expression                     shift and go to state 113
    exp                            shift and go to state 65
    termino                        shift and go to state 66
    term_op                        shift and go to state 67
    factor                         shift and go to state 68
    var_cte                        shift and go to state 69
    func_call                      shift and go to state 73
    cte_bool                       shift and go to state 74
    variable                       shift and go to state 77

state 71

    (57) term_op -> SUB .
    CTE_STR         reduce using rule 57 (term_op -> SUB .)
    CTE_NUM         reduce using rule 57 (term_op -> SUB .)
    ID              reduce using rule 57 (term_op -> SUB .)
    FALSE           reduce using rule 57 (term_op -> SUB .)
    TRUE            reduce using rule 57 (term_op -> SUB .)
    OPEN_PTH        reduce using rule 57 (term_op -> SUB .)
    SUB             reduce using rule 57 (term_op -> SUB .)
    SUM             reduce using rule 57 (term_op -> SUB .)


state 72

    (58) term_op -> SUM .
    CTE_STR         reduce using rule 58 (term_op -> SUM .)
    CTE_NUM         reduce using rule 58 (term_op -> SUM .)
    ID              reduce using rule 58 (term_op -> SUM .)
    FALSE           reduce using rule 58 (term_op -> SUM .)
    TRUE            reduce using rule 58 (term_op -> SUM .)
    OPEN_PTH        reduce using rule 58 (term_op -> SUM .)
    SUB             reduce using rule 58 (term_op -> SUM .)
    SUM             reduce using rule 58 (term_op -> SUM .)


state 73

    (41) var_cte -> func_call .
    DIV             reduce using rule 41 (var_cte -> func_call .)
    MULT            reduce using rule 41 (var_cte -> func_call .)
    SUB             reduce using rule 41 (var_cte -> func_call .)
    SUM             reduce using rule 41 (var_cte -> func_call .)
    MORE_OR_EQ_THAN reduce using rule 41 (var_cte -> func_call .)
    LESS_OR_EQ_THAN reduce using rule 41 (var_cte -> func_call .)
    DIFFERENT_TO    reduce using rule 41 (var_cte -> func_call .)
    MORE_THAN       reduce using rule 41 (var_cte -> func_call .)
    LESS_THAN       reduce using rule 41 (var_cte -> func_call .)
    EQUAL_TO        reduce using rule 41 (var_cte -> func_call .)
    PEN_DOWN        reduce using rule 41 (var_cte -> func_call .)
    PEN_UP          reduce using rule 41 (var_cte -> func_call .)
    WHILE           reduce using rule 41 (var_cte -> func_call .)
    IF              reduce using rule 41 (var_cte -> func_call .)
    WRITE           reduce using rule 41 (var_cte -> func_call .)
    READ            reduce using rule 41 (var_cte -> func_call .)
    ID              reduce using rule 41 (var_cte -> func_call .)
    BOOL            reduce using rule 41 (var_cte -> func_call .)
    WORD            reduce using rule 41 (var_cte -> func_call .)
    NUMBER          reduce using rule 41 (var_cte -> func_call .)
    CENTER          reduce using rule 41 (var_cte -> func_call .)
    FORWARD         reduce using rule 41 (var_cte -> func_call .)
    RIGHT           reduce using rule 41 (var_cte -> func_call .)
    LEFT            reduce using rule 41 (var_cte -> func_call .)
    END             reduce using rule 41 (var_cte -> func_call .)
    OR              reduce using rule 41 (var_cte -> func_call .)
    AND             reduce using rule 41 (var_cte -> func_call .)
    ELSE            reduce using rule 41 (var_cte -> func_call .)
    COMMA           reduce using rule 41 (var_cte -> func_call .)
    CLOSE_PTH       reduce using rule 41 (var_cte -> func_call .)
    CLOSE_SQR       reduce using rule 41 (var_cte -> func_call .)


state 74

    (42) var_cte -> cte_bool .
    DIV             reduce using rule 42 (var_cte -> cte_bool .)
    MULT            reduce using rule 42 (var_cte -> cte_bool .)
    SUB             reduce using rule 42 (var_cte -> cte_bool .)
    SUM             reduce using rule 42 (var_cte -> cte_bool .)
    MORE_OR_EQ_THAN reduce using rule 42 (var_cte -> cte_bool .)
    LESS_OR_EQ_THAN reduce using rule 42 (var_cte -> cte_bool .)
    DIFFERENT_TO    reduce using rule 42 (var_cte -> cte_bool .)
    MORE_THAN       reduce using rule 42 (var_cte -> cte_bool .)
    LESS_THAN       reduce using rule 42 (var_cte -> cte_bool .)
    EQUAL_TO        reduce using rule 42 (var_cte -> cte_bool .)
    PEN_DOWN        reduce using rule 42 (var_cte -> cte_bool .)
    PEN_UP          reduce using rule 42 (var_cte -> cte_bool .)
    WHILE           reduce using rule 42 (var_cte -> cte_bool .)
    IF              reduce using rule 42 (var_cte -> cte_bool .)
    WRITE           reduce using rule 42 (var_cte -> cte_bool .)
    READ            reduce using rule 42 (var_cte -> cte_bool .)
    ID              reduce using rule 42 (var_cte -> cte_bool .)
    BOOL            reduce using rule 42 (var_cte -> cte_bool .)
    WORD            reduce using rule 42 (var_cte -> cte_bool .)
    NUMBER          reduce using rule 42 (var_cte -> cte_bool .)
    CENTER          reduce using rule 42 (var_cte -> cte_bool .)
    FORWARD         reduce using rule 42 (var_cte -> cte_bool .)
    RIGHT           reduce using rule 42 (var_cte -> cte_bool .)
    LEFT            reduce using rule 42 (var_cte -> cte_bool .)
    END             reduce using rule 42 (var_cte -> cte_bool .)
    OR              reduce using rule 42 (var_cte -> cte_bool .)
    AND             reduce using rule 42 (var_cte -> cte_bool .)
    ELSE            reduce using rule 42 (var_cte -> cte_bool .)
    COMMA           reduce using rule 42 (var_cte -> cte_bool .)
    CLOSE_PTH       reduce using rule 42 (var_cte -> cte_bool .)
    CLOSE_SQR       reduce using rule 42 (var_cte -> cte_bool .)


state 75

    (43) var_cte -> CTE_STR .
    DIV             reduce using rule 43 (var_cte -> CTE_STR .)
    MULT            reduce using rule 43 (var_cte -> CTE_STR .)
    SUB             reduce using rule 43 (var_cte -> CTE_STR .)
    SUM             reduce using rule 43 (var_cte -> CTE_STR .)
    MORE_OR_EQ_THAN reduce using rule 43 (var_cte -> CTE_STR .)
    LESS_OR_EQ_THAN reduce using rule 43 (var_cte -> CTE_STR .)
    DIFFERENT_TO    reduce using rule 43 (var_cte -> CTE_STR .)
    MORE_THAN       reduce using rule 43 (var_cte -> CTE_STR .)
    LESS_THAN       reduce using rule 43 (var_cte -> CTE_STR .)
    EQUAL_TO        reduce using rule 43 (var_cte -> CTE_STR .)
    PEN_DOWN        reduce using rule 43 (var_cte -> CTE_STR .)
    PEN_UP          reduce using rule 43 (var_cte -> CTE_STR .)
    WHILE           reduce using rule 43 (var_cte -> CTE_STR .)
    IF              reduce using rule 43 (var_cte -> CTE_STR .)
    WRITE           reduce using rule 43 (var_cte -> CTE_STR .)
    READ            reduce using rule 43 (var_cte -> CTE_STR .)
    ID              reduce using rule 43 (var_cte -> CTE_STR .)
    BOOL            reduce using rule 43 (var_cte -> CTE_STR .)
    WORD            reduce using rule 43 (var_cte -> CTE_STR .)
    NUMBER          reduce using rule 43 (var_cte -> CTE_STR .)
    CENTER          reduce using rule 43 (var_cte -> CTE_STR .)
    FORWARD         reduce using rule 43 (var_cte -> CTE_STR .)
    RIGHT           reduce using rule 43 (var_cte -> CTE_STR .)
    LEFT            reduce using rule 43 (var_cte -> CTE_STR .)
    END             reduce using rule 43 (var_cte -> CTE_STR .)
    OR              reduce using rule 43 (var_cte -> CTE_STR .)
    AND             reduce using rule 43 (var_cte -> CTE_STR .)
    ELSE            reduce using rule 43 (var_cte -> CTE_STR .)
    COMMA           reduce using rule 43 (var_cte -> CTE_STR .)
    CLOSE_PTH       reduce using rule 43 (var_cte -> CTE_STR .)
    CLOSE_SQR       reduce using rule 43 (var_cte -> CTE_STR .)


state 76

    (44) var_cte -> CTE_NUM .
    DIV             reduce using rule 44 (var_cte -> CTE_NUM .)
    MULT            reduce using rule 44 (var_cte -> CTE_NUM .)
    SUB             reduce using rule 44 (var_cte -> CTE_NUM .)
    SUM             reduce using rule 44 (var_cte -> CTE_NUM .)
    MORE_OR_EQ_THAN reduce using rule 44 (var_cte -> CTE_NUM .)
    LESS_OR_EQ_THAN reduce using rule 44 (var_cte -> CTE_NUM .)
    DIFFERENT_TO    reduce using rule 44 (var_cte -> CTE_NUM .)
    MORE_THAN       reduce using rule 44 (var_cte -> CTE_NUM .)
    LESS_THAN       reduce using rule 44 (var_cte -> CTE_NUM .)
    EQUAL_TO        reduce using rule 44 (var_cte -> CTE_NUM .)
    PEN_DOWN        reduce using rule 44 (var_cte -> CTE_NUM .)
    PEN_UP          reduce using rule 44 (var_cte -> CTE_NUM .)
    WHILE           reduce using rule 44 (var_cte -> CTE_NUM .)
    IF              reduce using rule 44 (var_cte -> CTE_NUM .)
    WRITE           reduce using rule 44 (var_cte -> CTE_NUM .)
    READ            reduce using rule 44 (var_cte -> CTE_NUM .)
    ID              reduce using rule 44 (var_cte -> CTE_NUM .)
    BOOL            reduce using rule 44 (var_cte -> CTE_NUM .)
    WORD            reduce using rule 44 (var_cte -> CTE_NUM .)
    NUMBER          reduce using rule 44 (var_cte -> CTE_NUM .)
    CENTER          reduce using rule 44 (var_cte -> CTE_NUM .)
    FORWARD         reduce using rule 44 (var_cte -> CTE_NUM .)
    RIGHT           reduce using rule 44 (var_cte -> CTE_NUM .)
    LEFT            reduce using rule 44 (var_cte -> CTE_NUM .)
    END             reduce using rule 44 (var_cte -> CTE_NUM .)
    OR              reduce using rule 44 (var_cte -> CTE_NUM .)
    AND             reduce using rule 44 (var_cte -> CTE_NUM .)
    ELSE            reduce using rule 44 (var_cte -> CTE_NUM .)
    COMMA           reduce using rule 44 (var_cte -> CTE_NUM .)
    CLOSE_PTH       reduce using rule 44 (var_cte -> CTE_NUM .)
    CLOSE_SQR       reduce using rule 44 (var_cte -> CTE_NUM .)


state 77

    (45) var_cte -> variable .
    DIV             reduce using rule 45 (var_cte -> variable .)
    MULT            reduce using rule 45 (var_cte -> variable .)
    SUB             reduce using rule 45 (var_cte -> variable .)
    SUM             reduce using rule 45 (var_cte -> variable .)
    MORE_OR_EQ_THAN reduce using rule 45 (var_cte -> variable .)
    LESS_OR_EQ_THAN reduce using rule 45 (var_cte -> variable .)
    DIFFERENT_TO    reduce using rule 45 (var_cte -> variable .)
    MORE_THAN       reduce using rule 45 (var_cte -> variable .)
    LESS_THAN       reduce using rule 45 (var_cte -> variable .)
    EQUAL_TO        reduce using rule 45 (var_cte -> variable .)
    PEN_DOWN        reduce using rule 45 (var_cte -> variable .)
    PEN_UP          reduce using rule 45 (var_cte -> variable .)
    WHILE           reduce using rule 45 (var_cte -> variable .)
    IF              reduce using rule 45 (var_cte -> variable .)
    WRITE           reduce using rule 45 (var_cte -> variable .)
    READ            reduce using rule 45 (var_cte -> variable .)
    ID              reduce using rule 45 (var_cte -> variable .)
    BOOL            reduce using rule 45 (var_cte -> variable .)
    WORD            reduce using rule 45 (var_cte -> variable .)
    NUMBER          reduce using rule 45 (var_cte -> variable .)
    CENTER          reduce using rule 45 (var_cte -> variable .)
    FORWARD         reduce using rule 45 (var_cte -> variable .)
    RIGHT           reduce using rule 45 (var_cte -> variable .)
    LEFT            reduce using rule 45 (var_cte -> variable .)
    END             reduce using rule 45 (var_cte -> variable .)
    OR              reduce using rule 45 (var_cte -> variable .)
    AND             reduce using rule 45 (var_cte -> variable .)
    ELSE            reduce using rule 45 (var_cte -> variable .)
    COMMA           reduce using rule 45 (var_cte -> variable .)
    CLOSE_PTH       reduce using rule 45 (var_cte -> variable .)
    CLOSE_SQR       reduce using rule 45 (var_cte -> variable .)


state 78

    (63) func_call -> ID . OPEN_PTH func_call_param CLOSE_PTH
    (68) variable -> ID . array
    (69) array -> . empty
    (70) array -> . OPEN_SQR expression CLOSE_SQR matrix
    (93) empty -> .
    OPEN_PTH        shift and go to state 57
    OPEN_SQR        shift and go to state 116
    DIV             reduce using rule 93 (empty -> .)
    MULT            reduce using rule 93 (empty -> .)
    SUB             reduce using rule 93 (empty -> .)
    SUM             reduce using rule 93 (empty -> .)
    MORE_OR_EQ_THAN reduce using rule 93 (empty -> .)
    LESS_OR_EQ_THAN reduce using rule 93 (empty -> .)
    DIFFERENT_TO    reduce using rule 93 (empty -> .)
    MORE_THAN       reduce using rule 93 (empty -> .)
    LESS_THAN       reduce using rule 93 (empty -> .)
    EQUAL_TO        reduce using rule 93 (empty -> .)
    PEN_DOWN        reduce using rule 93 (empty -> .)
    PEN_UP          reduce using rule 93 (empty -> .)
    WHILE           reduce using rule 93 (empty -> .)
    IF              reduce using rule 93 (empty -> .)
    WRITE           reduce using rule 93 (empty -> .)
    READ            reduce using rule 93 (empty -> .)
    ID              reduce using rule 93 (empty -> .)
    BOOL            reduce using rule 93 (empty -> .)
    WORD            reduce using rule 93 (empty -> .)
    NUMBER          reduce using rule 93 (empty -> .)
    CENTER          reduce using rule 93 (empty -> .)
    FORWARD         reduce using rule 93 (empty -> .)
    RIGHT           reduce using rule 93 (empty -> .)
    LEFT            reduce using rule 93 (empty -> .)
    END             reduce using rule 93 (empty -> .)
    OR              reduce using rule 93 (empty -> .)
    AND             reduce using rule 93 (empty -> .)
    ELSE            reduce using rule 93 (empty -> .)
    COMMA           reduce using rule 93 (empty -> .)
    CLOSE_PTH       reduce using rule 93 (empty -> .)
    CLOSE_SQR       reduce using rule 93 (empty -> .)

    array                          shift and go to state 114
    empty                          shift and go to state 115

state 79

    (46) cte_bool -> FALSE .
    DIV             reduce using rule 46 (cte_bool -> FALSE .)
    MULT            reduce using rule 46 (cte_bool -> FALSE .)
    SUB             reduce using rule 46 (cte_bool -> FALSE .)
    SUM             reduce using rule 46 (cte_bool -> FALSE .)
    MORE_OR_EQ_THAN reduce using rule 46 (cte_bool -> FALSE .)
    LESS_OR_EQ_THAN reduce using rule 46 (cte_bool -> FALSE .)
    DIFFERENT_TO    reduce using rule 46 (cte_bool -> FALSE .)
    MORE_THAN       reduce using rule 46 (cte_bool -> FALSE .)
    LESS_THAN       reduce using rule 46 (cte_bool -> FALSE .)
    EQUAL_TO        reduce using rule 46 (cte_bool -> FALSE .)
    PEN_DOWN        reduce using rule 46 (cte_bool -> FALSE .)
    PEN_UP          reduce using rule 46 (cte_bool -> FALSE .)
    WHILE           reduce using rule 46 (cte_bool -> FALSE .)
    IF              reduce using rule 46 (cte_bool -> FALSE .)
    WRITE           reduce using rule 46 (cte_bool -> FALSE .)
    READ            reduce using rule 46 (cte_bool -> FALSE .)
    ID              reduce using rule 46 (cte_bool -> FALSE .)
    BOOL            reduce using rule 46 (cte_bool -> FALSE .)
    WORD            reduce using rule 46 (cte_bool -> FALSE .)
    NUMBER          reduce using rule 46 (cte_bool -> FALSE .)
    CENTER          reduce using rule 46 (cte_bool -> FALSE .)
    FORWARD         reduce using rule 46 (cte_bool -> FALSE .)
    RIGHT           reduce using rule 46 (cte_bool -> FALSE .)
    LEFT            reduce using rule 46 (cte_bool -> FALSE .)
    END             reduce using rule 46 (cte_bool -> FALSE .)
    OR              reduce using rule 46 (cte_bool -> FALSE .)
    AND             reduce using rule 46 (cte_bool -> FALSE .)
    ELSE            reduce using rule 46 (cte_bool -> FALSE .)
    COMMA           reduce using rule 46 (cte_bool -> FALSE .)
    CLOSE_PTH       reduce using rule 46 (cte_bool -> FALSE .)
    CLOSE_SQR       reduce using rule 46 (cte_bool -> FALSE .)


state 80

    (47) cte_bool -> TRUE .
    DIV             reduce using rule 47 (cte_bool -> TRUE .)
    MULT            reduce using rule 47 (cte_bool -> TRUE .)
    SUB             reduce using rule 47 (cte_bool -> TRUE .)
    SUM             reduce using rule 47 (cte_bool -> TRUE .)
    MORE_OR_EQ_THAN reduce using rule 47 (cte_bool -> TRUE .)
    LESS_OR_EQ_THAN reduce using rule 47 (cte_bool -> TRUE .)
    DIFFERENT_TO    reduce using rule 47 (cte_bool -> TRUE .)
    MORE_THAN       reduce using rule 47 (cte_bool -> TRUE .)
    LESS_THAN       reduce using rule 47 (cte_bool -> TRUE .)
    EQUAL_TO        reduce using rule 47 (cte_bool -> TRUE .)
    PEN_DOWN        reduce using rule 47 (cte_bool -> TRUE .)
    PEN_UP          reduce using rule 47 (cte_bool -> TRUE .)
    WHILE           reduce using rule 47 (cte_bool -> TRUE .)
    IF              reduce using rule 47 (cte_bool -> TRUE .)
    WRITE           reduce using rule 47 (cte_bool -> TRUE .)
    READ            reduce using rule 47 (cte_bool -> TRUE .)
    ID              reduce using rule 47 (cte_bool -> TRUE .)
    BOOL            reduce using rule 47 (cte_bool -> TRUE .)
    WORD            reduce using rule 47 (cte_bool -> TRUE .)
    NUMBER          reduce using rule 47 (cte_bool -> TRUE .)
    CENTER          reduce using rule 47 (cte_bool -> TRUE .)
    FORWARD         reduce using rule 47 (cte_bool -> TRUE .)
    RIGHT           reduce using rule 47 (cte_bool -> TRUE .)
    LEFT            reduce using rule 47 (cte_bool -> TRUE .)
    END             reduce using rule 47 (cte_bool -> TRUE .)
    OR              reduce using rule 47 (cte_bool -> TRUE .)
    AND             reduce using rule 47 (cte_bool -> TRUE .)
    ELSE            reduce using rule 47 (cte_bool -> TRUE .)
    COMMA           reduce using rule 47 (cte_bool -> TRUE .)
    CLOSE_PTH       reduce using rule 47 (cte_bool -> TRUE .)
    CLOSE_SQR       reduce using rule 47 (cte_bool -> TRUE .)


state 81

    (76) if_stmnt -> IF log_exp . stmnt else_stmnt
    (20) stmnt -> . empty
    (21) stmnt -> . var_declaration_func stmnt
    (22) stmnt -> . pen_func stmnt
    (23) stmnt -> . move_func stmnt
    (24) stmnt -> . while_stmnt stmnt
    (25) stmnt -> . if_stmnt stmnt
    (26) stmnt -> . write stmnt
    (27) stmnt -> . read stmnt
    (28) stmnt -> . func_call stmnt
    (29) stmnt -> . var_assignation stmnt
    (93) empty -> .
    (30) var_declaration_func -> . var_type ID multiple_vars
    (90) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (91) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (85) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (79) while_stmnt -> . WHILE log_exp stmnt END
    (76) if_stmnt -> . IF log_exp stmnt else_stmnt
    (75) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (67) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (63) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (37) var_assignation -> . ID a1 assign expression quads
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (86) move_type -> . CENTER
    (87) move_type -> . FORWARD
    (88) move_type -> . RIGHT
    (89) move_type -> . LEFT
    END             reduce using rule 93 (empty -> .)
    ELSE            reduce using rule 93 (empty -> .)
    PEN_DOWN        shift and go to state 32
    PEN_UP          shift and go to state 33
    WHILE           shift and go to state 35
    IF              shift and go to state 36
    WRITE           shift and go to state 37
    READ            shift and go to state 38
    ID              shift and go to state 31
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11
    CENTER          shift and go to state 39
    FORWARD         shift and go to state 40
    RIGHT           shift and go to state 41
    LEFT            shift and go to state 42

    stmnt                          shift and go to state 117
    empty                          shift and go to state 20
    var_declaration_func           shift and go to state 21
    pen_func                       shift and go to state 22
    move_func                      shift and go to state 23
    while_stmnt                    shift and go to state 24
    if_stmnt                       shift and go to state 25
    write                          shift and go to state 26
    read                           shift and go to state 27
    func_call                      shift and go to state 28
    var_assignation                shift and go to state 29
    var_type                       shift and go to state 30
    move_type                      shift and go to state 34

state 82

    (75) write -> WRITE OPEN_PTH . expression CLOSE_PTH
    (48) expression -> . exp
    (49) expression -> . exp e3 rel_op exp e3 quads
    (50) exp -> . termino
    (51) exp -> . termino e1 term_op e2 termino e1 quads1
    (52) termino -> . factor
    (53) termino -> . factor e1 fact_op factor e1 quads
    (54) factor -> . term_op var_cte
    (55) factor -> . var_cte
    (56) factor -> . OPEN_PTH expression CLOSE_PTH
    (57) term_op -> . SUB
    (58) term_op -> . SUM
    (41) var_cte -> . func_call
    (42) var_cte -> . cte_bool
    (43) var_cte -> . CTE_STR
    (44) var_cte -> . CTE_NUM
    (45) var_cte -> . variable
    (63) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (46) cte_bool -> . FALSE
    (47) cte_bool -> . TRUE
    (68) variable -> . ID array
    OPEN_PTH        shift and go to state 70
    SUB             shift and go to state 71
    SUM             shift and go to state 72
    CTE_STR         shift and go to state 75
    CTE_NUM         shift and go to state 76
    ID              shift and go to state 78
    FALSE           shift and go to state 79
    TRUE            shift and go to state 80

    expression                     shift and go to state 118
    exp                            shift and go to state 65
    termino                        shift and go to state 66
    term_op                        shift and go to state 67
    factor                         shift and go to state 68
    var_cte                        shift and go to state 69
    func_call                      shift and go to state 73
    cte_bool                       shift and go to state 74
    variable                       shift and go to state 77

state 83

    (67) read -> READ OPEN_PTH . variable multiple_vars CLOSE_PTH
    (68) variable -> . ID array
    ID              shift and go to state 120

    variable                       shift and go to state 119

state 84

    (4) var_declaration -> var_type ID multiple_var .
    BOOL            reduce using rule 4 (var_declaration -> var_type ID multiple_var .)
    WORD            reduce using rule 4 (var_declaration -> var_type ID multiple_var .)
    NUMBER          reduce using rule 4 (var_declaration -> var_type ID multiple_var .)
    VOID            reduce using rule 4 (var_declaration -> var_type ID multiple_var .)
    MAIN            reduce using rule 4 (var_declaration -> var_type ID multiple_var .)


state 85

    (5) multiple_var -> empty .
    BOOL            reduce using rule 5 (multiple_var -> empty .)
    WORD            reduce using rule 5 (multiple_var -> empty .)
    NUMBER          reduce using rule 5 (multiple_var -> empty .)
    VOID            reduce using rule 5 (multiple_var -> empty .)
    MAIN            reduce using rule 5 (multiple_var -> empty .)


state 86

    (6) multiple_var -> COMMA . ID multiple_var
    ID              shift and go to state 121


state 87

    (11) func_declaration -> func_type FUNC ID . OPEN_PTH parameter CLOSE_PTH stmnt END
    OPEN_PTH        shift and go to state 122


state 88

    (30) var_declaration_func -> var_type ID multiple_vars .
    PEN_DOWN        reduce using rule 30 (var_declaration_func -> var_type ID multiple_vars .)
    PEN_UP          reduce using rule 30 (var_declaration_func -> var_type ID multiple_vars .)
    WHILE           reduce using rule 30 (var_declaration_func -> var_type ID multiple_vars .)
    IF              reduce using rule 30 (var_declaration_func -> var_type ID multiple_vars .)
    WRITE           reduce using rule 30 (var_declaration_func -> var_type ID multiple_vars .)
    READ            reduce using rule 30 (var_declaration_func -> var_type ID multiple_vars .)
    ID              reduce using rule 30 (var_declaration_func -> var_type ID multiple_vars .)
    BOOL            reduce using rule 30 (var_declaration_func -> var_type ID multiple_vars .)
    WORD            reduce using rule 30 (var_declaration_func -> var_type ID multiple_vars .)
    NUMBER          reduce using rule 30 (var_declaration_func -> var_type ID multiple_vars .)
    CENTER          reduce using rule 30 (var_declaration_func -> var_type ID multiple_vars .)
    FORWARD         reduce using rule 30 (var_declaration_func -> var_type ID multiple_vars .)
    RIGHT           reduce using rule 30 (var_declaration_func -> var_type ID multiple_vars .)
    LEFT            reduce using rule 30 (var_declaration_func -> var_type ID multiple_vars .)
    END             reduce using rule 30 (var_declaration_func -> var_type ID multiple_vars .)
    ELSE            reduce using rule 30 (var_declaration_func -> var_type ID multiple_vars .)


state 89

    (73) multiple_vars -> empty .
    PEN_DOWN        reduce using rule 73 (multiple_vars -> empty .)
    PEN_UP          reduce using rule 73 (multiple_vars -> empty .)
    WHILE           reduce using rule 73 (multiple_vars -> empty .)
    IF              reduce using rule 73 (multiple_vars -> empty .)
    WRITE           reduce using rule 73 (multiple_vars -> empty .)
    READ            reduce using rule 73 (multiple_vars -> empty .)
    ID              reduce using rule 73 (multiple_vars -> empty .)
    BOOL            reduce using rule 73 (multiple_vars -> empty .)
    WORD            reduce using rule 73 (multiple_vars -> empty .)
    NUMBER          reduce using rule 73 (multiple_vars -> empty .)
    CENTER          reduce using rule 73 (multiple_vars -> empty .)
    FORWARD         reduce using rule 73 (multiple_vars -> empty .)
    RIGHT           reduce using rule 73 (multiple_vars -> empty .)
    LEFT            reduce using rule 73 (multiple_vars -> empty .)
    END             reduce using rule 73 (multiple_vars -> empty .)
    ELSE            reduce using rule 73 (multiple_vars -> empty .)
    CLOSE_PTH       reduce using rule 73 (multiple_vars -> empty .)


state 90

    (74) multiple_vars -> COMMA . variable
    (68) variable -> . ID array
    ID              shift and go to state 120

    variable                       shift and go to state 123

state 91

    (63) func_call -> ID OPEN_PTH func_call_param . CLOSE_PTH
    CLOSE_PTH       shift and go to state 124


state 92

    (64) func_call_param -> expression . multiple_fc_param
    (65) multiple_fc_param -> . empty
    (66) multiple_fc_param -> . COMMA func_call_param
    (93) empty -> .
    COMMA           shift and go to state 127
    CLOSE_PTH       reduce using rule 93 (empty -> .)

    multiple_fc_param              shift and go to state 125
    empty                          shift and go to state 126

state 93

    (37) var_assignation -> ID a1 assign . expression quads
    (48) expression -> . exp
    (49) expression -> . exp e3 rel_op exp e3 quads
    (50) exp -> . termino
    (51) exp -> . termino e1 term_op e2 termino e1 quads1
    (52) termino -> . factor
    (53) termino -> . factor e1 fact_op factor e1 quads
    (54) factor -> . term_op var_cte
    (55) factor -> . var_cte
    (56) factor -> . OPEN_PTH expression CLOSE_PTH
    (57) term_op -> . SUB
    (58) term_op -> . SUM
    (41) var_cte -> . func_call
    (42) var_cte -> . cte_bool
    (43) var_cte -> . CTE_STR
    (44) var_cte -> . CTE_NUM
    (45) var_cte -> . variable
    (63) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (46) cte_bool -> . FALSE
    (47) cte_bool -> . TRUE
    (68) variable -> . ID array
    OPEN_PTH        shift and go to state 70
    SUB             shift and go to state 71
    SUM             shift and go to state 72
    CTE_STR         shift and go to state 75
    CTE_NUM         shift and go to state 76
    ID              shift and go to state 78
    FALSE           shift and go to state 79
    TRUE            shift and go to state 80

    expression                     shift and go to state 128
    exp                            shift and go to state 65
    termino                        shift and go to state 66
    term_op                        shift and go to state 67
    factor                         shift and go to state 68
    var_cte                        shift and go to state 69
    func_call                      shift and go to state 73
    cte_bool                       shift and go to state 74
    variable                       shift and go to state 77

state 94

    (39) assign -> ASSIGN .
    OPEN_PTH        reduce using rule 39 (assign -> ASSIGN .)
    SUB             reduce using rule 39 (assign -> ASSIGN .)
    SUM             reduce using rule 39 (assign -> ASSIGN .)
    CTE_STR         reduce using rule 39 (assign -> ASSIGN .)
    CTE_NUM         reduce using rule 39 (assign -> ASSIGN .)
    ID              reduce using rule 39 (assign -> ASSIGN .)
    FALSE           reduce using rule 39 (assign -> ASSIGN .)
    TRUE            reduce using rule 39 (assign -> ASSIGN .)


state 95

    (90) pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .
    PEN_DOWN        reduce using rule 90 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    PEN_UP          reduce using rule 90 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    WHILE           reduce using rule 90 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    IF              reduce using rule 90 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    WRITE           reduce using rule 90 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    READ            reduce using rule 90 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    ID              reduce using rule 90 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    BOOL            reduce using rule 90 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    WORD            reduce using rule 90 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    NUMBER          reduce using rule 90 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    CENTER          reduce using rule 90 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    FORWARD         reduce using rule 90 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    RIGHT           reduce using rule 90 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    LEFT            reduce using rule 90 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    END             reduce using rule 90 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    ELSE            reduce using rule 90 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)


state 96

    (91) pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .
    PEN_DOWN        reduce using rule 91 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    PEN_UP          reduce using rule 91 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    WHILE           reduce using rule 91 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    IF              reduce using rule 91 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    WRITE           reduce using rule 91 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    READ            reduce using rule 91 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    ID              reduce using rule 91 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    BOOL            reduce using rule 91 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    WORD            reduce using rule 91 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    NUMBER          reduce using rule 91 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    CENTER          reduce using rule 91 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    FORWARD         reduce using rule 91 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    RIGHT           reduce using rule 91 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    LEFT            reduce using rule 91 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    END             reduce using rule 91 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    ELSE            reduce using rule 91 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)


state 97

    (85) move_func -> move_type OPEN_PTH func_call_param . CLOSE_PTH
    CLOSE_PTH       shift and go to state 129


state 98

    (79) while_stmnt -> WHILE log_exp stmnt . END
    END             shift and go to state 130


state 99

    (82) con_expression -> expression rel_op . e4 expression quads
    (97) e4 -> .
    OPEN_PTH        reduce using rule 97 (e4 -> .)
    SUB             reduce using rule 97 (e4 -> .)
    SUM             reduce using rule 97 (e4 -> .)
    CTE_STR         reduce using rule 97 (e4 -> .)
    CTE_NUM         reduce using rule 97 (e4 -> .)
    ID              reduce using rule 97 (e4 -> .)
    FALSE           reduce using rule 97 (e4 -> .)
    TRUE            reduce using rule 97 (e4 -> .)

    e4                             shift and go to state 131

state 100

    (31) rel_op -> MORE_OR_EQ_THAN .
    OPEN_PTH        reduce using rule 31 (rel_op -> MORE_OR_EQ_THAN .)
    SUB             reduce using rule 31 (rel_op -> MORE_OR_EQ_THAN .)
    SUM             reduce using rule 31 (rel_op -> MORE_OR_EQ_THAN .)
    CTE_STR         reduce using rule 31 (rel_op -> MORE_OR_EQ_THAN .)
    CTE_NUM         reduce using rule 31 (rel_op -> MORE_OR_EQ_THAN .)
    ID              reduce using rule 31 (rel_op -> MORE_OR_EQ_THAN .)
    FALSE           reduce using rule 31 (rel_op -> MORE_OR_EQ_THAN .)
    TRUE            reduce using rule 31 (rel_op -> MORE_OR_EQ_THAN .)


state 101

    (32) rel_op -> LESS_OR_EQ_THAN .
    OPEN_PTH        reduce using rule 32 (rel_op -> LESS_OR_EQ_THAN .)
    SUB             reduce using rule 32 (rel_op -> LESS_OR_EQ_THAN .)
    SUM             reduce using rule 32 (rel_op -> LESS_OR_EQ_THAN .)
    CTE_STR         reduce using rule 32 (rel_op -> LESS_OR_EQ_THAN .)
    CTE_NUM         reduce using rule 32 (rel_op -> LESS_OR_EQ_THAN .)
    ID              reduce using rule 32 (rel_op -> LESS_OR_EQ_THAN .)
    FALSE           reduce using rule 32 (rel_op -> LESS_OR_EQ_THAN .)
    TRUE            reduce using rule 32 (rel_op -> LESS_OR_EQ_THAN .)


state 102

    (33) rel_op -> DIFFERENT_TO .
    OPEN_PTH        reduce using rule 33 (rel_op -> DIFFERENT_TO .)
    SUB             reduce using rule 33 (rel_op -> DIFFERENT_TO .)
    SUM             reduce using rule 33 (rel_op -> DIFFERENT_TO .)
    CTE_STR         reduce using rule 33 (rel_op -> DIFFERENT_TO .)
    CTE_NUM         reduce using rule 33 (rel_op -> DIFFERENT_TO .)
    ID              reduce using rule 33 (rel_op -> DIFFERENT_TO .)
    FALSE           reduce using rule 33 (rel_op -> DIFFERENT_TO .)
    TRUE            reduce using rule 33 (rel_op -> DIFFERENT_TO .)


state 103

    (34) rel_op -> MORE_THAN .
    OPEN_PTH        reduce using rule 34 (rel_op -> MORE_THAN .)
    SUB             reduce using rule 34 (rel_op -> MORE_THAN .)
    SUM             reduce using rule 34 (rel_op -> MORE_THAN .)
    CTE_STR         reduce using rule 34 (rel_op -> MORE_THAN .)
    CTE_NUM         reduce using rule 34 (rel_op -> MORE_THAN .)
    ID              reduce using rule 34 (rel_op -> MORE_THAN .)
    FALSE           reduce using rule 34 (rel_op -> MORE_THAN .)
    TRUE            reduce using rule 34 (rel_op -> MORE_THAN .)


state 104

    (35) rel_op -> LESS_THAN .
    OPEN_PTH        reduce using rule 35 (rel_op -> LESS_THAN .)
    SUB             reduce using rule 35 (rel_op -> LESS_THAN .)
    SUM             reduce using rule 35 (rel_op -> LESS_THAN .)
    CTE_STR         reduce using rule 35 (rel_op -> LESS_THAN .)
    CTE_NUM         reduce using rule 35 (rel_op -> LESS_THAN .)
    ID              reduce using rule 35 (rel_op -> LESS_THAN .)
    FALSE           reduce using rule 35 (rel_op -> LESS_THAN .)
    TRUE            reduce using rule 35 (rel_op -> LESS_THAN .)


state 105

    (36) rel_op -> EQUAL_TO .
    OPEN_PTH        reduce using rule 36 (rel_op -> EQUAL_TO .)
    SUB             reduce using rule 36 (rel_op -> EQUAL_TO .)
    SUM             reduce using rule 36 (rel_op -> EQUAL_TO .)
    CTE_STR         reduce using rule 36 (rel_op -> EQUAL_TO .)
    CTE_NUM         reduce using rule 36 (rel_op -> EQUAL_TO .)
    ID              reduce using rule 36 (rel_op -> EQUAL_TO .)
    FALSE           reduce using rule 36 (rel_op -> EQUAL_TO .)
    TRUE            reduce using rule 36 (rel_op -> EQUAL_TO .)


state 106

    (84) log_exp -> con_expression log_op . con_expression
    (80) con_expression -> . expression
    (81) con_expression -> . con_expression
    (82) con_expression -> . expression rel_op e4 expression quads
    (48) expression -> . exp
    (49) expression -> . exp e3 rel_op exp e3 quads
    (50) exp -> . termino
    (51) exp -> . termino e1 term_op e2 termino e1 quads1
    (52) termino -> . factor
    (53) termino -> . factor e1 fact_op factor e1 quads
    (54) factor -> . term_op var_cte
    (55) factor -> . var_cte
    (56) factor -> . OPEN_PTH expression CLOSE_PTH
    (57) term_op -> . SUB
    (58) term_op -> . SUM
    (41) var_cte -> . func_call
    (42) var_cte -> . cte_bool
    (43) var_cte -> . CTE_STR
    (44) var_cte -> . CTE_NUM
    (45) var_cte -> . variable
    (63) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (46) cte_bool -> . FALSE
    (47) cte_bool -> . TRUE
    (68) variable -> . ID array
    OPEN_PTH        shift and go to state 70
    SUB             shift and go to state 71
    SUM             shift and go to state 72
    CTE_STR         shift and go to state 75
    CTE_NUM         shift and go to state 76
    ID              shift and go to state 78
    FALSE           shift and go to state 79
    TRUE            shift and go to state 80

    con_expression                 shift and go to state 132
    expression                     shift and go to state 133
    exp                            shift and go to state 65
    termino                        shift and go to state 66
    term_op                        shift and go to state 67
    factor                         shift and go to state 68
    var_cte                        shift and go to state 69
    func_call                      shift and go to state 73
    cte_bool                       shift and go to state 74
    variable                       shift and go to state 77

state 107

    (61) log_op -> OR .
    OPEN_PTH        reduce using rule 61 (log_op -> OR .)
    SUB             reduce using rule 61 (log_op -> OR .)
    SUM             reduce using rule 61 (log_op -> OR .)
    CTE_STR         reduce using rule 61 (log_op -> OR .)
    CTE_NUM         reduce using rule 61 (log_op -> OR .)
    ID              reduce using rule 61 (log_op -> OR .)
    FALSE           reduce using rule 61 (log_op -> OR .)
    TRUE            reduce using rule 61 (log_op -> OR .)


state 108

    (62) log_op -> AND .
    OPEN_PTH        reduce using rule 62 (log_op -> AND .)
    SUB             reduce using rule 62 (log_op -> AND .)
    SUM             reduce using rule 62 (log_op -> AND .)
    CTE_STR         reduce using rule 62 (log_op -> AND .)
    CTE_NUM         reduce using rule 62 (log_op -> AND .)
    ID              reduce using rule 62 (log_op -> AND .)
    FALSE           reduce using rule 62 (log_op -> AND .)
    TRUE            reduce using rule 62 (log_op -> AND .)


state 109

    (49) expression -> exp e3 . rel_op exp e3 quads
    (31) rel_op -> . MORE_OR_EQ_THAN
    (32) rel_op -> . LESS_OR_EQ_THAN
    (33) rel_op -> . DIFFERENT_TO
    (34) rel_op -> . MORE_THAN
    (35) rel_op -> . LESS_THAN
    (36) rel_op -> . EQUAL_TO
    MORE_OR_EQ_THAN shift and go to state 100
    LESS_OR_EQ_THAN shift and go to state 101
    DIFFERENT_TO    shift and go to state 102
    MORE_THAN       shift and go to state 103
    LESS_THAN       shift and go to state 104
    EQUAL_TO        shift and go to state 105

    rel_op                         shift and go to state 134

state 110

    (51) exp -> termino e1 . term_op e2 termino e1 quads1
    (57) term_op -> . SUB
    (58) term_op -> . SUM
    SUB             shift and go to state 71
    SUM             shift and go to state 72

    term_op                        shift and go to state 135

state 111

    (54) factor -> term_op var_cte .
    DIV             reduce using rule 54 (factor -> term_op var_cte .)
    MULT            reduce using rule 54 (factor -> term_op var_cte .)
    SUB             reduce using rule 54 (factor -> term_op var_cte .)
    SUM             reduce using rule 54 (factor -> term_op var_cte .)
    MORE_OR_EQ_THAN reduce using rule 54 (factor -> term_op var_cte .)
    LESS_OR_EQ_THAN reduce using rule 54 (factor -> term_op var_cte .)
    DIFFERENT_TO    reduce using rule 54 (factor -> term_op var_cte .)
    MORE_THAN       reduce using rule 54 (factor -> term_op var_cte .)
    LESS_THAN       reduce using rule 54 (factor -> term_op var_cte .)
    EQUAL_TO        reduce using rule 54 (factor -> term_op var_cte .)
    PEN_DOWN        reduce using rule 54 (factor -> term_op var_cte .)
    PEN_UP          reduce using rule 54 (factor -> term_op var_cte .)
    WHILE           reduce using rule 54 (factor -> term_op var_cte .)
    IF              reduce using rule 54 (factor -> term_op var_cte .)
    WRITE           reduce using rule 54 (factor -> term_op var_cte .)
    READ            reduce using rule 54 (factor -> term_op var_cte .)
    ID              reduce using rule 54 (factor -> term_op var_cte .)
    BOOL            reduce using rule 54 (factor -> term_op var_cte .)
    WORD            reduce using rule 54 (factor -> term_op var_cte .)
    NUMBER          reduce using rule 54 (factor -> term_op var_cte .)
    CENTER          reduce using rule 54 (factor -> term_op var_cte .)
    FORWARD         reduce using rule 54 (factor -> term_op var_cte .)
    RIGHT           reduce using rule 54 (factor -> term_op var_cte .)
    LEFT            reduce using rule 54 (factor -> term_op var_cte .)
    END             reduce using rule 54 (factor -> term_op var_cte .)
    OR              reduce using rule 54 (factor -> term_op var_cte .)
    AND             reduce using rule 54 (factor -> term_op var_cte .)
    ELSE            reduce using rule 54 (factor -> term_op var_cte .)
    COMMA           reduce using rule 54 (factor -> term_op var_cte .)
    CLOSE_PTH       reduce using rule 54 (factor -> term_op var_cte .)
    CLOSE_SQR       reduce using rule 54 (factor -> term_op var_cte .)


state 112

    (53) termino -> factor e1 . fact_op factor e1 quads
    (59) fact_op -> . DIV
    (60) fact_op -> . MULT
    DIV             shift and go to state 137
    MULT            shift and go to state 138

    fact_op                        shift and go to state 136

state 113

    (56) factor -> OPEN_PTH expression . CLOSE_PTH
    CLOSE_PTH       shift and go to state 139


state 114

    (68) variable -> ID array .
    DIV             reduce using rule 68 (variable -> ID array .)
    MULT            reduce using rule 68 (variable -> ID array .)
    SUB             reduce using rule 68 (variable -> ID array .)
    SUM             reduce using rule 68 (variable -> ID array .)
    MORE_OR_EQ_THAN reduce using rule 68 (variable -> ID array .)
    LESS_OR_EQ_THAN reduce using rule 68 (variable -> ID array .)
    DIFFERENT_TO    reduce using rule 68 (variable -> ID array .)
    MORE_THAN       reduce using rule 68 (variable -> ID array .)
    LESS_THAN       reduce using rule 68 (variable -> ID array .)
    EQUAL_TO        reduce using rule 68 (variable -> ID array .)
    PEN_DOWN        reduce using rule 68 (variable -> ID array .)
    PEN_UP          reduce using rule 68 (variable -> ID array .)
    WHILE           reduce using rule 68 (variable -> ID array .)
    IF              reduce using rule 68 (variable -> ID array .)
    WRITE           reduce using rule 68 (variable -> ID array .)
    READ            reduce using rule 68 (variable -> ID array .)
    ID              reduce using rule 68 (variable -> ID array .)
    BOOL            reduce using rule 68 (variable -> ID array .)
    WORD            reduce using rule 68 (variable -> ID array .)
    NUMBER          reduce using rule 68 (variable -> ID array .)
    CENTER          reduce using rule 68 (variable -> ID array .)
    FORWARD         reduce using rule 68 (variable -> ID array .)
    RIGHT           reduce using rule 68 (variable -> ID array .)
    LEFT            reduce using rule 68 (variable -> ID array .)
    END             reduce using rule 68 (variable -> ID array .)
    OR              reduce using rule 68 (variable -> ID array .)
    AND             reduce using rule 68 (variable -> ID array .)
    ELSE            reduce using rule 68 (variable -> ID array .)
    COMMA           reduce using rule 68 (variable -> ID array .)
    CLOSE_PTH       reduce using rule 68 (variable -> ID array .)
    CLOSE_SQR       reduce using rule 68 (variable -> ID array .)


state 115

    (69) array -> empty .
    DIV             reduce using rule 69 (array -> empty .)
    MULT            reduce using rule 69 (array -> empty .)
    SUB             reduce using rule 69 (array -> empty .)
    SUM             reduce using rule 69 (array -> empty .)
    MORE_OR_EQ_THAN reduce using rule 69 (array -> empty .)
    LESS_OR_EQ_THAN reduce using rule 69 (array -> empty .)
    DIFFERENT_TO    reduce using rule 69 (array -> empty .)
    MORE_THAN       reduce using rule 69 (array -> empty .)
    LESS_THAN       reduce using rule 69 (array -> empty .)
    EQUAL_TO        reduce using rule 69 (array -> empty .)
    PEN_DOWN        reduce using rule 69 (array -> empty .)
    PEN_UP          reduce using rule 69 (array -> empty .)
    WHILE           reduce using rule 69 (array -> empty .)
    IF              reduce using rule 69 (array -> empty .)
    WRITE           reduce using rule 69 (array -> empty .)
    READ            reduce using rule 69 (array -> empty .)
    ID              reduce using rule 69 (array -> empty .)
    BOOL            reduce using rule 69 (array -> empty .)
    WORD            reduce using rule 69 (array -> empty .)
    NUMBER          reduce using rule 69 (array -> empty .)
    CENTER          reduce using rule 69 (array -> empty .)
    FORWARD         reduce using rule 69 (array -> empty .)
    RIGHT           reduce using rule 69 (array -> empty .)
    LEFT            reduce using rule 69 (array -> empty .)
    END             reduce using rule 69 (array -> empty .)
    OR              reduce using rule 69 (array -> empty .)
    AND             reduce using rule 69 (array -> empty .)
    ELSE            reduce using rule 69 (array -> empty .)
    COMMA           reduce using rule 69 (array -> empty .)
    CLOSE_PTH       reduce using rule 69 (array -> empty .)
    CLOSE_SQR       reduce using rule 69 (array -> empty .)


state 116

    (70) array -> OPEN_SQR . expression CLOSE_SQR matrix
    (48) expression -> . exp
    (49) expression -> . exp e3 rel_op exp e3 quads
    (50) exp -> . termino
    (51) exp -> . termino e1 term_op e2 termino e1 quads1
    (52) termino -> . factor
    (53) termino -> . factor e1 fact_op factor e1 quads
    (54) factor -> . term_op var_cte
    (55) factor -> . var_cte
    (56) factor -> . OPEN_PTH expression CLOSE_PTH
    (57) term_op -> . SUB
    (58) term_op -> . SUM
    (41) var_cte -> . func_call
    (42) var_cte -> . cte_bool
    (43) var_cte -> . CTE_STR
    (44) var_cte -> . CTE_NUM
    (45) var_cte -> . variable
    (63) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (46) cte_bool -> . FALSE
    (47) cte_bool -> . TRUE
    (68) variable -> . ID array
    OPEN_PTH        shift and go to state 70
    SUB             shift and go to state 71
    SUM             shift and go to state 72
    CTE_STR         shift and go to state 75
    CTE_NUM         shift and go to state 76
    ID              shift and go to state 78
    FALSE           shift and go to state 79
    TRUE            shift and go to state 80

    expression                     shift and go to state 140
    exp                            shift and go to state 65
    termino                        shift and go to state 66
    term_op                        shift and go to state 67
    factor                         shift and go to state 68
    var_cte                        shift and go to state 69
    func_call                      shift and go to state 73
    cte_bool                       shift and go to state 74
    variable                       shift and go to state 77

state 117

    (76) if_stmnt -> IF log_exp stmnt . else_stmnt
    (77) else_stmnt -> . END
    (78) else_stmnt -> . ELSE stmnt END
    END             shift and go to state 142
    ELSE            shift and go to state 143

    else_stmnt                     shift and go to state 141

state 118

    (75) write -> WRITE OPEN_PTH expression . CLOSE_PTH
    CLOSE_PTH       shift and go to state 144


state 119

    (67) read -> READ OPEN_PTH variable . multiple_vars CLOSE_PTH
    (73) multiple_vars -> . empty
    (74) multiple_vars -> . COMMA variable
    (93) empty -> .
    COMMA           shift and go to state 90
    CLOSE_PTH       reduce using rule 93 (empty -> .)

    multiple_vars                  shift and go to state 145
    empty                          shift and go to state 89

state 120

    (68) variable -> ID . array
    (69) array -> . empty
    (70) array -> . OPEN_SQR expression CLOSE_SQR matrix
    (93) empty -> .
    OPEN_SQR        shift and go to state 116
    COMMA           reduce using rule 93 (empty -> .)
    CLOSE_PTH       reduce using rule 93 (empty -> .)
    PEN_DOWN        reduce using rule 93 (empty -> .)
    PEN_UP          reduce using rule 93 (empty -> .)
    WHILE           reduce using rule 93 (empty -> .)
    IF              reduce using rule 93 (empty -> .)
    WRITE           reduce using rule 93 (empty -> .)
    READ            reduce using rule 93 (empty -> .)
    ID              reduce using rule 93 (empty -> .)
    BOOL            reduce using rule 93 (empty -> .)
    WORD            reduce using rule 93 (empty -> .)
    NUMBER          reduce using rule 93 (empty -> .)
    CENTER          reduce using rule 93 (empty -> .)
    FORWARD         reduce using rule 93 (empty -> .)
    RIGHT           reduce using rule 93 (empty -> .)
    LEFT            reduce using rule 93 (empty -> .)
    END             reduce using rule 93 (empty -> .)
    ELSE            reduce using rule 93 (empty -> .)

    array                          shift and go to state 114
    empty                          shift and go to state 115

state 121

    (6) multiple_var -> COMMA ID . multiple_var
    (5) multiple_var -> . empty
    (6) multiple_var -> . COMMA ID multiple_var
    (93) empty -> .
    COMMA           shift and go to state 86
    BOOL            reduce using rule 93 (empty -> .)
    WORD            reduce using rule 93 (empty -> .)
    NUMBER          reduce using rule 93 (empty -> .)
    VOID            reduce using rule 93 (empty -> .)
    MAIN            reduce using rule 93 (empty -> .)

    multiple_var                   shift and go to state 146
    empty                          shift and go to state 85

state 122

    (11) func_declaration -> func_type FUNC ID OPEN_PTH . parameter CLOSE_PTH stmnt END
    (16) parameter -> . empty
    (17) parameter -> . var_type ID multiple_parameters
    (93) empty -> .
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    CLOSE_PTH       reduce using rule 93 (empty -> .)
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11

    parameter                      shift and go to state 147
    empty                          shift and go to state 148
    var_type                       shift and go to state 149

state 123

    (74) multiple_vars -> COMMA variable .
    PEN_DOWN        reduce using rule 74 (multiple_vars -> COMMA variable .)
    PEN_UP          reduce using rule 74 (multiple_vars -> COMMA variable .)
    WHILE           reduce using rule 74 (multiple_vars -> COMMA variable .)
    IF              reduce using rule 74 (multiple_vars -> COMMA variable .)
    WRITE           reduce using rule 74 (multiple_vars -> COMMA variable .)
    READ            reduce using rule 74 (multiple_vars -> COMMA variable .)
    ID              reduce using rule 74 (multiple_vars -> COMMA variable .)
    BOOL            reduce using rule 74 (multiple_vars -> COMMA variable .)
    WORD            reduce using rule 74 (multiple_vars -> COMMA variable .)
    NUMBER          reduce using rule 74 (multiple_vars -> COMMA variable .)
    CENTER          reduce using rule 74 (multiple_vars -> COMMA variable .)
    FORWARD         reduce using rule 74 (multiple_vars -> COMMA variable .)
    RIGHT           reduce using rule 74 (multiple_vars -> COMMA variable .)
    LEFT            reduce using rule 74 (multiple_vars -> COMMA variable .)
    END             reduce using rule 74 (multiple_vars -> COMMA variable .)
    ELSE            reduce using rule 74 (multiple_vars -> COMMA variable .)
    CLOSE_PTH       reduce using rule 74 (multiple_vars -> COMMA variable .)


state 124

    (63) func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .
    PEN_DOWN        reduce using rule 63 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    PEN_UP          reduce using rule 63 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    WHILE           reduce using rule 63 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    IF              reduce using rule 63 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    WRITE           reduce using rule 63 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    READ            reduce using rule 63 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    ID              reduce using rule 63 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    BOOL            reduce using rule 63 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    WORD            reduce using rule 63 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    NUMBER          reduce using rule 63 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    CENTER          reduce using rule 63 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    FORWARD         reduce using rule 63 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    RIGHT           reduce using rule 63 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    LEFT            reduce using rule 63 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    END             reduce using rule 63 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    ELSE            reduce using rule 63 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    DIV             reduce using rule 63 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    MULT            reduce using rule 63 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    SUB             reduce using rule 63 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    SUM             reduce using rule 63 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    MORE_OR_EQ_THAN reduce using rule 63 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    LESS_OR_EQ_THAN reduce using rule 63 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    DIFFERENT_TO    reduce using rule 63 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    MORE_THAN       reduce using rule 63 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    LESS_THAN       reduce using rule 63 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    EQUAL_TO        reduce using rule 63 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    OR              reduce using rule 63 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    AND             reduce using rule 63 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    COMMA           reduce using rule 63 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    CLOSE_PTH       reduce using rule 63 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    CLOSE_SQR       reduce using rule 63 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)


state 125

    (64) func_call_param -> expression multiple_fc_param .
    CLOSE_PTH       reduce using rule 64 (func_call_param -> expression multiple_fc_param .)


state 126

    (65) multiple_fc_param -> empty .
    CLOSE_PTH       reduce using rule 65 (multiple_fc_param -> empty .)


state 127

    (66) multiple_fc_param -> COMMA . func_call_param
    (64) func_call_param -> . expression multiple_fc_param
    (48) expression -> . exp
    (49) expression -> . exp e3 rel_op exp e3 quads
    (50) exp -> . termino
    (51) exp -> . termino e1 term_op e2 termino e1 quads1
    (52) termino -> . factor
    (53) termino -> . factor e1 fact_op factor e1 quads
    (54) factor -> . term_op var_cte
    (55) factor -> . var_cte
    (56) factor -> . OPEN_PTH expression CLOSE_PTH
    (57) term_op -> . SUB
    (58) term_op -> . SUM
    (41) var_cte -> . func_call
    (42) var_cte -> . cte_bool
    (43) var_cte -> . CTE_STR
    (44) var_cte -> . CTE_NUM
    (45) var_cte -> . variable
    (63) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (46) cte_bool -> . FALSE
    (47) cte_bool -> . TRUE
    (68) variable -> . ID array
    OPEN_PTH        shift and go to state 70
    SUB             shift and go to state 71
    SUM             shift and go to state 72
    CTE_STR         shift and go to state 75
    CTE_NUM         shift and go to state 76
    ID              shift and go to state 78
    FALSE           shift and go to state 79
    TRUE            shift and go to state 80

    func_call_param                shift and go to state 150
    expression                     shift and go to state 92
    exp                            shift and go to state 65
    termino                        shift and go to state 66
    term_op                        shift and go to state 67
    factor                         shift and go to state 68
    var_cte                        shift and go to state 69
    func_call                      shift and go to state 73
    cte_bool                       shift and go to state 74
    variable                       shift and go to state 77

state 128

    (37) var_assignation -> ID a1 assign expression . quads
    (98) quads -> .
    PEN_DOWN        reduce using rule 98 (quads -> .)
    PEN_UP          reduce using rule 98 (quads -> .)
    WHILE           reduce using rule 98 (quads -> .)
    IF              reduce using rule 98 (quads -> .)
    WRITE           reduce using rule 98 (quads -> .)
    READ            reduce using rule 98 (quads -> .)
    ID              reduce using rule 98 (quads -> .)
    BOOL            reduce using rule 98 (quads -> .)
    WORD            reduce using rule 98 (quads -> .)
    NUMBER          reduce using rule 98 (quads -> .)
    CENTER          reduce using rule 98 (quads -> .)
    FORWARD         reduce using rule 98 (quads -> .)
    RIGHT           reduce using rule 98 (quads -> .)
    LEFT            reduce using rule 98 (quads -> .)
    END             reduce using rule 98 (quads -> .)
    ELSE            reduce using rule 98 (quads -> .)

    quads                          shift and go to state 151

state 129

    (85) move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .
    PEN_DOWN        reduce using rule 85 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    PEN_UP          reduce using rule 85 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    WHILE           reduce using rule 85 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    IF              reduce using rule 85 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    WRITE           reduce using rule 85 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    READ            reduce using rule 85 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    ID              reduce using rule 85 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    BOOL            reduce using rule 85 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    WORD            reduce using rule 85 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    NUMBER          reduce using rule 85 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    CENTER          reduce using rule 85 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    FORWARD         reduce using rule 85 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    RIGHT           reduce using rule 85 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    LEFT            reduce using rule 85 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    END             reduce using rule 85 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    ELSE            reduce using rule 85 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)


state 130

    (79) while_stmnt -> WHILE log_exp stmnt END .
    PEN_DOWN        reduce using rule 79 (while_stmnt -> WHILE log_exp stmnt END .)
    PEN_UP          reduce using rule 79 (while_stmnt -> WHILE log_exp stmnt END .)
    WHILE           reduce using rule 79 (while_stmnt -> WHILE log_exp stmnt END .)
    IF              reduce using rule 79 (while_stmnt -> WHILE log_exp stmnt END .)
    WRITE           reduce using rule 79 (while_stmnt -> WHILE log_exp stmnt END .)
    READ            reduce using rule 79 (while_stmnt -> WHILE log_exp stmnt END .)
    ID              reduce using rule 79 (while_stmnt -> WHILE log_exp stmnt END .)
    BOOL            reduce using rule 79 (while_stmnt -> WHILE log_exp stmnt END .)
    WORD            reduce using rule 79 (while_stmnt -> WHILE log_exp stmnt END .)
    NUMBER          reduce using rule 79 (while_stmnt -> WHILE log_exp stmnt END .)
    CENTER          reduce using rule 79 (while_stmnt -> WHILE log_exp stmnt END .)
    FORWARD         reduce using rule 79 (while_stmnt -> WHILE log_exp stmnt END .)
    RIGHT           reduce using rule 79 (while_stmnt -> WHILE log_exp stmnt END .)
    LEFT            reduce using rule 79 (while_stmnt -> WHILE log_exp stmnt END .)
    END             reduce using rule 79 (while_stmnt -> WHILE log_exp stmnt END .)
    ELSE            reduce using rule 79 (while_stmnt -> WHILE log_exp stmnt END .)


state 131

    (82) con_expression -> expression rel_op e4 . expression quads
    (48) expression -> . exp
    (49) expression -> . exp e3 rel_op exp e3 quads
    (50) exp -> . termino
    (51) exp -> . termino e1 term_op e2 termino e1 quads1
    (52) termino -> . factor
    (53) termino -> . factor e1 fact_op factor e1 quads
    (54) factor -> . term_op var_cte
    (55) factor -> . var_cte
    (56) factor -> . OPEN_PTH expression CLOSE_PTH
    (57) term_op -> . SUB
    (58) term_op -> . SUM
    (41) var_cte -> . func_call
    (42) var_cte -> . cte_bool
    (43) var_cte -> . CTE_STR
    (44) var_cte -> . CTE_NUM
    (45) var_cte -> . variable
    (63) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (46) cte_bool -> . FALSE
    (47) cte_bool -> . TRUE
    (68) variable -> . ID array
    OPEN_PTH        shift and go to state 70
    SUB             shift and go to state 71
    SUM             shift and go to state 72
    CTE_STR         shift and go to state 75
    CTE_NUM         shift and go to state 76
    ID              shift and go to state 78
    FALSE           shift and go to state 79
    TRUE            shift and go to state 80

    expression                     shift and go to state 152
    exp                            shift and go to state 65
    termino                        shift and go to state 66
    term_op                        shift and go to state 67
    factor                         shift and go to state 68
    var_cte                        shift and go to state 69
    func_call                      shift and go to state 73
    cte_bool                       shift and go to state 74
    variable                       shift and go to state 77

state 132

    (84) log_exp -> con_expression log_op con_expression .
    (81) con_expression -> con_expression .
  ! reduce/reduce conflict for PEN_DOWN resolved using rule 81 (con_expression -> con_expression .)
  ! reduce/reduce conflict for PEN_UP resolved using rule 81 (con_expression -> con_expression .)
  ! reduce/reduce conflict for WHILE resolved using rule 81 (con_expression -> con_expression .)
  ! reduce/reduce conflict for IF resolved using rule 81 (con_expression -> con_expression .)
  ! reduce/reduce conflict for WRITE resolved using rule 81 (con_expression -> con_expression .)
  ! reduce/reduce conflict for READ resolved using rule 81 (con_expression -> con_expression .)
  ! reduce/reduce conflict for ID resolved using rule 81 (con_expression -> con_expression .)
  ! reduce/reduce conflict for BOOL resolved using rule 81 (con_expression -> con_expression .)
  ! reduce/reduce conflict for WORD resolved using rule 81 (con_expression -> con_expression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 81 (con_expression -> con_expression .)
  ! reduce/reduce conflict for CENTER resolved using rule 81 (con_expression -> con_expression .)
  ! reduce/reduce conflict for FORWARD resolved using rule 81 (con_expression -> con_expression .)
  ! reduce/reduce conflict for RIGHT resolved using rule 81 (con_expression -> con_expression .)
  ! reduce/reduce conflict for LEFT resolved using rule 81 (con_expression -> con_expression .)
  ! reduce/reduce conflict for END resolved using rule 81 (con_expression -> con_expression .)
  ! reduce/reduce conflict for ELSE resolved using rule 81 (con_expression -> con_expression .)
    PEN_DOWN        reduce using rule 81 (con_expression -> con_expression .)
    PEN_UP          reduce using rule 81 (con_expression -> con_expression .)
    WHILE           reduce using rule 81 (con_expression -> con_expression .)
    IF              reduce using rule 81 (con_expression -> con_expression .)
    WRITE           reduce using rule 81 (con_expression -> con_expression .)
    READ            reduce using rule 81 (con_expression -> con_expression .)
    ID              reduce using rule 81 (con_expression -> con_expression .)
    BOOL            reduce using rule 81 (con_expression -> con_expression .)
    WORD            reduce using rule 81 (con_expression -> con_expression .)
    NUMBER          reduce using rule 81 (con_expression -> con_expression .)
    CENTER          reduce using rule 81 (con_expression -> con_expression .)
    FORWARD         reduce using rule 81 (con_expression -> con_expression .)
    RIGHT           reduce using rule 81 (con_expression -> con_expression .)
    LEFT            reduce using rule 81 (con_expression -> con_expression .)
    END             reduce using rule 81 (con_expression -> con_expression .)
    ELSE            reduce using rule 81 (con_expression -> con_expression .)


state 133

    (80) con_expression -> expression .
    (82) con_expression -> expression . rel_op e4 expression quads
    (31) rel_op -> . MORE_OR_EQ_THAN
    (32) rel_op -> . LESS_OR_EQ_THAN
    (33) rel_op -> . DIFFERENT_TO
    (34) rel_op -> . MORE_THAN
    (35) rel_op -> . LESS_THAN
    (36) rel_op -> . EQUAL_TO
    PEN_DOWN        reduce using rule 80 (con_expression -> expression .)
    PEN_UP          reduce using rule 80 (con_expression -> expression .)
    WHILE           reduce using rule 80 (con_expression -> expression .)
    IF              reduce using rule 80 (con_expression -> expression .)
    WRITE           reduce using rule 80 (con_expression -> expression .)
    READ            reduce using rule 80 (con_expression -> expression .)
    ID              reduce using rule 80 (con_expression -> expression .)
    BOOL            reduce using rule 80 (con_expression -> expression .)
    WORD            reduce using rule 80 (con_expression -> expression .)
    NUMBER          reduce using rule 80 (con_expression -> expression .)
    CENTER          reduce using rule 80 (con_expression -> expression .)
    FORWARD         reduce using rule 80 (con_expression -> expression .)
    RIGHT           reduce using rule 80 (con_expression -> expression .)
    LEFT            reduce using rule 80 (con_expression -> expression .)
    END             reduce using rule 80 (con_expression -> expression .)
    ELSE            reduce using rule 80 (con_expression -> expression .)
    MORE_OR_EQ_THAN shift and go to state 100
    LESS_OR_EQ_THAN shift and go to state 101
    DIFFERENT_TO    shift and go to state 102
    MORE_THAN       shift and go to state 103
    LESS_THAN       shift and go to state 104
    EQUAL_TO        shift and go to state 105

    rel_op                         shift and go to state 99

state 134

    (49) expression -> exp e3 rel_op . exp e3 quads
    (50) exp -> . termino
    (51) exp -> . termino e1 term_op e2 termino e1 quads1
    (52) termino -> . factor
    (53) termino -> . factor e1 fact_op factor e1 quads
    (54) factor -> . term_op var_cte
    (55) factor -> . var_cte
    (56) factor -> . OPEN_PTH expression CLOSE_PTH
    (57) term_op -> . SUB
    (58) term_op -> . SUM
    (41) var_cte -> . func_call
    (42) var_cte -> . cte_bool
    (43) var_cte -> . CTE_STR
    (44) var_cte -> . CTE_NUM
    (45) var_cte -> . variable
    (63) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (46) cte_bool -> . FALSE
    (47) cte_bool -> . TRUE
    (68) variable -> . ID array
    OPEN_PTH        shift and go to state 70
    SUB             shift and go to state 71
    SUM             shift and go to state 72
    CTE_STR         shift and go to state 75
    CTE_NUM         shift and go to state 76
    ID              shift and go to state 78
    FALSE           shift and go to state 79
    TRUE            shift and go to state 80

    exp                            shift and go to state 153
    termino                        shift and go to state 66
    term_op                        shift and go to state 67
    factor                         shift and go to state 68
    var_cte                        shift and go to state 69
    func_call                      shift and go to state 73
    cte_bool                       shift and go to state 74
    variable                       shift and go to state 77

state 135

    (51) exp -> termino e1 term_op . e2 termino e1 quads1
    (95) e2 -> .
    OPEN_PTH        reduce using rule 95 (e2 -> .)
    SUB             reduce using rule 95 (e2 -> .)
    SUM             reduce using rule 95 (e2 -> .)
    CTE_STR         reduce using rule 95 (e2 -> .)
    CTE_NUM         reduce using rule 95 (e2 -> .)
    ID              reduce using rule 95 (e2 -> .)
    FALSE           reduce using rule 95 (e2 -> .)
    TRUE            reduce using rule 95 (e2 -> .)

    e2                             shift and go to state 154

state 136

    (53) termino -> factor e1 fact_op . factor e1 quads
    (54) factor -> . term_op var_cte
    (55) factor -> . var_cte
    (56) factor -> . OPEN_PTH expression CLOSE_PTH
    (57) term_op -> . SUB
    (58) term_op -> . SUM
    (41) var_cte -> . func_call
    (42) var_cte -> . cte_bool
    (43) var_cte -> . CTE_STR
    (44) var_cte -> . CTE_NUM
    (45) var_cte -> . variable
    (63) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (46) cte_bool -> . FALSE
    (47) cte_bool -> . TRUE
    (68) variable -> . ID array
    OPEN_PTH        shift and go to state 70
    SUB             shift and go to state 71
    SUM             shift and go to state 72
    CTE_STR         shift and go to state 75
    CTE_NUM         shift and go to state 76
    ID              shift and go to state 78
    FALSE           shift and go to state 79
    TRUE            shift and go to state 80

    factor                         shift and go to state 155
    term_op                        shift and go to state 67
    var_cte                        shift and go to state 69
    func_call                      shift and go to state 73
    cte_bool                       shift and go to state 74
    variable                       shift and go to state 77

state 137

    (59) fact_op -> DIV .
    OPEN_PTH        reduce using rule 59 (fact_op -> DIV .)
    SUB             reduce using rule 59 (fact_op -> DIV .)
    SUM             reduce using rule 59 (fact_op -> DIV .)
    CTE_STR         reduce using rule 59 (fact_op -> DIV .)
    CTE_NUM         reduce using rule 59 (fact_op -> DIV .)
    ID              reduce using rule 59 (fact_op -> DIV .)
    FALSE           reduce using rule 59 (fact_op -> DIV .)
    TRUE            reduce using rule 59 (fact_op -> DIV .)


state 138

    (60) fact_op -> MULT .
    OPEN_PTH        reduce using rule 60 (fact_op -> MULT .)
    SUB             reduce using rule 60 (fact_op -> MULT .)
    SUM             reduce using rule 60 (fact_op -> MULT .)
    CTE_STR         reduce using rule 60 (fact_op -> MULT .)
    CTE_NUM         reduce using rule 60 (fact_op -> MULT .)
    ID              reduce using rule 60 (fact_op -> MULT .)
    FALSE           reduce using rule 60 (fact_op -> MULT .)
    TRUE            reduce using rule 60 (fact_op -> MULT .)


state 139

    (56) factor -> OPEN_PTH expression CLOSE_PTH .
    DIV             reduce using rule 56 (factor -> OPEN_PTH expression CLOSE_PTH .)
    MULT            reduce using rule 56 (factor -> OPEN_PTH expression CLOSE_PTH .)
    SUB             reduce using rule 56 (factor -> OPEN_PTH expression CLOSE_PTH .)
    SUM             reduce using rule 56 (factor -> OPEN_PTH expression CLOSE_PTH .)
    MORE_OR_EQ_THAN reduce using rule 56 (factor -> OPEN_PTH expression CLOSE_PTH .)
    LESS_OR_EQ_THAN reduce using rule 56 (factor -> OPEN_PTH expression CLOSE_PTH .)
    DIFFERENT_TO    reduce using rule 56 (factor -> OPEN_PTH expression CLOSE_PTH .)
    MORE_THAN       reduce using rule 56 (factor -> OPEN_PTH expression CLOSE_PTH .)
    LESS_THAN       reduce using rule 56 (factor -> OPEN_PTH expression CLOSE_PTH .)
    EQUAL_TO        reduce using rule 56 (factor -> OPEN_PTH expression CLOSE_PTH .)
    PEN_DOWN        reduce using rule 56 (factor -> OPEN_PTH expression CLOSE_PTH .)
    PEN_UP          reduce using rule 56 (factor -> OPEN_PTH expression CLOSE_PTH .)
    WHILE           reduce using rule 56 (factor -> OPEN_PTH expression CLOSE_PTH .)
    IF              reduce using rule 56 (factor -> OPEN_PTH expression CLOSE_PTH .)
    WRITE           reduce using rule 56 (factor -> OPEN_PTH expression CLOSE_PTH .)
    READ            reduce using rule 56 (factor -> OPEN_PTH expression CLOSE_PTH .)
    ID              reduce using rule 56 (factor -> OPEN_PTH expression CLOSE_PTH .)
    BOOL            reduce using rule 56 (factor -> OPEN_PTH expression CLOSE_PTH .)
    WORD            reduce using rule 56 (factor -> OPEN_PTH expression CLOSE_PTH .)
    NUMBER          reduce using rule 56 (factor -> OPEN_PTH expression CLOSE_PTH .)
    CENTER          reduce using rule 56 (factor -> OPEN_PTH expression CLOSE_PTH .)
    FORWARD         reduce using rule 56 (factor -> OPEN_PTH expression CLOSE_PTH .)
    RIGHT           reduce using rule 56 (factor -> OPEN_PTH expression CLOSE_PTH .)
    LEFT            reduce using rule 56 (factor -> OPEN_PTH expression CLOSE_PTH .)
    END             reduce using rule 56 (factor -> OPEN_PTH expression CLOSE_PTH .)
    OR              reduce using rule 56 (factor -> OPEN_PTH expression CLOSE_PTH .)
    AND             reduce using rule 56 (factor -> OPEN_PTH expression CLOSE_PTH .)
    ELSE            reduce using rule 56 (factor -> OPEN_PTH expression CLOSE_PTH .)
    COMMA           reduce using rule 56 (factor -> OPEN_PTH expression CLOSE_PTH .)
    CLOSE_PTH       reduce using rule 56 (factor -> OPEN_PTH expression CLOSE_PTH .)
    CLOSE_SQR       reduce using rule 56 (factor -> OPEN_PTH expression CLOSE_PTH .)


state 140

    (70) array -> OPEN_SQR expression . CLOSE_SQR matrix
    CLOSE_SQR       shift and go to state 156


state 141

    (76) if_stmnt -> IF log_exp stmnt else_stmnt .
    PEN_DOWN        reduce using rule 76 (if_stmnt -> IF log_exp stmnt else_stmnt .)
    PEN_UP          reduce using rule 76 (if_stmnt -> IF log_exp stmnt else_stmnt .)
    WHILE           reduce using rule 76 (if_stmnt -> IF log_exp stmnt else_stmnt .)
    IF              reduce using rule 76 (if_stmnt -> IF log_exp stmnt else_stmnt .)
    WRITE           reduce using rule 76 (if_stmnt -> IF log_exp stmnt else_stmnt .)
    READ            reduce using rule 76 (if_stmnt -> IF log_exp stmnt else_stmnt .)
    ID              reduce using rule 76 (if_stmnt -> IF log_exp stmnt else_stmnt .)
    BOOL            reduce using rule 76 (if_stmnt -> IF log_exp stmnt else_stmnt .)
    WORD            reduce using rule 76 (if_stmnt -> IF log_exp stmnt else_stmnt .)
    NUMBER          reduce using rule 76 (if_stmnt -> IF log_exp stmnt else_stmnt .)
    CENTER          reduce using rule 76 (if_stmnt -> IF log_exp stmnt else_stmnt .)
    FORWARD         reduce using rule 76 (if_stmnt -> IF log_exp stmnt else_stmnt .)
    RIGHT           reduce using rule 76 (if_stmnt -> IF log_exp stmnt else_stmnt .)
    LEFT            reduce using rule 76 (if_stmnt -> IF log_exp stmnt else_stmnt .)
    END             reduce using rule 76 (if_stmnt -> IF log_exp stmnt else_stmnt .)
    ELSE            reduce using rule 76 (if_stmnt -> IF log_exp stmnt else_stmnt .)


state 142

    (77) else_stmnt -> END .
    PEN_DOWN        reduce using rule 77 (else_stmnt -> END .)
    PEN_UP          reduce using rule 77 (else_stmnt -> END .)
    WHILE           reduce using rule 77 (else_stmnt -> END .)
    IF              reduce using rule 77 (else_stmnt -> END .)
    WRITE           reduce using rule 77 (else_stmnt -> END .)
    READ            reduce using rule 77 (else_stmnt -> END .)
    ID              reduce using rule 77 (else_stmnt -> END .)
    BOOL            reduce using rule 77 (else_stmnt -> END .)
    WORD            reduce using rule 77 (else_stmnt -> END .)
    NUMBER          reduce using rule 77 (else_stmnt -> END .)
    CENTER          reduce using rule 77 (else_stmnt -> END .)
    FORWARD         reduce using rule 77 (else_stmnt -> END .)
    RIGHT           reduce using rule 77 (else_stmnt -> END .)
    LEFT            reduce using rule 77 (else_stmnt -> END .)
    END             reduce using rule 77 (else_stmnt -> END .)
    ELSE            reduce using rule 77 (else_stmnt -> END .)


state 143

    (78) else_stmnt -> ELSE . stmnt END
    (20) stmnt -> . empty
    (21) stmnt -> . var_declaration_func stmnt
    (22) stmnt -> . pen_func stmnt
    (23) stmnt -> . move_func stmnt
    (24) stmnt -> . while_stmnt stmnt
    (25) stmnt -> . if_stmnt stmnt
    (26) stmnt -> . write stmnt
    (27) stmnt -> . read stmnt
    (28) stmnt -> . func_call stmnt
    (29) stmnt -> . var_assignation stmnt
    (93) empty -> .
    (30) var_declaration_func -> . var_type ID multiple_vars
    (90) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (91) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (85) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (79) while_stmnt -> . WHILE log_exp stmnt END
    (76) if_stmnt -> . IF log_exp stmnt else_stmnt
    (75) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (67) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (63) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (37) var_assignation -> . ID a1 assign expression quads
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (86) move_type -> . CENTER
    (87) move_type -> . FORWARD
    (88) move_type -> . RIGHT
    (89) move_type -> . LEFT
    END             reduce using rule 93 (empty -> .)
    PEN_DOWN        shift and go to state 32
    PEN_UP          shift and go to state 33
    WHILE           shift and go to state 35
    IF              shift and go to state 36
    WRITE           shift and go to state 37
    READ            shift and go to state 38
    ID              shift and go to state 31
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11
    CENTER          shift and go to state 39
    FORWARD         shift and go to state 40
    RIGHT           shift and go to state 41
    LEFT            shift and go to state 42

    stmnt                          shift and go to state 157
    empty                          shift and go to state 20
    var_declaration_func           shift and go to state 21
    pen_func                       shift and go to state 22
    move_func                      shift and go to state 23
    while_stmnt                    shift and go to state 24
    if_stmnt                       shift and go to state 25
    write                          shift and go to state 26
    read                           shift and go to state 27
    func_call                      shift and go to state 28
    var_assignation                shift and go to state 29
    var_type                       shift and go to state 30
    move_type                      shift and go to state 34

state 144

    (75) write -> WRITE OPEN_PTH expression CLOSE_PTH .
    PEN_DOWN        reduce using rule 75 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    PEN_UP          reduce using rule 75 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    WHILE           reduce using rule 75 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    IF              reduce using rule 75 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    WRITE           reduce using rule 75 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    READ            reduce using rule 75 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    ID              reduce using rule 75 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    BOOL            reduce using rule 75 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    WORD            reduce using rule 75 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    NUMBER          reduce using rule 75 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    CENTER          reduce using rule 75 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    FORWARD         reduce using rule 75 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    RIGHT           reduce using rule 75 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    LEFT            reduce using rule 75 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    END             reduce using rule 75 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    ELSE            reduce using rule 75 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)


state 145

    (67) read -> READ OPEN_PTH variable multiple_vars . CLOSE_PTH
    CLOSE_PTH       shift and go to state 158


state 146

    (6) multiple_var -> COMMA ID multiple_var .
    BOOL            reduce using rule 6 (multiple_var -> COMMA ID multiple_var .)
    WORD            reduce using rule 6 (multiple_var -> COMMA ID multiple_var .)
    NUMBER          reduce using rule 6 (multiple_var -> COMMA ID multiple_var .)
    VOID            reduce using rule 6 (multiple_var -> COMMA ID multiple_var .)
    MAIN            reduce using rule 6 (multiple_var -> COMMA ID multiple_var .)


state 147

    (11) func_declaration -> func_type FUNC ID OPEN_PTH parameter . CLOSE_PTH stmnt END
    CLOSE_PTH       shift and go to state 159


state 148

    (16) parameter -> empty .
    CLOSE_PTH       reduce using rule 16 (parameter -> empty .)


state 149

    (17) parameter -> var_type . ID multiple_parameters
    ID              shift and go to state 160


state 150

    (66) multiple_fc_param -> COMMA func_call_param .
    CLOSE_PTH       reduce using rule 66 (multiple_fc_param -> COMMA func_call_param .)


state 151

    (37) var_assignation -> ID a1 assign expression quads .
    PEN_DOWN        reduce using rule 37 (var_assignation -> ID a1 assign expression quads .)
    PEN_UP          reduce using rule 37 (var_assignation -> ID a1 assign expression quads .)
    WHILE           reduce using rule 37 (var_assignation -> ID a1 assign expression quads .)
    IF              reduce using rule 37 (var_assignation -> ID a1 assign expression quads .)
    WRITE           reduce using rule 37 (var_assignation -> ID a1 assign expression quads .)
    READ            reduce using rule 37 (var_assignation -> ID a1 assign expression quads .)
    ID              reduce using rule 37 (var_assignation -> ID a1 assign expression quads .)
    BOOL            reduce using rule 37 (var_assignation -> ID a1 assign expression quads .)
    WORD            reduce using rule 37 (var_assignation -> ID a1 assign expression quads .)
    NUMBER          reduce using rule 37 (var_assignation -> ID a1 assign expression quads .)
    CENTER          reduce using rule 37 (var_assignation -> ID a1 assign expression quads .)
    FORWARD         reduce using rule 37 (var_assignation -> ID a1 assign expression quads .)
    RIGHT           reduce using rule 37 (var_assignation -> ID a1 assign expression quads .)
    LEFT            reduce using rule 37 (var_assignation -> ID a1 assign expression quads .)
    END             reduce using rule 37 (var_assignation -> ID a1 assign expression quads .)
    ELSE            reduce using rule 37 (var_assignation -> ID a1 assign expression quads .)


state 152

    (82) con_expression -> expression rel_op e4 expression . quads
    (98) quads -> .
    OR              reduce using rule 98 (quads -> .)
    AND             reduce using rule 98 (quads -> .)
    PEN_DOWN        reduce using rule 98 (quads -> .)
    PEN_UP          reduce using rule 98 (quads -> .)
    WHILE           reduce using rule 98 (quads -> .)
    IF              reduce using rule 98 (quads -> .)
    WRITE           reduce using rule 98 (quads -> .)
    READ            reduce using rule 98 (quads -> .)
    ID              reduce using rule 98 (quads -> .)
    BOOL            reduce using rule 98 (quads -> .)
    WORD            reduce using rule 98 (quads -> .)
    NUMBER          reduce using rule 98 (quads -> .)
    CENTER          reduce using rule 98 (quads -> .)
    FORWARD         reduce using rule 98 (quads -> .)
    RIGHT           reduce using rule 98 (quads -> .)
    LEFT            reduce using rule 98 (quads -> .)
    END             reduce using rule 98 (quads -> .)
    ELSE            reduce using rule 98 (quads -> .)

    quads                          shift and go to state 161

state 153

    (49) expression -> exp e3 rel_op exp . e3 quads
    (96) e3 -> .
    MORE_OR_EQ_THAN reduce using rule 96 (e3 -> .)
    LESS_OR_EQ_THAN reduce using rule 96 (e3 -> .)
    DIFFERENT_TO    reduce using rule 96 (e3 -> .)
    MORE_THAN       reduce using rule 96 (e3 -> .)
    LESS_THAN       reduce using rule 96 (e3 -> .)
    EQUAL_TO        reduce using rule 96 (e3 -> .)
    PEN_DOWN        reduce using rule 96 (e3 -> .)
    PEN_UP          reduce using rule 96 (e3 -> .)
    WHILE           reduce using rule 96 (e3 -> .)
    IF              reduce using rule 96 (e3 -> .)
    WRITE           reduce using rule 96 (e3 -> .)
    READ            reduce using rule 96 (e3 -> .)
    ID              reduce using rule 96 (e3 -> .)
    BOOL            reduce using rule 96 (e3 -> .)
    WORD            reduce using rule 96 (e3 -> .)
    NUMBER          reduce using rule 96 (e3 -> .)
    CENTER          reduce using rule 96 (e3 -> .)
    FORWARD         reduce using rule 96 (e3 -> .)
    RIGHT           reduce using rule 96 (e3 -> .)
    LEFT            reduce using rule 96 (e3 -> .)
    END             reduce using rule 96 (e3 -> .)
    OR              reduce using rule 96 (e3 -> .)
    AND             reduce using rule 96 (e3 -> .)
    ELSE            reduce using rule 96 (e3 -> .)
    COMMA           reduce using rule 96 (e3 -> .)
    CLOSE_PTH       reduce using rule 96 (e3 -> .)
    CLOSE_SQR       reduce using rule 96 (e3 -> .)

    e3                             shift and go to state 162

state 154

    (51) exp -> termino e1 term_op e2 . termino e1 quads1
    (52) termino -> . factor
    (53) termino -> . factor e1 fact_op factor e1 quads
    (54) factor -> . term_op var_cte
    (55) factor -> . var_cte
    (56) factor -> . OPEN_PTH expression CLOSE_PTH
    (57) term_op -> . SUB
    (58) term_op -> . SUM
    (41) var_cte -> . func_call
    (42) var_cte -> . cte_bool
    (43) var_cte -> . CTE_STR
    (44) var_cte -> . CTE_NUM
    (45) var_cte -> . variable
    (63) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (46) cte_bool -> . FALSE
    (47) cte_bool -> . TRUE
    (68) variable -> . ID array
    OPEN_PTH        shift and go to state 70
    SUB             shift and go to state 71
    SUM             shift and go to state 72
    CTE_STR         shift and go to state 75
    CTE_NUM         shift and go to state 76
    ID              shift and go to state 78
    FALSE           shift and go to state 79
    TRUE            shift and go to state 80

    termino                        shift and go to state 163
    term_op                        shift and go to state 67
    factor                         shift and go to state 68
    var_cte                        shift and go to state 69
    func_call                      shift and go to state 73
    cte_bool                       shift and go to state 74
    variable                       shift and go to state 77

state 155

    (53) termino -> factor e1 fact_op factor . e1 quads
    (94) e1 -> .
    SUB             reduce using rule 94 (e1 -> .)
    SUM             reduce using rule 94 (e1 -> .)
    MORE_OR_EQ_THAN reduce using rule 94 (e1 -> .)
    LESS_OR_EQ_THAN reduce using rule 94 (e1 -> .)
    DIFFERENT_TO    reduce using rule 94 (e1 -> .)
    MORE_THAN       reduce using rule 94 (e1 -> .)
    LESS_THAN       reduce using rule 94 (e1 -> .)
    EQUAL_TO        reduce using rule 94 (e1 -> .)
    PEN_DOWN        reduce using rule 94 (e1 -> .)
    PEN_UP          reduce using rule 94 (e1 -> .)
    WHILE           reduce using rule 94 (e1 -> .)
    IF              reduce using rule 94 (e1 -> .)
    WRITE           reduce using rule 94 (e1 -> .)
    READ            reduce using rule 94 (e1 -> .)
    ID              reduce using rule 94 (e1 -> .)
    BOOL            reduce using rule 94 (e1 -> .)
    WORD            reduce using rule 94 (e1 -> .)
    NUMBER          reduce using rule 94 (e1 -> .)
    CENTER          reduce using rule 94 (e1 -> .)
    FORWARD         reduce using rule 94 (e1 -> .)
    RIGHT           reduce using rule 94 (e1 -> .)
    LEFT            reduce using rule 94 (e1 -> .)
    END             reduce using rule 94 (e1 -> .)
    OR              reduce using rule 94 (e1 -> .)
    AND             reduce using rule 94 (e1 -> .)
    ELSE            reduce using rule 94 (e1 -> .)
    COMMA           reduce using rule 94 (e1 -> .)
    CLOSE_PTH       reduce using rule 94 (e1 -> .)
    CLOSE_SQR       reduce using rule 94 (e1 -> .)

    e1                             shift and go to state 164

state 156

    (70) array -> OPEN_SQR expression CLOSE_SQR . matrix
    (71) matrix -> . empty
    (72) matrix -> . OPEN_SQR expression CLOSE_SQR
    (93) empty -> .
    OPEN_SQR        shift and go to state 165
    DIV             reduce using rule 93 (empty -> .)
    MULT            reduce using rule 93 (empty -> .)
    SUB             reduce using rule 93 (empty -> .)
    SUM             reduce using rule 93 (empty -> .)
    MORE_OR_EQ_THAN reduce using rule 93 (empty -> .)
    LESS_OR_EQ_THAN reduce using rule 93 (empty -> .)
    DIFFERENT_TO    reduce using rule 93 (empty -> .)
    MORE_THAN       reduce using rule 93 (empty -> .)
    LESS_THAN       reduce using rule 93 (empty -> .)
    EQUAL_TO        reduce using rule 93 (empty -> .)
    PEN_DOWN        reduce using rule 93 (empty -> .)
    PEN_UP          reduce using rule 93 (empty -> .)
    WHILE           reduce using rule 93 (empty -> .)
    IF              reduce using rule 93 (empty -> .)
    WRITE           reduce using rule 93 (empty -> .)
    READ            reduce using rule 93 (empty -> .)
    ID              reduce using rule 93 (empty -> .)
    BOOL            reduce using rule 93 (empty -> .)
    WORD            reduce using rule 93 (empty -> .)
    NUMBER          reduce using rule 93 (empty -> .)
    CENTER          reduce using rule 93 (empty -> .)
    FORWARD         reduce using rule 93 (empty -> .)
    RIGHT           reduce using rule 93 (empty -> .)
    LEFT            reduce using rule 93 (empty -> .)
    END             reduce using rule 93 (empty -> .)
    OR              reduce using rule 93 (empty -> .)
    AND             reduce using rule 93 (empty -> .)
    ELSE            reduce using rule 93 (empty -> .)
    COMMA           reduce using rule 93 (empty -> .)
    CLOSE_PTH       reduce using rule 93 (empty -> .)
    CLOSE_SQR       reduce using rule 93 (empty -> .)

    matrix                         shift and go to state 166
    empty                          shift and go to state 167

state 157

    (78) else_stmnt -> ELSE stmnt . END
    END             shift and go to state 168


state 158

    (67) read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .
    PEN_DOWN        reduce using rule 67 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    PEN_UP          reduce using rule 67 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    WHILE           reduce using rule 67 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    IF              reduce using rule 67 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    WRITE           reduce using rule 67 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    READ            reduce using rule 67 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    ID              reduce using rule 67 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    BOOL            reduce using rule 67 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    WORD            reduce using rule 67 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    NUMBER          reduce using rule 67 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    CENTER          reduce using rule 67 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    FORWARD         reduce using rule 67 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    RIGHT           reduce using rule 67 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    LEFT            reduce using rule 67 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    END             reduce using rule 67 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    ELSE            reduce using rule 67 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)


state 159

    (11) func_declaration -> func_type FUNC ID OPEN_PTH parameter CLOSE_PTH . stmnt END
    (20) stmnt -> . empty
    (21) stmnt -> . var_declaration_func stmnt
    (22) stmnt -> . pen_func stmnt
    (23) stmnt -> . move_func stmnt
    (24) stmnt -> . while_stmnt stmnt
    (25) stmnt -> . if_stmnt stmnt
    (26) stmnt -> . write stmnt
    (27) stmnt -> . read stmnt
    (28) stmnt -> . func_call stmnt
    (29) stmnt -> . var_assignation stmnt
    (93) empty -> .
    (30) var_declaration_func -> . var_type ID multiple_vars
    (90) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (91) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (85) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (79) while_stmnt -> . WHILE log_exp stmnt END
    (76) if_stmnt -> . IF log_exp stmnt else_stmnt
    (75) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (67) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (63) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (37) var_assignation -> . ID a1 assign expression quads
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (86) move_type -> . CENTER
    (87) move_type -> . FORWARD
    (88) move_type -> . RIGHT
    (89) move_type -> . LEFT
    END             reduce using rule 93 (empty -> .)
    PEN_DOWN        shift and go to state 32
    PEN_UP          shift and go to state 33
    WHILE           shift and go to state 35
    IF              shift and go to state 36
    WRITE           shift and go to state 37
    READ            shift and go to state 38
    ID              shift and go to state 31
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11
    CENTER          shift and go to state 39
    FORWARD         shift and go to state 40
    RIGHT           shift and go to state 41
    LEFT            shift and go to state 42

    stmnt                          shift and go to state 169
    empty                          shift and go to state 20
    var_declaration_func           shift and go to state 21
    pen_func                       shift and go to state 22
    move_func                      shift and go to state 23
    while_stmnt                    shift and go to state 24
    if_stmnt                       shift and go to state 25
    write                          shift and go to state 26
    read                           shift and go to state 27
    func_call                      shift and go to state 28
    var_assignation                shift and go to state 29
    var_type                       shift and go to state 30
    move_type                      shift and go to state 34

state 160

    (17) parameter -> var_type ID . multiple_parameters
    (18) multiple_parameters -> . empty
    (19) multiple_parameters -> . COMMA parameter
    (93) empty -> .
    COMMA           shift and go to state 172
    CLOSE_PTH       reduce using rule 93 (empty -> .)

    multiple_parameters            shift and go to state 170
    empty                          shift and go to state 171

state 161

    (82) con_expression -> expression rel_op e4 expression quads .
    OR              reduce using rule 82 (con_expression -> expression rel_op e4 expression quads .)
    AND             reduce using rule 82 (con_expression -> expression rel_op e4 expression quads .)
    PEN_DOWN        reduce using rule 82 (con_expression -> expression rel_op e4 expression quads .)
    PEN_UP          reduce using rule 82 (con_expression -> expression rel_op e4 expression quads .)
    WHILE           reduce using rule 82 (con_expression -> expression rel_op e4 expression quads .)
    IF              reduce using rule 82 (con_expression -> expression rel_op e4 expression quads .)
    WRITE           reduce using rule 82 (con_expression -> expression rel_op e4 expression quads .)
    READ            reduce using rule 82 (con_expression -> expression rel_op e4 expression quads .)
    ID              reduce using rule 82 (con_expression -> expression rel_op e4 expression quads .)
    BOOL            reduce using rule 82 (con_expression -> expression rel_op e4 expression quads .)
    WORD            reduce using rule 82 (con_expression -> expression rel_op e4 expression quads .)
    NUMBER          reduce using rule 82 (con_expression -> expression rel_op e4 expression quads .)
    CENTER          reduce using rule 82 (con_expression -> expression rel_op e4 expression quads .)
    FORWARD         reduce using rule 82 (con_expression -> expression rel_op e4 expression quads .)
    RIGHT           reduce using rule 82 (con_expression -> expression rel_op e4 expression quads .)
    LEFT            reduce using rule 82 (con_expression -> expression rel_op e4 expression quads .)
    END             reduce using rule 82 (con_expression -> expression rel_op e4 expression quads .)
    ELSE            reduce using rule 82 (con_expression -> expression rel_op e4 expression quads .)


state 162

    (49) expression -> exp e3 rel_op exp e3 . quads
    (98) quads -> .
    MORE_OR_EQ_THAN reduce using rule 98 (quads -> .)
    LESS_OR_EQ_THAN reduce using rule 98 (quads -> .)
    DIFFERENT_TO    reduce using rule 98 (quads -> .)
    MORE_THAN       reduce using rule 98 (quads -> .)
    LESS_THAN       reduce using rule 98 (quads -> .)
    EQUAL_TO        reduce using rule 98 (quads -> .)
    PEN_DOWN        reduce using rule 98 (quads -> .)
    PEN_UP          reduce using rule 98 (quads -> .)
    WHILE           reduce using rule 98 (quads -> .)
    IF              reduce using rule 98 (quads -> .)
    WRITE           reduce using rule 98 (quads -> .)
    READ            reduce using rule 98 (quads -> .)
    ID              reduce using rule 98 (quads -> .)
    BOOL            reduce using rule 98 (quads -> .)
    WORD            reduce using rule 98 (quads -> .)
    NUMBER          reduce using rule 98 (quads -> .)
    CENTER          reduce using rule 98 (quads -> .)
    FORWARD         reduce using rule 98 (quads -> .)
    RIGHT           reduce using rule 98 (quads -> .)
    LEFT            reduce using rule 98 (quads -> .)
    END             reduce using rule 98 (quads -> .)
    OR              reduce using rule 98 (quads -> .)
    AND             reduce using rule 98 (quads -> .)
    ELSE            reduce using rule 98 (quads -> .)
    COMMA           reduce using rule 98 (quads -> .)
    CLOSE_PTH       reduce using rule 98 (quads -> .)
    CLOSE_SQR       reduce using rule 98 (quads -> .)

    quads                          shift and go to state 173

state 163

    (51) exp -> termino e1 term_op e2 termino . e1 quads1
    (94) e1 -> .
    MORE_OR_EQ_THAN reduce using rule 94 (e1 -> .)
    LESS_OR_EQ_THAN reduce using rule 94 (e1 -> .)
    DIFFERENT_TO    reduce using rule 94 (e1 -> .)
    MORE_THAN       reduce using rule 94 (e1 -> .)
    LESS_THAN       reduce using rule 94 (e1 -> .)
    EQUAL_TO        reduce using rule 94 (e1 -> .)
    PEN_DOWN        reduce using rule 94 (e1 -> .)
    PEN_UP          reduce using rule 94 (e1 -> .)
    WHILE           reduce using rule 94 (e1 -> .)
    IF              reduce using rule 94 (e1 -> .)
    WRITE           reduce using rule 94 (e1 -> .)
    READ            reduce using rule 94 (e1 -> .)
    ID              reduce using rule 94 (e1 -> .)
    BOOL            reduce using rule 94 (e1 -> .)
    WORD            reduce using rule 94 (e1 -> .)
    NUMBER          reduce using rule 94 (e1 -> .)
    CENTER          reduce using rule 94 (e1 -> .)
    FORWARD         reduce using rule 94 (e1 -> .)
    RIGHT           reduce using rule 94 (e1 -> .)
    LEFT            reduce using rule 94 (e1 -> .)
    END             reduce using rule 94 (e1 -> .)
    OR              reduce using rule 94 (e1 -> .)
    AND             reduce using rule 94 (e1 -> .)
    ELSE            reduce using rule 94 (e1 -> .)
    COMMA           reduce using rule 94 (e1 -> .)
    CLOSE_PTH       reduce using rule 94 (e1 -> .)
    CLOSE_SQR       reduce using rule 94 (e1 -> .)

    e1                             shift and go to state 174

state 164

    (53) termino -> factor e1 fact_op factor e1 . quads
    (98) quads -> .
    SUB             reduce using rule 98 (quads -> .)
    SUM             reduce using rule 98 (quads -> .)
    MORE_OR_EQ_THAN reduce using rule 98 (quads -> .)
    LESS_OR_EQ_THAN reduce using rule 98 (quads -> .)
    DIFFERENT_TO    reduce using rule 98 (quads -> .)
    MORE_THAN       reduce using rule 98 (quads -> .)
    LESS_THAN       reduce using rule 98 (quads -> .)
    EQUAL_TO        reduce using rule 98 (quads -> .)
    PEN_DOWN        reduce using rule 98 (quads -> .)
    PEN_UP          reduce using rule 98 (quads -> .)
    WHILE           reduce using rule 98 (quads -> .)
    IF              reduce using rule 98 (quads -> .)
    WRITE           reduce using rule 98 (quads -> .)
    READ            reduce using rule 98 (quads -> .)
    ID              reduce using rule 98 (quads -> .)
    BOOL            reduce using rule 98 (quads -> .)
    WORD            reduce using rule 98 (quads -> .)
    NUMBER          reduce using rule 98 (quads -> .)
    CENTER          reduce using rule 98 (quads -> .)
    FORWARD         reduce using rule 98 (quads -> .)
    RIGHT           reduce using rule 98 (quads -> .)
    LEFT            reduce using rule 98 (quads -> .)
    END             reduce using rule 98 (quads -> .)
    OR              reduce using rule 98 (quads -> .)
    AND             reduce using rule 98 (quads -> .)
    ELSE            reduce using rule 98 (quads -> .)
    COMMA           reduce using rule 98 (quads -> .)
    CLOSE_PTH       reduce using rule 98 (quads -> .)
    CLOSE_SQR       reduce using rule 98 (quads -> .)

    quads                          shift and go to state 175

state 165

    (72) matrix -> OPEN_SQR . expression CLOSE_SQR
    (48) expression -> . exp
    (49) expression -> . exp e3 rel_op exp e3 quads
    (50) exp -> . termino
    (51) exp -> . termino e1 term_op e2 termino e1 quads1
    (52) termino -> . factor
    (53) termino -> . factor e1 fact_op factor e1 quads
    (54) factor -> . term_op var_cte
    (55) factor -> . var_cte
    (56) factor -> . OPEN_PTH expression CLOSE_PTH
    (57) term_op -> . SUB
    (58) term_op -> . SUM
    (41) var_cte -> . func_call
    (42) var_cte -> . cte_bool
    (43) var_cte -> . CTE_STR
    (44) var_cte -> . CTE_NUM
    (45) var_cte -> . variable
    (63) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (46) cte_bool -> . FALSE
    (47) cte_bool -> . TRUE
    (68) variable -> . ID array
    OPEN_PTH        shift and go to state 70
    SUB             shift and go to state 71
    SUM             shift and go to state 72
    CTE_STR         shift and go to state 75
    CTE_NUM         shift and go to state 76
    ID              shift and go to state 78
    FALSE           shift and go to state 79
    TRUE            shift and go to state 80

    expression                     shift and go to state 176
    exp                            shift and go to state 65
    termino                        shift and go to state 66
    term_op                        shift and go to state 67
    factor                         shift and go to state 68
    var_cte                        shift and go to state 69
    func_call                      shift and go to state 73
    cte_bool                       shift and go to state 74
    variable                       shift and go to state 77

state 166

    (70) array -> OPEN_SQR expression CLOSE_SQR matrix .
    DIV             reduce using rule 70 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    MULT            reduce using rule 70 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    SUB             reduce using rule 70 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    SUM             reduce using rule 70 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    MORE_OR_EQ_THAN reduce using rule 70 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    LESS_OR_EQ_THAN reduce using rule 70 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    DIFFERENT_TO    reduce using rule 70 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    MORE_THAN       reduce using rule 70 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    LESS_THAN       reduce using rule 70 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    EQUAL_TO        reduce using rule 70 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    PEN_DOWN        reduce using rule 70 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    PEN_UP          reduce using rule 70 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    WHILE           reduce using rule 70 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    IF              reduce using rule 70 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    WRITE           reduce using rule 70 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    READ            reduce using rule 70 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    ID              reduce using rule 70 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    BOOL            reduce using rule 70 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    WORD            reduce using rule 70 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    NUMBER          reduce using rule 70 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    CENTER          reduce using rule 70 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    FORWARD         reduce using rule 70 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    RIGHT           reduce using rule 70 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    LEFT            reduce using rule 70 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    END             reduce using rule 70 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    OR              reduce using rule 70 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    AND             reduce using rule 70 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    ELSE            reduce using rule 70 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    COMMA           reduce using rule 70 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    CLOSE_PTH       reduce using rule 70 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    CLOSE_SQR       reduce using rule 70 (array -> OPEN_SQR expression CLOSE_SQR matrix .)


state 167

    (71) matrix -> empty .
    DIV             reduce using rule 71 (matrix -> empty .)
    MULT            reduce using rule 71 (matrix -> empty .)
    SUB             reduce using rule 71 (matrix -> empty .)
    SUM             reduce using rule 71 (matrix -> empty .)
    MORE_OR_EQ_THAN reduce using rule 71 (matrix -> empty .)
    LESS_OR_EQ_THAN reduce using rule 71 (matrix -> empty .)
    DIFFERENT_TO    reduce using rule 71 (matrix -> empty .)
    MORE_THAN       reduce using rule 71 (matrix -> empty .)
    LESS_THAN       reduce using rule 71 (matrix -> empty .)
    EQUAL_TO        reduce using rule 71 (matrix -> empty .)
    PEN_DOWN        reduce using rule 71 (matrix -> empty .)
    PEN_UP          reduce using rule 71 (matrix -> empty .)
    WHILE           reduce using rule 71 (matrix -> empty .)
    IF              reduce using rule 71 (matrix -> empty .)
    WRITE           reduce using rule 71 (matrix -> empty .)
    READ            reduce using rule 71 (matrix -> empty .)
    ID              reduce using rule 71 (matrix -> empty .)
    BOOL            reduce using rule 71 (matrix -> empty .)
    WORD            reduce using rule 71 (matrix -> empty .)
    NUMBER          reduce using rule 71 (matrix -> empty .)
    CENTER          reduce using rule 71 (matrix -> empty .)
    FORWARD         reduce using rule 71 (matrix -> empty .)
    RIGHT           reduce using rule 71 (matrix -> empty .)
    LEFT            reduce using rule 71 (matrix -> empty .)
    END             reduce using rule 71 (matrix -> empty .)
    OR              reduce using rule 71 (matrix -> empty .)
    AND             reduce using rule 71 (matrix -> empty .)
    ELSE            reduce using rule 71 (matrix -> empty .)
    COMMA           reduce using rule 71 (matrix -> empty .)
    CLOSE_PTH       reduce using rule 71 (matrix -> empty .)
    CLOSE_SQR       reduce using rule 71 (matrix -> empty .)


state 168

    (78) else_stmnt -> ELSE stmnt END .
    PEN_DOWN        reduce using rule 78 (else_stmnt -> ELSE stmnt END .)
    PEN_UP          reduce using rule 78 (else_stmnt -> ELSE stmnt END .)
    WHILE           reduce using rule 78 (else_stmnt -> ELSE stmnt END .)
    IF              reduce using rule 78 (else_stmnt -> ELSE stmnt END .)
    WRITE           reduce using rule 78 (else_stmnt -> ELSE stmnt END .)
    READ            reduce using rule 78 (else_stmnt -> ELSE stmnt END .)
    ID              reduce using rule 78 (else_stmnt -> ELSE stmnt END .)
    BOOL            reduce using rule 78 (else_stmnt -> ELSE stmnt END .)
    WORD            reduce using rule 78 (else_stmnt -> ELSE stmnt END .)
    NUMBER          reduce using rule 78 (else_stmnt -> ELSE stmnt END .)
    CENTER          reduce using rule 78 (else_stmnt -> ELSE stmnt END .)
    FORWARD         reduce using rule 78 (else_stmnt -> ELSE stmnt END .)
    RIGHT           reduce using rule 78 (else_stmnt -> ELSE stmnt END .)
    LEFT            reduce using rule 78 (else_stmnt -> ELSE stmnt END .)
    END             reduce using rule 78 (else_stmnt -> ELSE stmnt END .)
    ELSE            reduce using rule 78 (else_stmnt -> ELSE stmnt END .)


state 169

    (11) func_declaration -> func_type FUNC ID OPEN_PTH parameter CLOSE_PTH stmnt . END
    END             shift and go to state 177


state 170

    (17) parameter -> var_type ID multiple_parameters .
    CLOSE_PTH       reduce using rule 17 (parameter -> var_type ID multiple_parameters .)


state 171

    (18) multiple_parameters -> empty .
    CLOSE_PTH       reduce using rule 18 (multiple_parameters -> empty .)


state 172

    (19) multiple_parameters -> COMMA . parameter
    (16) parameter -> . empty
    (17) parameter -> . var_type ID multiple_parameters
    (93) empty -> .
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    CLOSE_PTH       reduce using rule 93 (empty -> .)
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11

    parameter                      shift and go to state 178
    empty                          shift and go to state 148
    var_type                       shift and go to state 149

state 173

    (49) expression -> exp e3 rel_op exp e3 quads .
    MORE_OR_EQ_THAN reduce using rule 49 (expression -> exp e3 rel_op exp e3 quads .)
    LESS_OR_EQ_THAN reduce using rule 49 (expression -> exp e3 rel_op exp e3 quads .)
    DIFFERENT_TO    reduce using rule 49 (expression -> exp e3 rel_op exp e3 quads .)
    MORE_THAN       reduce using rule 49 (expression -> exp e3 rel_op exp e3 quads .)
    LESS_THAN       reduce using rule 49 (expression -> exp e3 rel_op exp e3 quads .)
    EQUAL_TO        reduce using rule 49 (expression -> exp e3 rel_op exp e3 quads .)
    PEN_DOWN        reduce using rule 49 (expression -> exp e3 rel_op exp e3 quads .)
    PEN_UP          reduce using rule 49 (expression -> exp e3 rel_op exp e3 quads .)
    WHILE           reduce using rule 49 (expression -> exp e3 rel_op exp e3 quads .)
    IF              reduce using rule 49 (expression -> exp e3 rel_op exp e3 quads .)
    WRITE           reduce using rule 49 (expression -> exp e3 rel_op exp e3 quads .)
    READ            reduce using rule 49 (expression -> exp e3 rel_op exp e3 quads .)
    ID              reduce using rule 49 (expression -> exp e3 rel_op exp e3 quads .)
    BOOL            reduce using rule 49 (expression -> exp e3 rel_op exp e3 quads .)
    WORD            reduce using rule 49 (expression -> exp e3 rel_op exp e3 quads .)
    NUMBER          reduce using rule 49 (expression -> exp e3 rel_op exp e3 quads .)
    CENTER          reduce using rule 49 (expression -> exp e3 rel_op exp e3 quads .)
    FORWARD         reduce using rule 49 (expression -> exp e3 rel_op exp e3 quads .)
    RIGHT           reduce using rule 49 (expression -> exp e3 rel_op exp e3 quads .)
    LEFT            reduce using rule 49 (expression -> exp e3 rel_op exp e3 quads .)
    END             reduce using rule 49 (expression -> exp e3 rel_op exp e3 quads .)
    OR              reduce using rule 49 (expression -> exp e3 rel_op exp e3 quads .)
    AND             reduce using rule 49 (expression -> exp e3 rel_op exp e3 quads .)
    ELSE            reduce using rule 49 (expression -> exp e3 rel_op exp e3 quads .)
    COMMA           reduce using rule 49 (expression -> exp e3 rel_op exp e3 quads .)
    CLOSE_PTH       reduce using rule 49 (expression -> exp e3 rel_op exp e3 quads .)
    CLOSE_SQR       reduce using rule 49 (expression -> exp e3 rel_op exp e3 quads .)


state 174

    (51) exp -> termino e1 term_op e2 termino e1 . quads1
    (99) quads1 -> .
    MORE_OR_EQ_THAN reduce using rule 99 (quads1 -> .)
    LESS_OR_EQ_THAN reduce using rule 99 (quads1 -> .)
    DIFFERENT_TO    reduce using rule 99 (quads1 -> .)
    MORE_THAN       reduce using rule 99 (quads1 -> .)
    LESS_THAN       reduce using rule 99 (quads1 -> .)
    EQUAL_TO        reduce using rule 99 (quads1 -> .)
    PEN_DOWN        reduce using rule 99 (quads1 -> .)
    PEN_UP          reduce using rule 99 (quads1 -> .)
    WHILE           reduce using rule 99 (quads1 -> .)
    IF              reduce using rule 99 (quads1 -> .)
    WRITE           reduce using rule 99 (quads1 -> .)
    READ            reduce using rule 99 (quads1 -> .)
    ID              reduce using rule 99 (quads1 -> .)
    BOOL            reduce using rule 99 (quads1 -> .)
    WORD            reduce using rule 99 (quads1 -> .)
    NUMBER          reduce using rule 99 (quads1 -> .)
    CENTER          reduce using rule 99 (quads1 -> .)
    FORWARD         reduce using rule 99 (quads1 -> .)
    RIGHT           reduce using rule 99 (quads1 -> .)
    LEFT            reduce using rule 99 (quads1 -> .)
    END             reduce using rule 99 (quads1 -> .)
    OR              reduce using rule 99 (quads1 -> .)
    AND             reduce using rule 99 (quads1 -> .)
    ELSE            reduce using rule 99 (quads1 -> .)
    COMMA           reduce using rule 99 (quads1 -> .)
    CLOSE_PTH       reduce using rule 99 (quads1 -> .)
    CLOSE_SQR       reduce using rule 99 (quads1 -> .)

    quads1                         shift and go to state 179

state 175

    (53) termino -> factor e1 fact_op factor e1 quads .
    SUB             reduce using rule 53 (termino -> factor e1 fact_op factor e1 quads .)
    SUM             reduce using rule 53 (termino -> factor e1 fact_op factor e1 quads .)
    MORE_OR_EQ_THAN reduce using rule 53 (termino -> factor e1 fact_op factor e1 quads .)
    LESS_OR_EQ_THAN reduce using rule 53 (termino -> factor e1 fact_op factor e1 quads .)
    DIFFERENT_TO    reduce using rule 53 (termino -> factor e1 fact_op factor e1 quads .)
    MORE_THAN       reduce using rule 53 (termino -> factor e1 fact_op factor e1 quads .)
    LESS_THAN       reduce using rule 53 (termino -> factor e1 fact_op factor e1 quads .)
    EQUAL_TO        reduce using rule 53 (termino -> factor e1 fact_op factor e1 quads .)
    PEN_DOWN        reduce using rule 53 (termino -> factor e1 fact_op factor e1 quads .)
    PEN_UP          reduce using rule 53 (termino -> factor e1 fact_op factor e1 quads .)
    WHILE           reduce using rule 53 (termino -> factor e1 fact_op factor e1 quads .)
    IF              reduce using rule 53 (termino -> factor e1 fact_op factor e1 quads .)
    WRITE           reduce using rule 53 (termino -> factor e1 fact_op factor e1 quads .)
    READ            reduce using rule 53 (termino -> factor e1 fact_op factor e1 quads .)
    ID              reduce using rule 53 (termino -> factor e1 fact_op factor e1 quads .)
    BOOL            reduce using rule 53 (termino -> factor e1 fact_op factor e1 quads .)
    WORD            reduce using rule 53 (termino -> factor e1 fact_op factor e1 quads .)
    NUMBER          reduce using rule 53 (termino -> factor e1 fact_op factor e1 quads .)
    CENTER          reduce using rule 53 (termino -> factor e1 fact_op factor e1 quads .)
    FORWARD         reduce using rule 53 (termino -> factor e1 fact_op factor e1 quads .)
    RIGHT           reduce using rule 53 (termino -> factor e1 fact_op factor e1 quads .)
    LEFT            reduce using rule 53 (termino -> factor e1 fact_op factor e1 quads .)
    END             reduce using rule 53 (termino -> factor e1 fact_op factor e1 quads .)
    OR              reduce using rule 53 (termino -> factor e1 fact_op factor e1 quads .)
    AND             reduce using rule 53 (termino -> factor e1 fact_op factor e1 quads .)
    ELSE            reduce using rule 53 (termino -> factor e1 fact_op factor e1 quads .)
    COMMA           reduce using rule 53 (termino -> factor e1 fact_op factor e1 quads .)
    CLOSE_PTH       reduce using rule 53 (termino -> factor e1 fact_op factor e1 quads .)
    CLOSE_SQR       reduce using rule 53 (termino -> factor e1 fact_op factor e1 quads .)


state 176

    (72) matrix -> OPEN_SQR expression . CLOSE_SQR
    CLOSE_SQR       shift and go to state 180


state 177

    (11) func_declaration -> func_type FUNC ID OPEN_PTH parameter CLOSE_PTH stmnt END .
    MAIN            reduce using rule 11 (func_declaration -> func_type FUNC ID OPEN_PTH parameter CLOSE_PTH stmnt END .)


state 178

    (19) multiple_parameters -> COMMA parameter .
    CLOSE_PTH       reduce using rule 19 (multiple_parameters -> COMMA parameter .)


state 179

    (51) exp -> termino e1 term_op e2 termino e1 quads1 .
    MORE_OR_EQ_THAN reduce using rule 51 (exp -> termino e1 term_op e2 termino e1 quads1 .)
    LESS_OR_EQ_THAN reduce using rule 51 (exp -> termino e1 term_op e2 termino e1 quads1 .)
    DIFFERENT_TO    reduce using rule 51 (exp -> termino e1 term_op e2 termino e1 quads1 .)
    MORE_THAN       reduce using rule 51 (exp -> termino e1 term_op e2 termino e1 quads1 .)
    LESS_THAN       reduce using rule 51 (exp -> termino e1 term_op e2 termino e1 quads1 .)
    EQUAL_TO        reduce using rule 51 (exp -> termino e1 term_op e2 termino e1 quads1 .)
    PEN_DOWN        reduce using rule 51 (exp -> termino e1 term_op e2 termino e1 quads1 .)
    PEN_UP          reduce using rule 51 (exp -> termino e1 term_op e2 termino e1 quads1 .)
    WHILE           reduce using rule 51 (exp -> termino e1 term_op e2 termino e1 quads1 .)
    IF              reduce using rule 51 (exp -> termino e1 term_op e2 termino e1 quads1 .)
    WRITE           reduce using rule 51 (exp -> termino e1 term_op e2 termino e1 quads1 .)
    READ            reduce using rule 51 (exp -> termino e1 term_op e2 termino e1 quads1 .)
    ID              reduce using rule 51 (exp -> termino e1 term_op e2 termino e1 quads1 .)
    BOOL            reduce using rule 51 (exp -> termino e1 term_op e2 termino e1 quads1 .)
    WORD            reduce using rule 51 (exp -> termino e1 term_op e2 termino e1 quads1 .)
    NUMBER          reduce using rule 51 (exp -> termino e1 term_op e2 termino e1 quads1 .)
    CENTER          reduce using rule 51 (exp -> termino e1 term_op e2 termino e1 quads1 .)
    FORWARD         reduce using rule 51 (exp -> termino e1 term_op e2 termino e1 quads1 .)
    RIGHT           reduce using rule 51 (exp -> termino e1 term_op e2 termino e1 quads1 .)
    LEFT            reduce using rule 51 (exp -> termino e1 term_op e2 termino e1 quads1 .)
    END             reduce using rule 51 (exp -> termino e1 term_op e2 termino e1 quads1 .)
    OR              reduce using rule 51 (exp -> termino e1 term_op e2 termino e1 quads1 .)
    AND             reduce using rule 51 (exp -> termino e1 term_op e2 termino e1 quads1 .)
    ELSE            reduce using rule 51 (exp -> termino e1 term_op e2 termino e1 quads1 .)
    COMMA           reduce using rule 51 (exp -> termino e1 term_op e2 termino e1 quads1 .)
    CLOSE_PTH       reduce using rule 51 (exp -> termino e1 term_op e2 termino e1 quads1 .)
    CLOSE_SQR       reduce using rule 51 (exp -> termino e1 term_op e2 termino e1 quads1 .)


state 180

    (72) matrix -> OPEN_SQR expression CLOSE_SQR .
    DIV             reduce using rule 72 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    MULT            reduce using rule 72 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    SUB             reduce using rule 72 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    SUM             reduce using rule 72 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    MORE_OR_EQ_THAN reduce using rule 72 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    LESS_OR_EQ_THAN reduce using rule 72 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    DIFFERENT_TO    reduce using rule 72 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    MORE_THAN       reduce using rule 72 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    LESS_THAN       reduce using rule 72 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    EQUAL_TO        reduce using rule 72 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    PEN_DOWN        reduce using rule 72 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    PEN_UP          reduce using rule 72 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    WHILE           reduce using rule 72 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    IF              reduce using rule 72 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    WRITE           reduce using rule 72 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    READ            reduce using rule 72 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    ID              reduce using rule 72 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    BOOL            reduce using rule 72 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    WORD            reduce using rule 72 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    NUMBER          reduce using rule 72 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    CENTER          reduce using rule 72 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    FORWARD         reduce using rule 72 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    RIGHT           reduce using rule 72 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    LEFT            reduce using rule 72 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    END             reduce using rule 72 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    OR              reduce using rule 72 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    AND             reduce using rule 72 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    ELSE            reduce using rule 72 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    COMMA           reduce using rule 72 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    CLOSE_PTH       reduce using rule 72 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    CLOSE_SQR       reduce using rule 72 (matrix -> OPEN_SQR expression CLOSE_SQR .)


Conflicts:

shift/reduce conflict for OR in state 64 resolved as shift
shift/reduce conflict for AND in state 64 resolved as shift
reduce/reduce conflict in state 65 resolved using rule expression -> exp
rejected rule (e3 -> <empty>) in state 65
reduce/reduce conflict in state 132 resolved using rule con_expression -> con_expression
rejected rule (log_exp -> con_expression log_op con_expression) in state 132
Rule (log_exp -> con_expression log_op con_expression) is never reduced