Grammar:

Rule 0     S' -> program
Rule 1     program -> DRAWING ID declaration
Rule 2     declaration -> var_declaration func_declaration main
Rule 3     var_declaration -> var_type ID multiple_var
Rule 4     multiple_var -> empty
Rule 5     multiple_var -> COMMA ID multiple_var
Rule 6     var_type -> BOOL
Rule 7     var_type -> WORD
Rule 8     var_type -> NUMBER
Rule 9     func_declaration -> empty
Rule 10    func_declaration -> func_type FUNC ID OPEN_PTH parameter CLOSE_PTH stmnt END
Rule 11    func_type -> BOOL
Rule 12    func_type -> WORD
Rule 13    func_type -> NUMBER
Rule 14    func_type -> VOID
Rule 15    parameter -> empty
Rule 16    parameter -> var_type ID multiple_parameters
Rule 17    multiple_parameters -> empty
Rule 18    multiple_parameters -> COMMA parameter
Rule 19    stmnt -> empty
Rule 20    stmnt -> var_declaration_func stmnt
Rule 21    stmnt -> pen_func stmnt
Rule 22    stmnt -> move_func stmnt
Rule 23    stmnt -> while_stmnt stmnt
Rule 24    stmnt -> if_stmnt stmnt
Rule 25    stmnt -> write stmnt
Rule 26    stmnt -> read stmnt
Rule 27    stmnt -> func_call stmnt
Rule 28    stmnt -> var_assignation stmnt
Rule 29    var_declaration_func -> var_type ID multiple_vars
Rule 30    var_assignation -> ID ASSIGN expression
Rule 31    var_cte -> func_call
Rule 32    var_cte -> cte_bool
Rule 33    var_cte -> CTE_STR
Rule 34    var_cte -> CTE_NUM
Rule 35    var_cte -> variable
Rule 36    cte_bool -> FALSE
Rule 37    cte_bool -> TRUE
Rule 38    expression -> exp
Rule 39    expression -> exp rel_op exp
Rule 40    exp -> termino
Rule 41    exp -> termino SUB termino
Rule 42    exp -> termino SUM termino
Rule 43    termino -> factor
Rule 44    termino -> factor DIV factor
Rule 45    termino -> factor MULT factor
Rule 46    factor -> SUB var_cte
Rule 47    factor -> SUM var_cte
Rule 48    factor -> var_cte
Rule 49    factor -> OPEN_PTH expression CLOSE_PTH
Rule 50    log_op -> OR
Rule 51    log_op -> AND
Rule 52    rel_op -> EQUAL_TO
Rule 53    rel_op -> MORE_OR_EQ_THAN
Rule 54    rel_op -> LESS_OR_EQ_THAN
Rule 55    rel_op -> DIFFERENT_TO
Rule 56    rel_op -> MORE_THAN
Rule 57    rel_op -> LESS_THAN
Rule 58    func_call -> ID OPEN_PTH func_call_param CLOSE_PTH
Rule 59    func_call_param -> expression multiple_fc_param
Rule 60    multiple_fc_param -> empty
Rule 61    multiple_fc_param -> COMMA func_call_param
Rule 62    read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH
Rule 63    variable -> ID array
Rule 64    array -> empty
Rule 65    array -> OPEN_SQR expression CLOSE_SQR matrix
Rule 66    matrix -> empty
Rule 67    matrix -> OPEN_SQR expression CLOSE_SQR
Rule 68    multiple_vars -> empty
Rule 69    multiple_vars -> COMMA variable
Rule 70    write -> WRITE OPEN_PTH expression CLOSE_PTH
Rule 71    if_stmnt -> IF con_expression stmnt else_stmnt
Rule 72    else_stmnt -> END
Rule 73    else_stmnt -> ELSE stmnt END
Rule 74    while_stmnt -> WHILE con_expression stmnt END
Rule 75    con_expression -> expression log_op expression
Rule 76    move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH
Rule 77    move_type -> CENTER
Rule 78    move_type -> FORWARD
Rule 79    move_type -> RIGHT
Rule 80    move_type -> LEFT
Rule 81    pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH
Rule 82    pen_func -> PEN_UP OPEN_PTH CLOSE_PTH
Rule 83    main -> MAIN stmnt END
Rule 84    empty -> <empty>

Terminals, with rules where they appear:

AND                  : 51
ASSIGN               : 30
BOOL                 : 6 11
CENTER               : 77
CLOSE_PTH            : 10 49 58 62 70 76 81 82
CLOSE_SQR            : 65 67
COMMA                : 5 18 61 69
CTE_NUM              : 34
CTE_STR              : 33
DIFFERENT_TO         : 55
DIV                  : 44
DRAWING              : 1
ELSE                 : 73
END                  : 10 72 73 74 83
EQUAL_TO             : 52
FALSE                : 36
FORWARD              : 78
FUNC                 : 10
ID                   : 1 3 5 10 16 29 30 58 63
IF                   : 71
LEFT                 : 80
LESS_OR_EQ_THAN      : 54
LESS_THAN            : 57
MAIN                 : 83
MORE_OR_EQ_THAN      : 53
MORE_THAN            : 56
MULT                 : 45
NUMBER               : 8 13
OPEN_PTH             : 10 49 58 62 70 76 81 82
OPEN_SQR             : 65 67
OR                   : 50
PEN_DOWN             : 81
PEN_UP               : 82
READ                 : 62
RIGHT                : 79
SUB                  : 41 46
SUM                  : 42 47
TRUE                 : 37
VOID                 : 14
WHILE                : 74
WORD                 : 7 12
WRITE                : 70
error                : 

Nonterminals, with rules where they appear:

array                : 63
con_expression       : 71 74
cte_bool             : 32
declaration          : 1
else_stmnt           : 71
empty                : 4 9 15 17 19 60 64 66 68
exp                  : 38 39 39
expression           : 30 49 59 65 67 70 75 75
factor               : 43 44 44 45 45
func_call            : 27 31
func_call_param      : 58 61 76
func_declaration     : 2
func_type            : 10
if_stmnt             : 24
log_op               : 75
main                 : 2
matrix               : 65
move_func            : 22
move_type            : 76
multiple_fc_param    : 59
multiple_parameters  : 16
multiple_var         : 3 5
multiple_vars        : 29 62
parameter            : 10 18
pen_func             : 21
program              : 0
read                 : 26
rel_op               : 39
stmnt                : 10 20 21 22 23 24 25 26 27 28 71 73 74 83
termino              : 40 41 41 42 42
var_assignation      : 28
var_cte              : 46 47 48
var_declaration      : 2
var_declaration_func : 20
var_type             : 3 16 29
variable             : 35 62 69
while_stmnt          : 23
write                : 25


state 0

    (0) S' -> . program
    (1) program -> . DRAWING ID declaration
    DRAWING         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .


state 2

    (1) program -> DRAWING . ID declaration
    ID              shift and go to state 3


state 3

    (1) program -> DRAWING ID . declaration
    (2) declaration -> . var_declaration func_declaration main
    (3) var_declaration -> . var_type ID multiple_var
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9

    declaration                    shift and go to state 4
    var_declaration                shift and go to state 5
    var_type                       shift and go to state 6

state 4

    (1) program -> DRAWING ID declaration .
    $end            reduce using rule 1 (program -> DRAWING ID declaration .)


state 5

    (2) declaration -> var_declaration . func_declaration main
    (9) func_declaration -> . empty
    (10) func_declaration -> . func_type FUNC ID OPEN_PTH parameter CLOSE_PTH stmnt END
    (84) empty -> .
    (11) func_type -> . BOOL
    (12) func_type -> . WORD
    (13) func_type -> . NUMBER
    (14) func_type -> . VOID
    MAIN            reduce using rule 84 (empty -> .)
    BOOL            shift and go to state 13
    WORD            shift and go to state 14
    NUMBER          shift and go to state 15
    VOID            shift and go to state 16

    func_declaration               shift and go to state 10
    empty                          shift and go to state 11
    func_type                      shift and go to state 12

state 6

    (3) var_declaration -> var_type . ID multiple_var
    ID              shift and go to state 17


state 7

    (6) var_type -> BOOL .
    ID              reduce using rule 6 (var_type -> BOOL .)


state 8

    (7) var_type -> WORD .
    ID              reduce using rule 7 (var_type -> WORD .)


state 9

    (8) var_type -> NUMBER .
    ID              reduce using rule 8 (var_type -> NUMBER .)


state 10

    (2) declaration -> var_declaration func_declaration . main
    (83) main -> . MAIN stmnt END
    MAIN            shift and go to state 19

    main                           shift and go to state 18

state 11

    (9) func_declaration -> empty .
    MAIN            reduce using rule 9 (func_declaration -> empty .)


state 12

    (10) func_declaration -> func_type . FUNC ID OPEN_PTH parameter CLOSE_PTH stmnt END
    FUNC            shift and go to state 20


state 13

    (11) func_type -> BOOL .
    FUNC            reduce using rule 11 (func_type -> BOOL .)


state 14

    (12) func_type -> WORD .
    FUNC            reduce using rule 12 (func_type -> WORD .)


state 15

    (13) func_type -> NUMBER .
    FUNC            reduce using rule 13 (func_type -> NUMBER .)


state 16

    (14) func_type -> VOID .
    FUNC            reduce using rule 14 (func_type -> VOID .)


state 17

    (3) var_declaration -> var_type ID . multiple_var
    (4) multiple_var -> . empty
    (5) multiple_var -> . COMMA ID multiple_var
    (84) empty -> .
    COMMA           shift and go to state 23
    BOOL            reduce using rule 84 (empty -> .)
    WORD            reduce using rule 84 (empty -> .)
    NUMBER          reduce using rule 84 (empty -> .)
    VOID            reduce using rule 84 (empty -> .)
    MAIN            reduce using rule 84 (empty -> .)

    multiple_var                   shift and go to state 21
    empty                          shift and go to state 22

state 18

    (2) declaration -> var_declaration func_declaration main .
    $end            reduce using rule 2 (declaration -> var_declaration func_declaration main .)


state 19

    (83) main -> MAIN . stmnt END
    (19) stmnt -> . empty
    (20) stmnt -> . var_declaration_func stmnt
    (21) stmnt -> . pen_func stmnt
    (22) stmnt -> . move_func stmnt
    (23) stmnt -> . while_stmnt stmnt
    (24) stmnt -> . if_stmnt stmnt
    (25) stmnt -> . write stmnt
    (26) stmnt -> . read stmnt
    (27) stmnt -> . func_call stmnt
    (28) stmnt -> . var_assignation stmnt
    (84) empty -> .
    (29) var_declaration_func -> . var_type ID multiple_vars
    (81) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (82) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (76) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (74) while_stmnt -> . WHILE con_expression stmnt END
    (71) if_stmnt -> . IF con_expression stmnt else_stmnt
    (70) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (62) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (58) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (30) var_assignation -> . ID ASSIGN expression
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    (77) move_type -> . CENTER
    (78) move_type -> . FORWARD
    (79) move_type -> . RIGHT
    (80) move_type -> . LEFT
    END             reduce using rule 84 (empty -> .)
    PEN_DOWN        shift and go to state 37
    PEN_UP          shift and go to state 38
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    WRITE           shift and go to state 42
    READ            shift and go to state 43
    ID              shift and go to state 36
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9
    CENTER          shift and go to state 44
    FORWARD         shift and go to state 45
    RIGHT           shift and go to state 46
    LEFT            shift and go to state 47

    stmnt                          shift and go to state 24
    empty                          shift and go to state 25
    var_declaration_func           shift and go to state 26
    pen_func                       shift and go to state 27
    move_func                      shift and go to state 28
    while_stmnt                    shift and go to state 29
    if_stmnt                       shift and go to state 30
    write                          shift and go to state 31
    read                           shift and go to state 32
    func_call                      shift and go to state 33
    var_assignation                shift and go to state 34
    var_type                       shift and go to state 35
    move_type                      shift and go to state 39

state 20

    (10) func_declaration -> func_type FUNC . ID OPEN_PTH parameter CLOSE_PTH stmnt END
    ID              shift and go to state 48


state 21

    (3) var_declaration -> var_type ID multiple_var .
    BOOL            reduce using rule 3 (var_declaration -> var_type ID multiple_var .)
    WORD            reduce using rule 3 (var_declaration -> var_type ID multiple_var .)
    NUMBER          reduce using rule 3 (var_declaration -> var_type ID multiple_var .)
    VOID            reduce using rule 3 (var_declaration -> var_type ID multiple_var .)
    MAIN            reduce using rule 3 (var_declaration -> var_type ID multiple_var .)


state 22

    (4) multiple_var -> empty .
    BOOL            reduce using rule 4 (multiple_var -> empty .)
    WORD            reduce using rule 4 (multiple_var -> empty .)
    NUMBER          reduce using rule 4 (multiple_var -> empty .)
    VOID            reduce using rule 4 (multiple_var -> empty .)
    MAIN            reduce using rule 4 (multiple_var -> empty .)


state 23

    (5) multiple_var -> COMMA . ID multiple_var
    ID              shift and go to state 49


state 24

    (83) main -> MAIN stmnt . END
    END             shift and go to state 50


state 25

    (19) stmnt -> empty .
    END             reduce using rule 19 (stmnt -> empty .)
    ELSE            reduce using rule 19 (stmnt -> empty .)


state 26

    (20) stmnt -> var_declaration_func . stmnt
    (19) stmnt -> . empty
    (20) stmnt -> . var_declaration_func stmnt
    (21) stmnt -> . pen_func stmnt
    (22) stmnt -> . move_func stmnt
    (23) stmnt -> . while_stmnt stmnt
    (24) stmnt -> . if_stmnt stmnt
    (25) stmnt -> . write stmnt
    (26) stmnt -> . read stmnt
    (27) stmnt -> . func_call stmnt
    (28) stmnt -> . var_assignation stmnt
    (84) empty -> .
    (29) var_declaration_func -> . var_type ID multiple_vars
    (81) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (82) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (76) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (74) while_stmnt -> . WHILE con_expression stmnt END
    (71) if_stmnt -> . IF con_expression stmnt else_stmnt
    (70) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (62) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (58) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (30) var_assignation -> . ID ASSIGN expression
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    (77) move_type -> . CENTER
    (78) move_type -> . FORWARD
    (79) move_type -> . RIGHT
    (80) move_type -> . LEFT
    END             reduce using rule 84 (empty -> .)
    ELSE            reduce using rule 84 (empty -> .)
    PEN_DOWN        shift and go to state 37
    PEN_UP          shift and go to state 38
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    WRITE           shift and go to state 42
    READ            shift and go to state 43
    ID              shift and go to state 36
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9
    CENTER          shift and go to state 44
    FORWARD         shift and go to state 45
    RIGHT           shift and go to state 46
    LEFT            shift and go to state 47

    var_declaration_func           shift and go to state 26
    stmnt                          shift and go to state 51
    empty                          shift and go to state 25
    pen_func                       shift and go to state 27
    move_func                      shift and go to state 28
    while_stmnt                    shift and go to state 29
    if_stmnt                       shift and go to state 30
    write                          shift and go to state 31
    read                           shift and go to state 32
    func_call                      shift and go to state 33
    var_assignation                shift and go to state 34
    var_type                       shift and go to state 35
    move_type                      shift and go to state 39

state 27

    (21) stmnt -> pen_func . stmnt
    (19) stmnt -> . empty
    (20) stmnt -> . var_declaration_func stmnt
    (21) stmnt -> . pen_func stmnt
    (22) stmnt -> . move_func stmnt
    (23) stmnt -> . while_stmnt stmnt
    (24) stmnt -> . if_stmnt stmnt
    (25) stmnt -> . write stmnt
    (26) stmnt -> . read stmnt
    (27) stmnt -> . func_call stmnt
    (28) stmnt -> . var_assignation stmnt
    (84) empty -> .
    (29) var_declaration_func -> . var_type ID multiple_vars
    (81) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (82) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (76) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (74) while_stmnt -> . WHILE con_expression stmnt END
    (71) if_stmnt -> . IF con_expression stmnt else_stmnt
    (70) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (62) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (58) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (30) var_assignation -> . ID ASSIGN expression
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    (77) move_type -> . CENTER
    (78) move_type -> . FORWARD
    (79) move_type -> . RIGHT
    (80) move_type -> . LEFT
    END             reduce using rule 84 (empty -> .)
    ELSE            reduce using rule 84 (empty -> .)
    PEN_DOWN        shift and go to state 37
    PEN_UP          shift and go to state 38
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    WRITE           shift and go to state 42
    READ            shift and go to state 43
    ID              shift and go to state 36
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9
    CENTER          shift and go to state 44
    FORWARD         shift and go to state 45
    RIGHT           shift and go to state 46
    LEFT            shift and go to state 47

    pen_func                       shift and go to state 27
    stmnt                          shift and go to state 52
    empty                          shift and go to state 25
    var_declaration_func           shift and go to state 26
    move_func                      shift and go to state 28
    while_stmnt                    shift and go to state 29
    if_stmnt                       shift and go to state 30
    write                          shift and go to state 31
    read                           shift and go to state 32
    func_call                      shift and go to state 33
    var_assignation                shift and go to state 34
    var_type                       shift and go to state 35
    move_type                      shift and go to state 39

state 28

    (22) stmnt -> move_func . stmnt
    (19) stmnt -> . empty
    (20) stmnt -> . var_declaration_func stmnt
    (21) stmnt -> . pen_func stmnt
    (22) stmnt -> . move_func stmnt
    (23) stmnt -> . while_stmnt stmnt
    (24) stmnt -> . if_stmnt stmnt
    (25) stmnt -> . write stmnt
    (26) stmnt -> . read stmnt
    (27) stmnt -> . func_call stmnt
    (28) stmnt -> . var_assignation stmnt
    (84) empty -> .
    (29) var_declaration_func -> . var_type ID multiple_vars
    (81) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (82) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (76) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (74) while_stmnt -> . WHILE con_expression stmnt END
    (71) if_stmnt -> . IF con_expression stmnt else_stmnt
    (70) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (62) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (58) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (30) var_assignation -> . ID ASSIGN expression
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    (77) move_type -> . CENTER
    (78) move_type -> . FORWARD
    (79) move_type -> . RIGHT
    (80) move_type -> . LEFT
    END             reduce using rule 84 (empty -> .)
    ELSE            reduce using rule 84 (empty -> .)
    PEN_DOWN        shift and go to state 37
    PEN_UP          shift and go to state 38
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    WRITE           shift and go to state 42
    READ            shift and go to state 43
    ID              shift and go to state 36
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9
    CENTER          shift and go to state 44
    FORWARD         shift and go to state 45
    RIGHT           shift and go to state 46
    LEFT            shift and go to state 47

    move_func                      shift and go to state 28
    stmnt                          shift and go to state 53
    empty                          shift and go to state 25
    var_declaration_func           shift and go to state 26
    pen_func                       shift and go to state 27
    while_stmnt                    shift and go to state 29
    if_stmnt                       shift and go to state 30
    write                          shift and go to state 31
    read                           shift and go to state 32
    func_call                      shift and go to state 33
    var_assignation                shift and go to state 34
    var_type                       shift and go to state 35
    move_type                      shift and go to state 39

state 29

    (23) stmnt -> while_stmnt . stmnt
    (19) stmnt -> . empty
    (20) stmnt -> . var_declaration_func stmnt
    (21) stmnt -> . pen_func stmnt
    (22) stmnt -> . move_func stmnt
    (23) stmnt -> . while_stmnt stmnt
    (24) stmnt -> . if_stmnt stmnt
    (25) stmnt -> . write stmnt
    (26) stmnt -> . read stmnt
    (27) stmnt -> . func_call stmnt
    (28) stmnt -> . var_assignation stmnt
    (84) empty -> .
    (29) var_declaration_func -> . var_type ID multiple_vars
    (81) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (82) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (76) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (74) while_stmnt -> . WHILE con_expression stmnt END
    (71) if_stmnt -> . IF con_expression stmnt else_stmnt
    (70) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (62) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (58) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (30) var_assignation -> . ID ASSIGN expression
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    (77) move_type -> . CENTER
    (78) move_type -> . FORWARD
    (79) move_type -> . RIGHT
    (80) move_type -> . LEFT
    END             reduce using rule 84 (empty -> .)
    ELSE            reduce using rule 84 (empty -> .)
    PEN_DOWN        shift and go to state 37
    PEN_UP          shift and go to state 38
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    WRITE           shift and go to state 42
    READ            shift and go to state 43
    ID              shift and go to state 36
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9
    CENTER          shift and go to state 44
    FORWARD         shift and go to state 45
    RIGHT           shift and go to state 46
    LEFT            shift and go to state 47

    while_stmnt                    shift and go to state 29
    stmnt                          shift and go to state 54
    empty                          shift and go to state 25
    var_declaration_func           shift and go to state 26
    pen_func                       shift and go to state 27
    move_func                      shift and go to state 28
    if_stmnt                       shift and go to state 30
    write                          shift and go to state 31
    read                           shift and go to state 32
    func_call                      shift and go to state 33
    var_assignation                shift and go to state 34
    var_type                       shift and go to state 35
    move_type                      shift and go to state 39

state 30

    (24) stmnt -> if_stmnt . stmnt
    (19) stmnt -> . empty
    (20) stmnt -> . var_declaration_func stmnt
    (21) stmnt -> . pen_func stmnt
    (22) stmnt -> . move_func stmnt
    (23) stmnt -> . while_stmnt stmnt
    (24) stmnt -> . if_stmnt stmnt
    (25) stmnt -> . write stmnt
    (26) stmnt -> . read stmnt
    (27) stmnt -> . func_call stmnt
    (28) stmnt -> . var_assignation stmnt
    (84) empty -> .
    (29) var_declaration_func -> . var_type ID multiple_vars
    (81) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (82) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (76) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (74) while_stmnt -> . WHILE con_expression stmnt END
    (71) if_stmnt -> . IF con_expression stmnt else_stmnt
    (70) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (62) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (58) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (30) var_assignation -> . ID ASSIGN expression
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    (77) move_type -> . CENTER
    (78) move_type -> . FORWARD
    (79) move_type -> . RIGHT
    (80) move_type -> . LEFT
    END             reduce using rule 84 (empty -> .)
    ELSE            reduce using rule 84 (empty -> .)
    PEN_DOWN        shift and go to state 37
    PEN_UP          shift and go to state 38
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    WRITE           shift and go to state 42
    READ            shift and go to state 43
    ID              shift and go to state 36
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9
    CENTER          shift and go to state 44
    FORWARD         shift and go to state 45
    RIGHT           shift and go to state 46
    LEFT            shift and go to state 47

    if_stmnt                       shift and go to state 30
    stmnt                          shift and go to state 55
    empty                          shift and go to state 25
    var_declaration_func           shift and go to state 26
    pen_func                       shift and go to state 27
    move_func                      shift and go to state 28
    while_stmnt                    shift and go to state 29
    write                          shift and go to state 31
    read                           shift and go to state 32
    func_call                      shift and go to state 33
    var_assignation                shift and go to state 34
    var_type                       shift and go to state 35
    move_type                      shift and go to state 39

state 31

    (25) stmnt -> write . stmnt
    (19) stmnt -> . empty
    (20) stmnt -> . var_declaration_func stmnt
    (21) stmnt -> . pen_func stmnt
    (22) stmnt -> . move_func stmnt
    (23) stmnt -> . while_stmnt stmnt
    (24) stmnt -> . if_stmnt stmnt
    (25) stmnt -> . write stmnt
    (26) stmnt -> . read stmnt
    (27) stmnt -> . func_call stmnt
    (28) stmnt -> . var_assignation stmnt
    (84) empty -> .
    (29) var_declaration_func -> . var_type ID multiple_vars
    (81) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (82) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (76) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (74) while_stmnt -> . WHILE con_expression stmnt END
    (71) if_stmnt -> . IF con_expression stmnt else_stmnt
    (70) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (62) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (58) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (30) var_assignation -> . ID ASSIGN expression
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    (77) move_type -> . CENTER
    (78) move_type -> . FORWARD
    (79) move_type -> . RIGHT
    (80) move_type -> . LEFT
    END             reduce using rule 84 (empty -> .)
    ELSE            reduce using rule 84 (empty -> .)
    PEN_DOWN        shift and go to state 37
    PEN_UP          shift and go to state 38
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    WRITE           shift and go to state 42
    READ            shift and go to state 43
    ID              shift and go to state 36
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9
    CENTER          shift and go to state 44
    FORWARD         shift and go to state 45
    RIGHT           shift and go to state 46
    LEFT            shift and go to state 47

    write                          shift and go to state 31
    stmnt                          shift and go to state 56
    empty                          shift and go to state 25
    var_declaration_func           shift and go to state 26
    pen_func                       shift and go to state 27
    move_func                      shift and go to state 28
    while_stmnt                    shift and go to state 29
    if_stmnt                       shift and go to state 30
    read                           shift and go to state 32
    func_call                      shift and go to state 33
    var_assignation                shift and go to state 34
    var_type                       shift and go to state 35
    move_type                      shift and go to state 39

state 32

    (26) stmnt -> read . stmnt
    (19) stmnt -> . empty
    (20) stmnt -> . var_declaration_func stmnt
    (21) stmnt -> . pen_func stmnt
    (22) stmnt -> . move_func stmnt
    (23) stmnt -> . while_stmnt stmnt
    (24) stmnt -> . if_stmnt stmnt
    (25) stmnt -> . write stmnt
    (26) stmnt -> . read stmnt
    (27) stmnt -> . func_call stmnt
    (28) stmnt -> . var_assignation stmnt
    (84) empty -> .
    (29) var_declaration_func -> . var_type ID multiple_vars
    (81) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (82) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (76) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (74) while_stmnt -> . WHILE con_expression stmnt END
    (71) if_stmnt -> . IF con_expression stmnt else_stmnt
    (70) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (62) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (58) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (30) var_assignation -> . ID ASSIGN expression
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    (77) move_type -> . CENTER
    (78) move_type -> . FORWARD
    (79) move_type -> . RIGHT
    (80) move_type -> . LEFT
    END             reduce using rule 84 (empty -> .)
    ELSE            reduce using rule 84 (empty -> .)
    PEN_DOWN        shift and go to state 37
    PEN_UP          shift and go to state 38
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    WRITE           shift and go to state 42
    READ            shift and go to state 43
    ID              shift and go to state 36
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9
    CENTER          shift and go to state 44
    FORWARD         shift and go to state 45
    RIGHT           shift and go to state 46
    LEFT            shift and go to state 47

    read                           shift and go to state 32
    stmnt                          shift and go to state 57
    empty                          shift and go to state 25
    var_declaration_func           shift and go to state 26
    pen_func                       shift and go to state 27
    move_func                      shift and go to state 28
    while_stmnt                    shift and go to state 29
    if_stmnt                       shift and go to state 30
    write                          shift and go to state 31
    func_call                      shift and go to state 33
    var_assignation                shift and go to state 34
    var_type                       shift and go to state 35
    move_type                      shift and go to state 39

state 33

    (27) stmnt -> func_call . stmnt
    (19) stmnt -> . empty
    (20) stmnt -> . var_declaration_func stmnt
    (21) stmnt -> . pen_func stmnt
    (22) stmnt -> . move_func stmnt
    (23) stmnt -> . while_stmnt stmnt
    (24) stmnt -> . if_stmnt stmnt
    (25) stmnt -> . write stmnt
    (26) stmnt -> . read stmnt
    (27) stmnt -> . func_call stmnt
    (28) stmnt -> . var_assignation stmnt
    (84) empty -> .
    (29) var_declaration_func -> . var_type ID multiple_vars
    (81) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (82) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (76) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (74) while_stmnt -> . WHILE con_expression stmnt END
    (71) if_stmnt -> . IF con_expression stmnt else_stmnt
    (70) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (62) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (58) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (30) var_assignation -> . ID ASSIGN expression
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    (77) move_type -> . CENTER
    (78) move_type -> . FORWARD
    (79) move_type -> . RIGHT
    (80) move_type -> . LEFT
    END             reduce using rule 84 (empty -> .)
    ELSE            reduce using rule 84 (empty -> .)
    PEN_DOWN        shift and go to state 37
    PEN_UP          shift and go to state 38
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    WRITE           shift and go to state 42
    READ            shift and go to state 43
    ID              shift and go to state 36
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9
    CENTER          shift and go to state 44
    FORWARD         shift and go to state 45
    RIGHT           shift and go to state 46
    LEFT            shift and go to state 47

    func_call                      shift and go to state 33
    stmnt                          shift and go to state 58
    empty                          shift and go to state 25
    var_declaration_func           shift and go to state 26
    pen_func                       shift and go to state 27
    move_func                      shift and go to state 28
    while_stmnt                    shift and go to state 29
    if_stmnt                       shift and go to state 30
    write                          shift and go to state 31
    read                           shift and go to state 32
    var_assignation                shift and go to state 34
    var_type                       shift and go to state 35
    move_type                      shift and go to state 39

state 34

    (28) stmnt -> var_assignation . stmnt
    (19) stmnt -> . empty
    (20) stmnt -> . var_declaration_func stmnt
    (21) stmnt -> . pen_func stmnt
    (22) stmnt -> . move_func stmnt
    (23) stmnt -> . while_stmnt stmnt
    (24) stmnt -> . if_stmnt stmnt
    (25) stmnt -> . write stmnt
    (26) stmnt -> . read stmnt
    (27) stmnt -> . func_call stmnt
    (28) stmnt -> . var_assignation stmnt
    (84) empty -> .
    (29) var_declaration_func -> . var_type ID multiple_vars
    (81) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (82) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (76) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (74) while_stmnt -> . WHILE con_expression stmnt END
    (71) if_stmnt -> . IF con_expression stmnt else_stmnt
    (70) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (62) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (58) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (30) var_assignation -> . ID ASSIGN expression
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    (77) move_type -> . CENTER
    (78) move_type -> . FORWARD
    (79) move_type -> . RIGHT
    (80) move_type -> . LEFT
    END             reduce using rule 84 (empty -> .)
    ELSE            reduce using rule 84 (empty -> .)
    PEN_DOWN        shift and go to state 37
    PEN_UP          shift and go to state 38
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    WRITE           shift and go to state 42
    READ            shift and go to state 43
    ID              shift and go to state 36
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9
    CENTER          shift and go to state 44
    FORWARD         shift and go to state 45
    RIGHT           shift and go to state 46
    LEFT            shift and go to state 47

    var_assignation                shift and go to state 34
    stmnt                          shift and go to state 59
    empty                          shift and go to state 25
    var_declaration_func           shift and go to state 26
    pen_func                       shift and go to state 27
    move_func                      shift and go to state 28
    while_stmnt                    shift and go to state 29
    if_stmnt                       shift and go to state 30
    write                          shift and go to state 31
    read                           shift and go to state 32
    func_call                      shift and go to state 33
    var_type                       shift and go to state 35
    move_type                      shift and go to state 39

state 35

    (29) var_declaration_func -> var_type . ID multiple_vars
    ID              shift and go to state 60


state 36

    (58) func_call -> ID . OPEN_PTH func_call_param CLOSE_PTH
    (30) var_assignation -> ID . ASSIGN expression
    OPEN_PTH        shift and go to state 61
    ASSIGN          shift and go to state 62


state 37

    (81) pen_func -> PEN_DOWN . OPEN_PTH CLOSE_PTH
    OPEN_PTH        shift and go to state 63


state 38

    (82) pen_func -> PEN_UP . OPEN_PTH CLOSE_PTH
    OPEN_PTH        shift and go to state 64


state 39

    (76) move_func -> move_type . OPEN_PTH func_call_param CLOSE_PTH
    OPEN_PTH        shift and go to state 65


state 40

    (74) while_stmnt -> WHILE . con_expression stmnt END
    (75) con_expression -> . expression log_op expression
    (38) expression -> . exp
    (39) expression -> . exp rel_op exp
    (40) exp -> . termino
    (41) exp -> . termino SUB termino
    (42) exp -> . termino SUM termino
    (43) termino -> . factor
    (44) termino -> . factor DIV factor
    (45) termino -> . factor MULT factor
    (46) factor -> . SUB var_cte
    (47) factor -> . SUM var_cte
    (48) factor -> . var_cte
    (49) factor -> . OPEN_PTH expression CLOSE_PTH
    (31) var_cte -> . func_call
    (32) var_cte -> . cte_bool
    (33) var_cte -> . CTE_STR
    (34) var_cte -> . CTE_NUM
    (35) var_cte -> . variable
    (58) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (36) cte_bool -> . FALSE
    (37) cte_bool -> . TRUE
    (63) variable -> . ID array
    SUB             shift and go to state 70
    SUM             shift and go to state 71
    OPEN_PTH        shift and go to state 74
    CTE_STR         shift and go to state 77
    CTE_NUM         shift and go to state 78
    ID              shift and go to state 80
    FALSE           shift and go to state 81
    TRUE            shift and go to state 82

    con_expression                 shift and go to state 66
    expression                     shift and go to state 67
    exp                            shift and go to state 68
    termino                        shift and go to state 69
    factor                         shift and go to state 72
    var_cte                        shift and go to state 73
    func_call                      shift and go to state 75
    cte_bool                       shift and go to state 76
    variable                       shift and go to state 79

state 41

    (71) if_stmnt -> IF . con_expression stmnt else_stmnt
    (75) con_expression -> . expression log_op expression
    (38) expression -> . exp
    (39) expression -> . exp rel_op exp
    (40) exp -> . termino
    (41) exp -> . termino SUB termino
    (42) exp -> . termino SUM termino
    (43) termino -> . factor
    (44) termino -> . factor DIV factor
    (45) termino -> . factor MULT factor
    (46) factor -> . SUB var_cte
    (47) factor -> . SUM var_cte
    (48) factor -> . var_cte
    (49) factor -> . OPEN_PTH expression CLOSE_PTH
    (31) var_cte -> . func_call
    (32) var_cte -> . cte_bool
    (33) var_cte -> . CTE_STR
    (34) var_cte -> . CTE_NUM
    (35) var_cte -> . variable
    (58) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (36) cte_bool -> . FALSE
    (37) cte_bool -> . TRUE
    (63) variable -> . ID array
    SUB             shift and go to state 70
    SUM             shift and go to state 71
    OPEN_PTH        shift and go to state 74
    CTE_STR         shift and go to state 77
    CTE_NUM         shift and go to state 78
    ID              shift and go to state 80
    FALSE           shift and go to state 81
    TRUE            shift and go to state 82

    con_expression                 shift and go to state 83
    expression                     shift and go to state 67
    exp                            shift and go to state 68
    termino                        shift and go to state 69
    factor                         shift and go to state 72
    var_cte                        shift and go to state 73
    func_call                      shift and go to state 75
    cte_bool                       shift and go to state 76
    variable                       shift and go to state 79

state 42

    (70) write -> WRITE . OPEN_PTH expression CLOSE_PTH
    OPEN_PTH        shift and go to state 84


state 43

    (62) read -> READ . OPEN_PTH variable multiple_vars CLOSE_PTH
    OPEN_PTH        shift and go to state 85


state 44

    (77) move_type -> CENTER .
    OPEN_PTH        reduce using rule 77 (move_type -> CENTER .)


state 45

    (78) move_type -> FORWARD .
    OPEN_PTH        reduce using rule 78 (move_type -> FORWARD .)


state 46

    (79) move_type -> RIGHT .
    OPEN_PTH        reduce using rule 79 (move_type -> RIGHT .)


state 47

    (80) move_type -> LEFT .
    OPEN_PTH        reduce using rule 80 (move_type -> LEFT .)


state 48

    (10) func_declaration -> func_type FUNC ID . OPEN_PTH parameter CLOSE_PTH stmnt END
    OPEN_PTH        shift and go to state 86


state 49

    (5) multiple_var -> COMMA ID . multiple_var
    (4) multiple_var -> . empty
    (5) multiple_var -> . COMMA ID multiple_var
    (84) empty -> .
    COMMA           shift and go to state 23
    BOOL            reduce using rule 84 (empty -> .)
    WORD            reduce using rule 84 (empty -> .)
    NUMBER          reduce using rule 84 (empty -> .)
    VOID            reduce using rule 84 (empty -> .)
    MAIN            reduce using rule 84 (empty -> .)

    multiple_var                   shift and go to state 87
    empty                          shift and go to state 22

state 50

    (83) main -> MAIN stmnt END .
    $end            reduce using rule 83 (main -> MAIN stmnt END .)


state 51

    (20) stmnt -> var_declaration_func stmnt .
    END             reduce using rule 20 (stmnt -> var_declaration_func stmnt .)
    ELSE            reduce using rule 20 (stmnt -> var_declaration_func stmnt .)


state 52

    (21) stmnt -> pen_func stmnt .
    END             reduce using rule 21 (stmnt -> pen_func stmnt .)
    ELSE            reduce using rule 21 (stmnt -> pen_func stmnt .)


state 53

    (22) stmnt -> move_func stmnt .
    END             reduce using rule 22 (stmnt -> move_func stmnt .)
    ELSE            reduce using rule 22 (stmnt -> move_func stmnt .)


state 54

    (23) stmnt -> while_stmnt stmnt .
    END             reduce using rule 23 (stmnt -> while_stmnt stmnt .)
    ELSE            reduce using rule 23 (stmnt -> while_stmnt stmnt .)


state 55

    (24) stmnt -> if_stmnt stmnt .
    END             reduce using rule 24 (stmnt -> if_stmnt stmnt .)
    ELSE            reduce using rule 24 (stmnt -> if_stmnt stmnt .)


state 56

    (25) stmnt -> write stmnt .
    END             reduce using rule 25 (stmnt -> write stmnt .)
    ELSE            reduce using rule 25 (stmnt -> write stmnt .)


state 57

    (26) stmnt -> read stmnt .
    END             reduce using rule 26 (stmnt -> read stmnt .)
    ELSE            reduce using rule 26 (stmnt -> read stmnt .)


state 58

    (27) stmnt -> func_call stmnt .
    END             reduce using rule 27 (stmnt -> func_call stmnt .)
    ELSE            reduce using rule 27 (stmnt -> func_call stmnt .)


state 59

    (28) stmnt -> var_assignation stmnt .
    END             reduce using rule 28 (stmnt -> var_assignation stmnt .)
    ELSE            reduce using rule 28 (stmnt -> var_assignation stmnt .)


state 60

    (29) var_declaration_func -> var_type ID . multiple_vars
    (68) multiple_vars -> . empty
    (69) multiple_vars -> . COMMA variable
    (84) empty -> .
    COMMA           shift and go to state 90
    PEN_DOWN        reduce using rule 84 (empty -> .)
    PEN_UP          reduce using rule 84 (empty -> .)
    WHILE           reduce using rule 84 (empty -> .)
    IF              reduce using rule 84 (empty -> .)
    WRITE           reduce using rule 84 (empty -> .)
    READ            reduce using rule 84 (empty -> .)
    ID              reduce using rule 84 (empty -> .)
    BOOL            reduce using rule 84 (empty -> .)
    WORD            reduce using rule 84 (empty -> .)
    NUMBER          reduce using rule 84 (empty -> .)
    CENTER          reduce using rule 84 (empty -> .)
    FORWARD         reduce using rule 84 (empty -> .)
    RIGHT           reduce using rule 84 (empty -> .)
    LEFT            reduce using rule 84 (empty -> .)
    END             reduce using rule 84 (empty -> .)
    ELSE            reduce using rule 84 (empty -> .)

    multiple_vars                  shift and go to state 88
    empty                          shift and go to state 89

state 61

    (58) func_call -> ID OPEN_PTH . func_call_param CLOSE_PTH
    (59) func_call_param -> . expression multiple_fc_param
    (38) expression -> . exp
    (39) expression -> . exp rel_op exp
    (40) exp -> . termino
    (41) exp -> . termino SUB termino
    (42) exp -> . termino SUM termino
    (43) termino -> . factor
    (44) termino -> . factor DIV factor
    (45) termino -> . factor MULT factor
    (46) factor -> . SUB var_cte
    (47) factor -> . SUM var_cte
    (48) factor -> . var_cte
    (49) factor -> . OPEN_PTH expression CLOSE_PTH
    (31) var_cte -> . func_call
    (32) var_cte -> . cte_bool
    (33) var_cte -> . CTE_STR
    (34) var_cte -> . CTE_NUM
    (35) var_cte -> . variable
    (58) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (36) cte_bool -> . FALSE
    (37) cte_bool -> . TRUE
    (63) variable -> . ID array
    SUB             shift and go to state 70
    SUM             shift and go to state 71
    OPEN_PTH        shift and go to state 74
    CTE_STR         shift and go to state 77
    CTE_NUM         shift and go to state 78
    ID              shift and go to state 80
    FALSE           shift and go to state 81
    TRUE            shift and go to state 82

    func_call_param                shift and go to state 91
    expression                     shift and go to state 92
    exp                            shift and go to state 68
    termino                        shift and go to state 69
    factor                         shift and go to state 72
    var_cte                        shift and go to state 73
    func_call                      shift and go to state 75
    cte_bool                       shift and go to state 76
    variable                       shift and go to state 79

state 62

    (30) var_assignation -> ID ASSIGN . expression
    (38) expression -> . exp
    (39) expression -> . exp rel_op exp
    (40) exp -> . termino
    (41) exp -> . termino SUB termino
    (42) exp -> . termino SUM termino
    (43) termino -> . factor
    (44) termino -> . factor DIV factor
    (45) termino -> . factor MULT factor
    (46) factor -> . SUB var_cte
    (47) factor -> . SUM var_cte
    (48) factor -> . var_cte
    (49) factor -> . OPEN_PTH expression CLOSE_PTH
    (31) var_cte -> . func_call
    (32) var_cte -> . cte_bool
    (33) var_cte -> . CTE_STR
    (34) var_cte -> . CTE_NUM
    (35) var_cte -> . variable
    (58) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (36) cte_bool -> . FALSE
    (37) cte_bool -> . TRUE
    (63) variable -> . ID array
    SUB             shift and go to state 70
    SUM             shift and go to state 71
    OPEN_PTH        shift and go to state 74
    CTE_STR         shift and go to state 77
    CTE_NUM         shift and go to state 78
    ID              shift and go to state 80
    FALSE           shift and go to state 81
    TRUE            shift and go to state 82

    expression                     shift and go to state 93
    exp                            shift and go to state 68
    termino                        shift and go to state 69
    factor                         shift and go to state 72
    var_cte                        shift and go to state 73
    func_call                      shift and go to state 75
    cte_bool                       shift and go to state 76
    variable                       shift and go to state 79

state 63

    (81) pen_func -> PEN_DOWN OPEN_PTH . CLOSE_PTH
    CLOSE_PTH       shift and go to state 94


state 64

    (82) pen_func -> PEN_UP OPEN_PTH . CLOSE_PTH
    CLOSE_PTH       shift and go to state 95


state 65

    (76) move_func -> move_type OPEN_PTH . func_call_param CLOSE_PTH
    (59) func_call_param -> . expression multiple_fc_param
    (38) expression -> . exp
    (39) expression -> . exp rel_op exp
    (40) exp -> . termino
    (41) exp -> . termino SUB termino
    (42) exp -> . termino SUM termino
    (43) termino -> . factor
    (44) termino -> . factor DIV factor
    (45) termino -> . factor MULT factor
    (46) factor -> . SUB var_cte
    (47) factor -> . SUM var_cte
    (48) factor -> . var_cte
    (49) factor -> . OPEN_PTH expression CLOSE_PTH
    (31) var_cte -> . func_call
    (32) var_cte -> . cte_bool
    (33) var_cte -> . CTE_STR
    (34) var_cte -> . CTE_NUM
    (35) var_cte -> . variable
    (58) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (36) cte_bool -> . FALSE
    (37) cte_bool -> . TRUE
    (63) variable -> . ID array
    SUB             shift and go to state 70
    SUM             shift and go to state 71
    OPEN_PTH        shift and go to state 74
    CTE_STR         shift and go to state 77
    CTE_NUM         shift and go to state 78
    ID              shift and go to state 80
    FALSE           shift and go to state 81
    TRUE            shift and go to state 82

    func_call_param                shift and go to state 96
    expression                     shift and go to state 92
    exp                            shift and go to state 68
    termino                        shift and go to state 69
    factor                         shift and go to state 72
    var_cte                        shift and go to state 73
    func_call                      shift and go to state 75
    cte_bool                       shift and go to state 76
    variable                       shift and go to state 79

state 66

    (74) while_stmnt -> WHILE con_expression . stmnt END
    (19) stmnt -> . empty
    (20) stmnt -> . var_declaration_func stmnt
    (21) stmnt -> . pen_func stmnt
    (22) stmnt -> . move_func stmnt
    (23) stmnt -> . while_stmnt stmnt
    (24) stmnt -> . if_stmnt stmnt
    (25) stmnt -> . write stmnt
    (26) stmnt -> . read stmnt
    (27) stmnt -> . func_call stmnt
    (28) stmnt -> . var_assignation stmnt
    (84) empty -> .
    (29) var_declaration_func -> . var_type ID multiple_vars
    (81) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (82) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (76) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (74) while_stmnt -> . WHILE con_expression stmnt END
    (71) if_stmnt -> . IF con_expression stmnt else_stmnt
    (70) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (62) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (58) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (30) var_assignation -> . ID ASSIGN expression
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    (77) move_type -> . CENTER
    (78) move_type -> . FORWARD
    (79) move_type -> . RIGHT
    (80) move_type -> . LEFT
    END             reduce using rule 84 (empty -> .)
    PEN_DOWN        shift and go to state 37
    PEN_UP          shift and go to state 38
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    WRITE           shift and go to state 42
    READ            shift and go to state 43
    ID              shift and go to state 36
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9
    CENTER          shift and go to state 44
    FORWARD         shift and go to state 45
    RIGHT           shift and go to state 46
    LEFT            shift and go to state 47

    stmnt                          shift and go to state 97
    empty                          shift and go to state 25
    var_declaration_func           shift and go to state 26
    pen_func                       shift and go to state 27
    move_func                      shift and go to state 28
    while_stmnt                    shift and go to state 29
    if_stmnt                       shift and go to state 30
    write                          shift and go to state 31
    read                           shift and go to state 32
    func_call                      shift and go to state 33
    var_assignation                shift and go to state 34
    var_type                       shift and go to state 35
    move_type                      shift and go to state 39

state 67

    (75) con_expression -> expression . log_op expression
    (50) log_op -> . OR
    (51) log_op -> . AND
    OR              shift and go to state 99
    AND             shift and go to state 100

    log_op                         shift and go to state 98

state 68

    (38) expression -> exp .
    (39) expression -> exp . rel_op exp
    (52) rel_op -> . EQUAL_TO
    (53) rel_op -> . MORE_OR_EQ_THAN
    (54) rel_op -> . LESS_OR_EQ_THAN
    (55) rel_op -> . DIFFERENT_TO
    (56) rel_op -> . MORE_THAN
    (57) rel_op -> . LESS_THAN
    OR              reduce using rule 38 (expression -> exp .)
    AND             reduce using rule 38 (expression -> exp .)
    COMMA           reduce using rule 38 (expression -> exp .)
    CLOSE_PTH       reduce using rule 38 (expression -> exp .)
    PEN_DOWN        reduce using rule 38 (expression -> exp .)
    PEN_UP          reduce using rule 38 (expression -> exp .)
    WHILE           reduce using rule 38 (expression -> exp .)
    IF              reduce using rule 38 (expression -> exp .)
    WRITE           reduce using rule 38 (expression -> exp .)
    READ            reduce using rule 38 (expression -> exp .)
    ID              reduce using rule 38 (expression -> exp .)
    BOOL            reduce using rule 38 (expression -> exp .)
    WORD            reduce using rule 38 (expression -> exp .)
    NUMBER          reduce using rule 38 (expression -> exp .)
    CENTER          reduce using rule 38 (expression -> exp .)
    FORWARD         reduce using rule 38 (expression -> exp .)
    RIGHT           reduce using rule 38 (expression -> exp .)
    LEFT            reduce using rule 38 (expression -> exp .)
    END             reduce using rule 38 (expression -> exp .)
    ELSE            reduce using rule 38 (expression -> exp .)
    CLOSE_SQR       reduce using rule 38 (expression -> exp .)
    EQUAL_TO        shift and go to state 102
    MORE_OR_EQ_THAN shift and go to state 103
    LESS_OR_EQ_THAN shift and go to state 104
    DIFFERENT_TO    shift and go to state 105
    MORE_THAN       shift and go to state 106
    LESS_THAN       shift and go to state 107

    rel_op                         shift and go to state 101

state 69

    (40) exp -> termino .
    (41) exp -> termino . SUB termino
    (42) exp -> termino . SUM termino
    EQUAL_TO        reduce using rule 40 (exp -> termino .)
    MORE_OR_EQ_THAN reduce using rule 40 (exp -> termino .)
    LESS_OR_EQ_THAN reduce using rule 40 (exp -> termino .)
    DIFFERENT_TO    reduce using rule 40 (exp -> termino .)
    MORE_THAN       reduce using rule 40 (exp -> termino .)
    LESS_THAN       reduce using rule 40 (exp -> termino .)
    OR              reduce using rule 40 (exp -> termino .)
    AND             reduce using rule 40 (exp -> termino .)
    COMMA           reduce using rule 40 (exp -> termino .)
    CLOSE_PTH       reduce using rule 40 (exp -> termino .)
    PEN_DOWN        reduce using rule 40 (exp -> termino .)
    PEN_UP          reduce using rule 40 (exp -> termino .)
    WHILE           reduce using rule 40 (exp -> termino .)
    IF              reduce using rule 40 (exp -> termino .)
    WRITE           reduce using rule 40 (exp -> termino .)
    READ            reduce using rule 40 (exp -> termino .)
    ID              reduce using rule 40 (exp -> termino .)
    BOOL            reduce using rule 40 (exp -> termino .)
    WORD            reduce using rule 40 (exp -> termino .)
    NUMBER          reduce using rule 40 (exp -> termino .)
    CENTER          reduce using rule 40 (exp -> termino .)
    FORWARD         reduce using rule 40 (exp -> termino .)
    RIGHT           reduce using rule 40 (exp -> termino .)
    LEFT            reduce using rule 40 (exp -> termino .)
    END             reduce using rule 40 (exp -> termino .)
    ELSE            reduce using rule 40 (exp -> termino .)
    CLOSE_SQR       reduce using rule 40 (exp -> termino .)
    SUB             shift and go to state 108
    SUM             shift and go to state 109


state 70

    (46) factor -> SUB . var_cte
    (31) var_cte -> . func_call
    (32) var_cte -> . cte_bool
    (33) var_cte -> . CTE_STR
    (34) var_cte -> . CTE_NUM
    (35) var_cte -> . variable
    (58) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (36) cte_bool -> . FALSE
    (37) cte_bool -> . TRUE
    (63) variable -> . ID array
    CTE_STR         shift and go to state 77
    CTE_NUM         shift and go to state 78
    ID              shift and go to state 80
    FALSE           shift and go to state 81
    TRUE            shift and go to state 82

    var_cte                        shift and go to state 110
    func_call                      shift and go to state 75
    cte_bool                       shift and go to state 76
    variable                       shift and go to state 79

state 71

    (47) factor -> SUM . var_cte
    (31) var_cte -> . func_call
    (32) var_cte -> . cte_bool
    (33) var_cte -> . CTE_STR
    (34) var_cte -> . CTE_NUM
    (35) var_cte -> . variable
    (58) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (36) cte_bool -> . FALSE
    (37) cte_bool -> . TRUE
    (63) variable -> . ID array
    CTE_STR         shift and go to state 77
    CTE_NUM         shift and go to state 78
    ID              shift and go to state 80
    FALSE           shift and go to state 81
    TRUE            shift and go to state 82

    var_cte                        shift and go to state 111
    func_call                      shift and go to state 75
    cte_bool                       shift and go to state 76
    variable                       shift and go to state 79

state 72

    (43) termino -> factor .
    (44) termino -> factor . DIV factor
    (45) termino -> factor . MULT factor
    SUB             reduce using rule 43 (termino -> factor .)
    SUM             reduce using rule 43 (termino -> factor .)
    EQUAL_TO        reduce using rule 43 (termino -> factor .)
    MORE_OR_EQ_THAN reduce using rule 43 (termino -> factor .)
    LESS_OR_EQ_THAN reduce using rule 43 (termino -> factor .)
    DIFFERENT_TO    reduce using rule 43 (termino -> factor .)
    MORE_THAN       reduce using rule 43 (termino -> factor .)
    LESS_THAN       reduce using rule 43 (termino -> factor .)
    OR              reduce using rule 43 (termino -> factor .)
    AND             reduce using rule 43 (termino -> factor .)
    COMMA           reduce using rule 43 (termino -> factor .)
    CLOSE_PTH       reduce using rule 43 (termino -> factor .)
    PEN_DOWN        reduce using rule 43 (termino -> factor .)
    PEN_UP          reduce using rule 43 (termino -> factor .)
    WHILE           reduce using rule 43 (termino -> factor .)
    IF              reduce using rule 43 (termino -> factor .)
    WRITE           reduce using rule 43 (termino -> factor .)
    READ            reduce using rule 43 (termino -> factor .)
    ID              reduce using rule 43 (termino -> factor .)
    BOOL            reduce using rule 43 (termino -> factor .)
    WORD            reduce using rule 43 (termino -> factor .)
    NUMBER          reduce using rule 43 (termino -> factor .)
    CENTER          reduce using rule 43 (termino -> factor .)
    FORWARD         reduce using rule 43 (termino -> factor .)
    RIGHT           reduce using rule 43 (termino -> factor .)
    LEFT            reduce using rule 43 (termino -> factor .)
    END             reduce using rule 43 (termino -> factor .)
    ELSE            reduce using rule 43 (termino -> factor .)
    CLOSE_SQR       reduce using rule 43 (termino -> factor .)
    DIV             shift and go to state 112
    MULT            shift and go to state 113


state 73

    (48) factor -> var_cte .
    DIV             reduce using rule 48 (factor -> var_cte .)
    MULT            reduce using rule 48 (factor -> var_cte .)
    SUB             reduce using rule 48 (factor -> var_cte .)
    SUM             reduce using rule 48 (factor -> var_cte .)
    EQUAL_TO        reduce using rule 48 (factor -> var_cte .)
    MORE_OR_EQ_THAN reduce using rule 48 (factor -> var_cte .)
    LESS_OR_EQ_THAN reduce using rule 48 (factor -> var_cte .)
    DIFFERENT_TO    reduce using rule 48 (factor -> var_cte .)
    MORE_THAN       reduce using rule 48 (factor -> var_cte .)
    LESS_THAN       reduce using rule 48 (factor -> var_cte .)
    OR              reduce using rule 48 (factor -> var_cte .)
    AND             reduce using rule 48 (factor -> var_cte .)
    COMMA           reduce using rule 48 (factor -> var_cte .)
    CLOSE_PTH       reduce using rule 48 (factor -> var_cte .)
    PEN_DOWN        reduce using rule 48 (factor -> var_cte .)
    PEN_UP          reduce using rule 48 (factor -> var_cte .)
    WHILE           reduce using rule 48 (factor -> var_cte .)
    IF              reduce using rule 48 (factor -> var_cte .)
    WRITE           reduce using rule 48 (factor -> var_cte .)
    READ            reduce using rule 48 (factor -> var_cte .)
    ID              reduce using rule 48 (factor -> var_cte .)
    BOOL            reduce using rule 48 (factor -> var_cte .)
    WORD            reduce using rule 48 (factor -> var_cte .)
    NUMBER          reduce using rule 48 (factor -> var_cte .)
    CENTER          reduce using rule 48 (factor -> var_cte .)
    FORWARD         reduce using rule 48 (factor -> var_cte .)
    RIGHT           reduce using rule 48 (factor -> var_cte .)
    LEFT            reduce using rule 48 (factor -> var_cte .)
    END             reduce using rule 48 (factor -> var_cte .)
    ELSE            reduce using rule 48 (factor -> var_cte .)
    CLOSE_SQR       reduce using rule 48 (factor -> var_cte .)


state 74

    (49) factor -> OPEN_PTH . expression CLOSE_PTH
    (38) expression -> . exp
    (39) expression -> . exp rel_op exp
    (40) exp -> . termino
    (41) exp -> . termino SUB termino
    (42) exp -> . termino SUM termino
    (43) termino -> . factor
    (44) termino -> . factor DIV factor
    (45) termino -> . factor MULT factor
    (46) factor -> . SUB var_cte
    (47) factor -> . SUM var_cte
    (48) factor -> . var_cte
    (49) factor -> . OPEN_PTH expression CLOSE_PTH
    (31) var_cte -> . func_call
    (32) var_cte -> . cte_bool
    (33) var_cte -> . CTE_STR
    (34) var_cte -> . CTE_NUM
    (35) var_cte -> . variable
    (58) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (36) cte_bool -> . FALSE
    (37) cte_bool -> . TRUE
    (63) variable -> . ID array
    SUB             shift and go to state 70
    SUM             shift and go to state 71
    OPEN_PTH        shift and go to state 74
    CTE_STR         shift and go to state 77
    CTE_NUM         shift and go to state 78
    ID              shift and go to state 80
    FALSE           shift and go to state 81
    TRUE            shift and go to state 82

    expression                     shift and go to state 114
    exp                            shift and go to state 68
    termino                        shift and go to state 69
    factor                         shift and go to state 72
    var_cte                        shift and go to state 73
    func_call                      shift and go to state 75
    cte_bool                       shift and go to state 76
    variable                       shift and go to state 79

state 75

    (31) var_cte -> func_call .
    DIV             reduce using rule 31 (var_cte -> func_call .)
    MULT            reduce using rule 31 (var_cte -> func_call .)
    SUB             reduce using rule 31 (var_cte -> func_call .)
    SUM             reduce using rule 31 (var_cte -> func_call .)
    EQUAL_TO        reduce using rule 31 (var_cte -> func_call .)
    MORE_OR_EQ_THAN reduce using rule 31 (var_cte -> func_call .)
    LESS_OR_EQ_THAN reduce using rule 31 (var_cte -> func_call .)
    DIFFERENT_TO    reduce using rule 31 (var_cte -> func_call .)
    MORE_THAN       reduce using rule 31 (var_cte -> func_call .)
    LESS_THAN       reduce using rule 31 (var_cte -> func_call .)
    OR              reduce using rule 31 (var_cte -> func_call .)
    AND             reduce using rule 31 (var_cte -> func_call .)
    COMMA           reduce using rule 31 (var_cte -> func_call .)
    CLOSE_PTH       reduce using rule 31 (var_cte -> func_call .)
    PEN_DOWN        reduce using rule 31 (var_cte -> func_call .)
    PEN_UP          reduce using rule 31 (var_cte -> func_call .)
    WHILE           reduce using rule 31 (var_cte -> func_call .)
    IF              reduce using rule 31 (var_cte -> func_call .)
    WRITE           reduce using rule 31 (var_cte -> func_call .)
    READ            reduce using rule 31 (var_cte -> func_call .)
    ID              reduce using rule 31 (var_cte -> func_call .)
    BOOL            reduce using rule 31 (var_cte -> func_call .)
    WORD            reduce using rule 31 (var_cte -> func_call .)
    NUMBER          reduce using rule 31 (var_cte -> func_call .)
    CENTER          reduce using rule 31 (var_cte -> func_call .)
    FORWARD         reduce using rule 31 (var_cte -> func_call .)
    RIGHT           reduce using rule 31 (var_cte -> func_call .)
    LEFT            reduce using rule 31 (var_cte -> func_call .)
    END             reduce using rule 31 (var_cte -> func_call .)
    ELSE            reduce using rule 31 (var_cte -> func_call .)
    CLOSE_SQR       reduce using rule 31 (var_cte -> func_call .)


state 76

    (32) var_cte -> cte_bool .
    DIV             reduce using rule 32 (var_cte -> cte_bool .)
    MULT            reduce using rule 32 (var_cte -> cte_bool .)
    SUB             reduce using rule 32 (var_cte -> cte_bool .)
    SUM             reduce using rule 32 (var_cte -> cte_bool .)
    EQUAL_TO        reduce using rule 32 (var_cte -> cte_bool .)
    MORE_OR_EQ_THAN reduce using rule 32 (var_cte -> cte_bool .)
    LESS_OR_EQ_THAN reduce using rule 32 (var_cte -> cte_bool .)
    DIFFERENT_TO    reduce using rule 32 (var_cte -> cte_bool .)
    MORE_THAN       reduce using rule 32 (var_cte -> cte_bool .)
    LESS_THAN       reduce using rule 32 (var_cte -> cte_bool .)
    OR              reduce using rule 32 (var_cte -> cte_bool .)
    AND             reduce using rule 32 (var_cte -> cte_bool .)
    COMMA           reduce using rule 32 (var_cte -> cte_bool .)
    CLOSE_PTH       reduce using rule 32 (var_cte -> cte_bool .)
    PEN_DOWN        reduce using rule 32 (var_cte -> cte_bool .)
    PEN_UP          reduce using rule 32 (var_cte -> cte_bool .)
    WHILE           reduce using rule 32 (var_cte -> cte_bool .)
    IF              reduce using rule 32 (var_cte -> cte_bool .)
    WRITE           reduce using rule 32 (var_cte -> cte_bool .)
    READ            reduce using rule 32 (var_cte -> cte_bool .)
    ID              reduce using rule 32 (var_cte -> cte_bool .)
    BOOL            reduce using rule 32 (var_cte -> cte_bool .)
    WORD            reduce using rule 32 (var_cte -> cte_bool .)
    NUMBER          reduce using rule 32 (var_cte -> cte_bool .)
    CENTER          reduce using rule 32 (var_cte -> cte_bool .)
    FORWARD         reduce using rule 32 (var_cte -> cte_bool .)
    RIGHT           reduce using rule 32 (var_cte -> cte_bool .)
    LEFT            reduce using rule 32 (var_cte -> cte_bool .)
    END             reduce using rule 32 (var_cte -> cte_bool .)
    ELSE            reduce using rule 32 (var_cte -> cte_bool .)
    CLOSE_SQR       reduce using rule 32 (var_cte -> cte_bool .)


state 77

    (33) var_cte -> CTE_STR .
    DIV             reduce using rule 33 (var_cte -> CTE_STR .)
    MULT            reduce using rule 33 (var_cte -> CTE_STR .)
    SUB             reduce using rule 33 (var_cte -> CTE_STR .)
    SUM             reduce using rule 33 (var_cte -> CTE_STR .)
    EQUAL_TO        reduce using rule 33 (var_cte -> CTE_STR .)
    MORE_OR_EQ_THAN reduce using rule 33 (var_cte -> CTE_STR .)
    LESS_OR_EQ_THAN reduce using rule 33 (var_cte -> CTE_STR .)
    DIFFERENT_TO    reduce using rule 33 (var_cte -> CTE_STR .)
    MORE_THAN       reduce using rule 33 (var_cte -> CTE_STR .)
    LESS_THAN       reduce using rule 33 (var_cte -> CTE_STR .)
    OR              reduce using rule 33 (var_cte -> CTE_STR .)
    AND             reduce using rule 33 (var_cte -> CTE_STR .)
    COMMA           reduce using rule 33 (var_cte -> CTE_STR .)
    CLOSE_PTH       reduce using rule 33 (var_cte -> CTE_STR .)
    PEN_DOWN        reduce using rule 33 (var_cte -> CTE_STR .)
    PEN_UP          reduce using rule 33 (var_cte -> CTE_STR .)
    WHILE           reduce using rule 33 (var_cte -> CTE_STR .)
    IF              reduce using rule 33 (var_cte -> CTE_STR .)
    WRITE           reduce using rule 33 (var_cte -> CTE_STR .)
    READ            reduce using rule 33 (var_cte -> CTE_STR .)
    ID              reduce using rule 33 (var_cte -> CTE_STR .)
    BOOL            reduce using rule 33 (var_cte -> CTE_STR .)
    WORD            reduce using rule 33 (var_cte -> CTE_STR .)
    NUMBER          reduce using rule 33 (var_cte -> CTE_STR .)
    CENTER          reduce using rule 33 (var_cte -> CTE_STR .)
    FORWARD         reduce using rule 33 (var_cte -> CTE_STR .)
    RIGHT           reduce using rule 33 (var_cte -> CTE_STR .)
    LEFT            reduce using rule 33 (var_cte -> CTE_STR .)
    END             reduce using rule 33 (var_cte -> CTE_STR .)
    ELSE            reduce using rule 33 (var_cte -> CTE_STR .)
    CLOSE_SQR       reduce using rule 33 (var_cte -> CTE_STR .)


state 78

    (34) var_cte -> CTE_NUM .
    DIV             reduce using rule 34 (var_cte -> CTE_NUM .)
    MULT            reduce using rule 34 (var_cte -> CTE_NUM .)
    SUB             reduce using rule 34 (var_cte -> CTE_NUM .)
    SUM             reduce using rule 34 (var_cte -> CTE_NUM .)
    EQUAL_TO        reduce using rule 34 (var_cte -> CTE_NUM .)
    MORE_OR_EQ_THAN reduce using rule 34 (var_cte -> CTE_NUM .)
    LESS_OR_EQ_THAN reduce using rule 34 (var_cte -> CTE_NUM .)
    DIFFERENT_TO    reduce using rule 34 (var_cte -> CTE_NUM .)
    MORE_THAN       reduce using rule 34 (var_cte -> CTE_NUM .)
    LESS_THAN       reduce using rule 34 (var_cte -> CTE_NUM .)
    OR              reduce using rule 34 (var_cte -> CTE_NUM .)
    AND             reduce using rule 34 (var_cte -> CTE_NUM .)
    COMMA           reduce using rule 34 (var_cte -> CTE_NUM .)
    CLOSE_PTH       reduce using rule 34 (var_cte -> CTE_NUM .)
    PEN_DOWN        reduce using rule 34 (var_cte -> CTE_NUM .)
    PEN_UP          reduce using rule 34 (var_cte -> CTE_NUM .)
    WHILE           reduce using rule 34 (var_cte -> CTE_NUM .)
    IF              reduce using rule 34 (var_cte -> CTE_NUM .)
    WRITE           reduce using rule 34 (var_cte -> CTE_NUM .)
    READ            reduce using rule 34 (var_cte -> CTE_NUM .)
    ID              reduce using rule 34 (var_cte -> CTE_NUM .)
    BOOL            reduce using rule 34 (var_cte -> CTE_NUM .)
    WORD            reduce using rule 34 (var_cte -> CTE_NUM .)
    NUMBER          reduce using rule 34 (var_cte -> CTE_NUM .)
    CENTER          reduce using rule 34 (var_cte -> CTE_NUM .)
    FORWARD         reduce using rule 34 (var_cte -> CTE_NUM .)
    RIGHT           reduce using rule 34 (var_cte -> CTE_NUM .)
    LEFT            reduce using rule 34 (var_cte -> CTE_NUM .)
    END             reduce using rule 34 (var_cte -> CTE_NUM .)
    ELSE            reduce using rule 34 (var_cte -> CTE_NUM .)
    CLOSE_SQR       reduce using rule 34 (var_cte -> CTE_NUM .)


state 79

    (35) var_cte -> variable .
    DIV             reduce using rule 35 (var_cte -> variable .)
    MULT            reduce using rule 35 (var_cte -> variable .)
    SUB             reduce using rule 35 (var_cte -> variable .)
    SUM             reduce using rule 35 (var_cte -> variable .)
    EQUAL_TO        reduce using rule 35 (var_cte -> variable .)
    MORE_OR_EQ_THAN reduce using rule 35 (var_cte -> variable .)
    LESS_OR_EQ_THAN reduce using rule 35 (var_cte -> variable .)
    DIFFERENT_TO    reduce using rule 35 (var_cte -> variable .)
    MORE_THAN       reduce using rule 35 (var_cte -> variable .)
    LESS_THAN       reduce using rule 35 (var_cte -> variable .)
    OR              reduce using rule 35 (var_cte -> variable .)
    AND             reduce using rule 35 (var_cte -> variable .)
    COMMA           reduce using rule 35 (var_cte -> variable .)
    CLOSE_PTH       reduce using rule 35 (var_cte -> variable .)
    PEN_DOWN        reduce using rule 35 (var_cte -> variable .)
    PEN_UP          reduce using rule 35 (var_cte -> variable .)
    WHILE           reduce using rule 35 (var_cte -> variable .)
    IF              reduce using rule 35 (var_cte -> variable .)
    WRITE           reduce using rule 35 (var_cte -> variable .)
    READ            reduce using rule 35 (var_cte -> variable .)
    ID              reduce using rule 35 (var_cte -> variable .)
    BOOL            reduce using rule 35 (var_cte -> variable .)
    WORD            reduce using rule 35 (var_cte -> variable .)
    NUMBER          reduce using rule 35 (var_cte -> variable .)
    CENTER          reduce using rule 35 (var_cte -> variable .)
    FORWARD         reduce using rule 35 (var_cte -> variable .)
    RIGHT           reduce using rule 35 (var_cte -> variable .)
    LEFT            reduce using rule 35 (var_cte -> variable .)
    END             reduce using rule 35 (var_cte -> variable .)
    ELSE            reduce using rule 35 (var_cte -> variable .)
    CLOSE_SQR       reduce using rule 35 (var_cte -> variable .)


state 80

    (58) func_call -> ID . OPEN_PTH func_call_param CLOSE_PTH
    (63) variable -> ID . array
    (64) array -> . empty
    (65) array -> . OPEN_SQR expression CLOSE_SQR matrix
    (84) empty -> .
    OPEN_PTH        shift and go to state 61
    OPEN_SQR        shift and go to state 117
    DIV             reduce using rule 84 (empty -> .)
    MULT            reduce using rule 84 (empty -> .)
    SUB             reduce using rule 84 (empty -> .)
    SUM             reduce using rule 84 (empty -> .)
    EQUAL_TO        reduce using rule 84 (empty -> .)
    MORE_OR_EQ_THAN reduce using rule 84 (empty -> .)
    LESS_OR_EQ_THAN reduce using rule 84 (empty -> .)
    DIFFERENT_TO    reduce using rule 84 (empty -> .)
    MORE_THAN       reduce using rule 84 (empty -> .)
    LESS_THAN       reduce using rule 84 (empty -> .)
    OR              reduce using rule 84 (empty -> .)
    AND             reduce using rule 84 (empty -> .)
    COMMA           reduce using rule 84 (empty -> .)
    CLOSE_PTH       reduce using rule 84 (empty -> .)
    PEN_DOWN        reduce using rule 84 (empty -> .)
    PEN_UP          reduce using rule 84 (empty -> .)
    WHILE           reduce using rule 84 (empty -> .)
    IF              reduce using rule 84 (empty -> .)
    WRITE           reduce using rule 84 (empty -> .)
    READ            reduce using rule 84 (empty -> .)
    ID              reduce using rule 84 (empty -> .)
    BOOL            reduce using rule 84 (empty -> .)
    WORD            reduce using rule 84 (empty -> .)
    NUMBER          reduce using rule 84 (empty -> .)
    CENTER          reduce using rule 84 (empty -> .)
    FORWARD         reduce using rule 84 (empty -> .)
    RIGHT           reduce using rule 84 (empty -> .)
    LEFT            reduce using rule 84 (empty -> .)
    END             reduce using rule 84 (empty -> .)
    ELSE            reduce using rule 84 (empty -> .)
    CLOSE_SQR       reduce using rule 84 (empty -> .)

    array                          shift and go to state 115
    empty                          shift and go to state 116

state 81

    (36) cte_bool -> FALSE .
    DIV             reduce using rule 36 (cte_bool -> FALSE .)
    MULT            reduce using rule 36 (cte_bool -> FALSE .)
    SUB             reduce using rule 36 (cte_bool -> FALSE .)
    SUM             reduce using rule 36 (cte_bool -> FALSE .)
    EQUAL_TO        reduce using rule 36 (cte_bool -> FALSE .)
    MORE_OR_EQ_THAN reduce using rule 36 (cte_bool -> FALSE .)
    LESS_OR_EQ_THAN reduce using rule 36 (cte_bool -> FALSE .)
    DIFFERENT_TO    reduce using rule 36 (cte_bool -> FALSE .)
    MORE_THAN       reduce using rule 36 (cte_bool -> FALSE .)
    LESS_THAN       reduce using rule 36 (cte_bool -> FALSE .)
    OR              reduce using rule 36 (cte_bool -> FALSE .)
    AND             reduce using rule 36 (cte_bool -> FALSE .)
    COMMA           reduce using rule 36 (cte_bool -> FALSE .)
    CLOSE_PTH       reduce using rule 36 (cte_bool -> FALSE .)
    PEN_DOWN        reduce using rule 36 (cte_bool -> FALSE .)
    PEN_UP          reduce using rule 36 (cte_bool -> FALSE .)
    WHILE           reduce using rule 36 (cte_bool -> FALSE .)
    IF              reduce using rule 36 (cte_bool -> FALSE .)
    WRITE           reduce using rule 36 (cte_bool -> FALSE .)
    READ            reduce using rule 36 (cte_bool -> FALSE .)
    ID              reduce using rule 36 (cte_bool -> FALSE .)
    BOOL            reduce using rule 36 (cte_bool -> FALSE .)
    WORD            reduce using rule 36 (cte_bool -> FALSE .)
    NUMBER          reduce using rule 36 (cte_bool -> FALSE .)
    CENTER          reduce using rule 36 (cte_bool -> FALSE .)
    FORWARD         reduce using rule 36 (cte_bool -> FALSE .)
    RIGHT           reduce using rule 36 (cte_bool -> FALSE .)
    LEFT            reduce using rule 36 (cte_bool -> FALSE .)
    END             reduce using rule 36 (cte_bool -> FALSE .)
    ELSE            reduce using rule 36 (cte_bool -> FALSE .)
    CLOSE_SQR       reduce using rule 36 (cte_bool -> FALSE .)


state 82

    (37) cte_bool -> TRUE .
    DIV             reduce using rule 37 (cte_bool -> TRUE .)
    MULT            reduce using rule 37 (cte_bool -> TRUE .)
    SUB             reduce using rule 37 (cte_bool -> TRUE .)
    SUM             reduce using rule 37 (cte_bool -> TRUE .)
    EQUAL_TO        reduce using rule 37 (cte_bool -> TRUE .)
    MORE_OR_EQ_THAN reduce using rule 37 (cte_bool -> TRUE .)
    LESS_OR_EQ_THAN reduce using rule 37 (cte_bool -> TRUE .)
    DIFFERENT_TO    reduce using rule 37 (cte_bool -> TRUE .)
    MORE_THAN       reduce using rule 37 (cte_bool -> TRUE .)
    LESS_THAN       reduce using rule 37 (cte_bool -> TRUE .)
    OR              reduce using rule 37 (cte_bool -> TRUE .)
    AND             reduce using rule 37 (cte_bool -> TRUE .)
    COMMA           reduce using rule 37 (cte_bool -> TRUE .)
    CLOSE_PTH       reduce using rule 37 (cte_bool -> TRUE .)
    PEN_DOWN        reduce using rule 37 (cte_bool -> TRUE .)
    PEN_UP          reduce using rule 37 (cte_bool -> TRUE .)
    WHILE           reduce using rule 37 (cte_bool -> TRUE .)
    IF              reduce using rule 37 (cte_bool -> TRUE .)
    WRITE           reduce using rule 37 (cte_bool -> TRUE .)
    READ            reduce using rule 37 (cte_bool -> TRUE .)
    ID              reduce using rule 37 (cte_bool -> TRUE .)
    BOOL            reduce using rule 37 (cte_bool -> TRUE .)
    WORD            reduce using rule 37 (cte_bool -> TRUE .)
    NUMBER          reduce using rule 37 (cte_bool -> TRUE .)
    CENTER          reduce using rule 37 (cte_bool -> TRUE .)
    FORWARD         reduce using rule 37 (cte_bool -> TRUE .)
    RIGHT           reduce using rule 37 (cte_bool -> TRUE .)
    LEFT            reduce using rule 37 (cte_bool -> TRUE .)
    END             reduce using rule 37 (cte_bool -> TRUE .)
    ELSE            reduce using rule 37 (cte_bool -> TRUE .)
    CLOSE_SQR       reduce using rule 37 (cte_bool -> TRUE .)


state 83

    (71) if_stmnt -> IF con_expression . stmnt else_stmnt
    (19) stmnt -> . empty
    (20) stmnt -> . var_declaration_func stmnt
    (21) stmnt -> . pen_func stmnt
    (22) stmnt -> . move_func stmnt
    (23) stmnt -> . while_stmnt stmnt
    (24) stmnt -> . if_stmnt stmnt
    (25) stmnt -> . write stmnt
    (26) stmnt -> . read stmnt
    (27) stmnt -> . func_call stmnt
    (28) stmnt -> . var_assignation stmnt
    (84) empty -> .
    (29) var_declaration_func -> . var_type ID multiple_vars
    (81) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (82) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (76) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (74) while_stmnt -> . WHILE con_expression stmnt END
    (71) if_stmnt -> . IF con_expression stmnt else_stmnt
    (70) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (62) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (58) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (30) var_assignation -> . ID ASSIGN expression
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    (77) move_type -> . CENTER
    (78) move_type -> . FORWARD
    (79) move_type -> . RIGHT
    (80) move_type -> . LEFT
    END             reduce using rule 84 (empty -> .)
    ELSE            reduce using rule 84 (empty -> .)
    PEN_DOWN        shift and go to state 37
    PEN_UP          shift and go to state 38
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    WRITE           shift and go to state 42
    READ            shift and go to state 43
    ID              shift and go to state 36
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9
    CENTER          shift and go to state 44
    FORWARD         shift and go to state 45
    RIGHT           shift and go to state 46
    LEFT            shift and go to state 47

    stmnt                          shift and go to state 118
    empty                          shift and go to state 25
    var_declaration_func           shift and go to state 26
    pen_func                       shift and go to state 27
    move_func                      shift and go to state 28
    while_stmnt                    shift and go to state 29
    if_stmnt                       shift and go to state 30
    write                          shift and go to state 31
    read                           shift and go to state 32
    func_call                      shift and go to state 33
    var_assignation                shift and go to state 34
    var_type                       shift and go to state 35
    move_type                      shift and go to state 39

state 84

    (70) write -> WRITE OPEN_PTH . expression CLOSE_PTH
    (38) expression -> . exp
    (39) expression -> . exp rel_op exp
    (40) exp -> . termino
    (41) exp -> . termino SUB termino
    (42) exp -> . termino SUM termino
    (43) termino -> . factor
    (44) termino -> . factor DIV factor
    (45) termino -> . factor MULT factor
    (46) factor -> . SUB var_cte
    (47) factor -> . SUM var_cte
    (48) factor -> . var_cte
    (49) factor -> . OPEN_PTH expression CLOSE_PTH
    (31) var_cte -> . func_call
    (32) var_cte -> . cte_bool
    (33) var_cte -> . CTE_STR
    (34) var_cte -> . CTE_NUM
    (35) var_cte -> . variable
    (58) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (36) cte_bool -> . FALSE
    (37) cte_bool -> . TRUE
    (63) variable -> . ID array
    SUB             shift and go to state 70
    SUM             shift and go to state 71
    OPEN_PTH        shift and go to state 74
    CTE_STR         shift and go to state 77
    CTE_NUM         shift and go to state 78
    ID              shift and go to state 80
    FALSE           shift and go to state 81
    TRUE            shift and go to state 82

    expression                     shift and go to state 119
    exp                            shift and go to state 68
    termino                        shift and go to state 69
    factor                         shift and go to state 72
    var_cte                        shift and go to state 73
    func_call                      shift and go to state 75
    cte_bool                       shift and go to state 76
    variable                       shift and go to state 79

state 85

    (62) read -> READ OPEN_PTH . variable multiple_vars CLOSE_PTH
    (63) variable -> . ID array
    ID              shift and go to state 121

    variable                       shift and go to state 120

state 86

    (10) func_declaration -> func_type FUNC ID OPEN_PTH . parameter CLOSE_PTH stmnt END
    (15) parameter -> . empty
    (16) parameter -> . var_type ID multiple_parameters
    (84) empty -> .
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    CLOSE_PTH       reduce using rule 84 (empty -> .)
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9

    parameter                      shift and go to state 122
    empty                          shift and go to state 123
    var_type                       shift and go to state 124

state 87

    (5) multiple_var -> COMMA ID multiple_var .
    BOOL            reduce using rule 5 (multiple_var -> COMMA ID multiple_var .)
    WORD            reduce using rule 5 (multiple_var -> COMMA ID multiple_var .)
    NUMBER          reduce using rule 5 (multiple_var -> COMMA ID multiple_var .)
    VOID            reduce using rule 5 (multiple_var -> COMMA ID multiple_var .)
    MAIN            reduce using rule 5 (multiple_var -> COMMA ID multiple_var .)


state 88

    (29) var_declaration_func -> var_type ID multiple_vars .
    PEN_DOWN        reduce using rule 29 (var_declaration_func -> var_type ID multiple_vars .)
    PEN_UP          reduce using rule 29 (var_declaration_func -> var_type ID multiple_vars .)
    WHILE           reduce using rule 29 (var_declaration_func -> var_type ID multiple_vars .)
    IF              reduce using rule 29 (var_declaration_func -> var_type ID multiple_vars .)
    WRITE           reduce using rule 29 (var_declaration_func -> var_type ID multiple_vars .)
    READ            reduce using rule 29 (var_declaration_func -> var_type ID multiple_vars .)
    ID              reduce using rule 29 (var_declaration_func -> var_type ID multiple_vars .)
    BOOL            reduce using rule 29 (var_declaration_func -> var_type ID multiple_vars .)
    WORD            reduce using rule 29 (var_declaration_func -> var_type ID multiple_vars .)
    NUMBER          reduce using rule 29 (var_declaration_func -> var_type ID multiple_vars .)
    CENTER          reduce using rule 29 (var_declaration_func -> var_type ID multiple_vars .)
    FORWARD         reduce using rule 29 (var_declaration_func -> var_type ID multiple_vars .)
    RIGHT           reduce using rule 29 (var_declaration_func -> var_type ID multiple_vars .)
    LEFT            reduce using rule 29 (var_declaration_func -> var_type ID multiple_vars .)
    END             reduce using rule 29 (var_declaration_func -> var_type ID multiple_vars .)
    ELSE            reduce using rule 29 (var_declaration_func -> var_type ID multiple_vars .)


state 89

    (68) multiple_vars -> empty .
    PEN_DOWN        reduce using rule 68 (multiple_vars -> empty .)
    PEN_UP          reduce using rule 68 (multiple_vars -> empty .)
    WHILE           reduce using rule 68 (multiple_vars -> empty .)
    IF              reduce using rule 68 (multiple_vars -> empty .)
    WRITE           reduce using rule 68 (multiple_vars -> empty .)
    READ            reduce using rule 68 (multiple_vars -> empty .)
    ID              reduce using rule 68 (multiple_vars -> empty .)
    BOOL            reduce using rule 68 (multiple_vars -> empty .)
    WORD            reduce using rule 68 (multiple_vars -> empty .)
    NUMBER          reduce using rule 68 (multiple_vars -> empty .)
    CENTER          reduce using rule 68 (multiple_vars -> empty .)
    FORWARD         reduce using rule 68 (multiple_vars -> empty .)
    RIGHT           reduce using rule 68 (multiple_vars -> empty .)
    LEFT            reduce using rule 68 (multiple_vars -> empty .)
    END             reduce using rule 68 (multiple_vars -> empty .)
    ELSE            reduce using rule 68 (multiple_vars -> empty .)
    CLOSE_PTH       reduce using rule 68 (multiple_vars -> empty .)


state 90

    (69) multiple_vars -> COMMA . variable
    (63) variable -> . ID array
    ID              shift and go to state 121

    variable                       shift and go to state 125

state 91

    (58) func_call -> ID OPEN_PTH func_call_param . CLOSE_PTH
    CLOSE_PTH       shift and go to state 126


state 92

    (59) func_call_param -> expression . multiple_fc_param
    (60) multiple_fc_param -> . empty
    (61) multiple_fc_param -> . COMMA func_call_param
    (84) empty -> .
    COMMA           shift and go to state 129
    CLOSE_PTH       reduce using rule 84 (empty -> .)

    multiple_fc_param              shift and go to state 127
    empty                          shift and go to state 128

state 93

    (30) var_assignation -> ID ASSIGN expression .
    PEN_DOWN        reduce using rule 30 (var_assignation -> ID ASSIGN expression .)
    PEN_UP          reduce using rule 30 (var_assignation -> ID ASSIGN expression .)
    WHILE           reduce using rule 30 (var_assignation -> ID ASSIGN expression .)
    IF              reduce using rule 30 (var_assignation -> ID ASSIGN expression .)
    WRITE           reduce using rule 30 (var_assignation -> ID ASSIGN expression .)
    READ            reduce using rule 30 (var_assignation -> ID ASSIGN expression .)
    ID              reduce using rule 30 (var_assignation -> ID ASSIGN expression .)
    BOOL            reduce using rule 30 (var_assignation -> ID ASSIGN expression .)
    WORD            reduce using rule 30 (var_assignation -> ID ASSIGN expression .)
    NUMBER          reduce using rule 30 (var_assignation -> ID ASSIGN expression .)
    CENTER          reduce using rule 30 (var_assignation -> ID ASSIGN expression .)
    FORWARD         reduce using rule 30 (var_assignation -> ID ASSIGN expression .)
    RIGHT           reduce using rule 30 (var_assignation -> ID ASSIGN expression .)
    LEFT            reduce using rule 30 (var_assignation -> ID ASSIGN expression .)
    END             reduce using rule 30 (var_assignation -> ID ASSIGN expression .)
    ELSE            reduce using rule 30 (var_assignation -> ID ASSIGN expression .)


state 94

    (81) pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .
    PEN_DOWN        reduce using rule 81 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    PEN_UP          reduce using rule 81 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    WHILE           reduce using rule 81 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    IF              reduce using rule 81 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    WRITE           reduce using rule 81 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    READ            reduce using rule 81 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    ID              reduce using rule 81 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    BOOL            reduce using rule 81 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    WORD            reduce using rule 81 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    NUMBER          reduce using rule 81 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    CENTER          reduce using rule 81 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    FORWARD         reduce using rule 81 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    RIGHT           reduce using rule 81 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    LEFT            reduce using rule 81 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    END             reduce using rule 81 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    ELSE            reduce using rule 81 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)


state 95

    (82) pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .
    PEN_DOWN        reduce using rule 82 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    PEN_UP          reduce using rule 82 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    WHILE           reduce using rule 82 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    IF              reduce using rule 82 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    WRITE           reduce using rule 82 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    READ            reduce using rule 82 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    ID              reduce using rule 82 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    BOOL            reduce using rule 82 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    WORD            reduce using rule 82 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    NUMBER          reduce using rule 82 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    CENTER          reduce using rule 82 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    FORWARD         reduce using rule 82 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    RIGHT           reduce using rule 82 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    LEFT            reduce using rule 82 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    END             reduce using rule 82 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    ELSE            reduce using rule 82 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)


state 96

    (76) move_func -> move_type OPEN_PTH func_call_param . CLOSE_PTH
    CLOSE_PTH       shift and go to state 130


state 97

    (74) while_stmnt -> WHILE con_expression stmnt . END
    END             shift and go to state 131


state 98

    (75) con_expression -> expression log_op . expression
    (38) expression -> . exp
    (39) expression -> . exp rel_op exp
    (40) exp -> . termino
    (41) exp -> . termino SUB termino
    (42) exp -> . termino SUM termino
    (43) termino -> . factor
    (44) termino -> . factor DIV factor
    (45) termino -> . factor MULT factor
    (46) factor -> . SUB var_cte
    (47) factor -> . SUM var_cte
    (48) factor -> . var_cte
    (49) factor -> . OPEN_PTH expression CLOSE_PTH
    (31) var_cte -> . func_call
    (32) var_cte -> . cte_bool
    (33) var_cte -> . CTE_STR
    (34) var_cte -> . CTE_NUM
    (35) var_cte -> . variable
    (58) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (36) cte_bool -> . FALSE
    (37) cte_bool -> . TRUE
    (63) variable -> . ID array
    SUB             shift and go to state 70
    SUM             shift and go to state 71
    OPEN_PTH        shift and go to state 74
    CTE_STR         shift and go to state 77
    CTE_NUM         shift and go to state 78
    ID              shift and go to state 80
    FALSE           shift and go to state 81
    TRUE            shift and go to state 82

    expression                     shift and go to state 132
    exp                            shift and go to state 68
    termino                        shift and go to state 69
    factor                         shift and go to state 72
    var_cte                        shift and go to state 73
    func_call                      shift and go to state 75
    cte_bool                       shift and go to state 76
    variable                       shift and go to state 79

state 99

    (50) log_op -> OR .
    SUB             reduce using rule 50 (log_op -> OR .)
    SUM             reduce using rule 50 (log_op -> OR .)
    OPEN_PTH        reduce using rule 50 (log_op -> OR .)
    CTE_STR         reduce using rule 50 (log_op -> OR .)
    CTE_NUM         reduce using rule 50 (log_op -> OR .)
    ID              reduce using rule 50 (log_op -> OR .)
    FALSE           reduce using rule 50 (log_op -> OR .)
    TRUE            reduce using rule 50 (log_op -> OR .)


state 100

    (51) log_op -> AND .
    SUB             reduce using rule 51 (log_op -> AND .)
    SUM             reduce using rule 51 (log_op -> AND .)
    OPEN_PTH        reduce using rule 51 (log_op -> AND .)
    CTE_STR         reduce using rule 51 (log_op -> AND .)
    CTE_NUM         reduce using rule 51 (log_op -> AND .)
    ID              reduce using rule 51 (log_op -> AND .)
    FALSE           reduce using rule 51 (log_op -> AND .)
    TRUE            reduce using rule 51 (log_op -> AND .)


state 101

    (39) expression -> exp rel_op . exp
    (40) exp -> . termino
    (41) exp -> . termino SUB termino
    (42) exp -> . termino SUM termino
    (43) termino -> . factor
    (44) termino -> . factor DIV factor
    (45) termino -> . factor MULT factor
    (46) factor -> . SUB var_cte
    (47) factor -> . SUM var_cte
    (48) factor -> . var_cte
    (49) factor -> . OPEN_PTH expression CLOSE_PTH
    (31) var_cte -> . func_call
    (32) var_cte -> . cte_bool
    (33) var_cte -> . CTE_STR
    (34) var_cte -> . CTE_NUM
    (35) var_cte -> . variable
    (58) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (36) cte_bool -> . FALSE
    (37) cte_bool -> . TRUE
    (63) variable -> . ID array
    SUB             shift and go to state 70
    SUM             shift and go to state 71
    OPEN_PTH        shift and go to state 74
    CTE_STR         shift and go to state 77
    CTE_NUM         shift and go to state 78
    ID              shift and go to state 80
    FALSE           shift and go to state 81
    TRUE            shift and go to state 82

    exp                            shift and go to state 133
    termino                        shift and go to state 69
    factor                         shift and go to state 72
    var_cte                        shift and go to state 73
    func_call                      shift and go to state 75
    cte_bool                       shift and go to state 76
    variable                       shift and go to state 79

state 102

    (52) rel_op -> EQUAL_TO .
    SUB             reduce using rule 52 (rel_op -> EQUAL_TO .)
    SUM             reduce using rule 52 (rel_op -> EQUAL_TO .)
    OPEN_PTH        reduce using rule 52 (rel_op -> EQUAL_TO .)
    CTE_STR         reduce using rule 52 (rel_op -> EQUAL_TO .)
    CTE_NUM         reduce using rule 52 (rel_op -> EQUAL_TO .)
    ID              reduce using rule 52 (rel_op -> EQUAL_TO .)
    FALSE           reduce using rule 52 (rel_op -> EQUAL_TO .)
    TRUE            reduce using rule 52 (rel_op -> EQUAL_TO .)


state 103

    (53) rel_op -> MORE_OR_EQ_THAN .
    SUB             reduce using rule 53 (rel_op -> MORE_OR_EQ_THAN .)
    SUM             reduce using rule 53 (rel_op -> MORE_OR_EQ_THAN .)
    OPEN_PTH        reduce using rule 53 (rel_op -> MORE_OR_EQ_THAN .)
    CTE_STR         reduce using rule 53 (rel_op -> MORE_OR_EQ_THAN .)
    CTE_NUM         reduce using rule 53 (rel_op -> MORE_OR_EQ_THAN .)
    ID              reduce using rule 53 (rel_op -> MORE_OR_EQ_THAN .)
    FALSE           reduce using rule 53 (rel_op -> MORE_OR_EQ_THAN .)
    TRUE            reduce using rule 53 (rel_op -> MORE_OR_EQ_THAN .)


state 104

    (54) rel_op -> LESS_OR_EQ_THAN .
    SUB             reduce using rule 54 (rel_op -> LESS_OR_EQ_THAN .)
    SUM             reduce using rule 54 (rel_op -> LESS_OR_EQ_THAN .)
    OPEN_PTH        reduce using rule 54 (rel_op -> LESS_OR_EQ_THAN .)
    CTE_STR         reduce using rule 54 (rel_op -> LESS_OR_EQ_THAN .)
    CTE_NUM         reduce using rule 54 (rel_op -> LESS_OR_EQ_THAN .)
    ID              reduce using rule 54 (rel_op -> LESS_OR_EQ_THAN .)
    FALSE           reduce using rule 54 (rel_op -> LESS_OR_EQ_THAN .)
    TRUE            reduce using rule 54 (rel_op -> LESS_OR_EQ_THAN .)


state 105

    (55) rel_op -> DIFFERENT_TO .
    SUB             reduce using rule 55 (rel_op -> DIFFERENT_TO .)
    SUM             reduce using rule 55 (rel_op -> DIFFERENT_TO .)
    OPEN_PTH        reduce using rule 55 (rel_op -> DIFFERENT_TO .)
    CTE_STR         reduce using rule 55 (rel_op -> DIFFERENT_TO .)
    CTE_NUM         reduce using rule 55 (rel_op -> DIFFERENT_TO .)
    ID              reduce using rule 55 (rel_op -> DIFFERENT_TO .)
    FALSE           reduce using rule 55 (rel_op -> DIFFERENT_TO .)
    TRUE            reduce using rule 55 (rel_op -> DIFFERENT_TO .)


state 106

    (56) rel_op -> MORE_THAN .
    SUB             reduce using rule 56 (rel_op -> MORE_THAN .)
    SUM             reduce using rule 56 (rel_op -> MORE_THAN .)
    OPEN_PTH        reduce using rule 56 (rel_op -> MORE_THAN .)
    CTE_STR         reduce using rule 56 (rel_op -> MORE_THAN .)
    CTE_NUM         reduce using rule 56 (rel_op -> MORE_THAN .)
    ID              reduce using rule 56 (rel_op -> MORE_THAN .)
    FALSE           reduce using rule 56 (rel_op -> MORE_THAN .)
    TRUE            reduce using rule 56 (rel_op -> MORE_THAN .)


state 107

    (57) rel_op -> LESS_THAN .
    SUB             reduce using rule 57 (rel_op -> LESS_THAN .)
    SUM             reduce using rule 57 (rel_op -> LESS_THAN .)
    OPEN_PTH        reduce using rule 57 (rel_op -> LESS_THAN .)
    CTE_STR         reduce using rule 57 (rel_op -> LESS_THAN .)
    CTE_NUM         reduce using rule 57 (rel_op -> LESS_THAN .)
    ID              reduce using rule 57 (rel_op -> LESS_THAN .)
    FALSE           reduce using rule 57 (rel_op -> LESS_THAN .)
    TRUE            reduce using rule 57 (rel_op -> LESS_THAN .)


state 108

    (41) exp -> termino SUB . termino
    (43) termino -> . factor
    (44) termino -> . factor DIV factor
    (45) termino -> . factor MULT factor
    (46) factor -> . SUB var_cte
    (47) factor -> . SUM var_cte
    (48) factor -> . var_cte
    (49) factor -> . OPEN_PTH expression CLOSE_PTH
    (31) var_cte -> . func_call
    (32) var_cte -> . cte_bool
    (33) var_cte -> . CTE_STR
    (34) var_cte -> . CTE_NUM
    (35) var_cte -> . variable
    (58) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (36) cte_bool -> . FALSE
    (37) cte_bool -> . TRUE
    (63) variable -> . ID array
    SUB             shift and go to state 70
    SUM             shift and go to state 71
    OPEN_PTH        shift and go to state 74
    CTE_STR         shift and go to state 77
    CTE_NUM         shift and go to state 78
    ID              shift and go to state 80
    FALSE           shift and go to state 81
    TRUE            shift and go to state 82

    termino                        shift and go to state 134
    factor                         shift and go to state 72
    var_cte                        shift and go to state 73
    func_call                      shift and go to state 75
    cte_bool                       shift and go to state 76
    variable                       shift and go to state 79

state 109

    (42) exp -> termino SUM . termino
    (43) termino -> . factor
    (44) termino -> . factor DIV factor
    (45) termino -> . factor MULT factor
    (46) factor -> . SUB var_cte
    (47) factor -> . SUM var_cte
    (48) factor -> . var_cte
    (49) factor -> . OPEN_PTH expression CLOSE_PTH
    (31) var_cte -> . func_call
    (32) var_cte -> . cte_bool
    (33) var_cte -> . CTE_STR
    (34) var_cte -> . CTE_NUM
    (35) var_cte -> . variable
    (58) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (36) cte_bool -> . FALSE
    (37) cte_bool -> . TRUE
    (63) variable -> . ID array
    SUB             shift and go to state 70
    SUM             shift and go to state 71
    OPEN_PTH        shift and go to state 74
    CTE_STR         shift and go to state 77
    CTE_NUM         shift and go to state 78
    ID              shift and go to state 80
    FALSE           shift and go to state 81
    TRUE            shift and go to state 82

    termino                        shift and go to state 135
    factor                         shift and go to state 72
    var_cte                        shift and go to state 73
    func_call                      shift and go to state 75
    cte_bool                       shift and go to state 76
    variable                       shift and go to state 79

state 110

    (46) factor -> SUB var_cte .
    DIV             reduce using rule 46 (factor -> SUB var_cte .)
    MULT            reduce using rule 46 (factor -> SUB var_cte .)
    SUB             reduce using rule 46 (factor -> SUB var_cte .)
    SUM             reduce using rule 46 (factor -> SUB var_cte .)
    EQUAL_TO        reduce using rule 46 (factor -> SUB var_cte .)
    MORE_OR_EQ_THAN reduce using rule 46 (factor -> SUB var_cte .)
    LESS_OR_EQ_THAN reduce using rule 46 (factor -> SUB var_cte .)
    DIFFERENT_TO    reduce using rule 46 (factor -> SUB var_cte .)
    MORE_THAN       reduce using rule 46 (factor -> SUB var_cte .)
    LESS_THAN       reduce using rule 46 (factor -> SUB var_cte .)
    OR              reduce using rule 46 (factor -> SUB var_cte .)
    AND             reduce using rule 46 (factor -> SUB var_cte .)
    COMMA           reduce using rule 46 (factor -> SUB var_cte .)
    CLOSE_PTH       reduce using rule 46 (factor -> SUB var_cte .)
    PEN_DOWN        reduce using rule 46 (factor -> SUB var_cte .)
    PEN_UP          reduce using rule 46 (factor -> SUB var_cte .)
    WHILE           reduce using rule 46 (factor -> SUB var_cte .)
    IF              reduce using rule 46 (factor -> SUB var_cte .)
    WRITE           reduce using rule 46 (factor -> SUB var_cte .)
    READ            reduce using rule 46 (factor -> SUB var_cte .)
    ID              reduce using rule 46 (factor -> SUB var_cte .)
    BOOL            reduce using rule 46 (factor -> SUB var_cte .)
    WORD            reduce using rule 46 (factor -> SUB var_cte .)
    NUMBER          reduce using rule 46 (factor -> SUB var_cte .)
    CENTER          reduce using rule 46 (factor -> SUB var_cte .)
    FORWARD         reduce using rule 46 (factor -> SUB var_cte .)
    RIGHT           reduce using rule 46 (factor -> SUB var_cte .)
    LEFT            reduce using rule 46 (factor -> SUB var_cte .)
    END             reduce using rule 46 (factor -> SUB var_cte .)
    ELSE            reduce using rule 46 (factor -> SUB var_cte .)
    CLOSE_SQR       reduce using rule 46 (factor -> SUB var_cte .)


state 111

    (47) factor -> SUM var_cte .
    DIV             reduce using rule 47 (factor -> SUM var_cte .)
    MULT            reduce using rule 47 (factor -> SUM var_cte .)
    SUB             reduce using rule 47 (factor -> SUM var_cte .)
    SUM             reduce using rule 47 (factor -> SUM var_cte .)
    EQUAL_TO        reduce using rule 47 (factor -> SUM var_cte .)
    MORE_OR_EQ_THAN reduce using rule 47 (factor -> SUM var_cte .)
    LESS_OR_EQ_THAN reduce using rule 47 (factor -> SUM var_cte .)
    DIFFERENT_TO    reduce using rule 47 (factor -> SUM var_cte .)
    MORE_THAN       reduce using rule 47 (factor -> SUM var_cte .)
    LESS_THAN       reduce using rule 47 (factor -> SUM var_cte .)
    OR              reduce using rule 47 (factor -> SUM var_cte .)
    AND             reduce using rule 47 (factor -> SUM var_cte .)
    COMMA           reduce using rule 47 (factor -> SUM var_cte .)
    CLOSE_PTH       reduce using rule 47 (factor -> SUM var_cte .)
    PEN_DOWN        reduce using rule 47 (factor -> SUM var_cte .)
    PEN_UP          reduce using rule 47 (factor -> SUM var_cte .)
    WHILE           reduce using rule 47 (factor -> SUM var_cte .)
    IF              reduce using rule 47 (factor -> SUM var_cte .)
    WRITE           reduce using rule 47 (factor -> SUM var_cte .)
    READ            reduce using rule 47 (factor -> SUM var_cte .)
    ID              reduce using rule 47 (factor -> SUM var_cte .)
    BOOL            reduce using rule 47 (factor -> SUM var_cte .)
    WORD            reduce using rule 47 (factor -> SUM var_cte .)
    NUMBER          reduce using rule 47 (factor -> SUM var_cte .)
    CENTER          reduce using rule 47 (factor -> SUM var_cte .)
    FORWARD         reduce using rule 47 (factor -> SUM var_cte .)
    RIGHT           reduce using rule 47 (factor -> SUM var_cte .)
    LEFT            reduce using rule 47 (factor -> SUM var_cte .)
    END             reduce using rule 47 (factor -> SUM var_cte .)
    ELSE            reduce using rule 47 (factor -> SUM var_cte .)
    CLOSE_SQR       reduce using rule 47 (factor -> SUM var_cte .)


state 112

    (44) termino -> factor DIV . factor
    (46) factor -> . SUB var_cte
    (47) factor -> . SUM var_cte
    (48) factor -> . var_cte
    (49) factor -> . OPEN_PTH expression CLOSE_PTH
    (31) var_cte -> . func_call
    (32) var_cte -> . cte_bool
    (33) var_cte -> . CTE_STR
    (34) var_cte -> . CTE_NUM
    (35) var_cte -> . variable
    (58) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (36) cte_bool -> . FALSE
    (37) cte_bool -> . TRUE
    (63) variable -> . ID array
    SUB             shift and go to state 70
    SUM             shift and go to state 71
    OPEN_PTH        shift and go to state 74
    CTE_STR         shift and go to state 77
    CTE_NUM         shift and go to state 78
    ID              shift and go to state 80
    FALSE           shift and go to state 81
    TRUE            shift and go to state 82

    factor                         shift and go to state 136
    var_cte                        shift and go to state 73
    func_call                      shift and go to state 75
    cte_bool                       shift and go to state 76
    variable                       shift and go to state 79

state 113

    (45) termino -> factor MULT . factor
    (46) factor -> . SUB var_cte
    (47) factor -> . SUM var_cte
    (48) factor -> . var_cte
    (49) factor -> . OPEN_PTH expression CLOSE_PTH
    (31) var_cte -> . func_call
    (32) var_cte -> . cte_bool
    (33) var_cte -> . CTE_STR
    (34) var_cte -> . CTE_NUM
    (35) var_cte -> . variable
    (58) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (36) cte_bool -> . FALSE
    (37) cte_bool -> . TRUE
    (63) variable -> . ID array
    SUB             shift and go to state 70
    SUM             shift and go to state 71
    OPEN_PTH        shift and go to state 74
    CTE_STR         shift and go to state 77
    CTE_NUM         shift and go to state 78
    ID              shift and go to state 80
    FALSE           shift and go to state 81
    TRUE            shift and go to state 82

    factor                         shift and go to state 137
    var_cte                        shift and go to state 73
    func_call                      shift and go to state 75
    cte_bool                       shift and go to state 76
    variable                       shift and go to state 79

state 114

    (49) factor -> OPEN_PTH expression . CLOSE_PTH
    CLOSE_PTH       shift and go to state 138


state 115

    (63) variable -> ID array .
    DIV             reduce using rule 63 (variable -> ID array .)
    MULT            reduce using rule 63 (variable -> ID array .)
    SUB             reduce using rule 63 (variable -> ID array .)
    SUM             reduce using rule 63 (variable -> ID array .)
    EQUAL_TO        reduce using rule 63 (variable -> ID array .)
    MORE_OR_EQ_THAN reduce using rule 63 (variable -> ID array .)
    LESS_OR_EQ_THAN reduce using rule 63 (variable -> ID array .)
    DIFFERENT_TO    reduce using rule 63 (variable -> ID array .)
    MORE_THAN       reduce using rule 63 (variable -> ID array .)
    LESS_THAN       reduce using rule 63 (variable -> ID array .)
    OR              reduce using rule 63 (variable -> ID array .)
    AND             reduce using rule 63 (variable -> ID array .)
    COMMA           reduce using rule 63 (variable -> ID array .)
    CLOSE_PTH       reduce using rule 63 (variable -> ID array .)
    PEN_DOWN        reduce using rule 63 (variable -> ID array .)
    PEN_UP          reduce using rule 63 (variable -> ID array .)
    WHILE           reduce using rule 63 (variable -> ID array .)
    IF              reduce using rule 63 (variable -> ID array .)
    WRITE           reduce using rule 63 (variable -> ID array .)
    READ            reduce using rule 63 (variable -> ID array .)
    ID              reduce using rule 63 (variable -> ID array .)
    BOOL            reduce using rule 63 (variable -> ID array .)
    WORD            reduce using rule 63 (variable -> ID array .)
    NUMBER          reduce using rule 63 (variable -> ID array .)
    CENTER          reduce using rule 63 (variable -> ID array .)
    FORWARD         reduce using rule 63 (variable -> ID array .)
    RIGHT           reduce using rule 63 (variable -> ID array .)
    LEFT            reduce using rule 63 (variable -> ID array .)
    END             reduce using rule 63 (variable -> ID array .)
    ELSE            reduce using rule 63 (variable -> ID array .)
    CLOSE_SQR       reduce using rule 63 (variable -> ID array .)


state 116

    (64) array -> empty .
    DIV             reduce using rule 64 (array -> empty .)
    MULT            reduce using rule 64 (array -> empty .)
    SUB             reduce using rule 64 (array -> empty .)
    SUM             reduce using rule 64 (array -> empty .)
    EQUAL_TO        reduce using rule 64 (array -> empty .)
    MORE_OR_EQ_THAN reduce using rule 64 (array -> empty .)
    LESS_OR_EQ_THAN reduce using rule 64 (array -> empty .)
    DIFFERENT_TO    reduce using rule 64 (array -> empty .)
    MORE_THAN       reduce using rule 64 (array -> empty .)
    LESS_THAN       reduce using rule 64 (array -> empty .)
    OR              reduce using rule 64 (array -> empty .)
    AND             reduce using rule 64 (array -> empty .)
    COMMA           reduce using rule 64 (array -> empty .)
    CLOSE_PTH       reduce using rule 64 (array -> empty .)
    PEN_DOWN        reduce using rule 64 (array -> empty .)
    PEN_UP          reduce using rule 64 (array -> empty .)
    WHILE           reduce using rule 64 (array -> empty .)
    IF              reduce using rule 64 (array -> empty .)
    WRITE           reduce using rule 64 (array -> empty .)
    READ            reduce using rule 64 (array -> empty .)
    ID              reduce using rule 64 (array -> empty .)
    BOOL            reduce using rule 64 (array -> empty .)
    WORD            reduce using rule 64 (array -> empty .)
    NUMBER          reduce using rule 64 (array -> empty .)
    CENTER          reduce using rule 64 (array -> empty .)
    FORWARD         reduce using rule 64 (array -> empty .)
    RIGHT           reduce using rule 64 (array -> empty .)
    LEFT            reduce using rule 64 (array -> empty .)
    END             reduce using rule 64 (array -> empty .)
    ELSE            reduce using rule 64 (array -> empty .)
    CLOSE_SQR       reduce using rule 64 (array -> empty .)


state 117

    (65) array -> OPEN_SQR . expression CLOSE_SQR matrix
    (38) expression -> . exp
    (39) expression -> . exp rel_op exp
    (40) exp -> . termino
    (41) exp -> . termino SUB termino
    (42) exp -> . termino SUM termino
    (43) termino -> . factor
    (44) termino -> . factor DIV factor
    (45) termino -> . factor MULT factor
    (46) factor -> . SUB var_cte
    (47) factor -> . SUM var_cte
    (48) factor -> . var_cte
    (49) factor -> . OPEN_PTH expression CLOSE_PTH
    (31) var_cte -> . func_call
    (32) var_cte -> . cte_bool
    (33) var_cte -> . CTE_STR
    (34) var_cte -> . CTE_NUM
    (35) var_cte -> . variable
    (58) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (36) cte_bool -> . FALSE
    (37) cte_bool -> . TRUE
    (63) variable -> . ID array
    SUB             shift and go to state 70
    SUM             shift and go to state 71
    OPEN_PTH        shift and go to state 74
    CTE_STR         shift and go to state 77
    CTE_NUM         shift and go to state 78
    ID              shift and go to state 80
    FALSE           shift and go to state 81
    TRUE            shift and go to state 82

    expression                     shift and go to state 139
    exp                            shift and go to state 68
    termino                        shift and go to state 69
    factor                         shift and go to state 72
    var_cte                        shift and go to state 73
    func_call                      shift and go to state 75
    cte_bool                       shift and go to state 76
    variable                       shift and go to state 79

state 118

    (71) if_stmnt -> IF con_expression stmnt . else_stmnt
    (72) else_stmnt -> . END
    (73) else_stmnt -> . ELSE stmnt END
    END             shift and go to state 141
    ELSE            shift and go to state 142

    else_stmnt                     shift and go to state 140

state 119

    (70) write -> WRITE OPEN_PTH expression . CLOSE_PTH
    CLOSE_PTH       shift and go to state 143


state 120

    (62) read -> READ OPEN_PTH variable . multiple_vars CLOSE_PTH
    (68) multiple_vars -> . empty
    (69) multiple_vars -> . COMMA variable
    (84) empty -> .
    COMMA           shift and go to state 90
    CLOSE_PTH       reduce using rule 84 (empty -> .)

    multiple_vars                  shift and go to state 144
    empty                          shift and go to state 89

state 121

    (63) variable -> ID . array
    (64) array -> . empty
    (65) array -> . OPEN_SQR expression CLOSE_SQR matrix
    (84) empty -> .
    OPEN_SQR        shift and go to state 117
    COMMA           reduce using rule 84 (empty -> .)
    CLOSE_PTH       reduce using rule 84 (empty -> .)
    PEN_DOWN        reduce using rule 84 (empty -> .)
    PEN_UP          reduce using rule 84 (empty -> .)
    WHILE           reduce using rule 84 (empty -> .)
    IF              reduce using rule 84 (empty -> .)
    WRITE           reduce using rule 84 (empty -> .)
    READ            reduce using rule 84 (empty -> .)
    ID              reduce using rule 84 (empty -> .)
    BOOL            reduce using rule 84 (empty -> .)
    WORD            reduce using rule 84 (empty -> .)
    NUMBER          reduce using rule 84 (empty -> .)
    CENTER          reduce using rule 84 (empty -> .)
    FORWARD         reduce using rule 84 (empty -> .)
    RIGHT           reduce using rule 84 (empty -> .)
    LEFT            reduce using rule 84 (empty -> .)
    END             reduce using rule 84 (empty -> .)
    ELSE            reduce using rule 84 (empty -> .)

    array                          shift and go to state 115
    empty                          shift and go to state 116

state 122

    (10) func_declaration -> func_type FUNC ID OPEN_PTH parameter . CLOSE_PTH stmnt END
    CLOSE_PTH       shift and go to state 145


state 123

    (15) parameter -> empty .
    CLOSE_PTH       reduce using rule 15 (parameter -> empty .)


state 124

    (16) parameter -> var_type . ID multiple_parameters
    ID              shift and go to state 146


state 125

    (69) multiple_vars -> COMMA variable .
    PEN_DOWN        reduce using rule 69 (multiple_vars -> COMMA variable .)
    PEN_UP          reduce using rule 69 (multiple_vars -> COMMA variable .)
    WHILE           reduce using rule 69 (multiple_vars -> COMMA variable .)
    IF              reduce using rule 69 (multiple_vars -> COMMA variable .)
    WRITE           reduce using rule 69 (multiple_vars -> COMMA variable .)
    READ            reduce using rule 69 (multiple_vars -> COMMA variable .)
    ID              reduce using rule 69 (multiple_vars -> COMMA variable .)
    BOOL            reduce using rule 69 (multiple_vars -> COMMA variable .)
    WORD            reduce using rule 69 (multiple_vars -> COMMA variable .)
    NUMBER          reduce using rule 69 (multiple_vars -> COMMA variable .)
    CENTER          reduce using rule 69 (multiple_vars -> COMMA variable .)
    FORWARD         reduce using rule 69 (multiple_vars -> COMMA variable .)
    RIGHT           reduce using rule 69 (multiple_vars -> COMMA variable .)
    LEFT            reduce using rule 69 (multiple_vars -> COMMA variable .)
    END             reduce using rule 69 (multiple_vars -> COMMA variable .)
    ELSE            reduce using rule 69 (multiple_vars -> COMMA variable .)
    CLOSE_PTH       reduce using rule 69 (multiple_vars -> COMMA variable .)


state 126

    (58) func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .
    PEN_DOWN        reduce using rule 58 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    PEN_UP          reduce using rule 58 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    WHILE           reduce using rule 58 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    IF              reduce using rule 58 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    WRITE           reduce using rule 58 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    READ            reduce using rule 58 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    ID              reduce using rule 58 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    BOOL            reduce using rule 58 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    WORD            reduce using rule 58 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    NUMBER          reduce using rule 58 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    CENTER          reduce using rule 58 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    FORWARD         reduce using rule 58 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    RIGHT           reduce using rule 58 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    LEFT            reduce using rule 58 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    END             reduce using rule 58 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    ELSE            reduce using rule 58 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    DIV             reduce using rule 58 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    MULT            reduce using rule 58 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    SUB             reduce using rule 58 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    SUM             reduce using rule 58 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    EQUAL_TO        reduce using rule 58 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    MORE_OR_EQ_THAN reduce using rule 58 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    LESS_OR_EQ_THAN reduce using rule 58 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    DIFFERENT_TO    reduce using rule 58 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    MORE_THAN       reduce using rule 58 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    LESS_THAN       reduce using rule 58 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    OR              reduce using rule 58 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    AND             reduce using rule 58 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    COMMA           reduce using rule 58 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    CLOSE_PTH       reduce using rule 58 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    CLOSE_SQR       reduce using rule 58 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)


state 127

    (59) func_call_param -> expression multiple_fc_param .
    CLOSE_PTH       reduce using rule 59 (func_call_param -> expression multiple_fc_param .)


state 128

    (60) multiple_fc_param -> empty .
    CLOSE_PTH       reduce using rule 60 (multiple_fc_param -> empty .)


state 129

    (61) multiple_fc_param -> COMMA . func_call_param
    (59) func_call_param -> . expression multiple_fc_param
    (38) expression -> . exp
    (39) expression -> . exp rel_op exp
    (40) exp -> . termino
    (41) exp -> . termino SUB termino
    (42) exp -> . termino SUM termino
    (43) termino -> . factor
    (44) termino -> . factor DIV factor
    (45) termino -> . factor MULT factor
    (46) factor -> . SUB var_cte
    (47) factor -> . SUM var_cte
    (48) factor -> . var_cte
    (49) factor -> . OPEN_PTH expression CLOSE_PTH
    (31) var_cte -> . func_call
    (32) var_cte -> . cte_bool
    (33) var_cte -> . CTE_STR
    (34) var_cte -> . CTE_NUM
    (35) var_cte -> . variable
    (58) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (36) cte_bool -> . FALSE
    (37) cte_bool -> . TRUE
    (63) variable -> . ID array
    SUB             shift and go to state 70
    SUM             shift and go to state 71
    OPEN_PTH        shift and go to state 74
    CTE_STR         shift and go to state 77
    CTE_NUM         shift and go to state 78
    ID              shift and go to state 80
    FALSE           shift and go to state 81
    TRUE            shift and go to state 82

    func_call_param                shift and go to state 147
    expression                     shift and go to state 92
    exp                            shift and go to state 68
    termino                        shift and go to state 69
    factor                         shift and go to state 72
    var_cte                        shift and go to state 73
    func_call                      shift and go to state 75
    cte_bool                       shift and go to state 76
    variable                       shift and go to state 79

state 130

    (76) move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .
    PEN_DOWN        reduce using rule 76 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    PEN_UP          reduce using rule 76 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    WHILE           reduce using rule 76 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    IF              reduce using rule 76 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    WRITE           reduce using rule 76 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    READ            reduce using rule 76 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    ID              reduce using rule 76 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    BOOL            reduce using rule 76 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    WORD            reduce using rule 76 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    NUMBER          reduce using rule 76 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    CENTER          reduce using rule 76 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    FORWARD         reduce using rule 76 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    RIGHT           reduce using rule 76 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    LEFT            reduce using rule 76 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    END             reduce using rule 76 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    ELSE            reduce using rule 76 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)


state 131

    (74) while_stmnt -> WHILE con_expression stmnt END .
    PEN_DOWN        reduce using rule 74 (while_stmnt -> WHILE con_expression stmnt END .)
    PEN_UP          reduce using rule 74 (while_stmnt -> WHILE con_expression stmnt END .)
    WHILE           reduce using rule 74 (while_stmnt -> WHILE con_expression stmnt END .)
    IF              reduce using rule 74 (while_stmnt -> WHILE con_expression stmnt END .)
    WRITE           reduce using rule 74 (while_stmnt -> WHILE con_expression stmnt END .)
    READ            reduce using rule 74 (while_stmnt -> WHILE con_expression stmnt END .)
    ID              reduce using rule 74 (while_stmnt -> WHILE con_expression stmnt END .)
    BOOL            reduce using rule 74 (while_stmnt -> WHILE con_expression stmnt END .)
    WORD            reduce using rule 74 (while_stmnt -> WHILE con_expression stmnt END .)
    NUMBER          reduce using rule 74 (while_stmnt -> WHILE con_expression stmnt END .)
    CENTER          reduce using rule 74 (while_stmnt -> WHILE con_expression stmnt END .)
    FORWARD         reduce using rule 74 (while_stmnt -> WHILE con_expression stmnt END .)
    RIGHT           reduce using rule 74 (while_stmnt -> WHILE con_expression stmnt END .)
    LEFT            reduce using rule 74 (while_stmnt -> WHILE con_expression stmnt END .)
    END             reduce using rule 74 (while_stmnt -> WHILE con_expression stmnt END .)
    ELSE            reduce using rule 74 (while_stmnt -> WHILE con_expression stmnt END .)


state 132

    (75) con_expression -> expression log_op expression .
    PEN_DOWN        reduce using rule 75 (con_expression -> expression log_op expression .)
    PEN_UP          reduce using rule 75 (con_expression -> expression log_op expression .)
    WHILE           reduce using rule 75 (con_expression -> expression log_op expression .)
    IF              reduce using rule 75 (con_expression -> expression log_op expression .)
    WRITE           reduce using rule 75 (con_expression -> expression log_op expression .)
    READ            reduce using rule 75 (con_expression -> expression log_op expression .)
    ID              reduce using rule 75 (con_expression -> expression log_op expression .)
    BOOL            reduce using rule 75 (con_expression -> expression log_op expression .)
    WORD            reduce using rule 75 (con_expression -> expression log_op expression .)
    NUMBER          reduce using rule 75 (con_expression -> expression log_op expression .)
    CENTER          reduce using rule 75 (con_expression -> expression log_op expression .)
    FORWARD         reduce using rule 75 (con_expression -> expression log_op expression .)
    RIGHT           reduce using rule 75 (con_expression -> expression log_op expression .)
    LEFT            reduce using rule 75 (con_expression -> expression log_op expression .)
    END             reduce using rule 75 (con_expression -> expression log_op expression .)
    ELSE            reduce using rule 75 (con_expression -> expression log_op expression .)


state 133

    (39) expression -> exp rel_op exp .
    OR              reduce using rule 39 (expression -> exp rel_op exp .)
    AND             reduce using rule 39 (expression -> exp rel_op exp .)
    COMMA           reduce using rule 39 (expression -> exp rel_op exp .)
    CLOSE_PTH       reduce using rule 39 (expression -> exp rel_op exp .)
    PEN_DOWN        reduce using rule 39 (expression -> exp rel_op exp .)
    PEN_UP          reduce using rule 39 (expression -> exp rel_op exp .)
    WHILE           reduce using rule 39 (expression -> exp rel_op exp .)
    IF              reduce using rule 39 (expression -> exp rel_op exp .)
    WRITE           reduce using rule 39 (expression -> exp rel_op exp .)
    READ            reduce using rule 39 (expression -> exp rel_op exp .)
    ID              reduce using rule 39 (expression -> exp rel_op exp .)
    BOOL            reduce using rule 39 (expression -> exp rel_op exp .)
    WORD            reduce using rule 39 (expression -> exp rel_op exp .)
    NUMBER          reduce using rule 39 (expression -> exp rel_op exp .)
    CENTER          reduce using rule 39 (expression -> exp rel_op exp .)
    FORWARD         reduce using rule 39 (expression -> exp rel_op exp .)
    RIGHT           reduce using rule 39 (expression -> exp rel_op exp .)
    LEFT            reduce using rule 39 (expression -> exp rel_op exp .)
    END             reduce using rule 39 (expression -> exp rel_op exp .)
    ELSE            reduce using rule 39 (expression -> exp rel_op exp .)
    CLOSE_SQR       reduce using rule 39 (expression -> exp rel_op exp .)


state 134

    (41) exp -> termino SUB termino .
    EQUAL_TO        reduce using rule 41 (exp -> termino SUB termino .)
    MORE_OR_EQ_THAN reduce using rule 41 (exp -> termino SUB termino .)
    LESS_OR_EQ_THAN reduce using rule 41 (exp -> termino SUB termino .)
    DIFFERENT_TO    reduce using rule 41 (exp -> termino SUB termino .)
    MORE_THAN       reduce using rule 41 (exp -> termino SUB termino .)
    LESS_THAN       reduce using rule 41 (exp -> termino SUB termino .)
    OR              reduce using rule 41 (exp -> termino SUB termino .)
    AND             reduce using rule 41 (exp -> termino SUB termino .)
    COMMA           reduce using rule 41 (exp -> termino SUB termino .)
    CLOSE_PTH       reduce using rule 41 (exp -> termino SUB termino .)
    PEN_DOWN        reduce using rule 41 (exp -> termino SUB termino .)
    PEN_UP          reduce using rule 41 (exp -> termino SUB termino .)
    WHILE           reduce using rule 41 (exp -> termino SUB termino .)
    IF              reduce using rule 41 (exp -> termino SUB termino .)
    WRITE           reduce using rule 41 (exp -> termino SUB termino .)
    READ            reduce using rule 41 (exp -> termino SUB termino .)
    ID              reduce using rule 41 (exp -> termino SUB termino .)
    BOOL            reduce using rule 41 (exp -> termino SUB termino .)
    WORD            reduce using rule 41 (exp -> termino SUB termino .)
    NUMBER          reduce using rule 41 (exp -> termino SUB termino .)
    CENTER          reduce using rule 41 (exp -> termino SUB termino .)
    FORWARD         reduce using rule 41 (exp -> termino SUB termino .)
    RIGHT           reduce using rule 41 (exp -> termino SUB termino .)
    LEFT            reduce using rule 41 (exp -> termino SUB termino .)
    END             reduce using rule 41 (exp -> termino SUB termino .)
    ELSE            reduce using rule 41 (exp -> termino SUB termino .)
    CLOSE_SQR       reduce using rule 41 (exp -> termino SUB termino .)


state 135

    (42) exp -> termino SUM termino .
    EQUAL_TO        reduce using rule 42 (exp -> termino SUM termino .)
    MORE_OR_EQ_THAN reduce using rule 42 (exp -> termino SUM termino .)
    LESS_OR_EQ_THAN reduce using rule 42 (exp -> termino SUM termino .)
    DIFFERENT_TO    reduce using rule 42 (exp -> termino SUM termino .)
    MORE_THAN       reduce using rule 42 (exp -> termino SUM termino .)
    LESS_THAN       reduce using rule 42 (exp -> termino SUM termino .)
    OR              reduce using rule 42 (exp -> termino SUM termino .)
    AND             reduce using rule 42 (exp -> termino SUM termino .)
    COMMA           reduce using rule 42 (exp -> termino SUM termino .)
    CLOSE_PTH       reduce using rule 42 (exp -> termino SUM termino .)
    PEN_DOWN        reduce using rule 42 (exp -> termino SUM termino .)
    PEN_UP          reduce using rule 42 (exp -> termino SUM termino .)
    WHILE           reduce using rule 42 (exp -> termino SUM termino .)
    IF              reduce using rule 42 (exp -> termino SUM termino .)
    WRITE           reduce using rule 42 (exp -> termino SUM termino .)
    READ            reduce using rule 42 (exp -> termino SUM termino .)
    ID              reduce using rule 42 (exp -> termino SUM termino .)
    BOOL            reduce using rule 42 (exp -> termino SUM termino .)
    WORD            reduce using rule 42 (exp -> termino SUM termino .)
    NUMBER          reduce using rule 42 (exp -> termino SUM termino .)
    CENTER          reduce using rule 42 (exp -> termino SUM termino .)
    FORWARD         reduce using rule 42 (exp -> termino SUM termino .)
    RIGHT           reduce using rule 42 (exp -> termino SUM termino .)
    LEFT            reduce using rule 42 (exp -> termino SUM termino .)
    END             reduce using rule 42 (exp -> termino SUM termino .)
    ELSE            reduce using rule 42 (exp -> termino SUM termino .)
    CLOSE_SQR       reduce using rule 42 (exp -> termino SUM termino .)


state 136

    (44) termino -> factor DIV factor .
    SUB             reduce using rule 44 (termino -> factor DIV factor .)
    SUM             reduce using rule 44 (termino -> factor DIV factor .)
    EQUAL_TO        reduce using rule 44 (termino -> factor DIV factor .)
    MORE_OR_EQ_THAN reduce using rule 44 (termino -> factor DIV factor .)
    LESS_OR_EQ_THAN reduce using rule 44 (termino -> factor DIV factor .)
    DIFFERENT_TO    reduce using rule 44 (termino -> factor DIV factor .)
    MORE_THAN       reduce using rule 44 (termino -> factor DIV factor .)
    LESS_THAN       reduce using rule 44 (termino -> factor DIV factor .)
    OR              reduce using rule 44 (termino -> factor DIV factor .)
    AND             reduce using rule 44 (termino -> factor DIV factor .)
    COMMA           reduce using rule 44 (termino -> factor DIV factor .)
    CLOSE_PTH       reduce using rule 44 (termino -> factor DIV factor .)
    PEN_DOWN        reduce using rule 44 (termino -> factor DIV factor .)
    PEN_UP          reduce using rule 44 (termino -> factor DIV factor .)
    WHILE           reduce using rule 44 (termino -> factor DIV factor .)
    IF              reduce using rule 44 (termino -> factor DIV factor .)
    WRITE           reduce using rule 44 (termino -> factor DIV factor .)
    READ            reduce using rule 44 (termino -> factor DIV factor .)
    ID              reduce using rule 44 (termino -> factor DIV factor .)
    BOOL            reduce using rule 44 (termino -> factor DIV factor .)
    WORD            reduce using rule 44 (termino -> factor DIV factor .)
    NUMBER          reduce using rule 44 (termino -> factor DIV factor .)
    CENTER          reduce using rule 44 (termino -> factor DIV factor .)
    FORWARD         reduce using rule 44 (termino -> factor DIV factor .)
    RIGHT           reduce using rule 44 (termino -> factor DIV factor .)
    LEFT            reduce using rule 44 (termino -> factor DIV factor .)
    END             reduce using rule 44 (termino -> factor DIV factor .)
    ELSE            reduce using rule 44 (termino -> factor DIV factor .)
    CLOSE_SQR       reduce using rule 44 (termino -> factor DIV factor .)


state 137

    (45) termino -> factor MULT factor .
    SUB             reduce using rule 45 (termino -> factor MULT factor .)
    SUM             reduce using rule 45 (termino -> factor MULT factor .)
    EQUAL_TO        reduce using rule 45 (termino -> factor MULT factor .)
    MORE_OR_EQ_THAN reduce using rule 45 (termino -> factor MULT factor .)
    LESS_OR_EQ_THAN reduce using rule 45 (termino -> factor MULT factor .)
    DIFFERENT_TO    reduce using rule 45 (termino -> factor MULT factor .)
    MORE_THAN       reduce using rule 45 (termino -> factor MULT factor .)
    LESS_THAN       reduce using rule 45 (termino -> factor MULT factor .)
    OR              reduce using rule 45 (termino -> factor MULT factor .)
    AND             reduce using rule 45 (termino -> factor MULT factor .)
    COMMA           reduce using rule 45 (termino -> factor MULT factor .)
    CLOSE_PTH       reduce using rule 45 (termino -> factor MULT factor .)
    PEN_DOWN        reduce using rule 45 (termino -> factor MULT factor .)
    PEN_UP          reduce using rule 45 (termino -> factor MULT factor .)
    WHILE           reduce using rule 45 (termino -> factor MULT factor .)
    IF              reduce using rule 45 (termino -> factor MULT factor .)
    WRITE           reduce using rule 45 (termino -> factor MULT factor .)
    READ            reduce using rule 45 (termino -> factor MULT factor .)
    ID              reduce using rule 45 (termino -> factor MULT factor .)
    BOOL            reduce using rule 45 (termino -> factor MULT factor .)
    WORD            reduce using rule 45 (termino -> factor MULT factor .)
    NUMBER          reduce using rule 45 (termino -> factor MULT factor .)
    CENTER          reduce using rule 45 (termino -> factor MULT factor .)
    FORWARD         reduce using rule 45 (termino -> factor MULT factor .)
    RIGHT           reduce using rule 45 (termino -> factor MULT factor .)
    LEFT            reduce using rule 45 (termino -> factor MULT factor .)
    END             reduce using rule 45 (termino -> factor MULT factor .)
    ELSE            reduce using rule 45 (termino -> factor MULT factor .)
    CLOSE_SQR       reduce using rule 45 (termino -> factor MULT factor .)


state 138

    (49) factor -> OPEN_PTH expression CLOSE_PTH .
    DIV             reduce using rule 49 (factor -> OPEN_PTH expression CLOSE_PTH .)
    MULT            reduce using rule 49 (factor -> OPEN_PTH expression CLOSE_PTH .)
    SUB             reduce using rule 49 (factor -> OPEN_PTH expression CLOSE_PTH .)
    SUM             reduce using rule 49 (factor -> OPEN_PTH expression CLOSE_PTH .)
    EQUAL_TO        reduce using rule 49 (factor -> OPEN_PTH expression CLOSE_PTH .)
    MORE_OR_EQ_THAN reduce using rule 49 (factor -> OPEN_PTH expression CLOSE_PTH .)
    LESS_OR_EQ_THAN reduce using rule 49 (factor -> OPEN_PTH expression CLOSE_PTH .)
    DIFFERENT_TO    reduce using rule 49 (factor -> OPEN_PTH expression CLOSE_PTH .)
    MORE_THAN       reduce using rule 49 (factor -> OPEN_PTH expression CLOSE_PTH .)
    LESS_THAN       reduce using rule 49 (factor -> OPEN_PTH expression CLOSE_PTH .)
    OR              reduce using rule 49 (factor -> OPEN_PTH expression CLOSE_PTH .)
    AND             reduce using rule 49 (factor -> OPEN_PTH expression CLOSE_PTH .)
    COMMA           reduce using rule 49 (factor -> OPEN_PTH expression CLOSE_PTH .)
    CLOSE_PTH       reduce using rule 49 (factor -> OPEN_PTH expression CLOSE_PTH .)
    PEN_DOWN        reduce using rule 49 (factor -> OPEN_PTH expression CLOSE_PTH .)
    PEN_UP          reduce using rule 49 (factor -> OPEN_PTH expression CLOSE_PTH .)
    WHILE           reduce using rule 49 (factor -> OPEN_PTH expression CLOSE_PTH .)
    IF              reduce using rule 49 (factor -> OPEN_PTH expression CLOSE_PTH .)
    WRITE           reduce using rule 49 (factor -> OPEN_PTH expression CLOSE_PTH .)
    READ            reduce using rule 49 (factor -> OPEN_PTH expression CLOSE_PTH .)
    ID              reduce using rule 49 (factor -> OPEN_PTH expression CLOSE_PTH .)
    BOOL            reduce using rule 49 (factor -> OPEN_PTH expression CLOSE_PTH .)
    WORD            reduce using rule 49 (factor -> OPEN_PTH expression CLOSE_PTH .)
    NUMBER          reduce using rule 49 (factor -> OPEN_PTH expression CLOSE_PTH .)
    CENTER          reduce using rule 49 (factor -> OPEN_PTH expression CLOSE_PTH .)
    FORWARD         reduce using rule 49 (factor -> OPEN_PTH expression CLOSE_PTH .)
    RIGHT           reduce using rule 49 (factor -> OPEN_PTH expression CLOSE_PTH .)
    LEFT            reduce using rule 49 (factor -> OPEN_PTH expression CLOSE_PTH .)
    END             reduce using rule 49 (factor -> OPEN_PTH expression CLOSE_PTH .)
    ELSE            reduce using rule 49 (factor -> OPEN_PTH expression CLOSE_PTH .)
    CLOSE_SQR       reduce using rule 49 (factor -> OPEN_PTH expression CLOSE_PTH .)


state 139

    (65) array -> OPEN_SQR expression . CLOSE_SQR matrix
    CLOSE_SQR       shift and go to state 148


state 140

    (71) if_stmnt -> IF con_expression stmnt else_stmnt .
    PEN_DOWN        reduce using rule 71 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    PEN_UP          reduce using rule 71 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    WHILE           reduce using rule 71 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    IF              reduce using rule 71 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    WRITE           reduce using rule 71 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    READ            reduce using rule 71 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    ID              reduce using rule 71 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    BOOL            reduce using rule 71 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    WORD            reduce using rule 71 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    NUMBER          reduce using rule 71 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    CENTER          reduce using rule 71 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    FORWARD         reduce using rule 71 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    RIGHT           reduce using rule 71 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    LEFT            reduce using rule 71 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    END             reduce using rule 71 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    ELSE            reduce using rule 71 (if_stmnt -> IF con_expression stmnt else_stmnt .)


state 141

    (72) else_stmnt -> END .
    PEN_DOWN        reduce using rule 72 (else_stmnt -> END .)
    PEN_UP          reduce using rule 72 (else_stmnt -> END .)
    WHILE           reduce using rule 72 (else_stmnt -> END .)
    IF              reduce using rule 72 (else_stmnt -> END .)
    WRITE           reduce using rule 72 (else_stmnt -> END .)
    READ            reduce using rule 72 (else_stmnt -> END .)
    ID              reduce using rule 72 (else_stmnt -> END .)
    BOOL            reduce using rule 72 (else_stmnt -> END .)
    WORD            reduce using rule 72 (else_stmnt -> END .)
    NUMBER          reduce using rule 72 (else_stmnt -> END .)
    CENTER          reduce using rule 72 (else_stmnt -> END .)
    FORWARD         reduce using rule 72 (else_stmnt -> END .)
    RIGHT           reduce using rule 72 (else_stmnt -> END .)
    LEFT            reduce using rule 72 (else_stmnt -> END .)
    END             reduce using rule 72 (else_stmnt -> END .)
    ELSE            reduce using rule 72 (else_stmnt -> END .)


state 142

    (73) else_stmnt -> ELSE . stmnt END
    (19) stmnt -> . empty
    (20) stmnt -> . var_declaration_func stmnt
    (21) stmnt -> . pen_func stmnt
    (22) stmnt -> . move_func stmnt
    (23) stmnt -> . while_stmnt stmnt
    (24) stmnt -> . if_stmnt stmnt
    (25) stmnt -> . write stmnt
    (26) stmnt -> . read stmnt
    (27) stmnt -> . func_call stmnt
    (28) stmnt -> . var_assignation stmnt
    (84) empty -> .
    (29) var_declaration_func -> . var_type ID multiple_vars
    (81) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (82) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (76) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (74) while_stmnt -> . WHILE con_expression stmnt END
    (71) if_stmnt -> . IF con_expression stmnt else_stmnt
    (70) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (62) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (58) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (30) var_assignation -> . ID ASSIGN expression
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    (77) move_type -> . CENTER
    (78) move_type -> . FORWARD
    (79) move_type -> . RIGHT
    (80) move_type -> . LEFT
    END             reduce using rule 84 (empty -> .)
    PEN_DOWN        shift and go to state 37
    PEN_UP          shift and go to state 38
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    WRITE           shift and go to state 42
    READ            shift and go to state 43
    ID              shift and go to state 36
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9
    CENTER          shift and go to state 44
    FORWARD         shift and go to state 45
    RIGHT           shift and go to state 46
    LEFT            shift and go to state 47

    stmnt                          shift and go to state 149
    empty                          shift and go to state 25
    var_declaration_func           shift and go to state 26
    pen_func                       shift and go to state 27
    move_func                      shift and go to state 28
    while_stmnt                    shift and go to state 29
    if_stmnt                       shift and go to state 30
    write                          shift and go to state 31
    read                           shift and go to state 32
    func_call                      shift and go to state 33
    var_assignation                shift and go to state 34
    var_type                       shift and go to state 35
    move_type                      shift and go to state 39

state 143

    (70) write -> WRITE OPEN_PTH expression CLOSE_PTH .
    PEN_DOWN        reduce using rule 70 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    PEN_UP          reduce using rule 70 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    WHILE           reduce using rule 70 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    IF              reduce using rule 70 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    WRITE           reduce using rule 70 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    READ            reduce using rule 70 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    ID              reduce using rule 70 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    BOOL            reduce using rule 70 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    WORD            reduce using rule 70 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    NUMBER          reduce using rule 70 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    CENTER          reduce using rule 70 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    FORWARD         reduce using rule 70 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    RIGHT           reduce using rule 70 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    LEFT            reduce using rule 70 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    END             reduce using rule 70 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    ELSE            reduce using rule 70 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)


state 144

    (62) read -> READ OPEN_PTH variable multiple_vars . CLOSE_PTH
    CLOSE_PTH       shift and go to state 150


state 145

    (10) func_declaration -> func_type FUNC ID OPEN_PTH parameter CLOSE_PTH . stmnt END
    (19) stmnt -> . empty
    (20) stmnt -> . var_declaration_func stmnt
    (21) stmnt -> . pen_func stmnt
    (22) stmnt -> . move_func stmnt
    (23) stmnt -> . while_stmnt stmnt
    (24) stmnt -> . if_stmnt stmnt
    (25) stmnt -> . write stmnt
    (26) stmnt -> . read stmnt
    (27) stmnt -> . func_call stmnt
    (28) stmnt -> . var_assignation stmnt
    (84) empty -> .
    (29) var_declaration_func -> . var_type ID multiple_vars
    (81) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (82) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (76) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (74) while_stmnt -> . WHILE con_expression stmnt END
    (71) if_stmnt -> . IF con_expression stmnt else_stmnt
    (70) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (62) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (58) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (30) var_assignation -> . ID ASSIGN expression
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    (77) move_type -> . CENTER
    (78) move_type -> . FORWARD
    (79) move_type -> . RIGHT
    (80) move_type -> . LEFT
    END             reduce using rule 84 (empty -> .)
    PEN_DOWN        shift and go to state 37
    PEN_UP          shift and go to state 38
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    WRITE           shift and go to state 42
    READ            shift and go to state 43
    ID              shift and go to state 36
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9
    CENTER          shift and go to state 44
    FORWARD         shift and go to state 45
    RIGHT           shift and go to state 46
    LEFT            shift and go to state 47

    stmnt                          shift and go to state 151
    empty                          shift and go to state 25
    var_declaration_func           shift and go to state 26
    pen_func                       shift and go to state 27
    move_func                      shift and go to state 28
    while_stmnt                    shift and go to state 29
    if_stmnt                       shift and go to state 30
    write                          shift and go to state 31
    read                           shift and go to state 32
    func_call                      shift and go to state 33
    var_assignation                shift and go to state 34
    var_type                       shift and go to state 35
    move_type                      shift and go to state 39

state 146

    (16) parameter -> var_type ID . multiple_parameters
    (17) multiple_parameters -> . empty
    (18) multiple_parameters -> . COMMA parameter
    (84) empty -> .
    COMMA           shift and go to state 154
    CLOSE_PTH       reduce using rule 84 (empty -> .)

    multiple_parameters            shift and go to state 152
    empty                          shift and go to state 153

state 147

    (61) multiple_fc_param -> COMMA func_call_param .
    CLOSE_PTH       reduce using rule 61 (multiple_fc_param -> COMMA func_call_param .)


state 148

    (65) array -> OPEN_SQR expression CLOSE_SQR . matrix
    (66) matrix -> . empty
    (67) matrix -> . OPEN_SQR expression CLOSE_SQR
    (84) empty -> .
    OPEN_SQR        shift and go to state 155
    DIV             reduce using rule 84 (empty -> .)
    MULT            reduce using rule 84 (empty -> .)
    SUB             reduce using rule 84 (empty -> .)
    SUM             reduce using rule 84 (empty -> .)
    EQUAL_TO        reduce using rule 84 (empty -> .)
    MORE_OR_EQ_THAN reduce using rule 84 (empty -> .)
    LESS_OR_EQ_THAN reduce using rule 84 (empty -> .)
    DIFFERENT_TO    reduce using rule 84 (empty -> .)
    MORE_THAN       reduce using rule 84 (empty -> .)
    LESS_THAN       reduce using rule 84 (empty -> .)
    OR              reduce using rule 84 (empty -> .)
    AND             reduce using rule 84 (empty -> .)
    COMMA           reduce using rule 84 (empty -> .)
    CLOSE_PTH       reduce using rule 84 (empty -> .)
    PEN_DOWN        reduce using rule 84 (empty -> .)
    PEN_UP          reduce using rule 84 (empty -> .)
    WHILE           reduce using rule 84 (empty -> .)
    IF              reduce using rule 84 (empty -> .)
    WRITE           reduce using rule 84 (empty -> .)
    READ            reduce using rule 84 (empty -> .)
    ID              reduce using rule 84 (empty -> .)
    BOOL            reduce using rule 84 (empty -> .)
    WORD            reduce using rule 84 (empty -> .)
    NUMBER          reduce using rule 84 (empty -> .)
    CENTER          reduce using rule 84 (empty -> .)
    FORWARD         reduce using rule 84 (empty -> .)
    RIGHT           reduce using rule 84 (empty -> .)
    LEFT            reduce using rule 84 (empty -> .)
    END             reduce using rule 84 (empty -> .)
    ELSE            reduce using rule 84 (empty -> .)
    CLOSE_SQR       reduce using rule 84 (empty -> .)

    matrix                         shift and go to state 156
    empty                          shift and go to state 157

state 149

    (73) else_stmnt -> ELSE stmnt . END
    END             shift and go to state 158


state 150

    (62) read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .
    PEN_DOWN        reduce using rule 62 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    PEN_UP          reduce using rule 62 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    WHILE           reduce using rule 62 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    IF              reduce using rule 62 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    WRITE           reduce using rule 62 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    READ            reduce using rule 62 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    ID              reduce using rule 62 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    BOOL            reduce using rule 62 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    WORD            reduce using rule 62 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    NUMBER          reduce using rule 62 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    CENTER          reduce using rule 62 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    FORWARD         reduce using rule 62 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    RIGHT           reduce using rule 62 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    LEFT            reduce using rule 62 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    END             reduce using rule 62 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    ELSE            reduce using rule 62 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)


state 151

    (10) func_declaration -> func_type FUNC ID OPEN_PTH parameter CLOSE_PTH stmnt . END
    END             shift and go to state 159


state 152

    (16) parameter -> var_type ID multiple_parameters .
    CLOSE_PTH       reduce using rule 16 (parameter -> var_type ID multiple_parameters .)


state 153

    (17) multiple_parameters -> empty .
    CLOSE_PTH       reduce using rule 17 (multiple_parameters -> empty .)


state 154

    (18) multiple_parameters -> COMMA . parameter
    (15) parameter -> . empty
    (16) parameter -> . var_type ID multiple_parameters
    (84) empty -> .
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    CLOSE_PTH       reduce using rule 84 (empty -> .)
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9

    parameter                      shift and go to state 160
    empty                          shift and go to state 123
    var_type                       shift and go to state 124

state 155

    (67) matrix -> OPEN_SQR . expression CLOSE_SQR
    (38) expression -> . exp
    (39) expression -> . exp rel_op exp
    (40) exp -> . termino
    (41) exp -> . termino SUB termino
    (42) exp -> . termino SUM termino
    (43) termino -> . factor
    (44) termino -> . factor DIV factor
    (45) termino -> . factor MULT factor
    (46) factor -> . SUB var_cte
    (47) factor -> . SUM var_cte
    (48) factor -> . var_cte
    (49) factor -> . OPEN_PTH expression CLOSE_PTH
    (31) var_cte -> . func_call
    (32) var_cte -> . cte_bool
    (33) var_cte -> . CTE_STR
    (34) var_cte -> . CTE_NUM
    (35) var_cte -> . variable
    (58) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (36) cte_bool -> . FALSE
    (37) cte_bool -> . TRUE
    (63) variable -> . ID array
    SUB             shift and go to state 70
    SUM             shift and go to state 71
    OPEN_PTH        shift and go to state 74
    CTE_STR         shift and go to state 77
    CTE_NUM         shift and go to state 78
    ID              shift and go to state 80
    FALSE           shift and go to state 81
    TRUE            shift and go to state 82

    expression                     shift and go to state 161
    exp                            shift and go to state 68
    termino                        shift and go to state 69
    factor                         shift and go to state 72
    var_cte                        shift and go to state 73
    func_call                      shift and go to state 75
    cte_bool                       shift and go to state 76
    variable                       shift and go to state 79

state 156

    (65) array -> OPEN_SQR expression CLOSE_SQR matrix .
    DIV             reduce using rule 65 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    MULT            reduce using rule 65 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    SUB             reduce using rule 65 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    SUM             reduce using rule 65 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    EQUAL_TO        reduce using rule 65 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    MORE_OR_EQ_THAN reduce using rule 65 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    LESS_OR_EQ_THAN reduce using rule 65 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    DIFFERENT_TO    reduce using rule 65 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    MORE_THAN       reduce using rule 65 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    LESS_THAN       reduce using rule 65 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    OR              reduce using rule 65 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    AND             reduce using rule 65 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    COMMA           reduce using rule 65 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    CLOSE_PTH       reduce using rule 65 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    PEN_DOWN        reduce using rule 65 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    PEN_UP          reduce using rule 65 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    WHILE           reduce using rule 65 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    IF              reduce using rule 65 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    WRITE           reduce using rule 65 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    READ            reduce using rule 65 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    ID              reduce using rule 65 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    BOOL            reduce using rule 65 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    WORD            reduce using rule 65 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    NUMBER          reduce using rule 65 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    CENTER          reduce using rule 65 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    FORWARD         reduce using rule 65 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    RIGHT           reduce using rule 65 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    LEFT            reduce using rule 65 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    END             reduce using rule 65 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    ELSE            reduce using rule 65 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    CLOSE_SQR       reduce using rule 65 (array -> OPEN_SQR expression CLOSE_SQR matrix .)


state 157

    (66) matrix -> empty .
    DIV             reduce using rule 66 (matrix -> empty .)
    MULT            reduce using rule 66 (matrix -> empty .)
    SUB             reduce using rule 66 (matrix -> empty .)
    SUM             reduce using rule 66 (matrix -> empty .)
    EQUAL_TO        reduce using rule 66 (matrix -> empty .)
    MORE_OR_EQ_THAN reduce using rule 66 (matrix -> empty .)
    LESS_OR_EQ_THAN reduce using rule 66 (matrix -> empty .)
    DIFFERENT_TO    reduce using rule 66 (matrix -> empty .)
    MORE_THAN       reduce using rule 66 (matrix -> empty .)
    LESS_THAN       reduce using rule 66 (matrix -> empty .)
    OR              reduce using rule 66 (matrix -> empty .)
    AND             reduce using rule 66 (matrix -> empty .)
    COMMA           reduce using rule 66 (matrix -> empty .)
    CLOSE_PTH       reduce using rule 66 (matrix -> empty .)
    PEN_DOWN        reduce using rule 66 (matrix -> empty .)
    PEN_UP          reduce using rule 66 (matrix -> empty .)
    WHILE           reduce using rule 66 (matrix -> empty .)
    IF              reduce using rule 66 (matrix -> empty .)
    WRITE           reduce using rule 66 (matrix -> empty .)
    READ            reduce using rule 66 (matrix -> empty .)
    ID              reduce using rule 66 (matrix -> empty .)
    BOOL            reduce using rule 66 (matrix -> empty .)
    WORD            reduce using rule 66 (matrix -> empty .)
    NUMBER          reduce using rule 66 (matrix -> empty .)
    CENTER          reduce using rule 66 (matrix -> empty .)
    FORWARD         reduce using rule 66 (matrix -> empty .)
    RIGHT           reduce using rule 66 (matrix -> empty .)
    LEFT            reduce using rule 66 (matrix -> empty .)
    END             reduce using rule 66 (matrix -> empty .)
    ELSE            reduce using rule 66 (matrix -> empty .)
    CLOSE_SQR       reduce using rule 66 (matrix -> empty .)


state 158

    (73) else_stmnt -> ELSE stmnt END .
    PEN_DOWN        reduce using rule 73 (else_stmnt -> ELSE stmnt END .)
    PEN_UP          reduce using rule 73 (else_stmnt -> ELSE stmnt END .)
    WHILE           reduce using rule 73 (else_stmnt -> ELSE stmnt END .)
    IF              reduce using rule 73 (else_stmnt -> ELSE stmnt END .)
    WRITE           reduce using rule 73 (else_stmnt -> ELSE stmnt END .)
    READ            reduce using rule 73 (else_stmnt -> ELSE stmnt END .)
    ID              reduce using rule 73 (else_stmnt -> ELSE stmnt END .)
    BOOL            reduce using rule 73 (else_stmnt -> ELSE stmnt END .)
    WORD            reduce using rule 73 (else_stmnt -> ELSE stmnt END .)
    NUMBER          reduce using rule 73 (else_stmnt -> ELSE stmnt END .)
    CENTER          reduce using rule 73 (else_stmnt -> ELSE stmnt END .)
    FORWARD         reduce using rule 73 (else_stmnt -> ELSE stmnt END .)
    RIGHT           reduce using rule 73 (else_stmnt -> ELSE stmnt END .)
    LEFT            reduce using rule 73 (else_stmnt -> ELSE stmnt END .)
    END             reduce using rule 73 (else_stmnt -> ELSE stmnt END .)
    ELSE            reduce using rule 73 (else_stmnt -> ELSE stmnt END .)


state 159

    (10) func_declaration -> func_type FUNC ID OPEN_PTH parameter CLOSE_PTH stmnt END .
    MAIN            reduce using rule 10 (func_declaration -> func_type FUNC ID OPEN_PTH parameter CLOSE_PTH stmnt END .)


state 160

    (18) multiple_parameters -> COMMA parameter .
    CLOSE_PTH       reduce using rule 18 (multiple_parameters -> COMMA parameter .)


state 161

    (67) matrix -> OPEN_SQR expression . CLOSE_SQR
    CLOSE_SQR       shift and go to state 162


state 162

    (67) matrix -> OPEN_SQR expression CLOSE_SQR .
    DIV             reduce using rule 67 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    MULT            reduce using rule 67 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    SUB             reduce using rule 67 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    SUM             reduce using rule 67 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    EQUAL_TO        reduce using rule 67 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    MORE_OR_EQ_THAN reduce using rule 67 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    LESS_OR_EQ_THAN reduce using rule 67 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    DIFFERENT_TO    reduce using rule 67 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    MORE_THAN       reduce using rule 67 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    LESS_THAN       reduce using rule 67 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    OR              reduce using rule 67 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    AND             reduce using rule 67 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    COMMA           reduce using rule 67 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    CLOSE_PTH       reduce using rule 67 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    PEN_DOWN        reduce using rule 67 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    PEN_UP          reduce using rule 67 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    WHILE           reduce using rule 67 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    IF              reduce using rule 67 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    WRITE           reduce using rule 67 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    READ            reduce using rule 67 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    ID              reduce using rule 67 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    BOOL            reduce using rule 67 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    WORD            reduce using rule 67 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    NUMBER          reduce using rule 67 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    CENTER          reduce using rule 67 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    FORWARD         reduce using rule 67 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    RIGHT           reduce using rule 67 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    LEFT            reduce using rule 67 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    END             reduce using rule 67 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    ELSE            reduce using rule 67 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    CLOSE_SQR       reduce using rule 67 (matrix -> OPEN_SQR expression CLOSE_SQR .)
