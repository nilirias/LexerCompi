Grammar:

Rule 0     S' -> program
Rule 1     program -> DRAWING ID declaration
Rule 2     declaration -> var_declaration func_declaration main
Rule 3     var_declaration -> empty
Rule 4     var_declaration -> var_type ID multiple_var
Rule 5     multiple_var -> empty
Rule 6     multiple_var -> COMMA ID multiple_var
Rule 7     var_type -> BOOL
Rule 8     var_type -> WORD
Rule 9     var_type -> NUMBER
Rule 10    func_declaration -> empty
Rule 11    func_declaration -> FUNC func_type ID fd1 OPEN_PTH parameter CLOSE_PTH stmnt END
Rule 12    fd1 -> <empty>
Rule 13    func_type -> BOOL
Rule 14    func_type -> WORD
Rule 15    func_type -> NUMBER
Rule 16    func_type -> VOID
Rule 17    parameter -> empty
Rule 18    parameter -> var_type ID multiple_parameters
Rule 19    multiple_parameters -> empty
Rule 20    multiple_parameters -> COMMA parameter
Rule 21    stmnt -> empty
Rule 22    stmnt -> returnf stmnt
Rule 23    stmnt -> var_declaration_func stmnt
Rule 24    stmnt -> pen_func stmnt
Rule 25    stmnt -> move_func stmnt
Rule 26    stmnt -> while_stmnt stmnt
Rule 27    stmnt -> if_stmnt stmnt
Rule 28    stmnt -> write stmnt
Rule 29    stmnt -> read stmnt
Rule 30    stmnt -> func_call stmnt
Rule 31    stmnt -> var_assignation stmnt
Rule 32    returnf -> RETURN expression
Rule 33    var_declaration_func -> var_type ID multiple_vars
Rule 34    var_assignation -> ID e5 assign e6 expression q3
Rule 35    e5 -> <empty>
Rule 36    e6 -> <empty>
Rule 37    assign -> ASSIGN
Rule 38    var_cte -> func_call
Rule 39    var_cte -> cte_bool
Rule 40    var_cte -> CTE_STR
Rule 41    var_cte -> CTE_NUM
Rule 42    var_cte -> variable
Rule 43    cte_bool -> FALSE
Rule 44    cte_bool -> TRUE
Rule 45    expression -> exp q4
Rule 46    expression -> exp rel_op exp q4
Rule 47    q4 -> <empty>
Rule 48    e4 -> <empty>
Rule 49    exp -> termino q1
Rule 50    exp -> termino term_op e3 termino q1
Rule 51    e3 -> <empty>
Rule 52    q2 -> <empty>
Rule 53    term_op -> SUB
Rule 54    term_op -> SUM
Rule 55    termino -> factor q2
Rule 56    termino -> factor fact_op e2 expression q2
Rule 57    q1 -> <empty>
Rule 58    q3 -> <empty>
Rule 59    e2 -> <empty>
Rule 60    fact_op -> DIV
Rule 61    fact_op -> MULT
Rule 62    factor -> var_cte e1
Rule 63    factor -> open_pth expression close_pth
Rule 64    e1 -> <empty>
Rule 65    open_pth -> OPEN_PTH
Rule 66    close_pth -> CLOSE_PTH
Rule 67    log_op -> OR
Rule 68    log_op -> AND
Rule 69    rel_op -> EQUAL_TO
Rule 70    rel_op -> MORE_OR_EQ_THAN
Rule 71    rel_op -> LESS_OR_EQ_THAN
Rule 72    rel_op -> DIFFERENT_TO
Rule 73    rel_op -> MORE_THAN
Rule 74    rel_op -> LESS_THAN
Rule 75    func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
Rule 76    func1 -> <empty>
Rule 77    func_call_param -> expression func2 multiple_fc_param
Rule 78    func2 -> <empty>
Rule 79    func3 -> <empty>
Rule 80    multiple_fc_param -> empty
Rule 81    multiple_fc_param -> COMMA func_call_param
Rule 82    read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH
Rule 83    variable -> ID array
Rule 84    array -> empty
Rule 85    array -> OPEN_SQR expression CLOSE_SQR matrix
Rule 86    matrix -> empty
Rule 87    matrix -> OPEN_SQR expression CLOSE_SQR
Rule 88    multiple_vars -> empty
Rule 89    multiple_vars -> COMMA variable
Rule 90    write -> WRITE OPEN_PTH expression CLOSE_PTH
Rule 91    if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt
Rule 92    if1 -> <empty>
Rule 93    if2 -> <empty>
Rule 94    else_stmnt -> END
Rule 95    else_stmnt -> ELSE if3 stmnt if4 END
Rule 96    if3 -> <empty>
Rule 97    if4 -> <empty>
Rule 98    while_stmnt -> WHILE w1 con_expression w2 stmnt w3 END
Rule 99    w1 -> <empty>
Rule 100   w2 -> <empty>
Rule 101   w3 -> <empty>
Rule 102   con_expression -> expression q5
Rule 103   con_expression -> expression q5 log_op e7 expression q5
Rule 104   e7 -> <empty>
Rule 105   q5 -> <empty>
Rule 106   move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH
Rule 107   move_type -> CENTER
Rule 108   move_type -> FORWARD
Rule 109   move_type -> RIGHT
Rule 110   move_type -> LEFT
Rule 111   pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH
Rule 112   pen_func -> PEN_UP OPEN_PTH CLOSE_PTH
Rule 113   main -> MAIN stmnt END
Rule 114   empty -> <empty>

Terminals, with rules where they appear:

AND                  : 68
ASSIGN               : 37
BOOL                 : 7 13
CENTER               : 107
CLOSE_PTH            : 11 66 75 82 90 106 111 112
CLOSE_SQR            : 85 87
COMMA                : 6 20 81 89
CTE_NUM              : 41
CTE_STR              : 40
DIFFERENT_TO         : 72
DIV                  : 60
DRAWING              : 1
ELSE                 : 95
END                  : 11 94 95 98 113
EQUAL_TO             : 69
FALSE                : 43
FORWARD              : 108
FUNC                 : 11
ID                   : 1 4 6 11 18 33 34 75 83
IF                   : 91
LEFT                 : 110
LESS_OR_EQ_THAN      : 71
LESS_THAN            : 74
MAIN                 : 113
MORE_OR_EQ_THAN      : 70
MORE_THAN            : 73
MULT                 : 61
NUMBER               : 9 15
OPEN_PTH             : 11 65 75 82 90 106 111 112
OPEN_SQR             : 85 87
OR                   : 67
PEN_DOWN             : 111
PEN_UP               : 112
READ                 : 82
RETURN               : 32
RIGHT                : 109
SUB                  : 53
SUM                  : 54
TRUE                 : 44
VOID                 : 16
WHILE                : 98
WORD                 : 8 14
WRITE                : 90
error                : 

Nonterminals, with rules where they appear:

array                : 83
assign               : 34
close_pth            : 63
con_expression       : 91 98
cte_bool             : 39
declaration          : 1
e1                   : 62
e2                   : 56
e3                   : 50
e4                   : 
e5                   : 34
e6                   : 34
e7                   : 103
else_stmnt           : 91
empty                : 3 5 10 17 19 21 80 84 86 88
exp                  : 45 46 46
expression           : 32 34 56 63 77 85 87 90 102 103 103
fact_op              : 56
factor               : 55 56
fd1                  : 11
func1                : 75
func2                : 77
func3                : 75
func_call            : 30 38
func_call_param      : 75 81 106
func_declaration     : 2
func_type            : 11
if1                  : 91
if2                  : 91
if3                  : 95
if4                  : 95
if_stmnt             : 27
log_op               : 103
main                 : 2
matrix               : 85
move_func            : 25
move_type            : 106
multiple_fc_param    : 77
multiple_parameters  : 18
multiple_var         : 4 6
multiple_vars        : 33 82
open_pth             : 63
parameter            : 11 20
pen_func             : 24
program              : 0
q1                   : 49 50
q2                   : 55 56
q3                   : 34
q4                   : 45 46
q5                   : 102 103 103
read                 : 29
rel_op               : 46
returnf              : 22
stmnt                : 11 22 23 24 25 26 27 28 29 30 31 91 95 98 113
term_op              : 50
termino              : 49 50 50
var_assignation      : 31
var_cte              : 62
var_declaration      : 2
var_declaration_func : 23
var_type             : 4 18 33
variable             : 42 82 89
w1                   : 98
w2                   : 98
w3                   : 98
while_stmnt          : 26
write                : 28


state 0

    (0) S' -> . program
    (1) program -> . DRAWING ID declaration
    DRAWING         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .


state 2

    (1) program -> DRAWING . ID declaration
    ID              shift and go to state 3


state 3

    (1) program -> DRAWING ID . declaration
    (2) declaration -> . var_declaration func_declaration main
    (3) var_declaration -> . empty
    (4) var_declaration -> . var_type ID multiple_var
    (114) empty -> .
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    FUNC            reduce using rule 114 (empty -> .)
    MAIN            reduce using rule 114 (empty -> .)
    BOOL            shift and go to state 8
    WORD            shift and go to state 9
    NUMBER          shift and go to state 10

    declaration                    shift and go to state 4
    var_declaration                shift and go to state 5
    empty                          shift and go to state 6
    var_type                       shift and go to state 7

state 4

    (1) program -> DRAWING ID declaration .
    $end            reduce using rule 1 (program -> DRAWING ID declaration .)


state 5

    (2) declaration -> var_declaration . func_declaration main
    (10) func_declaration -> . empty
    (11) func_declaration -> . FUNC func_type ID fd1 OPEN_PTH parameter CLOSE_PTH stmnt END
    (114) empty -> .
    FUNC            shift and go to state 13
    MAIN            reduce using rule 114 (empty -> .)

    func_declaration               shift and go to state 11
    empty                          shift and go to state 12

state 6

    (3) var_declaration -> empty .
    FUNC            reduce using rule 3 (var_declaration -> empty .)
    MAIN            reduce using rule 3 (var_declaration -> empty .)


state 7

    (4) var_declaration -> var_type . ID multiple_var
    ID              shift and go to state 14


state 8

    (7) var_type -> BOOL .
    ID              reduce using rule 7 (var_type -> BOOL .)


state 9

    (8) var_type -> WORD .
    ID              reduce using rule 8 (var_type -> WORD .)


state 10

    (9) var_type -> NUMBER .
    ID              reduce using rule 9 (var_type -> NUMBER .)


state 11

    (2) declaration -> var_declaration func_declaration . main
    (113) main -> . MAIN stmnt END
    MAIN            shift and go to state 16

    main                           shift and go to state 15

state 12

    (10) func_declaration -> empty .
    MAIN            reduce using rule 10 (func_declaration -> empty .)


state 13

    (11) func_declaration -> FUNC . func_type ID fd1 OPEN_PTH parameter CLOSE_PTH stmnt END
    (13) func_type -> . BOOL
    (14) func_type -> . WORD
    (15) func_type -> . NUMBER
    (16) func_type -> . VOID
    BOOL            shift and go to state 18
    WORD            shift and go to state 19
    NUMBER          shift and go to state 20
    VOID            shift and go to state 21

    func_type                      shift and go to state 17

state 14

    (4) var_declaration -> var_type ID . multiple_var
    (5) multiple_var -> . empty
    (6) multiple_var -> . COMMA ID multiple_var
    (114) empty -> .
    COMMA           shift and go to state 24
    FUNC            reduce using rule 114 (empty -> .)
    MAIN            reduce using rule 114 (empty -> .)

    multiple_var                   shift and go to state 22
    empty                          shift and go to state 23

state 15

    (2) declaration -> var_declaration func_declaration main .
    $end            reduce using rule 2 (declaration -> var_declaration func_declaration main .)


state 16

    (113) main -> MAIN . stmnt END
    (21) stmnt -> . empty
    (22) stmnt -> . returnf stmnt
    (23) stmnt -> . var_declaration_func stmnt
    (24) stmnt -> . pen_func stmnt
    (25) stmnt -> . move_func stmnt
    (26) stmnt -> . while_stmnt stmnt
    (27) stmnt -> . if_stmnt stmnt
    (28) stmnt -> . write stmnt
    (29) stmnt -> . read stmnt
    (30) stmnt -> . func_call stmnt
    (31) stmnt -> . var_assignation stmnt
    (114) empty -> .
    (32) returnf -> . RETURN expression
    (33) var_declaration_func -> . var_type ID multiple_vars
    (111) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (112) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (106) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (98) while_stmnt -> . WHILE w1 con_expression w2 stmnt w3 END
    (91) if_stmnt -> . IF con_expression if1 stmnt if2 else_stmnt
    (90) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (82) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (75) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (34) var_assignation -> . ID e5 assign e6 expression q3
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (107) move_type -> . CENTER
    (108) move_type -> . FORWARD
    (109) move_type -> . RIGHT
    (110) move_type -> . LEFT
    END             reduce using rule 114 (empty -> .)
    RETURN          shift and go to state 37
    PEN_DOWN        shift and go to state 40
    PEN_UP          shift and go to state 41
    WHILE           shift and go to state 43
    IF              shift and go to state 44
    WRITE           shift and go to state 45
    READ            shift and go to state 46
    ID              shift and go to state 39
    BOOL            shift and go to state 8
    WORD            shift and go to state 9
    NUMBER          shift and go to state 10
    CENTER          shift and go to state 47
    FORWARD         shift and go to state 48
    RIGHT           shift and go to state 49
    LEFT            shift and go to state 50

    stmnt                          shift and go to state 25
    empty                          shift and go to state 26
    returnf                        shift and go to state 27
    var_declaration_func           shift and go to state 28
    pen_func                       shift and go to state 29
    move_func                      shift and go to state 30
    while_stmnt                    shift and go to state 31
    if_stmnt                       shift and go to state 32
    write                          shift and go to state 33
    read                           shift and go to state 34
    func_call                      shift and go to state 35
    var_assignation                shift and go to state 36
    var_type                       shift and go to state 38
    move_type                      shift and go to state 42

state 17

    (11) func_declaration -> FUNC func_type . ID fd1 OPEN_PTH parameter CLOSE_PTH stmnt END
    ID              shift and go to state 51


state 18

    (13) func_type -> BOOL .
    ID              reduce using rule 13 (func_type -> BOOL .)


state 19

    (14) func_type -> WORD .
    ID              reduce using rule 14 (func_type -> WORD .)


state 20

    (15) func_type -> NUMBER .
    ID              reduce using rule 15 (func_type -> NUMBER .)


state 21

    (16) func_type -> VOID .
    ID              reduce using rule 16 (func_type -> VOID .)


state 22

    (4) var_declaration -> var_type ID multiple_var .
    FUNC            reduce using rule 4 (var_declaration -> var_type ID multiple_var .)
    MAIN            reduce using rule 4 (var_declaration -> var_type ID multiple_var .)


state 23

    (5) multiple_var -> empty .
    FUNC            reduce using rule 5 (multiple_var -> empty .)
    MAIN            reduce using rule 5 (multiple_var -> empty .)


state 24

    (6) multiple_var -> COMMA . ID multiple_var
    ID              shift and go to state 52


state 25

    (113) main -> MAIN stmnt . END
    END             shift and go to state 53


state 26

    (21) stmnt -> empty .
    END             reduce using rule 21 (stmnt -> empty .)
    ELSE            reduce using rule 21 (stmnt -> empty .)


state 27

    (22) stmnt -> returnf . stmnt
    (21) stmnt -> . empty
    (22) stmnt -> . returnf stmnt
    (23) stmnt -> . var_declaration_func stmnt
    (24) stmnt -> . pen_func stmnt
    (25) stmnt -> . move_func stmnt
    (26) stmnt -> . while_stmnt stmnt
    (27) stmnt -> . if_stmnt stmnt
    (28) stmnt -> . write stmnt
    (29) stmnt -> . read stmnt
    (30) stmnt -> . func_call stmnt
    (31) stmnt -> . var_assignation stmnt
    (114) empty -> .
    (32) returnf -> . RETURN expression
    (33) var_declaration_func -> . var_type ID multiple_vars
    (111) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (112) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (106) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (98) while_stmnt -> . WHILE w1 con_expression w2 stmnt w3 END
    (91) if_stmnt -> . IF con_expression if1 stmnt if2 else_stmnt
    (90) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (82) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (75) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (34) var_assignation -> . ID e5 assign e6 expression q3
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (107) move_type -> . CENTER
    (108) move_type -> . FORWARD
    (109) move_type -> . RIGHT
    (110) move_type -> . LEFT
    END             reduce using rule 114 (empty -> .)
    ELSE            reduce using rule 114 (empty -> .)
    RETURN          shift and go to state 37
    PEN_DOWN        shift and go to state 40
    PEN_UP          shift and go to state 41
    WHILE           shift and go to state 43
    IF              shift and go to state 44
    WRITE           shift and go to state 45
    READ            shift and go to state 46
    ID              shift and go to state 39
    BOOL            shift and go to state 8
    WORD            shift and go to state 9
    NUMBER          shift and go to state 10
    CENTER          shift and go to state 47
    FORWARD         shift and go to state 48
    RIGHT           shift and go to state 49
    LEFT            shift and go to state 50

    returnf                        shift and go to state 27
    stmnt                          shift and go to state 54
    empty                          shift and go to state 26
    var_declaration_func           shift and go to state 28
    pen_func                       shift and go to state 29
    move_func                      shift and go to state 30
    while_stmnt                    shift and go to state 31
    if_stmnt                       shift and go to state 32
    write                          shift and go to state 33
    read                           shift and go to state 34
    func_call                      shift and go to state 35
    var_assignation                shift and go to state 36
    var_type                       shift and go to state 38
    move_type                      shift and go to state 42

state 28

    (23) stmnt -> var_declaration_func . stmnt
    (21) stmnt -> . empty
    (22) stmnt -> . returnf stmnt
    (23) stmnt -> . var_declaration_func stmnt
    (24) stmnt -> . pen_func stmnt
    (25) stmnt -> . move_func stmnt
    (26) stmnt -> . while_stmnt stmnt
    (27) stmnt -> . if_stmnt stmnt
    (28) stmnt -> . write stmnt
    (29) stmnt -> . read stmnt
    (30) stmnt -> . func_call stmnt
    (31) stmnt -> . var_assignation stmnt
    (114) empty -> .
    (32) returnf -> . RETURN expression
    (33) var_declaration_func -> . var_type ID multiple_vars
    (111) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (112) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (106) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (98) while_stmnt -> . WHILE w1 con_expression w2 stmnt w3 END
    (91) if_stmnt -> . IF con_expression if1 stmnt if2 else_stmnt
    (90) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (82) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (75) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (34) var_assignation -> . ID e5 assign e6 expression q3
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (107) move_type -> . CENTER
    (108) move_type -> . FORWARD
    (109) move_type -> . RIGHT
    (110) move_type -> . LEFT
    END             reduce using rule 114 (empty -> .)
    ELSE            reduce using rule 114 (empty -> .)
    RETURN          shift and go to state 37
    PEN_DOWN        shift and go to state 40
    PEN_UP          shift and go to state 41
    WHILE           shift and go to state 43
    IF              shift and go to state 44
    WRITE           shift and go to state 45
    READ            shift and go to state 46
    ID              shift and go to state 39
    BOOL            shift and go to state 8
    WORD            shift and go to state 9
    NUMBER          shift and go to state 10
    CENTER          shift and go to state 47
    FORWARD         shift and go to state 48
    RIGHT           shift and go to state 49
    LEFT            shift and go to state 50

    var_declaration_func           shift and go to state 28
    stmnt                          shift and go to state 55
    empty                          shift and go to state 26
    returnf                        shift and go to state 27
    pen_func                       shift and go to state 29
    move_func                      shift and go to state 30
    while_stmnt                    shift and go to state 31
    if_stmnt                       shift and go to state 32
    write                          shift and go to state 33
    read                           shift and go to state 34
    func_call                      shift and go to state 35
    var_assignation                shift and go to state 36
    var_type                       shift and go to state 38
    move_type                      shift and go to state 42

state 29

    (24) stmnt -> pen_func . stmnt
    (21) stmnt -> . empty
    (22) stmnt -> . returnf stmnt
    (23) stmnt -> . var_declaration_func stmnt
    (24) stmnt -> . pen_func stmnt
    (25) stmnt -> . move_func stmnt
    (26) stmnt -> . while_stmnt stmnt
    (27) stmnt -> . if_stmnt stmnt
    (28) stmnt -> . write stmnt
    (29) stmnt -> . read stmnt
    (30) stmnt -> . func_call stmnt
    (31) stmnt -> . var_assignation stmnt
    (114) empty -> .
    (32) returnf -> . RETURN expression
    (33) var_declaration_func -> . var_type ID multiple_vars
    (111) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (112) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (106) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (98) while_stmnt -> . WHILE w1 con_expression w2 stmnt w3 END
    (91) if_stmnt -> . IF con_expression if1 stmnt if2 else_stmnt
    (90) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (82) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (75) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (34) var_assignation -> . ID e5 assign e6 expression q3
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (107) move_type -> . CENTER
    (108) move_type -> . FORWARD
    (109) move_type -> . RIGHT
    (110) move_type -> . LEFT
    END             reduce using rule 114 (empty -> .)
    ELSE            reduce using rule 114 (empty -> .)
    RETURN          shift and go to state 37
    PEN_DOWN        shift and go to state 40
    PEN_UP          shift and go to state 41
    WHILE           shift and go to state 43
    IF              shift and go to state 44
    WRITE           shift and go to state 45
    READ            shift and go to state 46
    ID              shift and go to state 39
    BOOL            shift and go to state 8
    WORD            shift and go to state 9
    NUMBER          shift and go to state 10
    CENTER          shift and go to state 47
    FORWARD         shift and go to state 48
    RIGHT           shift and go to state 49
    LEFT            shift and go to state 50

    pen_func                       shift and go to state 29
    stmnt                          shift and go to state 56
    empty                          shift and go to state 26
    returnf                        shift and go to state 27
    var_declaration_func           shift and go to state 28
    move_func                      shift and go to state 30
    while_stmnt                    shift and go to state 31
    if_stmnt                       shift and go to state 32
    write                          shift and go to state 33
    read                           shift and go to state 34
    func_call                      shift and go to state 35
    var_assignation                shift and go to state 36
    var_type                       shift and go to state 38
    move_type                      shift and go to state 42

state 30

    (25) stmnt -> move_func . stmnt
    (21) stmnt -> . empty
    (22) stmnt -> . returnf stmnt
    (23) stmnt -> . var_declaration_func stmnt
    (24) stmnt -> . pen_func stmnt
    (25) stmnt -> . move_func stmnt
    (26) stmnt -> . while_stmnt stmnt
    (27) stmnt -> . if_stmnt stmnt
    (28) stmnt -> . write stmnt
    (29) stmnt -> . read stmnt
    (30) stmnt -> . func_call stmnt
    (31) stmnt -> . var_assignation stmnt
    (114) empty -> .
    (32) returnf -> . RETURN expression
    (33) var_declaration_func -> . var_type ID multiple_vars
    (111) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (112) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (106) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (98) while_stmnt -> . WHILE w1 con_expression w2 stmnt w3 END
    (91) if_stmnt -> . IF con_expression if1 stmnt if2 else_stmnt
    (90) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (82) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (75) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (34) var_assignation -> . ID e5 assign e6 expression q3
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (107) move_type -> . CENTER
    (108) move_type -> . FORWARD
    (109) move_type -> . RIGHT
    (110) move_type -> . LEFT
    END             reduce using rule 114 (empty -> .)
    ELSE            reduce using rule 114 (empty -> .)
    RETURN          shift and go to state 37
    PEN_DOWN        shift and go to state 40
    PEN_UP          shift and go to state 41
    WHILE           shift and go to state 43
    IF              shift and go to state 44
    WRITE           shift and go to state 45
    READ            shift and go to state 46
    ID              shift and go to state 39
    BOOL            shift and go to state 8
    WORD            shift and go to state 9
    NUMBER          shift and go to state 10
    CENTER          shift and go to state 47
    FORWARD         shift and go to state 48
    RIGHT           shift and go to state 49
    LEFT            shift and go to state 50

    move_func                      shift and go to state 30
    stmnt                          shift and go to state 57
    empty                          shift and go to state 26
    returnf                        shift and go to state 27
    var_declaration_func           shift and go to state 28
    pen_func                       shift and go to state 29
    while_stmnt                    shift and go to state 31
    if_stmnt                       shift and go to state 32
    write                          shift and go to state 33
    read                           shift and go to state 34
    func_call                      shift and go to state 35
    var_assignation                shift and go to state 36
    var_type                       shift and go to state 38
    move_type                      shift and go to state 42

state 31

    (26) stmnt -> while_stmnt . stmnt
    (21) stmnt -> . empty
    (22) stmnt -> . returnf stmnt
    (23) stmnt -> . var_declaration_func stmnt
    (24) stmnt -> . pen_func stmnt
    (25) stmnt -> . move_func stmnt
    (26) stmnt -> . while_stmnt stmnt
    (27) stmnt -> . if_stmnt stmnt
    (28) stmnt -> . write stmnt
    (29) stmnt -> . read stmnt
    (30) stmnt -> . func_call stmnt
    (31) stmnt -> . var_assignation stmnt
    (114) empty -> .
    (32) returnf -> . RETURN expression
    (33) var_declaration_func -> . var_type ID multiple_vars
    (111) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (112) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (106) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (98) while_stmnt -> . WHILE w1 con_expression w2 stmnt w3 END
    (91) if_stmnt -> . IF con_expression if1 stmnt if2 else_stmnt
    (90) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (82) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (75) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (34) var_assignation -> . ID e5 assign e6 expression q3
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (107) move_type -> . CENTER
    (108) move_type -> . FORWARD
    (109) move_type -> . RIGHT
    (110) move_type -> . LEFT
    END             reduce using rule 114 (empty -> .)
    ELSE            reduce using rule 114 (empty -> .)
    RETURN          shift and go to state 37
    PEN_DOWN        shift and go to state 40
    PEN_UP          shift and go to state 41
    WHILE           shift and go to state 43
    IF              shift and go to state 44
    WRITE           shift and go to state 45
    READ            shift and go to state 46
    ID              shift and go to state 39
    BOOL            shift and go to state 8
    WORD            shift and go to state 9
    NUMBER          shift and go to state 10
    CENTER          shift and go to state 47
    FORWARD         shift and go to state 48
    RIGHT           shift and go to state 49
    LEFT            shift and go to state 50

    while_stmnt                    shift and go to state 31
    stmnt                          shift and go to state 58
    empty                          shift and go to state 26
    returnf                        shift and go to state 27
    var_declaration_func           shift and go to state 28
    pen_func                       shift and go to state 29
    move_func                      shift and go to state 30
    if_stmnt                       shift and go to state 32
    write                          shift and go to state 33
    read                           shift and go to state 34
    func_call                      shift and go to state 35
    var_assignation                shift and go to state 36
    var_type                       shift and go to state 38
    move_type                      shift and go to state 42

state 32

    (27) stmnt -> if_stmnt . stmnt
    (21) stmnt -> . empty
    (22) stmnt -> . returnf stmnt
    (23) stmnt -> . var_declaration_func stmnt
    (24) stmnt -> . pen_func stmnt
    (25) stmnt -> . move_func stmnt
    (26) stmnt -> . while_stmnt stmnt
    (27) stmnt -> . if_stmnt stmnt
    (28) stmnt -> . write stmnt
    (29) stmnt -> . read stmnt
    (30) stmnt -> . func_call stmnt
    (31) stmnt -> . var_assignation stmnt
    (114) empty -> .
    (32) returnf -> . RETURN expression
    (33) var_declaration_func -> . var_type ID multiple_vars
    (111) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (112) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (106) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (98) while_stmnt -> . WHILE w1 con_expression w2 stmnt w3 END
    (91) if_stmnt -> . IF con_expression if1 stmnt if2 else_stmnt
    (90) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (82) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (75) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (34) var_assignation -> . ID e5 assign e6 expression q3
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (107) move_type -> . CENTER
    (108) move_type -> . FORWARD
    (109) move_type -> . RIGHT
    (110) move_type -> . LEFT
    END             reduce using rule 114 (empty -> .)
    ELSE            reduce using rule 114 (empty -> .)
    RETURN          shift and go to state 37
    PEN_DOWN        shift and go to state 40
    PEN_UP          shift and go to state 41
    WHILE           shift and go to state 43
    IF              shift and go to state 44
    WRITE           shift and go to state 45
    READ            shift and go to state 46
    ID              shift and go to state 39
    BOOL            shift and go to state 8
    WORD            shift and go to state 9
    NUMBER          shift and go to state 10
    CENTER          shift and go to state 47
    FORWARD         shift and go to state 48
    RIGHT           shift and go to state 49
    LEFT            shift and go to state 50

    if_stmnt                       shift and go to state 32
    stmnt                          shift and go to state 59
    empty                          shift and go to state 26
    returnf                        shift and go to state 27
    var_declaration_func           shift and go to state 28
    pen_func                       shift and go to state 29
    move_func                      shift and go to state 30
    while_stmnt                    shift and go to state 31
    write                          shift and go to state 33
    read                           shift and go to state 34
    func_call                      shift and go to state 35
    var_assignation                shift and go to state 36
    var_type                       shift and go to state 38
    move_type                      shift and go to state 42

state 33

    (28) stmnt -> write . stmnt
    (21) stmnt -> . empty
    (22) stmnt -> . returnf stmnt
    (23) stmnt -> . var_declaration_func stmnt
    (24) stmnt -> . pen_func stmnt
    (25) stmnt -> . move_func stmnt
    (26) stmnt -> . while_stmnt stmnt
    (27) stmnt -> . if_stmnt stmnt
    (28) stmnt -> . write stmnt
    (29) stmnt -> . read stmnt
    (30) stmnt -> . func_call stmnt
    (31) stmnt -> . var_assignation stmnt
    (114) empty -> .
    (32) returnf -> . RETURN expression
    (33) var_declaration_func -> . var_type ID multiple_vars
    (111) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (112) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (106) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (98) while_stmnt -> . WHILE w1 con_expression w2 stmnt w3 END
    (91) if_stmnt -> . IF con_expression if1 stmnt if2 else_stmnt
    (90) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (82) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (75) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (34) var_assignation -> . ID e5 assign e6 expression q3
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (107) move_type -> . CENTER
    (108) move_type -> . FORWARD
    (109) move_type -> . RIGHT
    (110) move_type -> . LEFT
    END             reduce using rule 114 (empty -> .)
    ELSE            reduce using rule 114 (empty -> .)
    RETURN          shift and go to state 37
    PEN_DOWN        shift and go to state 40
    PEN_UP          shift and go to state 41
    WHILE           shift and go to state 43
    IF              shift and go to state 44
    WRITE           shift and go to state 45
    READ            shift and go to state 46
    ID              shift and go to state 39
    BOOL            shift and go to state 8
    WORD            shift and go to state 9
    NUMBER          shift and go to state 10
    CENTER          shift and go to state 47
    FORWARD         shift and go to state 48
    RIGHT           shift and go to state 49
    LEFT            shift and go to state 50

    write                          shift and go to state 33
    stmnt                          shift and go to state 60
    empty                          shift and go to state 26
    returnf                        shift and go to state 27
    var_declaration_func           shift and go to state 28
    pen_func                       shift and go to state 29
    move_func                      shift and go to state 30
    while_stmnt                    shift and go to state 31
    if_stmnt                       shift and go to state 32
    read                           shift and go to state 34
    func_call                      shift and go to state 35
    var_assignation                shift and go to state 36
    var_type                       shift and go to state 38
    move_type                      shift and go to state 42

state 34

    (29) stmnt -> read . stmnt
    (21) stmnt -> . empty
    (22) stmnt -> . returnf stmnt
    (23) stmnt -> . var_declaration_func stmnt
    (24) stmnt -> . pen_func stmnt
    (25) stmnt -> . move_func stmnt
    (26) stmnt -> . while_stmnt stmnt
    (27) stmnt -> . if_stmnt stmnt
    (28) stmnt -> . write stmnt
    (29) stmnt -> . read stmnt
    (30) stmnt -> . func_call stmnt
    (31) stmnt -> . var_assignation stmnt
    (114) empty -> .
    (32) returnf -> . RETURN expression
    (33) var_declaration_func -> . var_type ID multiple_vars
    (111) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (112) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (106) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (98) while_stmnt -> . WHILE w1 con_expression w2 stmnt w3 END
    (91) if_stmnt -> . IF con_expression if1 stmnt if2 else_stmnt
    (90) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (82) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (75) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (34) var_assignation -> . ID e5 assign e6 expression q3
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (107) move_type -> . CENTER
    (108) move_type -> . FORWARD
    (109) move_type -> . RIGHT
    (110) move_type -> . LEFT
    END             reduce using rule 114 (empty -> .)
    ELSE            reduce using rule 114 (empty -> .)
    RETURN          shift and go to state 37
    PEN_DOWN        shift and go to state 40
    PEN_UP          shift and go to state 41
    WHILE           shift and go to state 43
    IF              shift and go to state 44
    WRITE           shift and go to state 45
    READ            shift and go to state 46
    ID              shift and go to state 39
    BOOL            shift and go to state 8
    WORD            shift and go to state 9
    NUMBER          shift and go to state 10
    CENTER          shift and go to state 47
    FORWARD         shift and go to state 48
    RIGHT           shift and go to state 49
    LEFT            shift and go to state 50

    read                           shift and go to state 34
    stmnt                          shift and go to state 61
    empty                          shift and go to state 26
    returnf                        shift and go to state 27
    var_declaration_func           shift and go to state 28
    pen_func                       shift and go to state 29
    move_func                      shift and go to state 30
    while_stmnt                    shift and go to state 31
    if_stmnt                       shift and go to state 32
    write                          shift and go to state 33
    func_call                      shift and go to state 35
    var_assignation                shift and go to state 36
    var_type                       shift and go to state 38
    move_type                      shift and go to state 42

state 35

    (30) stmnt -> func_call . stmnt
    (21) stmnt -> . empty
    (22) stmnt -> . returnf stmnt
    (23) stmnt -> . var_declaration_func stmnt
    (24) stmnt -> . pen_func stmnt
    (25) stmnt -> . move_func stmnt
    (26) stmnt -> . while_stmnt stmnt
    (27) stmnt -> . if_stmnt stmnt
    (28) stmnt -> . write stmnt
    (29) stmnt -> . read stmnt
    (30) stmnt -> . func_call stmnt
    (31) stmnt -> . var_assignation stmnt
    (114) empty -> .
    (32) returnf -> . RETURN expression
    (33) var_declaration_func -> . var_type ID multiple_vars
    (111) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (112) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (106) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (98) while_stmnt -> . WHILE w1 con_expression w2 stmnt w3 END
    (91) if_stmnt -> . IF con_expression if1 stmnt if2 else_stmnt
    (90) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (82) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (75) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (34) var_assignation -> . ID e5 assign e6 expression q3
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (107) move_type -> . CENTER
    (108) move_type -> . FORWARD
    (109) move_type -> . RIGHT
    (110) move_type -> . LEFT
    END             reduce using rule 114 (empty -> .)
    ELSE            reduce using rule 114 (empty -> .)
    RETURN          shift and go to state 37
    PEN_DOWN        shift and go to state 40
    PEN_UP          shift and go to state 41
    WHILE           shift and go to state 43
    IF              shift and go to state 44
    WRITE           shift and go to state 45
    READ            shift and go to state 46
    ID              shift and go to state 39
    BOOL            shift and go to state 8
    WORD            shift and go to state 9
    NUMBER          shift and go to state 10
    CENTER          shift and go to state 47
    FORWARD         shift and go to state 48
    RIGHT           shift and go to state 49
    LEFT            shift and go to state 50

    func_call                      shift and go to state 35
    stmnt                          shift and go to state 62
    empty                          shift and go to state 26
    returnf                        shift and go to state 27
    var_declaration_func           shift and go to state 28
    pen_func                       shift and go to state 29
    move_func                      shift and go to state 30
    while_stmnt                    shift and go to state 31
    if_stmnt                       shift and go to state 32
    write                          shift and go to state 33
    read                           shift and go to state 34
    var_assignation                shift and go to state 36
    var_type                       shift and go to state 38
    move_type                      shift and go to state 42

state 36

    (31) stmnt -> var_assignation . stmnt
    (21) stmnt -> . empty
    (22) stmnt -> . returnf stmnt
    (23) stmnt -> . var_declaration_func stmnt
    (24) stmnt -> . pen_func stmnt
    (25) stmnt -> . move_func stmnt
    (26) stmnt -> . while_stmnt stmnt
    (27) stmnt -> . if_stmnt stmnt
    (28) stmnt -> . write stmnt
    (29) stmnt -> . read stmnt
    (30) stmnt -> . func_call stmnt
    (31) stmnt -> . var_assignation stmnt
    (114) empty -> .
    (32) returnf -> . RETURN expression
    (33) var_declaration_func -> . var_type ID multiple_vars
    (111) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (112) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (106) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (98) while_stmnt -> . WHILE w1 con_expression w2 stmnt w3 END
    (91) if_stmnt -> . IF con_expression if1 stmnt if2 else_stmnt
    (90) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (82) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (75) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (34) var_assignation -> . ID e5 assign e6 expression q3
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (107) move_type -> . CENTER
    (108) move_type -> . FORWARD
    (109) move_type -> . RIGHT
    (110) move_type -> . LEFT
    END             reduce using rule 114 (empty -> .)
    ELSE            reduce using rule 114 (empty -> .)
    RETURN          shift and go to state 37
    PEN_DOWN        shift and go to state 40
    PEN_UP          shift and go to state 41
    WHILE           shift and go to state 43
    IF              shift and go to state 44
    WRITE           shift and go to state 45
    READ            shift and go to state 46
    ID              shift and go to state 39
    BOOL            shift and go to state 8
    WORD            shift and go to state 9
    NUMBER          shift and go to state 10
    CENTER          shift and go to state 47
    FORWARD         shift and go to state 48
    RIGHT           shift and go to state 49
    LEFT            shift and go to state 50

    var_assignation                shift and go to state 36
    stmnt                          shift and go to state 63
    empty                          shift and go to state 26
    returnf                        shift and go to state 27
    var_declaration_func           shift and go to state 28
    pen_func                       shift and go to state 29
    move_func                      shift and go to state 30
    while_stmnt                    shift and go to state 31
    if_stmnt                       shift and go to state 32
    write                          shift and go to state 33
    read                           shift and go to state 34
    func_call                      shift and go to state 35
    var_type                       shift and go to state 38
    move_type                      shift and go to state 42

state 37

    (32) returnf -> RETURN . expression
    (45) expression -> . exp q4
    (46) expression -> . exp rel_op exp q4
    (49) exp -> . termino q1
    (50) exp -> . termino term_op e3 termino q1
    (55) termino -> . factor q2
    (56) termino -> . factor fact_op e2 expression q2
    (62) factor -> . var_cte e1
    (63) factor -> . open_pth expression close_pth
    (38) var_cte -> . func_call
    (39) var_cte -> . cte_bool
    (40) var_cte -> . CTE_STR
    (41) var_cte -> . CTE_NUM
    (42) var_cte -> . variable
    (65) open_pth -> . OPEN_PTH
    (75) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (43) cte_bool -> . FALSE
    (44) cte_bool -> . TRUE
    (83) variable -> . ID array
    CTE_STR         shift and go to state 72
    CTE_NUM         shift and go to state 73
    OPEN_PTH        shift and go to state 75
    ID              shift and go to state 76
    FALSE           shift and go to state 77
    TRUE            shift and go to state 78

    expression                     shift and go to state 64
    exp                            shift and go to state 65
    termino                        shift and go to state 66
    factor                         shift and go to state 67
    var_cte                        shift and go to state 68
    open_pth                       shift and go to state 69
    func_call                      shift and go to state 70
    cte_bool                       shift and go to state 71
    variable                       shift and go to state 74

state 38

    (33) var_declaration_func -> var_type . ID multiple_vars
    ID              shift and go to state 79


state 39

    (75) func_call -> ID . OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (34) var_assignation -> ID . e5 assign e6 expression q3
    (35) e5 -> .
    OPEN_PTH        shift and go to state 80
    ASSIGN          reduce using rule 35 (e5 -> .)

    e5                             shift and go to state 81

state 40

    (111) pen_func -> PEN_DOWN . OPEN_PTH CLOSE_PTH
    OPEN_PTH        shift and go to state 82


state 41

    (112) pen_func -> PEN_UP . OPEN_PTH CLOSE_PTH
    OPEN_PTH        shift and go to state 83


state 42

    (106) move_func -> move_type . OPEN_PTH func_call_param CLOSE_PTH
    OPEN_PTH        shift and go to state 84


state 43

    (98) while_stmnt -> WHILE . w1 con_expression w2 stmnt w3 END
    (99) w1 -> .
    CTE_STR         reduce using rule 99 (w1 -> .)
    CTE_NUM         reduce using rule 99 (w1 -> .)
    OPEN_PTH        reduce using rule 99 (w1 -> .)
    ID              reduce using rule 99 (w1 -> .)
    FALSE           reduce using rule 99 (w1 -> .)
    TRUE            reduce using rule 99 (w1 -> .)

    w1                             shift and go to state 85

state 44

    (91) if_stmnt -> IF . con_expression if1 stmnt if2 else_stmnt
    (102) con_expression -> . expression q5
    (103) con_expression -> . expression q5 log_op e7 expression q5
    (45) expression -> . exp q4
    (46) expression -> . exp rel_op exp q4
    (49) exp -> . termino q1
    (50) exp -> . termino term_op e3 termino q1
    (55) termino -> . factor q2
    (56) termino -> . factor fact_op e2 expression q2
    (62) factor -> . var_cte e1
    (63) factor -> . open_pth expression close_pth
    (38) var_cte -> . func_call
    (39) var_cte -> . cte_bool
    (40) var_cte -> . CTE_STR
    (41) var_cte -> . CTE_NUM
    (42) var_cte -> . variable
    (65) open_pth -> . OPEN_PTH
    (75) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (43) cte_bool -> . FALSE
    (44) cte_bool -> . TRUE
    (83) variable -> . ID array
    CTE_STR         shift and go to state 72
    CTE_NUM         shift and go to state 73
    OPEN_PTH        shift and go to state 75
    ID              shift and go to state 76
    FALSE           shift and go to state 77
    TRUE            shift and go to state 78

    con_expression                 shift and go to state 86
    expression                     shift and go to state 87
    exp                            shift and go to state 65
    termino                        shift and go to state 66
    factor                         shift and go to state 67
    var_cte                        shift and go to state 68
    open_pth                       shift and go to state 69
    func_call                      shift and go to state 70
    cte_bool                       shift and go to state 71
    variable                       shift and go to state 74

state 45

    (90) write -> WRITE . OPEN_PTH expression CLOSE_PTH
    OPEN_PTH        shift and go to state 88


state 46

    (82) read -> READ . OPEN_PTH variable multiple_vars CLOSE_PTH
    OPEN_PTH        shift and go to state 89


state 47

    (107) move_type -> CENTER .
    OPEN_PTH        reduce using rule 107 (move_type -> CENTER .)


state 48

    (108) move_type -> FORWARD .
    OPEN_PTH        reduce using rule 108 (move_type -> FORWARD .)


state 49

    (109) move_type -> RIGHT .
    OPEN_PTH        reduce using rule 109 (move_type -> RIGHT .)


state 50

    (110) move_type -> LEFT .
    OPEN_PTH        reduce using rule 110 (move_type -> LEFT .)


state 51

    (11) func_declaration -> FUNC func_type ID . fd1 OPEN_PTH parameter CLOSE_PTH stmnt END
    (12) fd1 -> .
    OPEN_PTH        reduce using rule 12 (fd1 -> .)

    fd1                            shift and go to state 90

state 52

    (6) multiple_var -> COMMA ID . multiple_var
    (5) multiple_var -> . empty
    (6) multiple_var -> . COMMA ID multiple_var
    (114) empty -> .
    COMMA           shift and go to state 24
    FUNC            reduce using rule 114 (empty -> .)
    MAIN            reduce using rule 114 (empty -> .)

    multiple_var                   shift and go to state 91
    empty                          shift and go to state 23

state 53

    (113) main -> MAIN stmnt END .
    $end            reduce using rule 113 (main -> MAIN stmnt END .)


state 54

    (22) stmnt -> returnf stmnt .
    END             reduce using rule 22 (stmnt -> returnf stmnt .)
    ELSE            reduce using rule 22 (stmnt -> returnf stmnt .)


state 55

    (23) stmnt -> var_declaration_func stmnt .
    END             reduce using rule 23 (stmnt -> var_declaration_func stmnt .)
    ELSE            reduce using rule 23 (stmnt -> var_declaration_func stmnt .)


state 56

    (24) stmnt -> pen_func stmnt .
    END             reduce using rule 24 (stmnt -> pen_func stmnt .)
    ELSE            reduce using rule 24 (stmnt -> pen_func stmnt .)


state 57

    (25) stmnt -> move_func stmnt .
    END             reduce using rule 25 (stmnt -> move_func stmnt .)
    ELSE            reduce using rule 25 (stmnt -> move_func stmnt .)


state 58

    (26) stmnt -> while_stmnt stmnt .
    END             reduce using rule 26 (stmnt -> while_stmnt stmnt .)
    ELSE            reduce using rule 26 (stmnt -> while_stmnt stmnt .)


state 59

    (27) stmnt -> if_stmnt stmnt .
    END             reduce using rule 27 (stmnt -> if_stmnt stmnt .)
    ELSE            reduce using rule 27 (stmnt -> if_stmnt stmnt .)


state 60

    (28) stmnt -> write stmnt .
    END             reduce using rule 28 (stmnt -> write stmnt .)
    ELSE            reduce using rule 28 (stmnt -> write stmnt .)


state 61

    (29) stmnt -> read stmnt .
    END             reduce using rule 29 (stmnt -> read stmnt .)
    ELSE            reduce using rule 29 (stmnt -> read stmnt .)


state 62

    (30) stmnt -> func_call stmnt .
    END             reduce using rule 30 (stmnt -> func_call stmnt .)
    ELSE            reduce using rule 30 (stmnt -> func_call stmnt .)


state 63

    (31) stmnt -> var_assignation stmnt .
    END             reduce using rule 31 (stmnt -> var_assignation stmnt .)
    ELSE            reduce using rule 31 (stmnt -> var_assignation stmnt .)


state 64

    (32) returnf -> RETURN expression .
    RETURN          reduce using rule 32 (returnf -> RETURN expression .)
    PEN_DOWN        reduce using rule 32 (returnf -> RETURN expression .)
    PEN_UP          reduce using rule 32 (returnf -> RETURN expression .)
    WHILE           reduce using rule 32 (returnf -> RETURN expression .)
    IF              reduce using rule 32 (returnf -> RETURN expression .)
    WRITE           reduce using rule 32 (returnf -> RETURN expression .)
    READ            reduce using rule 32 (returnf -> RETURN expression .)
    ID              reduce using rule 32 (returnf -> RETURN expression .)
    BOOL            reduce using rule 32 (returnf -> RETURN expression .)
    WORD            reduce using rule 32 (returnf -> RETURN expression .)
    NUMBER          reduce using rule 32 (returnf -> RETURN expression .)
    CENTER          reduce using rule 32 (returnf -> RETURN expression .)
    FORWARD         reduce using rule 32 (returnf -> RETURN expression .)
    RIGHT           reduce using rule 32 (returnf -> RETURN expression .)
    LEFT            reduce using rule 32 (returnf -> RETURN expression .)
    END             reduce using rule 32 (returnf -> RETURN expression .)
    ELSE            reduce using rule 32 (returnf -> RETURN expression .)


state 65

    (45) expression -> exp . q4
    (46) expression -> exp . rel_op exp q4
    (47) q4 -> .
    (69) rel_op -> . EQUAL_TO
    (70) rel_op -> . MORE_OR_EQ_THAN
    (71) rel_op -> . LESS_OR_EQ_THAN
    (72) rel_op -> . DIFFERENT_TO
    (73) rel_op -> . MORE_THAN
    (74) rel_op -> . LESS_THAN
  ! shift/reduce conflict for EQUAL_TO resolved as shift
  ! shift/reduce conflict for MORE_OR_EQ_THAN resolved as shift
  ! shift/reduce conflict for LESS_OR_EQ_THAN resolved as shift
  ! shift/reduce conflict for DIFFERENT_TO resolved as shift
  ! shift/reduce conflict for MORE_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
    RETURN          reduce using rule 47 (q4 -> .)
    PEN_DOWN        reduce using rule 47 (q4 -> .)
    PEN_UP          reduce using rule 47 (q4 -> .)
    WHILE           reduce using rule 47 (q4 -> .)
    IF              reduce using rule 47 (q4 -> .)
    WRITE           reduce using rule 47 (q4 -> .)
    READ            reduce using rule 47 (q4 -> .)
    ID              reduce using rule 47 (q4 -> .)
    BOOL            reduce using rule 47 (q4 -> .)
    WORD            reduce using rule 47 (q4 -> .)
    NUMBER          reduce using rule 47 (q4 -> .)
    CENTER          reduce using rule 47 (q4 -> .)
    FORWARD         reduce using rule 47 (q4 -> .)
    RIGHT           reduce using rule 47 (q4 -> .)
    LEFT            reduce using rule 47 (q4 -> .)
    END             reduce using rule 47 (q4 -> .)
    ELSE            reduce using rule 47 (q4 -> .)
    OR              reduce using rule 47 (q4 -> .)
    AND             reduce using rule 47 (q4 -> .)
    CLOSE_PTH       reduce using rule 47 (q4 -> .)
    COMMA           reduce using rule 47 (q4 -> .)
    CLOSE_SQR       reduce using rule 47 (q4 -> .)
    SUB             reduce using rule 47 (q4 -> .)
    SUM             reduce using rule 47 (q4 -> .)
    EQUAL_TO        shift and go to state 94
    MORE_OR_EQ_THAN shift and go to state 95
    LESS_OR_EQ_THAN shift and go to state 96
    DIFFERENT_TO    shift and go to state 97
    MORE_THAN       shift and go to state 98
    LESS_THAN       shift and go to state 99

    q4                             shift and go to state 92
    rel_op                         shift and go to state 93

state 66

    (49) exp -> termino . q1
    (50) exp -> termino . term_op e3 termino q1
    (57) q1 -> .
    (53) term_op -> . SUB
    (54) term_op -> . SUM
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for SUM resolved as shift
    EQUAL_TO        reduce using rule 57 (q1 -> .)
    MORE_OR_EQ_THAN reduce using rule 57 (q1 -> .)
    LESS_OR_EQ_THAN reduce using rule 57 (q1 -> .)
    DIFFERENT_TO    reduce using rule 57 (q1 -> .)
    MORE_THAN       reduce using rule 57 (q1 -> .)
    LESS_THAN       reduce using rule 57 (q1 -> .)
    RETURN          reduce using rule 57 (q1 -> .)
    PEN_DOWN        reduce using rule 57 (q1 -> .)
    PEN_UP          reduce using rule 57 (q1 -> .)
    WHILE           reduce using rule 57 (q1 -> .)
    IF              reduce using rule 57 (q1 -> .)
    WRITE           reduce using rule 57 (q1 -> .)
    READ            reduce using rule 57 (q1 -> .)
    ID              reduce using rule 57 (q1 -> .)
    BOOL            reduce using rule 57 (q1 -> .)
    WORD            reduce using rule 57 (q1 -> .)
    NUMBER          reduce using rule 57 (q1 -> .)
    CENTER          reduce using rule 57 (q1 -> .)
    FORWARD         reduce using rule 57 (q1 -> .)
    RIGHT           reduce using rule 57 (q1 -> .)
    LEFT            reduce using rule 57 (q1 -> .)
    END             reduce using rule 57 (q1 -> .)
    ELSE            reduce using rule 57 (q1 -> .)
    OR              reduce using rule 57 (q1 -> .)
    AND             reduce using rule 57 (q1 -> .)
    CLOSE_PTH       reduce using rule 57 (q1 -> .)
    COMMA           reduce using rule 57 (q1 -> .)
    CLOSE_SQR       reduce using rule 57 (q1 -> .)
    SUB             shift and go to state 102
    SUM             shift and go to state 103

    q1                             shift and go to state 100
    term_op                        shift and go to state 101

state 67

    (55) termino -> factor . q2
    (56) termino -> factor . fact_op e2 expression q2
    (52) q2 -> .
    (60) fact_op -> . DIV
    (61) fact_op -> . MULT
    SUB             reduce using rule 52 (q2 -> .)
    SUM             reduce using rule 52 (q2 -> .)
    EQUAL_TO        reduce using rule 52 (q2 -> .)
    MORE_OR_EQ_THAN reduce using rule 52 (q2 -> .)
    LESS_OR_EQ_THAN reduce using rule 52 (q2 -> .)
    DIFFERENT_TO    reduce using rule 52 (q2 -> .)
    MORE_THAN       reduce using rule 52 (q2 -> .)
    LESS_THAN       reduce using rule 52 (q2 -> .)
    RETURN          reduce using rule 52 (q2 -> .)
    PEN_DOWN        reduce using rule 52 (q2 -> .)
    PEN_UP          reduce using rule 52 (q2 -> .)
    WHILE           reduce using rule 52 (q2 -> .)
    IF              reduce using rule 52 (q2 -> .)
    WRITE           reduce using rule 52 (q2 -> .)
    READ            reduce using rule 52 (q2 -> .)
    ID              reduce using rule 52 (q2 -> .)
    BOOL            reduce using rule 52 (q2 -> .)
    WORD            reduce using rule 52 (q2 -> .)
    NUMBER          reduce using rule 52 (q2 -> .)
    CENTER          reduce using rule 52 (q2 -> .)
    FORWARD         reduce using rule 52 (q2 -> .)
    RIGHT           reduce using rule 52 (q2 -> .)
    LEFT            reduce using rule 52 (q2 -> .)
    END             reduce using rule 52 (q2 -> .)
    ELSE            reduce using rule 52 (q2 -> .)
    OR              reduce using rule 52 (q2 -> .)
    AND             reduce using rule 52 (q2 -> .)
    CLOSE_PTH       reduce using rule 52 (q2 -> .)
    COMMA           reduce using rule 52 (q2 -> .)
    CLOSE_SQR       reduce using rule 52 (q2 -> .)
    DIV             shift and go to state 106
    MULT            shift and go to state 107

    q2                             shift and go to state 104
    fact_op                        shift and go to state 105

state 68

    (62) factor -> var_cte . e1
    (64) e1 -> .
    DIV             reduce using rule 64 (e1 -> .)
    MULT            reduce using rule 64 (e1 -> .)
    SUB             reduce using rule 64 (e1 -> .)
    SUM             reduce using rule 64 (e1 -> .)
    EQUAL_TO        reduce using rule 64 (e1 -> .)
    MORE_OR_EQ_THAN reduce using rule 64 (e1 -> .)
    LESS_OR_EQ_THAN reduce using rule 64 (e1 -> .)
    DIFFERENT_TO    reduce using rule 64 (e1 -> .)
    MORE_THAN       reduce using rule 64 (e1 -> .)
    LESS_THAN       reduce using rule 64 (e1 -> .)
    RETURN          reduce using rule 64 (e1 -> .)
    PEN_DOWN        reduce using rule 64 (e1 -> .)
    PEN_UP          reduce using rule 64 (e1 -> .)
    WHILE           reduce using rule 64 (e1 -> .)
    IF              reduce using rule 64 (e1 -> .)
    WRITE           reduce using rule 64 (e1 -> .)
    READ            reduce using rule 64 (e1 -> .)
    ID              reduce using rule 64 (e1 -> .)
    BOOL            reduce using rule 64 (e1 -> .)
    WORD            reduce using rule 64 (e1 -> .)
    NUMBER          reduce using rule 64 (e1 -> .)
    CENTER          reduce using rule 64 (e1 -> .)
    FORWARD         reduce using rule 64 (e1 -> .)
    RIGHT           reduce using rule 64 (e1 -> .)
    LEFT            reduce using rule 64 (e1 -> .)
    END             reduce using rule 64 (e1 -> .)
    ELSE            reduce using rule 64 (e1 -> .)
    OR              reduce using rule 64 (e1 -> .)
    AND             reduce using rule 64 (e1 -> .)
    CLOSE_PTH       reduce using rule 64 (e1 -> .)
    COMMA           reduce using rule 64 (e1 -> .)
    CLOSE_SQR       reduce using rule 64 (e1 -> .)

    e1                             shift and go to state 108

state 69

    (63) factor -> open_pth . expression close_pth
    (45) expression -> . exp q4
    (46) expression -> . exp rel_op exp q4
    (49) exp -> . termino q1
    (50) exp -> . termino term_op e3 termino q1
    (55) termino -> . factor q2
    (56) termino -> . factor fact_op e2 expression q2
    (62) factor -> . var_cte e1
    (63) factor -> . open_pth expression close_pth
    (38) var_cte -> . func_call
    (39) var_cte -> . cte_bool
    (40) var_cte -> . CTE_STR
    (41) var_cte -> . CTE_NUM
    (42) var_cte -> . variable
    (65) open_pth -> . OPEN_PTH
    (75) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (43) cte_bool -> . FALSE
    (44) cte_bool -> . TRUE
    (83) variable -> . ID array
    CTE_STR         shift and go to state 72
    CTE_NUM         shift and go to state 73
    OPEN_PTH        shift and go to state 75
    ID              shift and go to state 76
    FALSE           shift and go to state 77
    TRUE            shift and go to state 78

    open_pth                       shift and go to state 69
    expression                     shift and go to state 109
    exp                            shift and go to state 65
    termino                        shift and go to state 66
    factor                         shift and go to state 67
    var_cte                        shift and go to state 68
    func_call                      shift and go to state 70
    cte_bool                       shift and go to state 71
    variable                       shift and go to state 74

state 70

    (38) var_cte -> func_call .
    DIV             reduce using rule 38 (var_cte -> func_call .)
    MULT            reduce using rule 38 (var_cte -> func_call .)
    SUB             reduce using rule 38 (var_cte -> func_call .)
    SUM             reduce using rule 38 (var_cte -> func_call .)
    EQUAL_TO        reduce using rule 38 (var_cte -> func_call .)
    MORE_OR_EQ_THAN reduce using rule 38 (var_cte -> func_call .)
    LESS_OR_EQ_THAN reduce using rule 38 (var_cte -> func_call .)
    DIFFERENT_TO    reduce using rule 38 (var_cte -> func_call .)
    MORE_THAN       reduce using rule 38 (var_cte -> func_call .)
    LESS_THAN       reduce using rule 38 (var_cte -> func_call .)
    RETURN          reduce using rule 38 (var_cte -> func_call .)
    PEN_DOWN        reduce using rule 38 (var_cte -> func_call .)
    PEN_UP          reduce using rule 38 (var_cte -> func_call .)
    WHILE           reduce using rule 38 (var_cte -> func_call .)
    IF              reduce using rule 38 (var_cte -> func_call .)
    WRITE           reduce using rule 38 (var_cte -> func_call .)
    READ            reduce using rule 38 (var_cte -> func_call .)
    ID              reduce using rule 38 (var_cte -> func_call .)
    BOOL            reduce using rule 38 (var_cte -> func_call .)
    WORD            reduce using rule 38 (var_cte -> func_call .)
    NUMBER          reduce using rule 38 (var_cte -> func_call .)
    CENTER          reduce using rule 38 (var_cte -> func_call .)
    FORWARD         reduce using rule 38 (var_cte -> func_call .)
    RIGHT           reduce using rule 38 (var_cte -> func_call .)
    LEFT            reduce using rule 38 (var_cte -> func_call .)
    END             reduce using rule 38 (var_cte -> func_call .)
    ELSE            reduce using rule 38 (var_cte -> func_call .)
    OR              reduce using rule 38 (var_cte -> func_call .)
    AND             reduce using rule 38 (var_cte -> func_call .)
    CLOSE_PTH       reduce using rule 38 (var_cte -> func_call .)
    COMMA           reduce using rule 38 (var_cte -> func_call .)
    CLOSE_SQR       reduce using rule 38 (var_cte -> func_call .)


state 71

    (39) var_cte -> cte_bool .
    DIV             reduce using rule 39 (var_cte -> cte_bool .)
    MULT            reduce using rule 39 (var_cte -> cte_bool .)
    SUB             reduce using rule 39 (var_cte -> cte_bool .)
    SUM             reduce using rule 39 (var_cte -> cte_bool .)
    EQUAL_TO        reduce using rule 39 (var_cte -> cte_bool .)
    MORE_OR_EQ_THAN reduce using rule 39 (var_cte -> cte_bool .)
    LESS_OR_EQ_THAN reduce using rule 39 (var_cte -> cte_bool .)
    DIFFERENT_TO    reduce using rule 39 (var_cte -> cte_bool .)
    MORE_THAN       reduce using rule 39 (var_cte -> cte_bool .)
    LESS_THAN       reduce using rule 39 (var_cte -> cte_bool .)
    RETURN          reduce using rule 39 (var_cte -> cte_bool .)
    PEN_DOWN        reduce using rule 39 (var_cte -> cte_bool .)
    PEN_UP          reduce using rule 39 (var_cte -> cte_bool .)
    WHILE           reduce using rule 39 (var_cte -> cte_bool .)
    IF              reduce using rule 39 (var_cte -> cte_bool .)
    WRITE           reduce using rule 39 (var_cte -> cte_bool .)
    READ            reduce using rule 39 (var_cte -> cte_bool .)
    ID              reduce using rule 39 (var_cte -> cte_bool .)
    BOOL            reduce using rule 39 (var_cte -> cte_bool .)
    WORD            reduce using rule 39 (var_cte -> cte_bool .)
    NUMBER          reduce using rule 39 (var_cte -> cte_bool .)
    CENTER          reduce using rule 39 (var_cte -> cte_bool .)
    FORWARD         reduce using rule 39 (var_cte -> cte_bool .)
    RIGHT           reduce using rule 39 (var_cte -> cte_bool .)
    LEFT            reduce using rule 39 (var_cte -> cte_bool .)
    END             reduce using rule 39 (var_cte -> cte_bool .)
    ELSE            reduce using rule 39 (var_cte -> cte_bool .)
    OR              reduce using rule 39 (var_cte -> cte_bool .)
    AND             reduce using rule 39 (var_cte -> cte_bool .)
    CLOSE_PTH       reduce using rule 39 (var_cte -> cte_bool .)
    COMMA           reduce using rule 39 (var_cte -> cte_bool .)
    CLOSE_SQR       reduce using rule 39 (var_cte -> cte_bool .)


state 72

    (40) var_cte -> CTE_STR .
    DIV             reduce using rule 40 (var_cte -> CTE_STR .)
    MULT            reduce using rule 40 (var_cte -> CTE_STR .)
    SUB             reduce using rule 40 (var_cte -> CTE_STR .)
    SUM             reduce using rule 40 (var_cte -> CTE_STR .)
    EQUAL_TO        reduce using rule 40 (var_cte -> CTE_STR .)
    MORE_OR_EQ_THAN reduce using rule 40 (var_cte -> CTE_STR .)
    LESS_OR_EQ_THAN reduce using rule 40 (var_cte -> CTE_STR .)
    DIFFERENT_TO    reduce using rule 40 (var_cte -> CTE_STR .)
    MORE_THAN       reduce using rule 40 (var_cte -> CTE_STR .)
    LESS_THAN       reduce using rule 40 (var_cte -> CTE_STR .)
    RETURN          reduce using rule 40 (var_cte -> CTE_STR .)
    PEN_DOWN        reduce using rule 40 (var_cte -> CTE_STR .)
    PEN_UP          reduce using rule 40 (var_cte -> CTE_STR .)
    WHILE           reduce using rule 40 (var_cte -> CTE_STR .)
    IF              reduce using rule 40 (var_cte -> CTE_STR .)
    WRITE           reduce using rule 40 (var_cte -> CTE_STR .)
    READ            reduce using rule 40 (var_cte -> CTE_STR .)
    ID              reduce using rule 40 (var_cte -> CTE_STR .)
    BOOL            reduce using rule 40 (var_cte -> CTE_STR .)
    WORD            reduce using rule 40 (var_cte -> CTE_STR .)
    NUMBER          reduce using rule 40 (var_cte -> CTE_STR .)
    CENTER          reduce using rule 40 (var_cte -> CTE_STR .)
    FORWARD         reduce using rule 40 (var_cte -> CTE_STR .)
    RIGHT           reduce using rule 40 (var_cte -> CTE_STR .)
    LEFT            reduce using rule 40 (var_cte -> CTE_STR .)
    END             reduce using rule 40 (var_cte -> CTE_STR .)
    ELSE            reduce using rule 40 (var_cte -> CTE_STR .)
    OR              reduce using rule 40 (var_cte -> CTE_STR .)
    AND             reduce using rule 40 (var_cte -> CTE_STR .)
    CLOSE_PTH       reduce using rule 40 (var_cte -> CTE_STR .)
    COMMA           reduce using rule 40 (var_cte -> CTE_STR .)
    CLOSE_SQR       reduce using rule 40 (var_cte -> CTE_STR .)


state 73

    (41) var_cte -> CTE_NUM .
    DIV             reduce using rule 41 (var_cte -> CTE_NUM .)
    MULT            reduce using rule 41 (var_cte -> CTE_NUM .)
    SUB             reduce using rule 41 (var_cte -> CTE_NUM .)
    SUM             reduce using rule 41 (var_cte -> CTE_NUM .)
    EQUAL_TO        reduce using rule 41 (var_cte -> CTE_NUM .)
    MORE_OR_EQ_THAN reduce using rule 41 (var_cte -> CTE_NUM .)
    LESS_OR_EQ_THAN reduce using rule 41 (var_cte -> CTE_NUM .)
    DIFFERENT_TO    reduce using rule 41 (var_cte -> CTE_NUM .)
    MORE_THAN       reduce using rule 41 (var_cte -> CTE_NUM .)
    LESS_THAN       reduce using rule 41 (var_cte -> CTE_NUM .)
    RETURN          reduce using rule 41 (var_cte -> CTE_NUM .)
    PEN_DOWN        reduce using rule 41 (var_cte -> CTE_NUM .)
    PEN_UP          reduce using rule 41 (var_cte -> CTE_NUM .)
    WHILE           reduce using rule 41 (var_cte -> CTE_NUM .)
    IF              reduce using rule 41 (var_cte -> CTE_NUM .)
    WRITE           reduce using rule 41 (var_cte -> CTE_NUM .)
    READ            reduce using rule 41 (var_cte -> CTE_NUM .)
    ID              reduce using rule 41 (var_cte -> CTE_NUM .)
    BOOL            reduce using rule 41 (var_cte -> CTE_NUM .)
    WORD            reduce using rule 41 (var_cte -> CTE_NUM .)
    NUMBER          reduce using rule 41 (var_cte -> CTE_NUM .)
    CENTER          reduce using rule 41 (var_cte -> CTE_NUM .)
    FORWARD         reduce using rule 41 (var_cte -> CTE_NUM .)
    RIGHT           reduce using rule 41 (var_cte -> CTE_NUM .)
    LEFT            reduce using rule 41 (var_cte -> CTE_NUM .)
    END             reduce using rule 41 (var_cte -> CTE_NUM .)
    ELSE            reduce using rule 41 (var_cte -> CTE_NUM .)
    OR              reduce using rule 41 (var_cte -> CTE_NUM .)
    AND             reduce using rule 41 (var_cte -> CTE_NUM .)
    CLOSE_PTH       reduce using rule 41 (var_cte -> CTE_NUM .)
    COMMA           reduce using rule 41 (var_cte -> CTE_NUM .)
    CLOSE_SQR       reduce using rule 41 (var_cte -> CTE_NUM .)


state 74

    (42) var_cte -> variable .
    DIV             reduce using rule 42 (var_cte -> variable .)
    MULT            reduce using rule 42 (var_cte -> variable .)
    SUB             reduce using rule 42 (var_cte -> variable .)
    SUM             reduce using rule 42 (var_cte -> variable .)
    EQUAL_TO        reduce using rule 42 (var_cte -> variable .)
    MORE_OR_EQ_THAN reduce using rule 42 (var_cte -> variable .)
    LESS_OR_EQ_THAN reduce using rule 42 (var_cte -> variable .)
    DIFFERENT_TO    reduce using rule 42 (var_cte -> variable .)
    MORE_THAN       reduce using rule 42 (var_cte -> variable .)
    LESS_THAN       reduce using rule 42 (var_cte -> variable .)
    RETURN          reduce using rule 42 (var_cte -> variable .)
    PEN_DOWN        reduce using rule 42 (var_cte -> variable .)
    PEN_UP          reduce using rule 42 (var_cte -> variable .)
    WHILE           reduce using rule 42 (var_cte -> variable .)
    IF              reduce using rule 42 (var_cte -> variable .)
    WRITE           reduce using rule 42 (var_cte -> variable .)
    READ            reduce using rule 42 (var_cte -> variable .)
    ID              reduce using rule 42 (var_cte -> variable .)
    BOOL            reduce using rule 42 (var_cte -> variable .)
    WORD            reduce using rule 42 (var_cte -> variable .)
    NUMBER          reduce using rule 42 (var_cte -> variable .)
    CENTER          reduce using rule 42 (var_cte -> variable .)
    FORWARD         reduce using rule 42 (var_cte -> variable .)
    RIGHT           reduce using rule 42 (var_cte -> variable .)
    LEFT            reduce using rule 42 (var_cte -> variable .)
    END             reduce using rule 42 (var_cte -> variable .)
    ELSE            reduce using rule 42 (var_cte -> variable .)
    OR              reduce using rule 42 (var_cte -> variable .)
    AND             reduce using rule 42 (var_cte -> variable .)
    CLOSE_PTH       reduce using rule 42 (var_cte -> variable .)
    COMMA           reduce using rule 42 (var_cte -> variable .)
    CLOSE_SQR       reduce using rule 42 (var_cte -> variable .)


state 75

    (65) open_pth -> OPEN_PTH .
    CTE_STR         reduce using rule 65 (open_pth -> OPEN_PTH .)
    CTE_NUM         reduce using rule 65 (open_pth -> OPEN_PTH .)
    OPEN_PTH        reduce using rule 65 (open_pth -> OPEN_PTH .)
    ID              reduce using rule 65 (open_pth -> OPEN_PTH .)
    FALSE           reduce using rule 65 (open_pth -> OPEN_PTH .)
    TRUE            reduce using rule 65 (open_pth -> OPEN_PTH .)


state 76

    (75) func_call -> ID . OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (83) variable -> ID . array
    (84) array -> . empty
    (85) array -> . OPEN_SQR expression CLOSE_SQR matrix
    (114) empty -> .
    OPEN_PTH        shift and go to state 80
    OPEN_SQR        shift and go to state 112
    DIV             reduce using rule 114 (empty -> .)
    MULT            reduce using rule 114 (empty -> .)
    SUB             reduce using rule 114 (empty -> .)
    SUM             reduce using rule 114 (empty -> .)
    EQUAL_TO        reduce using rule 114 (empty -> .)
    MORE_OR_EQ_THAN reduce using rule 114 (empty -> .)
    LESS_OR_EQ_THAN reduce using rule 114 (empty -> .)
    DIFFERENT_TO    reduce using rule 114 (empty -> .)
    MORE_THAN       reduce using rule 114 (empty -> .)
    LESS_THAN       reduce using rule 114 (empty -> .)
    RETURN          reduce using rule 114 (empty -> .)
    PEN_DOWN        reduce using rule 114 (empty -> .)
    PEN_UP          reduce using rule 114 (empty -> .)
    WHILE           reduce using rule 114 (empty -> .)
    IF              reduce using rule 114 (empty -> .)
    WRITE           reduce using rule 114 (empty -> .)
    READ            reduce using rule 114 (empty -> .)
    ID              reduce using rule 114 (empty -> .)
    BOOL            reduce using rule 114 (empty -> .)
    WORD            reduce using rule 114 (empty -> .)
    NUMBER          reduce using rule 114 (empty -> .)
    CENTER          reduce using rule 114 (empty -> .)
    FORWARD         reduce using rule 114 (empty -> .)
    RIGHT           reduce using rule 114 (empty -> .)
    LEFT            reduce using rule 114 (empty -> .)
    END             reduce using rule 114 (empty -> .)
    ELSE            reduce using rule 114 (empty -> .)
    OR              reduce using rule 114 (empty -> .)
    AND             reduce using rule 114 (empty -> .)
    CLOSE_PTH       reduce using rule 114 (empty -> .)
    COMMA           reduce using rule 114 (empty -> .)
    CLOSE_SQR       reduce using rule 114 (empty -> .)

    array                          shift and go to state 110
    empty                          shift and go to state 111

state 77

    (43) cte_bool -> FALSE .
    DIV             reduce using rule 43 (cte_bool -> FALSE .)
    MULT            reduce using rule 43 (cte_bool -> FALSE .)
    SUB             reduce using rule 43 (cte_bool -> FALSE .)
    SUM             reduce using rule 43 (cte_bool -> FALSE .)
    EQUAL_TO        reduce using rule 43 (cte_bool -> FALSE .)
    MORE_OR_EQ_THAN reduce using rule 43 (cte_bool -> FALSE .)
    LESS_OR_EQ_THAN reduce using rule 43 (cte_bool -> FALSE .)
    DIFFERENT_TO    reduce using rule 43 (cte_bool -> FALSE .)
    MORE_THAN       reduce using rule 43 (cte_bool -> FALSE .)
    LESS_THAN       reduce using rule 43 (cte_bool -> FALSE .)
    RETURN          reduce using rule 43 (cte_bool -> FALSE .)
    PEN_DOWN        reduce using rule 43 (cte_bool -> FALSE .)
    PEN_UP          reduce using rule 43 (cte_bool -> FALSE .)
    WHILE           reduce using rule 43 (cte_bool -> FALSE .)
    IF              reduce using rule 43 (cte_bool -> FALSE .)
    WRITE           reduce using rule 43 (cte_bool -> FALSE .)
    READ            reduce using rule 43 (cte_bool -> FALSE .)
    ID              reduce using rule 43 (cte_bool -> FALSE .)
    BOOL            reduce using rule 43 (cte_bool -> FALSE .)
    WORD            reduce using rule 43 (cte_bool -> FALSE .)
    NUMBER          reduce using rule 43 (cte_bool -> FALSE .)
    CENTER          reduce using rule 43 (cte_bool -> FALSE .)
    FORWARD         reduce using rule 43 (cte_bool -> FALSE .)
    RIGHT           reduce using rule 43 (cte_bool -> FALSE .)
    LEFT            reduce using rule 43 (cte_bool -> FALSE .)
    END             reduce using rule 43 (cte_bool -> FALSE .)
    ELSE            reduce using rule 43 (cte_bool -> FALSE .)
    OR              reduce using rule 43 (cte_bool -> FALSE .)
    AND             reduce using rule 43 (cte_bool -> FALSE .)
    CLOSE_PTH       reduce using rule 43 (cte_bool -> FALSE .)
    COMMA           reduce using rule 43 (cte_bool -> FALSE .)
    CLOSE_SQR       reduce using rule 43 (cte_bool -> FALSE .)


state 78

    (44) cte_bool -> TRUE .
    DIV             reduce using rule 44 (cte_bool -> TRUE .)
    MULT            reduce using rule 44 (cte_bool -> TRUE .)
    SUB             reduce using rule 44 (cte_bool -> TRUE .)
    SUM             reduce using rule 44 (cte_bool -> TRUE .)
    EQUAL_TO        reduce using rule 44 (cte_bool -> TRUE .)
    MORE_OR_EQ_THAN reduce using rule 44 (cte_bool -> TRUE .)
    LESS_OR_EQ_THAN reduce using rule 44 (cte_bool -> TRUE .)
    DIFFERENT_TO    reduce using rule 44 (cte_bool -> TRUE .)
    MORE_THAN       reduce using rule 44 (cte_bool -> TRUE .)
    LESS_THAN       reduce using rule 44 (cte_bool -> TRUE .)
    RETURN          reduce using rule 44 (cte_bool -> TRUE .)
    PEN_DOWN        reduce using rule 44 (cte_bool -> TRUE .)
    PEN_UP          reduce using rule 44 (cte_bool -> TRUE .)
    WHILE           reduce using rule 44 (cte_bool -> TRUE .)
    IF              reduce using rule 44 (cte_bool -> TRUE .)
    WRITE           reduce using rule 44 (cte_bool -> TRUE .)
    READ            reduce using rule 44 (cte_bool -> TRUE .)
    ID              reduce using rule 44 (cte_bool -> TRUE .)
    BOOL            reduce using rule 44 (cte_bool -> TRUE .)
    WORD            reduce using rule 44 (cte_bool -> TRUE .)
    NUMBER          reduce using rule 44 (cte_bool -> TRUE .)
    CENTER          reduce using rule 44 (cte_bool -> TRUE .)
    FORWARD         reduce using rule 44 (cte_bool -> TRUE .)
    RIGHT           reduce using rule 44 (cte_bool -> TRUE .)
    LEFT            reduce using rule 44 (cte_bool -> TRUE .)
    END             reduce using rule 44 (cte_bool -> TRUE .)
    ELSE            reduce using rule 44 (cte_bool -> TRUE .)
    OR              reduce using rule 44 (cte_bool -> TRUE .)
    AND             reduce using rule 44 (cte_bool -> TRUE .)
    CLOSE_PTH       reduce using rule 44 (cte_bool -> TRUE .)
    COMMA           reduce using rule 44 (cte_bool -> TRUE .)
    CLOSE_SQR       reduce using rule 44 (cte_bool -> TRUE .)


state 79

    (33) var_declaration_func -> var_type ID . multiple_vars
    (88) multiple_vars -> . empty
    (89) multiple_vars -> . COMMA variable
    (114) empty -> .
    COMMA           shift and go to state 115
    RETURN          reduce using rule 114 (empty -> .)
    PEN_DOWN        reduce using rule 114 (empty -> .)
    PEN_UP          reduce using rule 114 (empty -> .)
    WHILE           reduce using rule 114 (empty -> .)
    IF              reduce using rule 114 (empty -> .)
    WRITE           reduce using rule 114 (empty -> .)
    READ            reduce using rule 114 (empty -> .)
    ID              reduce using rule 114 (empty -> .)
    BOOL            reduce using rule 114 (empty -> .)
    WORD            reduce using rule 114 (empty -> .)
    NUMBER          reduce using rule 114 (empty -> .)
    CENTER          reduce using rule 114 (empty -> .)
    FORWARD         reduce using rule 114 (empty -> .)
    RIGHT           reduce using rule 114 (empty -> .)
    LEFT            reduce using rule 114 (empty -> .)
    END             reduce using rule 114 (empty -> .)
    ELSE            reduce using rule 114 (empty -> .)

    multiple_vars                  shift and go to state 113
    empty                          shift and go to state 114

state 80

    (75) func_call -> ID OPEN_PTH . func1 func_call_param CLOSE_PTH func3
    (76) func1 -> .
    CTE_STR         reduce using rule 76 (func1 -> .)
    CTE_NUM         reduce using rule 76 (func1 -> .)
    OPEN_PTH        reduce using rule 76 (func1 -> .)
    ID              reduce using rule 76 (func1 -> .)
    FALSE           reduce using rule 76 (func1 -> .)
    TRUE            reduce using rule 76 (func1 -> .)

    func1                          shift and go to state 116

state 81

    (34) var_assignation -> ID e5 . assign e6 expression q3
    (37) assign -> . ASSIGN
    ASSIGN          shift and go to state 118

    assign                         shift and go to state 117

state 82

    (111) pen_func -> PEN_DOWN OPEN_PTH . CLOSE_PTH
    CLOSE_PTH       shift and go to state 119


state 83

    (112) pen_func -> PEN_UP OPEN_PTH . CLOSE_PTH
    CLOSE_PTH       shift and go to state 120


state 84

    (106) move_func -> move_type OPEN_PTH . func_call_param CLOSE_PTH
    (77) func_call_param -> . expression func2 multiple_fc_param
    (45) expression -> . exp q4
    (46) expression -> . exp rel_op exp q4
    (49) exp -> . termino q1
    (50) exp -> . termino term_op e3 termino q1
    (55) termino -> . factor q2
    (56) termino -> . factor fact_op e2 expression q2
    (62) factor -> . var_cte e1
    (63) factor -> . open_pth expression close_pth
    (38) var_cte -> . func_call
    (39) var_cte -> . cte_bool
    (40) var_cte -> . CTE_STR
    (41) var_cte -> . CTE_NUM
    (42) var_cte -> . variable
    (65) open_pth -> . OPEN_PTH
    (75) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (43) cte_bool -> . FALSE
    (44) cte_bool -> . TRUE
    (83) variable -> . ID array
    CTE_STR         shift and go to state 72
    CTE_NUM         shift and go to state 73
    OPEN_PTH        shift and go to state 75
    ID              shift and go to state 76
    FALSE           shift and go to state 77
    TRUE            shift and go to state 78

    func_call_param                shift and go to state 121
    expression                     shift and go to state 122
    exp                            shift and go to state 65
    termino                        shift and go to state 66
    factor                         shift and go to state 67
    var_cte                        shift and go to state 68
    open_pth                       shift and go to state 69
    func_call                      shift and go to state 70
    cte_bool                       shift and go to state 71
    variable                       shift and go to state 74

state 85

    (98) while_stmnt -> WHILE w1 . con_expression w2 stmnt w3 END
    (102) con_expression -> . expression q5
    (103) con_expression -> . expression q5 log_op e7 expression q5
    (45) expression -> . exp q4
    (46) expression -> . exp rel_op exp q4
    (49) exp -> . termino q1
    (50) exp -> . termino term_op e3 termino q1
    (55) termino -> . factor q2
    (56) termino -> . factor fact_op e2 expression q2
    (62) factor -> . var_cte e1
    (63) factor -> . open_pth expression close_pth
    (38) var_cte -> . func_call
    (39) var_cte -> . cte_bool
    (40) var_cte -> . CTE_STR
    (41) var_cte -> . CTE_NUM
    (42) var_cte -> . variable
    (65) open_pth -> . OPEN_PTH
    (75) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (43) cte_bool -> . FALSE
    (44) cte_bool -> . TRUE
    (83) variable -> . ID array
    CTE_STR         shift and go to state 72
    CTE_NUM         shift and go to state 73
    OPEN_PTH        shift and go to state 75
    ID              shift and go to state 76
    FALSE           shift and go to state 77
    TRUE            shift and go to state 78

    con_expression                 shift and go to state 123
    expression                     shift and go to state 87
    exp                            shift and go to state 65
    termino                        shift and go to state 66
    factor                         shift and go to state 67
    var_cte                        shift and go to state 68
    open_pth                       shift and go to state 69
    func_call                      shift and go to state 70
    cte_bool                       shift and go to state 71
    variable                       shift and go to state 74

state 86

    (91) if_stmnt -> IF con_expression . if1 stmnt if2 else_stmnt
    (92) if1 -> .
    RETURN          reduce using rule 92 (if1 -> .)
    PEN_DOWN        reduce using rule 92 (if1 -> .)
    PEN_UP          reduce using rule 92 (if1 -> .)
    WHILE           reduce using rule 92 (if1 -> .)
    IF              reduce using rule 92 (if1 -> .)
    WRITE           reduce using rule 92 (if1 -> .)
    READ            reduce using rule 92 (if1 -> .)
    ID              reduce using rule 92 (if1 -> .)
    BOOL            reduce using rule 92 (if1 -> .)
    WORD            reduce using rule 92 (if1 -> .)
    NUMBER          reduce using rule 92 (if1 -> .)
    CENTER          reduce using rule 92 (if1 -> .)
    FORWARD         reduce using rule 92 (if1 -> .)
    RIGHT           reduce using rule 92 (if1 -> .)
    LEFT            reduce using rule 92 (if1 -> .)
    END             reduce using rule 92 (if1 -> .)
    ELSE            reduce using rule 92 (if1 -> .)

    if1                            shift and go to state 124

state 87

    (102) con_expression -> expression . q5
    (103) con_expression -> expression . q5 log_op e7 expression q5
    (105) q5 -> .
    OR              reduce using rule 105 (q5 -> .)
    AND             reduce using rule 105 (q5 -> .)
    RETURN          reduce using rule 105 (q5 -> .)
    PEN_DOWN        reduce using rule 105 (q5 -> .)
    PEN_UP          reduce using rule 105 (q5 -> .)
    WHILE           reduce using rule 105 (q5 -> .)
    IF              reduce using rule 105 (q5 -> .)
    WRITE           reduce using rule 105 (q5 -> .)
    READ            reduce using rule 105 (q5 -> .)
    ID              reduce using rule 105 (q5 -> .)
    BOOL            reduce using rule 105 (q5 -> .)
    WORD            reduce using rule 105 (q5 -> .)
    NUMBER          reduce using rule 105 (q5 -> .)
    CENTER          reduce using rule 105 (q5 -> .)
    FORWARD         reduce using rule 105 (q5 -> .)
    RIGHT           reduce using rule 105 (q5 -> .)
    LEFT            reduce using rule 105 (q5 -> .)
    END             reduce using rule 105 (q5 -> .)
    ELSE            reduce using rule 105 (q5 -> .)

    q5                             shift and go to state 125

state 88

    (90) write -> WRITE OPEN_PTH . expression CLOSE_PTH
    (45) expression -> . exp q4
    (46) expression -> . exp rel_op exp q4
    (49) exp -> . termino q1
    (50) exp -> . termino term_op e3 termino q1
    (55) termino -> . factor q2
    (56) termino -> . factor fact_op e2 expression q2
    (62) factor -> . var_cte e1
    (63) factor -> . open_pth expression close_pth
    (38) var_cte -> . func_call
    (39) var_cte -> . cte_bool
    (40) var_cte -> . CTE_STR
    (41) var_cte -> . CTE_NUM
    (42) var_cte -> . variable
    (65) open_pth -> . OPEN_PTH
    (75) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (43) cte_bool -> . FALSE
    (44) cte_bool -> . TRUE
    (83) variable -> . ID array
    CTE_STR         shift and go to state 72
    CTE_NUM         shift and go to state 73
    OPEN_PTH        shift and go to state 75
    ID              shift and go to state 76
    FALSE           shift and go to state 77
    TRUE            shift and go to state 78

    expression                     shift and go to state 126
    exp                            shift and go to state 65
    termino                        shift and go to state 66
    factor                         shift and go to state 67
    var_cte                        shift and go to state 68
    open_pth                       shift and go to state 69
    func_call                      shift and go to state 70
    cte_bool                       shift and go to state 71
    variable                       shift and go to state 74

state 89

    (82) read -> READ OPEN_PTH . variable multiple_vars CLOSE_PTH
    (83) variable -> . ID array
    ID              shift and go to state 128

    variable                       shift and go to state 127

state 90

    (11) func_declaration -> FUNC func_type ID fd1 . OPEN_PTH parameter CLOSE_PTH stmnt END
    OPEN_PTH        shift and go to state 129


state 91

    (6) multiple_var -> COMMA ID multiple_var .
    FUNC            reduce using rule 6 (multiple_var -> COMMA ID multiple_var .)
    MAIN            reduce using rule 6 (multiple_var -> COMMA ID multiple_var .)


state 92

    (45) expression -> exp q4 .
    RETURN          reduce using rule 45 (expression -> exp q4 .)
    PEN_DOWN        reduce using rule 45 (expression -> exp q4 .)
    PEN_UP          reduce using rule 45 (expression -> exp q4 .)
    WHILE           reduce using rule 45 (expression -> exp q4 .)
    IF              reduce using rule 45 (expression -> exp q4 .)
    WRITE           reduce using rule 45 (expression -> exp q4 .)
    READ            reduce using rule 45 (expression -> exp q4 .)
    ID              reduce using rule 45 (expression -> exp q4 .)
    BOOL            reduce using rule 45 (expression -> exp q4 .)
    WORD            reduce using rule 45 (expression -> exp q4 .)
    NUMBER          reduce using rule 45 (expression -> exp q4 .)
    CENTER          reduce using rule 45 (expression -> exp q4 .)
    FORWARD         reduce using rule 45 (expression -> exp q4 .)
    RIGHT           reduce using rule 45 (expression -> exp q4 .)
    LEFT            reduce using rule 45 (expression -> exp q4 .)
    END             reduce using rule 45 (expression -> exp q4 .)
    ELSE            reduce using rule 45 (expression -> exp q4 .)
    OR              reduce using rule 45 (expression -> exp q4 .)
    AND             reduce using rule 45 (expression -> exp q4 .)
    CLOSE_PTH       reduce using rule 45 (expression -> exp q4 .)
    COMMA           reduce using rule 45 (expression -> exp q4 .)
    CLOSE_SQR       reduce using rule 45 (expression -> exp q4 .)
    SUB             reduce using rule 45 (expression -> exp q4 .)
    SUM             reduce using rule 45 (expression -> exp q4 .)
    EQUAL_TO        reduce using rule 45 (expression -> exp q4 .)
    MORE_OR_EQ_THAN reduce using rule 45 (expression -> exp q4 .)
    LESS_OR_EQ_THAN reduce using rule 45 (expression -> exp q4 .)
    DIFFERENT_TO    reduce using rule 45 (expression -> exp q4 .)
    MORE_THAN       reduce using rule 45 (expression -> exp q4 .)
    LESS_THAN       reduce using rule 45 (expression -> exp q4 .)


state 93

    (46) expression -> exp rel_op . exp q4
    (49) exp -> . termino q1
    (50) exp -> . termino term_op e3 termino q1
    (55) termino -> . factor q2
    (56) termino -> . factor fact_op e2 expression q2
    (62) factor -> . var_cte e1
    (63) factor -> . open_pth expression close_pth
    (38) var_cte -> . func_call
    (39) var_cte -> . cte_bool
    (40) var_cte -> . CTE_STR
    (41) var_cte -> . CTE_NUM
    (42) var_cte -> . variable
    (65) open_pth -> . OPEN_PTH
    (75) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (43) cte_bool -> . FALSE
    (44) cte_bool -> . TRUE
    (83) variable -> . ID array
    CTE_STR         shift and go to state 72
    CTE_NUM         shift and go to state 73
    OPEN_PTH        shift and go to state 75
    ID              shift and go to state 76
    FALSE           shift and go to state 77
    TRUE            shift and go to state 78

    exp                            shift and go to state 130
    termino                        shift and go to state 66
    factor                         shift and go to state 67
    var_cte                        shift and go to state 68
    open_pth                       shift and go to state 69
    func_call                      shift and go to state 70
    cte_bool                       shift and go to state 71
    variable                       shift and go to state 74

state 94

    (69) rel_op -> EQUAL_TO .
    CTE_STR         reduce using rule 69 (rel_op -> EQUAL_TO .)
    CTE_NUM         reduce using rule 69 (rel_op -> EQUAL_TO .)
    OPEN_PTH        reduce using rule 69 (rel_op -> EQUAL_TO .)
    ID              reduce using rule 69 (rel_op -> EQUAL_TO .)
    FALSE           reduce using rule 69 (rel_op -> EQUAL_TO .)
    TRUE            reduce using rule 69 (rel_op -> EQUAL_TO .)


state 95

    (70) rel_op -> MORE_OR_EQ_THAN .
    CTE_STR         reduce using rule 70 (rel_op -> MORE_OR_EQ_THAN .)
    CTE_NUM         reduce using rule 70 (rel_op -> MORE_OR_EQ_THAN .)
    OPEN_PTH        reduce using rule 70 (rel_op -> MORE_OR_EQ_THAN .)
    ID              reduce using rule 70 (rel_op -> MORE_OR_EQ_THAN .)
    FALSE           reduce using rule 70 (rel_op -> MORE_OR_EQ_THAN .)
    TRUE            reduce using rule 70 (rel_op -> MORE_OR_EQ_THAN .)


state 96

    (71) rel_op -> LESS_OR_EQ_THAN .
    CTE_STR         reduce using rule 71 (rel_op -> LESS_OR_EQ_THAN .)
    CTE_NUM         reduce using rule 71 (rel_op -> LESS_OR_EQ_THAN .)
    OPEN_PTH        reduce using rule 71 (rel_op -> LESS_OR_EQ_THAN .)
    ID              reduce using rule 71 (rel_op -> LESS_OR_EQ_THAN .)
    FALSE           reduce using rule 71 (rel_op -> LESS_OR_EQ_THAN .)
    TRUE            reduce using rule 71 (rel_op -> LESS_OR_EQ_THAN .)


state 97

    (72) rel_op -> DIFFERENT_TO .
    CTE_STR         reduce using rule 72 (rel_op -> DIFFERENT_TO .)
    CTE_NUM         reduce using rule 72 (rel_op -> DIFFERENT_TO .)
    OPEN_PTH        reduce using rule 72 (rel_op -> DIFFERENT_TO .)
    ID              reduce using rule 72 (rel_op -> DIFFERENT_TO .)
    FALSE           reduce using rule 72 (rel_op -> DIFFERENT_TO .)
    TRUE            reduce using rule 72 (rel_op -> DIFFERENT_TO .)


state 98

    (73) rel_op -> MORE_THAN .
    CTE_STR         reduce using rule 73 (rel_op -> MORE_THAN .)
    CTE_NUM         reduce using rule 73 (rel_op -> MORE_THAN .)
    OPEN_PTH        reduce using rule 73 (rel_op -> MORE_THAN .)
    ID              reduce using rule 73 (rel_op -> MORE_THAN .)
    FALSE           reduce using rule 73 (rel_op -> MORE_THAN .)
    TRUE            reduce using rule 73 (rel_op -> MORE_THAN .)


state 99

    (74) rel_op -> LESS_THAN .
    CTE_STR         reduce using rule 74 (rel_op -> LESS_THAN .)
    CTE_NUM         reduce using rule 74 (rel_op -> LESS_THAN .)
    OPEN_PTH        reduce using rule 74 (rel_op -> LESS_THAN .)
    ID              reduce using rule 74 (rel_op -> LESS_THAN .)
    FALSE           reduce using rule 74 (rel_op -> LESS_THAN .)
    TRUE            reduce using rule 74 (rel_op -> LESS_THAN .)


state 100

    (49) exp -> termino q1 .
    EQUAL_TO        reduce using rule 49 (exp -> termino q1 .)
    MORE_OR_EQ_THAN reduce using rule 49 (exp -> termino q1 .)
    LESS_OR_EQ_THAN reduce using rule 49 (exp -> termino q1 .)
    DIFFERENT_TO    reduce using rule 49 (exp -> termino q1 .)
    MORE_THAN       reduce using rule 49 (exp -> termino q1 .)
    LESS_THAN       reduce using rule 49 (exp -> termino q1 .)
    RETURN          reduce using rule 49 (exp -> termino q1 .)
    PEN_DOWN        reduce using rule 49 (exp -> termino q1 .)
    PEN_UP          reduce using rule 49 (exp -> termino q1 .)
    WHILE           reduce using rule 49 (exp -> termino q1 .)
    IF              reduce using rule 49 (exp -> termino q1 .)
    WRITE           reduce using rule 49 (exp -> termino q1 .)
    READ            reduce using rule 49 (exp -> termino q1 .)
    ID              reduce using rule 49 (exp -> termino q1 .)
    BOOL            reduce using rule 49 (exp -> termino q1 .)
    WORD            reduce using rule 49 (exp -> termino q1 .)
    NUMBER          reduce using rule 49 (exp -> termino q1 .)
    CENTER          reduce using rule 49 (exp -> termino q1 .)
    FORWARD         reduce using rule 49 (exp -> termino q1 .)
    RIGHT           reduce using rule 49 (exp -> termino q1 .)
    LEFT            reduce using rule 49 (exp -> termino q1 .)
    END             reduce using rule 49 (exp -> termino q1 .)
    ELSE            reduce using rule 49 (exp -> termino q1 .)
    OR              reduce using rule 49 (exp -> termino q1 .)
    AND             reduce using rule 49 (exp -> termino q1 .)
    CLOSE_PTH       reduce using rule 49 (exp -> termino q1 .)
    COMMA           reduce using rule 49 (exp -> termino q1 .)
    SUB             reduce using rule 49 (exp -> termino q1 .)
    SUM             reduce using rule 49 (exp -> termino q1 .)
    CLOSE_SQR       reduce using rule 49 (exp -> termino q1 .)


state 101

    (50) exp -> termino term_op . e3 termino q1
    (51) e3 -> .
    CTE_STR         reduce using rule 51 (e3 -> .)
    CTE_NUM         reduce using rule 51 (e3 -> .)
    OPEN_PTH        reduce using rule 51 (e3 -> .)
    ID              reduce using rule 51 (e3 -> .)
    FALSE           reduce using rule 51 (e3 -> .)
    TRUE            reduce using rule 51 (e3 -> .)

    e3                             shift and go to state 131

state 102

    (53) term_op -> SUB .
    CTE_STR         reduce using rule 53 (term_op -> SUB .)
    CTE_NUM         reduce using rule 53 (term_op -> SUB .)
    OPEN_PTH        reduce using rule 53 (term_op -> SUB .)
    ID              reduce using rule 53 (term_op -> SUB .)
    FALSE           reduce using rule 53 (term_op -> SUB .)
    TRUE            reduce using rule 53 (term_op -> SUB .)


state 103

    (54) term_op -> SUM .
    CTE_STR         reduce using rule 54 (term_op -> SUM .)
    CTE_NUM         reduce using rule 54 (term_op -> SUM .)
    OPEN_PTH        reduce using rule 54 (term_op -> SUM .)
    ID              reduce using rule 54 (term_op -> SUM .)
    FALSE           reduce using rule 54 (term_op -> SUM .)
    TRUE            reduce using rule 54 (term_op -> SUM .)


state 104

    (55) termino -> factor q2 .
    SUB             reduce using rule 55 (termino -> factor q2 .)
    SUM             reduce using rule 55 (termino -> factor q2 .)
    EQUAL_TO        reduce using rule 55 (termino -> factor q2 .)
    MORE_OR_EQ_THAN reduce using rule 55 (termino -> factor q2 .)
    LESS_OR_EQ_THAN reduce using rule 55 (termino -> factor q2 .)
    DIFFERENT_TO    reduce using rule 55 (termino -> factor q2 .)
    MORE_THAN       reduce using rule 55 (termino -> factor q2 .)
    LESS_THAN       reduce using rule 55 (termino -> factor q2 .)
    RETURN          reduce using rule 55 (termino -> factor q2 .)
    PEN_DOWN        reduce using rule 55 (termino -> factor q2 .)
    PEN_UP          reduce using rule 55 (termino -> factor q2 .)
    WHILE           reduce using rule 55 (termino -> factor q2 .)
    IF              reduce using rule 55 (termino -> factor q2 .)
    WRITE           reduce using rule 55 (termino -> factor q2 .)
    READ            reduce using rule 55 (termino -> factor q2 .)
    ID              reduce using rule 55 (termino -> factor q2 .)
    BOOL            reduce using rule 55 (termino -> factor q2 .)
    WORD            reduce using rule 55 (termino -> factor q2 .)
    NUMBER          reduce using rule 55 (termino -> factor q2 .)
    CENTER          reduce using rule 55 (termino -> factor q2 .)
    FORWARD         reduce using rule 55 (termino -> factor q2 .)
    RIGHT           reduce using rule 55 (termino -> factor q2 .)
    LEFT            reduce using rule 55 (termino -> factor q2 .)
    END             reduce using rule 55 (termino -> factor q2 .)
    ELSE            reduce using rule 55 (termino -> factor q2 .)
    OR              reduce using rule 55 (termino -> factor q2 .)
    AND             reduce using rule 55 (termino -> factor q2 .)
    CLOSE_PTH       reduce using rule 55 (termino -> factor q2 .)
    COMMA           reduce using rule 55 (termino -> factor q2 .)
    CLOSE_SQR       reduce using rule 55 (termino -> factor q2 .)


state 105

    (56) termino -> factor fact_op . e2 expression q2
    (59) e2 -> .
    CTE_STR         reduce using rule 59 (e2 -> .)
    CTE_NUM         reduce using rule 59 (e2 -> .)
    OPEN_PTH        reduce using rule 59 (e2 -> .)
    ID              reduce using rule 59 (e2 -> .)
    FALSE           reduce using rule 59 (e2 -> .)
    TRUE            reduce using rule 59 (e2 -> .)

    e2                             shift and go to state 132

state 106

    (60) fact_op -> DIV .
    CTE_STR         reduce using rule 60 (fact_op -> DIV .)
    CTE_NUM         reduce using rule 60 (fact_op -> DIV .)
    OPEN_PTH        reduce using rule 60 (fact_op -> DIV .)
    ID              reduce using rule 60 (fact_op -> DIV .)
    FALSE           reduce using rule 60 (fact_op -> DIV .)
    TRUE            reduce using rule 60 (fact_op -> DIV .)


state 107

    (61) fact_op -> MULT .
    CTE_STR         reduce using rule 61 (fact_op -> MULT .)
    CTE_NUM         reduce using rule 61 (fact_op -> MULT .)
    OPEN_PTH        reduce using rule 61 (fact_op -> MULT .)
    ID              reduce using rule 61 (fact_op -> MULT .)
    FALSE           reduce using rule 61 (fact_op -> MULT .)
    TRUE            reduce using rule 61 (fact_op -> MULT .)


state 108

    (62) factor -> var_cte e1 .
    DIV             reduce using rule 62 (factor -> var_cte e1 .)
    MULT            reduce using rule 62 (factor -> var_cte e1 .)
    SUB             reduce using rule 62 (factor -> var_cte e1 .)
    SUM             reduce using rule 62 (factor -> var_cte e1 .)
    EQUAL_TO        reduce using rule 62 (factor -> var_cte e1 .)
    MORE_OR_EQ_THAN reduce using rule 62 (factor -> var_cte e1 .)
    LESS_OR_EQ_THAN reduce using rule 62 (factor -> var_cte e1 .)
    DIFFERENT_TO    reduce using rule 62 (factor -> var_cte e1 .)
    MORE_THAN       reduce using rule 62 (factor -> var_cte e1 .)
    LESS_THAN       reduce using rule 62 (factor -> var_cte e1 .)
    RETURN          reduce using rule 62 (factor -> var_cte e1 .)
    PEN_DOWN        reduce using rule 62 (factor -> var_cte e1 .)
    PEN_UP          reduce using rule 62 (factor -> var_cte e1 .)
    WHILE           reduce using rule 62 (factor -> var_cte e1 .)
    IF              reduce using rule 62 (factor -> var_cte e1 .)
    WRITE           reduce using rule 62 (factor -> var_cte e1 .)
    READ            reduce using rule 62 (factor -> var_cte e1 .)
    ID              reduce using rule 62 (factor -> var_cte e1 .)
    BOOL            reduce using rule 62 (factor -> var_cte e1 .)
    WORD            reduce using rule 62 (factor -> var_cte e1 .)
    NUMBER          reduce using rule 62 (factor -> var_cte e1 .)
    CENTER          reduce using rule 62 (factor -> var_cte e1 .)
    FORWARD         reduce using rule 62 (factor -> var_cte e1 .)
    RIGHT           reduce using rule 62 (factor -> var_cte e1 .)
    LEFT            reduce using rule 62 (factor -> var_cte e1 .)
    END             reduce using rule 62 (factor -> var_cte e1 .)
    ELSE            reduce using rule 62 (factor -> var_cte e1 .)
    OR              reduce using rule 62 (factor -> var_cte e1 .)
    AND             reduce using rule 62 (factor -> var_cte e1 .)
    CLOSE_PTH       reduce using rule 62 (factor -> var_cte e1 .)
    COMMA           reduce using rule 62 (factor -> var_cte e1 .)
    CLOSE_SQR       reduce using rule 62 (factor -> var_cte e1 .)


state 109

    (63) factor -> open_pth expression . close_pth
    (66) close_pth -> . CLOSE_PTH
    CLOSE_PTH       shift and go to state 134

    close_pth                      shift and go to state 133

state 110

    (83) variable -> ID array .
    DIV             reduce using rule 83 (variable -> ID array .)
    MULT            reduce using rule 83 (variable -> ID array .)
    SUB             reduce using rule 83 (variable -> ID array .)
    SUM             reduce using rule 83 (variable -> ID array .)
    EQUAL_TO        reduce using rule 83 (variable -> ID array .)
    MORE_OR_EQ_THAN reduce using rule 83 (variable -> ID array .)
    LESS_OR_EQ_THAN reduce using rule 83 (variable -> ID array .)
    DIFFERENT_TO    reduce using rule 83 (variable -> ID array .)
    MORE_THAN       reduce using rule 83 (variable -> ID array .)
    LESS_THAN       reduce using rule 83 (variable -> ID array .)
    RETURN          reduce using rule 83 (variable -> ID array .)
    PEN_DOWN        reduce using rule 83 (variable -> ID array .)
    PEN_UP          reduce using rule 83 (variable -> ID array .)
    WHILE           reduce using rule 83 (variable -> ID array .)
    IF              reduce using rule 83 (variable -> ID array .)
    WRITE           reduce using rule 83 (variable -> ID array .)
    READ            reduce using rule 83 (variable -> ID array .)
    ID              reduce using rule 83 (variable -> ID array .)
    BOOL            reduce using rule 83 (variable -> ID array .)
    WORD            reduce using rule 83 (variable -> ID array .)
    NUMBER          reduce using rule 83 (variable -> ID array .)
    CENTER          reduce using rule 83 (variable -> ID array .)
    FORWARD         reduce using rule 83 (variable -> ID array .)
    RIGHT           reduce using rule 83 (variable -> ID array .)
    LEFT            reduce using rule 83 (variable -> ID array .)
    END             reduce using rule 83 (variable -> ID array .)
    ELSE            reduce using rule 83 (variable -> ID array .)
    OR              reduce using rule 83 (variable -> ID array .)
    AND             reduce using rule 83 (variable -> ID array .)
    CLOSE_PTH       reduce using rule 83 (variable -> ID array .)
    COMMA           reduce using rule 83 (variable -> ID array .)
    CLOSE_SQR       reduce using rule 83 (variable -> ID array .)


state 111

    (84) array -> empty .
    DIV             reduce using rule 84 (array -> empty .)
    MULT            reduce using rule 84 (array -> empty .)
    SUB             reduce using rule 84 (array -> empty .)
    SUM             reduce using rule 84 (array -> empty .)
    EQUAL_TO        reduce using rule 84 (array -> empty .)
    MORE_OR_EQ_THAN reduce using rule 84 (array -> empty .)
    LESS_OR_EQ_THAN reduce using rule 84 (array -> empty .)
    DIFFERENT_TO    reduce using rule 84 (array -> empty .)
    MORE_THAN       reduce using rule 84 (array -> empty .)
    LESS_THAN       reduce using rule 84 (array -> empty .)
    RETURN          reduce using rule 84 (array -> empty .)
    PEN_DOWN        reduce using rule 84 (array -> empty .)
    PEN_UP          reduce using rule 84 (array -> empty .)
    WHILE           reduce using rule 84 (array -> empty .)
    IF              reduce using rule 84 (array -> empty .)
    WRITE           reduce using rule 84 (array -> empty .)
    READ            reduce using rule 84 (array -> empty .)
    ID              reduce using rule 84 (array -> empty .)
    BOOL            reduce using rule 84 (array -> empty .)
    WORD            reduce using rule 84 (array -> empty .)
    NUMBER          reduce using rule 84 (array -> empty .)
    CENTER          reduce using rule 84 (array -> empty .)
    FORWARD         reduce using rule 84 (array -> empty .)
    RIGHT           reduce using rule 84 (array -> empty .)
    LEFT            reduce using rule 84 (array -> empty .)
    END             reduce using rule 84 (array -> empty .)
    ELSE            reduce using rule 84 (array -> empty .)
    OR              reduce using rule 84 (array -> empty .)
    AND             reduce using rule 84 (array -> empty .)
    CLOSE_PTH       reduce using rule 84 (array -> empty .)
    COMMA           reduce using rule 84 (array -> empty .)
    CLOSE_SQR       reduce using rule 84 (array -> empty .)


state 112

    (85) array -> OPEN_SQR . expression CLOSE_SQR matrix
    (45) expression -> . exp q4
    (46) expression -> . exp rel_op exp q4
    (49) exp -> . termino q1
    (50) exp -> . termino term_op e3 termino q1
    (55) termino -> . factor q2
    (56) termino -> . factor fact_op e2 expression q2
    (62) factor -> . var_cte e1
    (63) factor -> . open_pth expression close_pth
    (38) var_cte -> . func_call
    (39) var_cte -> . cte_bool
    (40) var_cte -> . CTE_STR
    (41) var_cte -> . CTE_NUM
    (42) var_cte -> . variable
    (65) open_pth -> . OPEN_PTH
    (75) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (43) cte_bool -> . FALSE
    (44) cte_bool -> . TRUE
    (83) variable -> . ID array
    CTE_STR         shift and go to state 72
    CTE_NUM         shift and go to state 73
    OPEN_PTH        shift and go to state 75
    ID              shift and go to state 76
    FALSE           shift and go to state 77
    TRUE            shift and go to state 78

    expression                     shift and go to state 135
    exp                            shift and go to state 65
    termino                        shift and go to state 66
    factor                         shift and go to state 67
    var_cte                        shift and go to state 68
    open_pth                       shift and go to state 69
    func_call                      shift and go to state 70
    cte_bool                       shift and go to state 71
    variable                       shift and go to state 74

state 113

    (33) var_declaration_func -> var_type ID multiple_vars .
    RETURN          reduce using rule 33 (var_declaration_func -> var_type ID multiple_vars .)
    PEN_DOWN        reduce using rule 33 (var_declaration_func -> var_type ID multiple_vars .)
    PEN_UP          reduce using rule 33 (var_declaration_func -> var_type ID multiple_vars .)
    WHILE           reduce using rule 33 (var_declaration_func -> var_type ID multiple_vars .)
    IF              reduce using rule 33 (var_declaration_func -> var_type ID multiple_vars .)
    WRITE           reduce using rule 33 (var_declaration_func -> var_type ID multiple_vars .)
    READ            reduce using rule 33 (var_declaration_func -> var_type ID multiple_vars .)
    ID              reduce using rule 33 (var_declaration_func -> var_type ID multiple_vars .)
    BOOL            reduce using rule 33 (var_declaration_func -> var_type ID multiple_vars .)
    WORD            reduce using rule 33 (var_declaration_func -> var_type ID multiple_vars .)
    NUMBER          reduce using rule 33 (var_declaration_func -> var_type ID multiple_vars .)
    CENTER          reduce using rule 33 (var_declaration_func -> var_type ID multiple_vars .)
    FORWARD         reduce using rule 33 (var_declaration_func -> var_type ID multiple_vars .)
    RIGHT           reduce using rule 33 (var_declaration_func -> var_type ID multiple_vars .)
    LEFT            reduce using rule 33 (var_declaration_func -> var_type ID multiple_vars .)
    END             reduce using rule 33 (var_declaration_func -> var_type ID multiple_vars .)
    ELSE            reduce using rule 33 (var_declaration_func -> var_type ID multiple_vars .)


state 114

    (88) multiple_vars -> empty .
    RETURN          reduce using rule 88 (multiple_vars -> empty .)
    PEN_DOWN        reduce using rule 88 (multiple_vars -> empty .)
    PEN_UP          reduce using rule 88 (multiple_vars -> empty .)
    WHILE           reduce using rule 88 (multiple_vars -> empty .)
    IF              reduce using rule 88 (multiple_vars -> empty .)
    WRITE           reduce using rule 88 (multiple_vars -> empty .)
    READ            reduce using rule 88 (multiple_vars -> empty .)
    ID              reduce using rule 88 (multiple_vars -> empty .)
    BOOL            reduce using rule 88 (multiple_vars -> empty .)
    WORD            reduce using rule 88 (multiple_vars -> empty .)
    NUMBER          reduce using rule 88 (multiple_vars -> empty .)
    CENTER          reduce using rule 88 (multiple_vars -> empty .)
    FORWARD         reduce using rule 88 (multiple_vars -> empty .)
    RIGHT           reduce using rule 88 (multiple_vars -> empty .)
    LEFT            reduce using rule 88 (multiple_vars -> empty .)
    END             reduce using rule 88 (multiple_vars -> empty .)
    ELSE            reduce using rule 88 (multiple_vars -> empty .)
    CLOSE_PTH       reduce using rule 88 (multiple_vars -> empty .)


state 115

    (89) multiple_vars -> COMMA . variable
    (83) variable -> . ID array
    ID              shift and go to state 128

    variable                       shift and go to state 136

state 116

    (75) func_call -> ID OPEN_PTH func1 . func_call_param CLOSE_PTH func3
    (77) func_call_param -> . expression func2 multiple_fc_param
    (45) expression -> . exp q4
    (46) expression -> . exp rel_op exp q4
    (49) exp -> . termino q1
    (50) exp -> . termino term_op e3 termino q1
    (55) termino -> . factor q2
    (56) termino -> . factor fact_op e2 expression q2
    (62) factor -> . var_cte e1
    (63) factor -> . open_pth expression close_pth
    (38) var_cte -> . func_call
    (39) var_cte -> . cte_bool
    (40) var_cte -> . CTE_STR
    (41) var_cte -> . CTE_NUM
    (42) var_cte -> . variable
    (65) open_pth -> . OPEN_PTH
    (75) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (43) cte_bool -> . FALSE
    (44) cte_bool -> . TRUE
    (83) variable -> . ID array
    CTE_STR         shift and go to state 72
    CTE_NUM         shift and go to state 73
    OPEN_PTH        shift and go to state 75
    ID              shift and go to state 76
    FALSE           shift and go to state 77
    TRUE            shift and go to state 78

    func_call_param                shift and go to state 137
    expression                     shift and go to state 122
    exp                            shift and go to state 65
    termino                        shift and go to state 66
    factor                         shift and go to state 67
    var_cte                        shift and go to state 68
    open_pth                       shift and go to state 69
    func_call                      shift and go to state 70
    cte_bool                       shift and go to state 71
    variable                       shift and go to state 74

state 117

    (34) var_assignation -> ID e5 assign . e6 expression q3
    (36) e6 -> .
    CTE_STR         reduce using rule 36 (e6 -> .)
    CTE_NUM         reduce using rule 36 (e6 -> .)
    OPEN_PTH        reduce using rule 36 (e6 -> .)
    ID              reduce using rule 36 (e6 -> .)
    FALSE           reduce using rule 36 (e6 -> .)
    TRUE            reduce using rule 36 (e6 -> .)

    e6                             shift and go to state 138

state 118

    (37) assign -> ASSIGN .
    CTE_STR         reduce using rule 37 (assign -> ASSIGN .)
    CTE_NUM         reduce using rule 37 (assign -> ASSIGN .)
    OPEN_PTH        reduce using rule 37 (assign -> ASSIGN .)
    ID              reduce using rule 37 (assign -> ASSIGN .)
    FALSE           reduce using rule 37 (assign -> ASSIGN .)
    TRUE            reduce using rule 37 (assign -> ASSIGN .)


state 119

    (111) pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .
    RETURN          reduce using rule 111 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    PEN_DOWN        reduce using rule 111 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    PEN_UP          reduce using rule 111 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    WHILE           reduce using rule 111 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    IF              reduce using rule 111 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    WRITE           reduce using rule 111 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    READ            reduce using rule 111 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    ID              reduce using rule 111 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    BOOL            reduce using rule 111 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    WORD            reduce using rule 111 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    NUMBER          reduce using rule 111 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    CENTER          reduce using rule 111 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    FORWARD         reduce using rule 111 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    RIGHT           reduce using rule 111 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    LEFT            reduce using rule 111 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    END             reduce using rule 111 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    ELSE            reduce using rule 111 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)


state 120

    (112) pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .
    RETURN          reduce using rule 112 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    PEN_DOWN        reduce using rule 112 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    PEN_UP          reduce using rule 112 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    WHILE           reduce using rule 112 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    IF              reduce using rule 112 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    WRITE           reduce using rule 112 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    READ            reduce using rule 112 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    ID              reduce using rule 112 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    BOOL            reduce using rule 112 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    WORD            reduce using rule 112 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    NUMBER          reduce using rule 112 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    CENTER          reduce using rule 112 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    FORWARD         reduce using rule 112 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    RIGHT           reduce using rule 112 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    LEFT            reduce using rule 112 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    END             reduce using rule 112 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    ELSE            reduce using rule 112 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)


state 121

    (106) move_func -> move_type OPEN_PTH func_call_param . CLOSE_PTH
    CLOSE_PTH       shift and go to state 139


state 122

    (77) func_call_param -> expression . func2 multiple_fc_param
    (78) func2 -> .
    COMMA           reduce using rule 78 (func2 -> .)
    CLOSE_PTH       reduce using rule 78 (func2 -> .)

    func2                          shift and go to state 140

state 123

    (98) while_stmnt -> WHILE w1 con_expression . w2 stmnt w3 END
    (100) w2 -> .
    RETURN          reduce using rule 100 (w2 -> .)
    PEN_DOWN        reduce using rule 100 (w2 -> .)
    PEN_UP          reduce using rule 100 (w2 -> .)
    WHILE           reduce using rule 100 (w2 -> .)
    IF              reduce using rule 100 (w2 -> .)
    WRITE           reduce using rule 100 (w2 -> .)
    READ            reduce using rule 100 (w2 -> .)
    ID              reduce using rule 100 (w2 -> .)
    BOOL            reduce using rule 100 (w2 -> .)
    WORD            reduce using rule 100 (w2 -> .)
    NUMBER          reduce using rule 100 (w2 -> .)
    CENTER          reduce using rule 100 (w2 -> .)
    FORWARD         reduce using rule 100 (w2 -> .)
    RIGHT           reduce using rule 100 (w2 -> .)
    LEFT            reduce using rule 100 (w2 -> .)
    END             reduce using rule 100 (w2 -> .)

    w2                             shift and go to state 141

state 124

    (91) if_stmnt -> IF con_expression if1 . stmnt if2 else_stmnt
    (21) stmnt -> . empty
    (22) stmnt -> . returnf stmnt
    (23) stmnt -> . var_declaration_func stmnt
    (24) stmnt -> . pen_func stmnt
    (25) stmnt -> . move_func stmnt
    (26) stmnt -> . while_stmnt stmnt
    (27) stmnt -> . if_stmnt stmnt
    (28) stmnt -> . write stmnt
    (29) stmnt -> . read stmnt
    (30) stmnt -> . func_call stmnt
    (31) stmnt -> . var_assignation stmnt
    (114) empty -> .
    (32) returnf -> . RETURN expression
    (33) var_declaration_func -> . var_type ID multiple_vars
    (111) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (112) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (106) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (98) while_stmnt -> . WHILE w1 con_expression w2 stmnt w3 END
    (91) if_stmnt -> . IF con_expression if1 stmnt if2 else_stmnt
    (90) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (82) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (75) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (34) var_assignation -> . ID e5 assign e6 expression q3
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (107) move_type -> . CENTER
    (108) move_type -> . FORWARD
    (109) move_type -> . RIGHT
    (110) move_type -> . LEFT
    END             reduce using rule 114 (empty -> .)
    ELSE            reduce using rule 114 (empty -> .)
    RETURN          shift and go to state 37
    PEN_DOWN        shift and go to state 40
    PEN_UP          shift and go to state 41
    WHILE           shift and go to state 43
    IF              shift and go to state 44
    WRITE           shift and go to state 45
    READ            shift and go to state 46
    ID              shift and go to state 39
    BOOL            shift and go to state 8
    WORD            shift and go to state 9
    NUMBER          shift and go to state 10
    CENTER          shift and go to state 47
    FORWARD         shift and go to state 48
    RIGHT           shift and go to state 49
    LEFT            shift and go to state 50

    stmnt                          shift and go to state 142
    empty                          shift and go to state 26
    returnf                        shift and go to state 27
    var_declaration_func           shift and go to state 28
    pen_func                       shift and go to state 29
    move_func                      shift and go to state 30
    while_stmnt                    shift and go to state 31
    if_stmnt                       shift and go to state 32
    write                          shift and go to state 33
    read                           shift and go to state 34
    func_call                      shift and go to state 35
    var_assignation                shift and go to state 36
    var_type                       shift and go to state 38
    move_type                      shift and go to state 42

state 125

    (102) con_expression -> expression q5 .
    (103) con_expression -> expression q5 . log_op e7 expression q5
    (67) log_op -> . OR
    (68) log_op -> . AND
    RETURN          reduce using rule 102 (con_expression -> expression q5 .)
    PEN_DOWN        reduce using rule 102 (con_expression -> expression q5 .)
    PEN_UP          reduce using rule 102 (con_expression -> expression q5 .)
    WHILE           reduce using rule 102 (con_expression -> expression q5 .)
    IF              reduce using rule 102 (con_expression -> expression q5 .)
    WRITE           reduce using rule 102 (con_expression -> expression q5 .)
    READ            reduce using rule 102 (con_expression -> expression q5 .)
    ID              reduce using rule 102 (con_expression -> expression q5 .)
    BOOL            reduce using rule 102 (con_expression -> expression q5 .)
    WORD            reduce using rule 102 (con_expression -> expression q5 .)
    NUMBER          reduce using rule 102 (con_expression -> expression q5 .)
    CENTER          reduce using rule 102 (con_expression -> expression q5 .)
    FORWARD         reduce using rule 102 (con_expression -> expression q5 .)
    RIGHT           reduce using rule 102 (con_expression -> expression q5 .)
    LEFT            reduce using rule 102 (con_expression -> expression q5 .)
    END             reduce using rule 102 (con_expression -> expression q5 .)
    ELSE            reduce using rule 102 (con_expression -> expression q5 .)
    OR              shift and go to state 144
    AND             shift and go to state 145

    log_op                         shift and go to state 143

state 126

    (90) write -> WRITE OPEN_PTH expression . CLOSE_PTH
    CLOSE_PTH       shift and go to state 146


state 127

    (82) read -> READ OPEN_PTH variable . multiple_vars CLOSE_PTH
    (88) multiple_vars -> . empty
    (89) multiple_vars -> . COMMA variable
    (114) empty -> .
    COMMA           shift and go to state 115
    CLOSE_PTH       reduce using rule 114 (empty -> .)

    multiple_vars                  shift and go to state 147
    empty                          shift and go to state 114

state 128

    (83) variable -> ID . array
    (84) array -> . empty
    (85) array -> . OPEN_SQR expression CLOSE_SQR matrix
    (114) empty -> .
    OPEN_SQR        shift and go to state 112
    COMMA           reduce using rule 114 (empty -> .)
    CLOSE_PTH       reduce using rule 114 (empty -> .)
    RETURN          reduce using rule 114 (empty -> .)
    PEN_DOWN        reduce using rule 114 (empty -> .)
    PEN_UP          reduce using rule 114 (empty -> .)
    WHILE           reduce using rule 114 (empty -> .)
    IF              reduce using rule 114 (empty -> .)
    WRITE           reduce using rule 114 (empty -> .)
    READ            reduce using rule 114 (empty -> .)
    ID              reduce using rule 114 (empty -> .)
    BOOL            reduce using rule 114 (empty -> .)
    WORD            reduce using rule 114 (empty -> .)
    NUMBER          reduce using rule 114 (empty -> .)
    CENTER          reduce using rule 114 (empty -> .)
    FORWARD         reduce using rule 114 (empty -> .)
    RIGHT           reduce using rule 114 (empty -> .)
    LEFT            reduce using rule 114 (empty -> .)
    END             reduce using rule 114 (empty -> .)
    ELSE            reduce using rule 114 (empty -> .)

    array                          shift and go to state 110
    empty                          shift and go to state 111

state 129

    (11) func_declaration -> FUNC func_type ID fd1 OPEN_PTH . parameter CLOSE_PTH stmnt END
    (17) parameter -> . empty
    (18) parameter -> . var_type ID multiple_parameters
    (114) empty -> .
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    CLOSE_PTH       reduce using rule 114 (empty -> .)
    BOOL            shift and go to state 8
    WORD            shift and go to state 9
    NUMBER          shift and go to state 10

    parameter                      shift and go to state 148
    empty                          shift and go to state 149
    var_type                       shift and go to state 150

state 130

    (46) expression -> exp rel_op exp . q4
    (47) q4 -> .
    RETURN          reduce using rule 47 (q4 -> .)
    PEN_DOWN        reduce using rule 47 (q4 -> .)
    PEN_UP          reduce using rule 47 (q4 -> .)
    WHILE           reduce using rule 47 (q4 -> .)
    IF              reduce using rule 47 (q4 -> .)
    WRITE           reduce using rule 47 (q4 -> .)
    READ            reduce using rule 47 (q4 -> .)
    ID              reduce using rule 47 (q4 -> .)
    BOOL            reduce using rule 47 (q4 -> .)
    WORD            reduce using rule 47 (q4 -> .)
    NUMBER          reduce using rule 47 (q4 -> .)
    CENTER          reduce using rule 47 (q4 -> .)
    FORWARD         reduce using rule 47 (q4 -> .)
    RIGHT           reduce using rule 47 (q4 -> .)
    LEFT            reduce using rule 47 (q4 -> .)
    END             reduce using rule 47 (q4 -> .)
    ELSE            reduce using rule 47 (q4 -> .)
    OR              reduce using rule 47 (q4 -> .)
    AND             reduce using rule 47 (q4 -> .)
    CLOSE_PTH       reduce using rule 47 (q4 -> .)
    COMMA           reduce using rule 47 (q4 -> .)
    CLOSE_SQR       reduce using rule 47 (q4 -> .)
    SUB             reduce using rule 47 (q4 -> .)
    SUM             reduce using rule 47 (q4 -> .)
    EQUAL_TO        reduce using rule 47 (q4 -> .)
    MORE_OR_EQ_THAN reduce using rule 47 (q4 -> .)
    LESS_OR_EQ_THAN reduce using rule 47 (q4 -> .)
    DIFFERENT_TO    reduce using rule 47 (q4 -> .)
    MORE_THAN       reduce using rule 47 (q4 -> .)
    LESS_THAN       reduce using rule 47 (q4 -> .)

    q4                             shift and go to state 151

state 131

    (50) exp -> termino term_op e3 . termino q1
    (55) termino -> . factor q2
    (56) termino -> . factor fact_op e2 expression q2
    (62) factor -> . var_cte e1
    (63) factor -> . open_pth expression close_pth
    (38) var_cte -> . func_call
    (39) var_cte -> . cte_bool
    (40) var_cte -> . CTE_STR
    (41) var_cte -> . CTE_NUM
    (42) var_cte -> . variable
    (65) open_pth -> . OPEN_PTH
    (75) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (43) cte_bool -> . FALSE
    (44) cte_bool -> . TRUE
    (83) variable -> . ID array
    CTE_STR         shift and go to state 72
    CTE_NUM         shift and go to state 73
    OPEN_PTH        shift and go to state 75
    ID              shift and go to state 76
    FALSE           shift and go to state 77
    TRUE            shift and go to state 78

    termino                        shift and go to state 152
    factor                         shift and go to state 67
    var_cte                        shift and go to state 68
    open_pth                       shift and go to state 69
    func_call                      shift and go to state 70
    cte_bool                       shift and go to state 71
    variable                       shift and go to state 74

state 132

    (56) termino -> factor fact_op e2 . expression q2
    (45) expression -> . exp q4
    (46) expression -> . exp rel_op exp q4
    (49) exp -> . termino q1
    (50) exp -> . termino term_op e3 termino q1
    (55) termino -> . factor q2
    (56) termino -> . factor fact_op e2 expression q2
    (62) factor -> . var_cte e1
    (63) factor -> . open_pth expression close_pth
    (38) var_cte -> . func_call
    (39) var_cte -> . cte_bool
    (40) var_cte -> . CTE_STR
    (41) var_cte -> . CTE_NUM
    (42) var_cte -> . variable
    (65) open_pth -> . OPEN_PTH
    (75) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (43) cte_bool -> . FALSE
    (44) cte_bool -> . TRUE
    (83) variable -> . ID array
    CTE_STR         shift and go to state 72
    CTE_NUM         shift and go to state 73
    OPEN_PTH        shift and go to state 75
    ID              shift and go to state 76
    FALSE           shift and go to state 77
    TRUE            shift and go to state 78

    factor                         shift and go to state 67
    expression                     shift and go to state 153
    exp                            shift and go to state 65
    termino                        shift and go to state 66
    var_cte                        shift and go to state 68
    open_pth                       shift and go to state 69
    func_call                      shift and go to state 70
    cte_bool                       shift and go to state 71
    variable                       shift and go to state 74

state 133

    (63) factor -> open_pth expression close_pth .
    DIV             reduce using rule 63 (factor -> open_pth expression close_pth .)
    MULT            reduce using rule 63 (factor -> open_pth expression close_pth .)
    SUB             reduce using rule 63 (factor -> open_pth expression close_pth .)
    SUM             reduce using rule 63 (factor -> open_pth expression close_pth .)
    EQUAL_TO        reduce using rule 63 (factor -> open_pth expression close_pth .)
    MORE_OR_EQ_THAN reduce using rule 63 (factor -> open_pth expression close_pth .)
    LESS_OR_EQ_THAN reduce using rule 63 (factor -> open_pth expression close_pth .)
    DIFFERENT_TO    reduce using rule 63 (factor -> open_pth expression close_pth .)
    MORE_THAN       reduce using rule 63 (factor -> open_pth expression close_pth .)
    LESS_THAN       reduce using rule 63 (factor -> open_pth expression close_pth .)
    RETURN          reduce using rule 63 (factor -> open_pth expression close_pth .)
    PEN_DOWN        reduce using rule 63 (factor -> open_pth expression close_pth .)
    PEN_UP          reduce using rule 63 (factor -> open_pth expression close_pth .)
    WHILE           reduce using rule 63 (factor -> open_pth expression close_pth .)
    IF              reduce using rule 63 (factor -> open_pth expression close_pth .)
    WRITE           reduce using rule 63 (factor -> open_pth expression close_pth .)
    READ            reduce using rule 63 (factor -> open_pth expression close_pth .)
    ID              reduce using rule 63 (factor -> open_pth expression close_pth .)
    BOOL            reduce using rule 63 (factor -> open_pth expression close_pth .)
    WORD            reduce using rule 63 (factor -> open_pth expression close_pth .)
    NUMBER          reduce using rule 63 (factor -> open_pth expression close_pth .)
    CENTER          reduce using rule 63 (factor -> open_pth expression close_pth .)
    FORWARD         reduce using rule 63 (factor -> open_pth expression close_pth .)
    RIGHT           reduce using rule 63 (factor -> open_pth expression close_pth .)
    LEFT            reduce using rule 63 (factor -> open_pth expression close_pth .)
    END             reduce using rule 63 (factor -> open_pth expression close_pth .)
    ELSE            reduce using rule 63 (factor -> open_pth expression close_pth .)
    OR              reduce using rule 63 (factor -> open_pth expression close_pth .)
    AND             reduce using rule 63 (factor -> open_pth expression close_pth .)
    CLOSE_PTH       reduce using rule 63 (factor -> open_pth expression close_pth .)
    COMMA           reduce using rule 63 (factor -> open_pth expression close_pth .)
    CLOSE_SQR       reduce using rule 63 (factor -> open_pth expression close_pth .)


state 134

    (66) close_pth -> CLOSE_PTH .
    DIV             reduce using rule 66 (close_pth -> CLOSE_PTH .)
    MULT            reduce using rule 66 (close_pth -> CLOSE_PTH .)
    SUB             reduce using rule 66 (close_pth -> CLOSE_PTH .)
    SUM             reduce using rule 66 (close_pth -> CLOSE_PTH .)
    EQUAL_TO        reduce using rule 66 (close_pth -> CLOSE_PTH .)
    MORE_OR_EQ_THAN reduce using rule 66 (close_pth -> CLOSE_PTH .)
    LESS_OR_EQ_THAN reduce using rule 66 (close_pth -> CLOSE_PTH .)
    DIFFERENT_TO    reduce using rule 66 (close_pth -> CLOSE_PTH .)
    MORE_THAN       reduce using rule 66 (close_pth -> CLOSE_PTH .)
    LESS_THAN       reduce using rule 66 (close_pth -> CLOSE_PTH .)
    RETURN          reduce using rule 66 (close_pth -> CLOSE_PTH .)
    PEN_DOWN        reduce using rule 66 (close_pth -> CLOSE_PTH .)
    PEN_UP          reduce using rule 66 (close_pth -> CLOSE_PTH .)
    WHILE           reduce using rule 66 (close_pth -> CLOSE_PTH .)
    IF              reduce using rule 66 (close_pth -> CLOSE_PTH .)
    WRITE           reduce using rule 66 (close_pth -> CLOSE_PTH .)
    READ            reduce using rule 66 (close_pth -> CLOSE_PTH .)
    ID              reduce using rule 66 (close_pth -> CLOSE_PTH .)
    BOOL            reduce using rule 66 (close_pth -> CLOSE_PTH .)
    WORD            reduce using rule 66 (close_pth -> CLOSE_PTH .)
    NUMBER          reduce using rule 66 (close_pth -> CLOSE_PTH .)
    CENTER          reduce using rule 66 (close_pth -> CLOSE_PTH .)
    FORWARD         reduce using rule 66 (close_pth -> CLOSE_PTH .)
    RIGHT           reduce using rule 66 (close_pth -> CLOSE_PTH .)
    LEFT            reduce using rule 66 (close_pth -> CLOSE_PTH .)
    END             reduce using rule 66 (close_pth -> CLOSE_PTH .)
    ELSE            reduce using rule 66 (close_pth -> CLOSE_PTH .)
    OR              reduce using rule 66 (close_pth -> CLOSE_PTH .)
    AND             reduce using rule 66 (close_pth -> CLOSE_PTH .)
    CLOSE_PTH       reduce using rule 66 (close_pth -> CLOSE_PTH .)
    COMMA           reduce using rule 66 (close_pth -> CLOSE_PTH .)
    CLOSE_SQR       reduce using rule 66 (close_pth -> CLOSE_PTH .)


state 135

    (85) array -> OPEN_SQR expression . CLOSE_SQR matrix
    CLOSE_SQR       shift and go to state 154


state 136

    (89) multiple_vars -> COMMA variable .
    RETURN          reduce using rule 89 (multiple_vars -> COMMA variable .)
    PEN_DOWN        reduce using rule 89 (multiple_vars -> COMMA variable .)
    PEN_UP          reduce using rule 89 (multiple_vars -> COMMA variable .)
    WHILE           reduce using rule 89 (multiple_vars -> COMMA variable .)
    IF              reduce using rule 89 (multiple_vars -> COMMA variable .)
    WRITE           reduce using rule 89 (multiple_vars -> COMMA variable .)
    READ            reduce using rule 89 (multiple_vars -> COMMA variable .)
    ID              reduce using rule 89 (multiple_vars -> COMMA variable .)
    BOOL            reduce using rule 89 (multiple_vars -> COMMA variable .)
    WORD            reduce using rule 89 (multiple_vars -> COMMA variable .)
    NUMBER          reduce using rule 89 (multiple_vars -> COMMA variable .)
    CENTER          reduce using rule 89 (multiple_vars -> COMMA variable .)
    FORWARD         reduce using rule 89 (multiple_vars -> COMMA variable .)
    RIGHT           reduce using rule 89 (multiple_vars -> COMMA variable .)
    LEFT            reduce using rule 89 (multiple_vars -> COMMA variable .)
    END             reduce using rule 89 (multiple_vars -> COMMA variable .)
    ELSE            reduce using rule 89 (multiple_vars -> COMMA variable .)
    CLOSE_PTH       reduce using rule 89 (multiple_vars -> COMMA variable .)


state 137

    (75) func_call -> ID OPEN_PTH func1 func_call_param . CLOSE_PTH func3
    CLOSE_PTH       shift and go to state 155


state 138

    (34) var_assignation -> ID e5 assign e6 . expression q3
    (45) expression -> . exp q4
    (46) expression -> . exp rel_op exp q4
    (49) exp -> . termino q1
    (50) exp -> . termino term_op e3 termino q1
    (55) termino -> . factor q2
    (56) termino -> . factor fact_op e2 expression q2
    (62) factor -> . var_cte e1
    (63) factor -> . open_pth expression close_pth
    (38) var_cte -> . func_call
    (39) var_cte -> . cte_bool
    (40) var_cte -> . CTE_STR
    (41) var_cte -> . CTE_NUM
    (42) var_cte -> . variable
    (65) open_pth -> . OPEN_PTH
    (75) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (43) cte_bool -> . FALSE
    (44) cte_bool -> . TRUE
    (83) variable -> . ID array
    CTE_STR         shift and go to state 72
    CTE_NUM         shift and go to state 73
    OPEN_PTH        shift and go to state 75
    ID              shift and go to state 76
    FALSE           shift and go to state 77
    TRUE            shift and go to state 78

    expression                     shift and go to state 156
    exp                            shift and go to state 65
    termino                        shift and go to state 66
    factor                         shift and go to state 67
    var_cte                        shift and go to state 68
    open_pth                       shift and go to state 69
    func_call                      shift and go to state 70
    cte_bool                       shift and go to state 71
    variable                       shift and go to state 74

state 139

    (106) move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .
    RETURN          reduce using rule 106 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    PEN_DOWN        reduce using rule 106 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    PEN_UP          reduce using rule 106 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    WHILE           reduce using rule 106 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    IF              reduce using rule 106 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    WRITE           reduce using rule 106 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    READ            reduce using rule 106 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    ID              reduce using rule 106 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    BOOL            reduce using rule 106 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    WORD            reduce using rule 106 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    NUMBER          reduce using rule 106 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    CENTER          reduce using rule 106 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    FORWARD         reduce using rule 106 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    RIGHT           reduce using rule 106 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    LEFT            reduce using rule 106 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    END             reduce using rule 106 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    ELSE            reduce using rule 106 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)


state 140

    (77) func_call_param -> expression func2 . multiple_fc_param
    (80) multiple_fc_param -> . empty
    (81) multiple_fc_param -> . COMMA func_call_param
    (114) empty -> .
    COMMA           shift and go to state 159
    CLOSE_PTH       reduce using rule 114 (empty -> .)

    multiple_fc_param              shift and go to state 157
    empty                          shift and go to state 158

state 141

    (98) while_stmnt -> WHILE w1 con_expression w2 . stmnt w3 END
    (21) stmnt -> . empty
    (22) stmnt -> . returnf stmnt
    (23) stmnt -> . var_declaration_func stmnt
    (24) stmnt -> . pen_func stmnt
    (25) stmnt -> . move_func stmnt
    (26) stmnt -> . while_stmnt stmnt
    (27) stmnt -> . if_stmnt stmnt
    (28) stmnt -> . write stmnt
    (29) stmnt -> . read stmnt
    (30) stmnt -> . func_call stmnt
    (31) stmnt -> . var_assignation stmnt
    (114) empty -> .
    (32) returnf -> . RETURN expression
    (33) var_declaration_func -> . var_type ID multiple_vars
    (111) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (112) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (106) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (98) while_stmnt -> . WHILE w1 con_expression w2 stmnt w3 END
    (91) if_stmnt -> . IF con_expression if1 stmnt if2 else_stmnt
    (90) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (82) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (75) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (34) var_assignation -> . ID e5 assign e6 expression q3
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (107) move_type -> . CENTER
    (108) move_type -> . FORWARD
    (109) move_type -> . RIGHT
    (110) move_type -> . LEFT
    END             reduce using rule 114 (empty -> .)
    RETURN          shift and go to state 37
    PEN_DOWN        shift and go to state 40
    PEN_UP          shift and go to state 41
    WHILE           shift and go to state 43
    IF              shift and go to state 44
    WRITE           shift and go to state 45
    READ            shift and go to state 46
    ID              shift and go to state 39
    BOOL            shift and go to state 8
    WORD            shift and go to state 9
    NUMBER          shift and go to state 10
    CENTER          shift and go to state 47
    FORWARD         shift and go to state 48
    RIGHT           shift and go to state 49
    LEFT            shift and go to state 50

    stmnt                          shift and go to state 160
    empty                          shift and go to state 26
    returnf                        shift and go to state 27
    var_declaration_func           shift and go to state 28
    pen_func                       shift and go to state 29
    move_func                      shift and go to state 30
    while_stmnt                    shift and go to state 31
    if_stmnt                       shift and go to state 32
    write                          shift and go to state 33
    read                           shift and go to state 34
    func_call                      shift and go to state 35
    var_assignation                shift and go to state 36
    var_type                       shift and go to state 38
    move_type                      shift and go to state 42

state 142

    (91) if_stmnt -> IF con_expression if1 stmnt . if2 else_stmnt
    (93) if2 -> .
    END             reduce using rule 93 (if2 -> .)
    ELSE            reduce using rule 93 (if2 -> .)

    if2                            shift and go to state 161

state 143

    (103) con_expression -> expression q5 log_op . e7 expression q5
    (104) e7 -> .
    CTE_STR         reduce using rule 104 (e7 -> .)
    CTE_NUM         reduce using rule 104 (e7 -> .)
    OPEN_PTH        reduce using rule 104 (e7 -> .)
    ID              reduce using rule 104 (e7 -> .)
    FALSE           reduce using rule 104 (e7 -> .)
    TRUE            reduce using rule 104 (e7 -> .)

    e7                             shift and go to state 162

state 144

    (67) log_op -> OR .
    CTE_STR         reduce using rule 67 (log_op -> OR .)
    CTE_NUM         reduce using rule 67 (log_op -> OR .)
    OPEN_PTH        reduce using rule 67 (log_op -> OR .)
    ID              reduce using rule 67 (log_op -> OR .)
    FALSE           reduce using rule 67 (log_op -> OR .)
    TRUE            reduce using rule 67 (log_op -> OR .)


state 145

    (68) log_op -> AND .
    CTE_STR         reduce using rule 68 (log_op -> AND .)
    CTE_NUM         reduce using rule 68 (log_op -> AND .)
    OPEN_PTH        reduce using rule 68 (log_op -> AND .)
    ID              reduce using rule 68 (log_op -> AND .)
    FALSE           reduce using rule 68 (log_op -> AND .)
    TRUE            reduce using rule 68 (log_op -> AND .)


state 146

    (90) write -> WRITE OPEN_PTH expression CLOSE_PTH .
    RETURN          reduce using rule 90 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    PEN_DOWN        reduce using rule 90 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    PEN_UP          reduce using rule 90 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    WHILE           reduce using rule 90 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    IF              reduce using rule 90 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    WRITE           reduce using rule 90 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    READ            reduce using rule 90 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    ID              reduce using rule 90 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    BOOL            reduce using rule 90 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    WORD            reduce using rule 90 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    NUMBER          reduce using rule 90 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    CENTER          reduce using rule 90 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    FORWARD         reduce using rule 90 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    RIGHT           reduce using rule 90 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    LEFT            reduce using rule 90 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    END             reduce using rule 90 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    ELSE            reduce using rule 90 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)


state 147

    (82) read -> READ OPEN_PTH variable multiple_vars . CLOSE_PTH
    CLOSE_PTH       shift and go to state 163


state 148

    (11) func_declaration -> FUNC func_type ID fd1 OPEN_PTH parameter . CLOSE_PTH stmnt END
    CLOSE_PTH       shift and go to state 164


state 149

    (17) parameter -> empty .
    CLOSE_PTH       reduce using rule 17 (parameter -> empty .)


state 150

    (18) parameter -> var_type . ID multiple_parameters
    ID              shift and go to state 165


state 151

    (46) expression -> exp rel_op exp q4 .
    RETURN          reduce using rule 46 (expression -> exp rel_op exp q4 .)
    PEN_DOWN        reduce using rule 46 (expression -> exp rel_op exp q4 .)
    PEN_UP          reduce using rule 46 (expression -> exp rel_op exp q4 .)
    WHILE           reduce using rule 46 (expression -> exp rel_op exp q4 .)
    IF              reduce using rule 46 (expression -> exp rel_op exp q4 .)
    WRITE           reduce using rule 46 (expression -> exp rel_op exp q4 .)
    READ            reduce using rule 46 (expression -> exp rel_op exp q4 .)
    ID              reduce using rule 46 (expression -> exp rel_op exp q4 .)
    BOOL            reduce using rule 46 (expression -> exp rel_op exp q4 .)
    WORD            reduce using rule 46 (expression -> exp rel_op exp q4 .)
    NUMBER          reduce using rule 46 (expression -> exp rel_op exp q4 .)
    CENTER          reduce using rule 46 (expression -> exp rel_op exp q4 .)
    FORWARD         reduce using rule 46 (expression -> exp rel_op exp q4 .)
    RIGHT           reduce using rule 46 (expression -> exp rel_op exp q4 .)
    LEFT            reduce using rule 46 (expression -> exp rel_op exp q4 .)
    END             reduce using rule 46 (expression -> exp rel_op exp q4 .)
    ELSE            reduce using rule 46 (expression -> exp rel_op exp q4 .)
    OR              reduce using rule 46 (expression -> exp rel_op exp q4 .)
    AND             reduce using rule 46 (expression -> exp rel_op exp q4 .)
    CLOSE_PTH       reduce using rule 46 (expression -> exp rel_op exp q4 .)
    COMMA           reduce using rule 46 (expression -> exp rel_op exp q4 .)
    CLOSE_SQR       reduce using rule 46 (expression -> exp rel_op exp q4 .)
    SUB             reduce using rule 46 (expression -> exp rel_op exp q4 .)
    SUM             reduce using rule 46 (expression -> exp rel_op exp q4 .)
    EQUAL_TO        reduce using rule 46 (expression -> exp rel_op exp q4 .)
    MORE_OR_EQ_THAN reduce using rule 46 (expression -> exp rel_op exp q4 .)
    LESS_OR_EQ_THAN reduce using rule 46 (expression -> exp rel_op exp q4 .)
    DIFFERENT_TO    reduce using rule 46 (expression -> exp rel_op exp q4 .)
    MORE_THAN       reduce using rule 46 (expression -> exp rel_op exp q4 .)
    LESS_THAN       reduce using rule 46 (expression -> exp rel_op exp q4 .)


state 152

    (50) exp -> termino term_op e3 termino . q1
    (57) q1 -> .
    EQUAL_TO        reduce using rule 57 (q1 -> .)
    MORE_OR_EQ_THAN reduce using rule 57 (q1 -> .)
    LESS_OR_EQ_THAN reduce using rule 57 (q1 -> .)
    DIFFERENT_TO    reduce using rule 57 (q1 -> .)
    MORE_THAN       reduce using rule 57 (q1 -> .)
    LESS_THAN       reduce using rule 57 (q1 -> .)
    RETURN          reduce using rule 57 (q1 -> .)
    PEN_DOWN        reduce using rule 57 (q1 -> .)
    PEN_UP          reduce using rule 57 (q1 -> .)
    WHILE           reduce using rule 57 (q1 -> .)
    IF              reduce using rule 57 (q1 -> .)
    WRITE           reduce using rule 57 (q1 -> .)
    READ            reduce using rule 57 (q1 -> .)
    ID              reduce using rule 57 (q1 -> .)
    BOOL            reduce using rule 57 (q1 -> .)
    WORD            reduce using rule 57 (q1 -> .)
    NUMBER          reduce using rule 57 (q1 -> .)
    CENTER          reduce using rule 57 (q1 -> .)
    FORWARD         reduce using rule 57 (q1 -> .)
    RIGHT           reduce using rule 57 (q1 -> .)
    LEFT            reduce using rule 57 (q1 -> .)
    END             reduce using rule 57 (q1 -> .)
    ELSE            reduce using rule 57 (q1 -> .)
    OR              reduce using rule 57 (q1 -> .)
    AND             reduce using rule 57 (q1 -> .)
    CLOSE_PTH       reduce using rule 57 (q1 -> .)
    COMMA           reduce using rule 57 (q1 -> .)
    SUB             reduce using rule 57 (q1 -> .)
    SUM             reduce using rule 57 (q1 -> .)
    CLOSE_SQR       reduce using rule 57 (q1 -> .)

    q1                             shift and go to state 166

state 153

    (56) termino -> factor fact_op e2 expression . q2
    (52) q2 -> .
    SUB             reduce using rule 52 (q2 -> .)
    SUM             reduce using rule 52 (q2 -> .)
    EQUAL_TO        reduce using rule 52 (q2 -> .)
    MORE_OR_EQ_THAN reduce using rule 52 (q2 -> .)
    LESS_OR_EQ_THAN reduce using rule 52 (q2 -> .)
    DIFFERENT_TO    reduce using rule 52 (q2 -> .)
    MORE_THAN       reduce using rule 52 (q2 -> .)
    LESS_THAN       reduce using rule 52 (q2 -> .)
    RETURN          reduce using rule 52 (q2 -> .)
    PEN_DOWN        reduce using rule 52 (q2 -> .)
    PEN_UP          reduce using rule 52 (q2 -> .)
    WHILE           reduce using rule 52 (q2 -> .)
    IF              reduce using rule 52 (q2 -> .)
    WRITE           reduce using rule 52 (q2 -> .)
    READ            reduce using rule 52 (q2 -> .)
    ID              reduce using rule 52 (q2 -> .)
    BOOL            reduce using rule 52 (q2 -> .)
    WORD            reduce using rule 52 (q2 -> .)
    NUMBER          reduce using rule 52 (q2 -> .)
    CENTER          reduce using rule 52 (q2 -> .)
    FORWARD         reduce using rule 52 (q2 -> .)
    RIGHT           reduce using rule 52 (q2 -> .)
    LEFT            reduce using rule 52 (q2 -> .)
    END             reduce using rule 52 (q2 -> .)
    ELSE            reduce using rule 52 (q2 -> .)
    OR              reduce using rule 52 (q2 -> .)
    AND             reduce using rule 52 (q2 -> .)
    CLOSE_PTH       reduce using rule 52 (q2 -> .)
    COMMA           reduce using rule 52 (q2 -> .)
    CLOSE_SQR       reduce using rule 52 (q2 -> .)

    q2                             shift and go to state 167

state 154

    (85) array -> OPEN_SQR expression CLOSE_SQR . matrix
    (86) matrix -> . empty
    (87) matrix -> . OPEN_SQR expression CLOSE_SQR
    (114) empty -> .
    OPEN_SQR        shift and go to state 168
    DIV             reduce using rule 114 (empty -> .)
    MULT            reduce using rule 114 (empty -> .)
    SUB             reduce using rule 114 (empty -> .)
    SUM             reduce using rule 114 (empty -> .)
    EQUAL_TO        reduce using rule 114 (empty -> .)
    MORE_OR_EQ_THAN reduce using rule 114 (empty -> .)
    LESS_OR_EQ_THAN reduce using rule 114 (empty -> .)
    DIFFERENT_TO    reduce using rule 114 (empty -> .)
    MORE_THAN       reduce using rule 114 (empty -> .)
    LESS_THAN       reduce using rule 114 (empty -> .)
    RETURN          reduce using rule 114 (empty -> .)
    PEN_DOWN        reduce using rule 114 (empty -> .)
    PEN_UP          reduce using rule 114 (empty -> .)
    WHILE           reduce using rule 114 (empty -> .)
    IF              reduce using rule 114 (empty -> .)
    WRITE           reduce using rule 114 (empty -> .)
    READ            reduce using rule 114 (empty -> .)
    ID              reduce using rule 114 (empty -> .)
    BOOL            reduce using rule 114 (empty -> .)
    WORD            reduce using rule 114 (empty -> .)
    NUMBER          reduce using rule 114 (empty -> .)
    CENTER          reduce using rule 114 (empty -> .)
    FORWARD         reduce using rule 114 (empty -> .)
    RIGHT           reduce using rule 114 (empty -> .)
    LEFT            reduce using rule 114 (empty -> .)
    END             reduce using rule 114 (empty -> .)
    ELSE            reduce using rule 114 (empty -> .)
    OR              reduce using rule 114 (empty -> .)
    AND             reduce using rule 114 (empty -> .)
    CLOSE_PTH       reduce using rule 114 (empty -> .)
    COMMA           reduce using rule 114 (empty -> .)
    CLOSE_SQR       reduce using rule 114 (empty -> .)

    matrix                         shift and go to state 169
    empty                          shift and go to state 170

state 155

    (75) func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH . func3
    (79) func3 -> .
    RETURN          reduce using rule 79 (func3 -> .)
    PEN_DOWN        reduce using rule 79 (func3 -> .)
    PEN_UP          reduce using rule 79 (func3 -> .)
    WHILE           reduce using rule 79 (func3 -> .)
    IF              reduce using rule 79 (func3 -> .)
    WRITE           reduce using rule 79 (func3 -> .)
    READ            reduce using rule 79 (func3 -> .)
    ID              reduce using rule 79 (func3 -> .)
    BOOL            reduce using rule 79 (func3 -> .)
    WORD            reduce using rule 79 (func3 -> .)
    NUMBER          reduce using rule 79 (func3 -> .)
    CENTER          reduce using rule 79 (func3 -> .)
    FORWARD         reduce using rule 79 (func3 -> .)
    RIGHT           reduce using rule 79 (func3 -> .)
    LEFT            reduce using rule 79 (func3 -> .)
    END             reduce using rule 79 (func3 -> .)
    ELSE            reduce using rule 79 (func3 -> .)
    DIV             reduce using rule 79 (func3 -> .)
    MULT            reduce using rule 79 (func3 -> .)
    SUB             reduce using rule 79 (func3 -> .)
    SUM             reduce using rule 79 (func3 -> .)
    EQUAL_TO        reduce using rule 79 (func3 -> .)
    MORE_OR_EQ_THAN reduce using rule 79 (func3 -> .)
    LESS_OR_EQ_THAN reduce using rule 79 (func3 -> .)
    DIFFERENT_TO    reduce using rule 79 (func3 -> .)
    MORE_THAN       reduce using rule 79 (func3 -> .)
    LESS_THAN       reduce using rule 79 (func3 -> .)
    OR              reduce using rule 79 (func3 -> .)
    AND             reduce using rule 79 (func3 -> .)
    CLOSE_PTH       reduce using rule 79 (func3 -> .)
    COMMA           reduce using rule 79 (func3 -> .)
    CLOSE_SQR       reduce using rule 79 (func3 -> .)

    func3                          shift and go to state 171

state 156

    (34) var_assignation -> ID e5 assign e6 expression . q3
    (58) q3 -> .
    RETURN          reduce using rule 58 (q3 -> .)
    PEN_DOWN        reduce using rule 58 (q3 -> .)
    PEN_UP          reduce using rule 58 (q3 -> .)
    WHILE           reduce using rule 58 (q3 -> .)
    IF              reduce using rule 58 (q3 -> .)
    WRITE           reduce using rule 58 (q3 -> .)
    READ            reduce using rule 58 (q3 -> .)
    ID              reduce using rule 58 (q3 -> .)
    BOOL            reduce using rule 58 (q3 -> .)
    WORD            reduce using rule 58 (q3 -> .)
    NUMBER          reduce using rule 58 (q3 -> .)
    CENTER          reduce using rule 58 (q3 -> .)
    FORWARD         reduce using rule 58 (q3 -> .)
    RIGHT           reduce using rule 58 (q3 -> .)
    LEFT            reduce using rule 58 (q3 -> .)
    END             reduce using rule 58 (q3 -> .)
    ELSE            reduce using rule 58 (q3 -> .)

    q3                             shift and go to state 172

state 157

    (77) func_call_param -> expression func2 multiple_fc_param .
    CLOSE_PTH       reduce using rule 77 (func_call_param -> expression func2 multiple_fc_param .)


state 158

    (80) multiple_fc_param -> empty .
    CLOSE_PTH       reduce using rule 80 (multiple_fc_param -> empty .)


state 159

    (81) multiple_fc_param -> COMMA . func_call_param
    (77) func_call_param -> . expression func2 multiple_fc_param
    (45) expression -> . exp q4
    (46) expression -> . exp rel_op exp q4
    (49) exp -> . termino q1
    (50) exp -> . termino term_op e3 termino q1
    (55) termino -> . factor q2
    (56) termino -> . factor fact_op e2 expression q2
    (62) factor -> . var_cte e1
    (63) factor -> . open_pth expression close_pth
    (38) var_cte -> . func_call
    (39) var_cte -> . cte_bool
    (40) var_cte -> . CTE_STR
    (41) var_cte -> . CTE_NUM
    (42) var_cte -> . variable
    (65) open_pth -> . OPEN_PTH
    (75) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (43) cte_bool -> . FALSE
    (44) cte_bool -> . TRUE
    (83) variable -> . ID array
    CTE_STR         shift and go to state 72
    CTE_NUM         shift and go to state 73
    OPEN_PTH        shift and go to state 75
    ID              shift and go to state 76
    FALSE           shift and go to state 77
    TRUE            shift and go to state 78

    func_call_param                shift and go to state 173
    expression                     shift and go to state 122
    exp                            shift and go to state 65
    termino                        shift and go to state 66
    factor                         shift and go to state 67
    var_cte                        shift and go to state 68
    open_pth                       shift and go to state 69
    func_call                      shift and go to state 70
    cte_bool                       shift and go to state 71
    variable                       shift and go to state 74

state 160

    (98) while_stmnt -> WHILE w1 con_expression w2 stmnt . w3 END
    (101) w3 -> .
    END             reduce using rule 101 (w3 -> .)

    w3                             shift and go to state 174

state 161

    (91) if_stmnt -> IF con_expression if1 stmnt if2 . else_stmnt
    (94) else_stmnt -> . END
    (95) else_stmnt -> . ELSE if3 stmnt if4 END
    END             shift and go to state 176
    ELSE            shift and go to state 177

    else_stmnt                     shift and go to state 175

state 162

    (103) con_expression -> expression q5 log_op e7 . expression q5
    (45) expression -> . exp q4
    (46) expression -> . exp rel_op exp q4
    (49) exp -> . termino q1
    (50) exp -> . termino term_op e3 termino q1
    (55) termino -> . factor q2
    (56) termino -> . factor fact_op e2 expression q2
    (62) factor -> . var_cte e1
    (63) factor -> . open_pth expression close_pth
    (38) var_cte -> . func_call
    (39) var_cte -> . cte_bool
    (40) var_cte -> . CTE_STR
    (41) var_cte -> . CTE_NUM
    (42) var_cte -> . variable
    (65) open_pth -> . OPEN_PTH
    (75) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (43) cte_bool -> . FALSE
    (44) cte_bool -> . TRUE
    (83) variable -> . ID array
    CTE_STR         shift and go to state 72
    CTE_NUM         shift and go to state 73
    OPEN_PTH        shift and go to state 75
    ID              shift and go to state 76
    FALSE           shift and go to state 77
    TRUE            shift and go to state 78

    expression                     shift and go to state 178
    exp                            shift and go to state 65
    termino                        shift and go to state 66
    factor                         shift and go to state 67
    var_cte                        shift and go to state 68
    open_pth                       shift and go to state 69
    func_call                      shift and go to state 70
    cte_bool                       shift and go to state 71
    variable                       shift and go to state 74

state 163

    (82) read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .
    RETURN          reduce using rule 82 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    PEN_DOWN        reduce using rule 82 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    PEN_UP          reduce using rule 82 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    WHILE           reduce using rule 82 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    IF              reduce using rule 82 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    WRITE           reduce using rule 82 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    READ            reduce using rule 82 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    ID              reduce using rule 82 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    BOOL            reduce using rule 82 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    WORD            reduce using rule 82 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    NUMBER          reduce using rule 82 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    CENTER          reduce using rule 82 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    FORWARD         reduce using rule 82 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    RIGHT           reduce using rule 82 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    LEFT            reduce using rule 82 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    END             reduce using rule 82 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    ELSE            reduce using rule 82 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)


state 164

    (11) func_declaration -> FUNC func_type ID fd1 OPEN_PTH parameter CLOSE_PTH . stmnt END
    (21) stmnt -> . empty
    (22) stmnt -> . returnf stmnt
    (23) stmnt -> . var_declaration_func stmnt
    (24) stmnt -> . pen_func stmnt
    (25) stmnt -> . move_func stmnt
    (26) stmnt -> . while_stmnt stmnt
    (27) stmnt -> . if_stmnt stmnt
    (28) stmnt -> . write stmnt
    (29) stmnt -> . read stmnt
    (30) stmnt -> . func_call stmnt
    (31) stmnt -> . var_assignation stmnt
    (114) empty -> .
    (32) returnf -> . RETURN expression
    (33) var_declaration_func -> . var_type ID multiple_vars
    (111) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (112) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (106) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (98) while_stmnt -> . WHILE w1 con_expression w2 stmnt w3 END
    (91) if_stmnt -> . IF con_expression if1 stmnt if2 else_stmnt
    (90) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (82) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (75) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (34) var_assignation -> . ID e5 assign e6 expression q3
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (107) move_type -> . CENTER
    (108) move_type -> . FORWARD
    (109) move_type -> . RIGHT
    (110) move_type -> . LEFT
    END             reduce using rule 114 (empty -> .)
    RETURN          shift and go to state 37
    PEN_DOWN        shift and go to state 40
    PEN_UP          shift and go to state 41
    WHILE           shift and go to state 43
    IF              shift and go to state 44
    WRITE           shift and go to state 45
    READ            shift and go to state 46
    ID              shift and go to state 39
    BOOL            shift and go to state 8
    WORD            shift and go to state 9
    NUMBER          shift and go to state 10
    CENTER          shift and go to state 47
    FORWARD         shift and go to state 48
    RIGHT           shift and go to state 49
    LEFT            shift and go to state 50

    stmnt                          shift and go to state 179
    empty                          shift and go to state 26
    returnf                        shift and go to state 27
    var_declaration_func           shift and go to state 28
    pen_func                       shift and go to state 29
    move_func                      shift and go to state 30
    while_stmnt                    shift and go to state 31
    if_stmnt                       shift and go to state 32
    write                          shift and go to state 33
    read                           shift and go to state 34
    func_call                      shift and go to state 35
    var_assignation                shift and go to state 36
    var_type                       shift and go to state 38
    move_type                      shift and go to state 42

state 165

    (18) parameter -> var_type ID . multiple_parameters
    (19) multiple_parameters -> . empty
    (20) multiple_parameters -> . COMMA parameter
    (114) empty -> .
    COMMA           shift and go to state 182
    CLOSE_PTH       reduce using rule 114 (empty -> .)

    multiple_parameters            shift and go to state 180
    empty                          shift and go to state 181

state 166

    (50) exp -> termino term_op e3 termino q1 .
    EQUAL_TO        reduce using rule 50 (exp -> termino term_op e3 termino q1 .)
    MORE_OR_EQ_THAN reduce using rule 50 (exp -> termino term_op e3 termino q1 .)
    LESS_OR_EQ_THAN reduce using rule 50 (exp -> termino term_op e3 termino q1 .)
    DIFFERENT_TO    reduce using rule 50 (exp -> termino term_op e3 termino q1 .)
    MORE_THAN       reduce using rule 50 (exp -> termino term_op e3 termino q1 .)
    LESS_THAN       reduce using rule 50 (exp -> termino term_op e3 termino q1 .)
    RETURN          reduce using rule 50 (exp -> termino term_op e3 termino q1 .)
    PEN_DOWN        reduce using rule 50 (exp -> termino term_op e3 termino q1 .)
    PEN_UP          reduce using rule 50 (exp -> termino term_op e3 termino q1 .)
    WHILE           reduce using rule 50 (exp -> termino term_op e3 termino q1 .)
    IF              reduce using rule 50 (exp -> termino term_op e3 termino q1 .)
    WRITE           reduce using rule 50 (exp -> termino term_op e3 termino q1 .)
    READ            reduce using rule 50 (exp -> termino term_op e3 termino q1 .)
    ID              reduce using rule 50 (exp -> termino term_op e3 termino q1 .)
    BOOL            reduce using rule 50 (exp -> termino term_op e3 termino q1 .)
    WORD            reduce using rule 50 (exp -> termino term_op e3 termino q1 .)
    NUMBER          reduce using rule 50 (exp -> termino term_op e3 termino q1 .)
    CENTER          reduce using rule 50 (exp -> termino term_op e3 termino q1 .)
    FORWARD         reduce using rule 50 (exp -> termino term_op e3 termino q1 .)
    RIGHT           reduce using rule 50 (exp -> termino term_op e3 termino q1 .)
    LEFT            reduce using rule 50 (exp -> termino term_op e3 termino q1 .)
    END             reduce using rule 50 (exp -> termino term_op e3 termino q1 .)
    ELSE            reduce using rule 50 (exp -> termino term_op e3 termino q1 .)
    OR              reduce using rule 50 (exp -> termino term_op e3 termino q1 .)
    AND             reduce using rule 50 (exp -> termino term_op e3 termino q1 .)
    CLOSE_PTH       reduce using rule 50 (exp -> termino term_op e3 termino q1 .)
    COMMA           reduce using rule 50 (exp -> termino term_op e3 termino q1 .)
    SUB             reduce using rule 50 (exp -> termino term_op e3 termino q1 .)
    SUM             reduce using rule 50 (exp -> termino term_op e3 termino q1 .)
    CLOSE_SQR       reduce using rule 50 (exp -> termino term_op e3 termino q1 .)


state 167

    (56) termino -> factor fact_op e2 expression q2 .
    SUB             reduce using rule 56 (termino -> factor fact_op e2 expression q2 .)
    SUM             reduce using rule 56 (termino -> factor fact_op e2 expression q2 .)
    EQUAL_TO        reduce using rule 56 (termino -> factor fact_op e2 expression q2 .)
    MORE_OR_EQ_THAN reduce using rule 56 (termino -> factor fact_op e2 expression q2 .)
    LESS_OR_EQ_THAN reduce using rule 56 (termino -> factor fact_op e2 expression q2 .)
    DIFFERENT_TO    reduce using rule 56 (termino -> factor fact_op e2 expression q2 .)
    MORE_THAN       reduce using rule 56 (termino -> factor fact_op e2 expression q2 .)
    LESS_THAN       reduce using rule 56 (termino -> factor fact_op e2 expression q2 .)
    RETURN          reduce using rule 56 (termino -> factor fact_op e2 expression q2 .)
    PEN_DOWN        reduce using rule 56 (termino -> factor fact_op e2 expression q2 .)
    PEN_UP          reduce using rule 56 (termino -> factor fact_op e2 expression q2 .)
    WHILE           reduce using rule 56 (termino -> factor fact_op e2 expression q2 .)
    IF              reduce using rule 56 (termino -> factor fact_op e2 expression q2 .)
    WRITE           reduce using rule 56 (termino -> factor fact_op e2 expression q2 .)
    READ            reduce using rule 56 (termino -> factor fact_op e2 expression q2 .)
    ID              reduce using rule 56 (termino -> factor fact_op e2 expression q2 .)
    BOOL            reduce using rule 56 (termino -> factor fact_op e2 expression q2 .)
    WORD            reduce using rule 56 (termino -> factor fact_op e2 expression q2 .)
    NUMBER          reduce using rule 56 (termino -> factor fact_op e2 expression q2 .)
    CENTER          reduce using rule 56 (termino -> factor fact_op e2 expression q2 .)
    FORWARD         reduce using rule 56 (termino -> factor fact_op e2 expression q2 .)
    RIGHT           reduce using rule 56 (termino -> factor fact_op e2 expression q2 .)
    LEFT            reduce using rule 56 (termino -> factor fact_op e2 expression q2 .)
    END             reduce using rule 56 (termino -> factor fact_op e2 expression q2 .)
    ELSE            reduce using rule 56 (termino -> factor fact_op e2 expression q2 .)
    OR              reduce using rule 56 (termino -> factor fact_op e2 expression q2 .)
    AND             reduce using rule 56 (termino -> factor fact_op e2 expression q2 .)
    CLOSE_PTH       reduce using rule 56 (termino -> factor fact_op e2 expression q2 .)
    COMMA           reduce using rule 56 (termino -> factor fact_op e2 expression q2 .)
    CLOSE_SQR       reduce using rule 56 (termino -> factor fact_op e2 expression q2 .)


state 168

    (87) matrix -> OPEN_SQR . expression CLOSE_SQR
    (45) expression -> . exp q4
    (46) expression -> . exp rel_op exp q4
    (49) exp -> . termino q1
    (50) exp -> . termino term_op e3 termino q1
    (55) termino -> . factor q2
    (56) termino -> . factor fact_op e2 expression q2
    (62) factor -> . var_cte e1
    (63) factor -> . open_pth expression close_pth
    (38) var_cte -> . func_call
    (39) var_cte -> . cte_bool
    (40) var_cte -> . CTE_STR
    (41) var_cte -> . CTE_NUM
    (42) var_cte -> . variable
    (65) open_pth -> . OPEN_PTH
    (75) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (43) cte_bool -> . FALSE
    (44) cte_bool -> . TRUE
    (83) variable -> . ID array
    CTE_STR         shift and go to state 72
    CTE_NUM         shift and go to state 73
    OPEN_PTH        shift and go to state 75
    ID              shift and go to state 76
    FALSE           shift and go to state 77
    TRUE            shift and go to state 78

    expression                     shift and go to state 183
    exp                            shift and go to state 65
    termino                        shift and go to state 66
    factor                         shift and go to state 67
    var_cte                        shift and go to state 68
    open_pth                       shift and go to state 69
    func_call                      shift and go to state 70
    cte_bool                       shift and go to state 71
    variable                       shift and go to state 74

state 169

    (85) array -> OPEN_SQR expression CLOSE_SQR matrix .
    DIV             reduce using rule 85 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    MULT            reduce using rule 85 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    SUB             reduce using rule 85 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    SUM             reduce using rule 85 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    EQUAL_TO        reduce using rule 85 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    MORE_OR_EQ_THAN reduce using rule 85 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    LESS_OR_EQ_THAN reduce using rule 85 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    DIFFERENT_TO    reduce using rule 85 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    MORE_THAN       reduce using rule 85 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    LESS_THAN       reduce using rule 85 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    RETURN          reduce using rule 85 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    PEN_DOWN        reduce using rule 85 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    PEN_UP          reduce using rule 85 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    WHILE           reduce using rule 85 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    IF              reduce using rule 85 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    WRITE           reduce using rule 85 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    READ            reduce using rule 85 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    ID              reduce using rule 85 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    BOOL            reduce using rule 85 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    WORD            reduce using rule 85 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    NUMBER          reduce using rule 85 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    CENTER          reduce using rule 85 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    FORWARD         reduce using rule 85 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    RIGHT           reduce using rule 85 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    LEFT            reduce using rule 85 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    END             reduce using rule 85 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    ELSE            reduce using rule 85 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    OR              reduce using rule 85 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    AND             reduce using rule 85 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    CLOSE_PTH       reduce using rule 85 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    COMMA           reduce using rule 85 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    CLOSE_SQR       reduce using rule 85 (array -> OPEN_SQR expression CLOSE_SQR matrix .)


state 170

    (86) matrix -> empty .
    DIV             reduce using rule 86 (matrix -> empty .)
    MULT            reduce using rule 86 (matrix -> empty .)
    SUB             reduce using rule 86 (matrix -> empty .)
    SUM             reduce using rule 86 (matrix -> empty .)
    EQUAL_TO        reduce using rule 86 (matrix -> empty .)
    MORE_OR_EQ_THAN reduce using rule 86 (matrix -> empty .)
    LESS_OR_EQ_THAN reduce using rule 86 (matrix -> empty .)
    DIFFERENT_TO    reduce using rule 86 (matrix -> empty .)
    MORE_THAN       reduce using rule 86 (matrix -> empty .)
    LESS_THAN       reduce using rule 86 (matrix -> empty .)
    RETURN          reduce using rule 86 (matrix -> empty .)
    PEN_DOWN        reduce using rule 86 (matrix -> empty .)
    PEN_UP          reduce using rule 86 (matrix -> empty .)
    WHILE           reduce using rule 86 (matrix -> empty .)
    IF              reduce using rule 86 (matrix -> empty .)
    WRITE           reduce using rule 86 (matrix -> empty .)
    READ            reduce using rule 86 (matrix -> empty .)
    ID              reduce using rule 86 (matrix -> empty .)
    BOOL            reduce using rule 86 (matrix -> empty .)
    WORD            reduce using rule 86 (matrix -> empty .)
    NUMBER          reduce using rule 86 (matrix -> empty .)
    CENTER          reduce using rule 86 (matrix -> empty .)
    FORWARD         reduce using rule 86 (matrix -> empty .)
    RIGHT           reduce using rule 86 (matrix -> empty .)
    LEFT            reduce using rule 86 (matrix -> empty .)
    END             reduce using rule 86 (matrix -> empty .)
    ELSE            reduce using rule 86 (matrix -> empty .)
    OR              reduce using rule 86 (matrix -> empty .)
    AND             reduce using rule 86 (matrix -> empty .)
    CLOSE_PTH       reduce using rule 86 (matrix -> empty .)
    COMMA           reduce using rule 86 (matrix -> empty .)
    CLOSE_SQR       reduce using rule 86 (matrix -> empty .)


state 171

    (75) func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .
    RETURN          reduce using rule 75 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    PEN_DOWN        reduce using rule 75 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    PEN_UP          reduce using rule 75 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    WHILE           reduce using rule 75 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    IF              reduce using rule 75 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    WRITE           reduce using rule 75 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    READ            reduce using rule 75 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    ID              reduce using rule 75 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    BOOL            reduce using rule 75 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    WORD            reduce using rule 75 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    NUMBER          reduce using rule 75 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    CENTER          reduce using rule 75 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    FORWARD         reduce using rule 75 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    RIGHT           reduce using rule 75 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    LEFT            reduce using rule 75 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    END             reduce using rule 75 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    ELSE            reduce using rule 75 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    DIV             reduce using rule 75 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    MULT            reduce using rule 75 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    SUB             reduce using rule 75 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    SUM             reduce using rule 75 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    EQUAL_TO        reduce using rule 75 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    MORE_OR_EQ_THAN reduce using rule 75 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    LESS_OR_EQ_THAN reduce using rule 75 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    DIFFERENT_TO    reduce using rule 75 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    MORE_THAN       reduce using rule 75 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    LESS_THAN       reduce using rule 75 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    OR              reduce using rule 75 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    AND             reduce using rule 75 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    CLOSE_PTH       reduce using rule 75 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    COMMA           reduce using rule 75 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    CLOSE_SQR       reduce using rule 75 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)


state 172

    (34) var_assignation -> ID e5 assign e6 expression q3 .
    RETURN          reduce using rule 34 (var_assignation -> ID e5 assign e6 expression q3 .)
    PEN_DOWN        reduce using rule 34 (var_assignation -> ID e5 assign e6 expression q3 .)
    PEN_UP          reduce using rule 34 (var_assignation -> ID e5 assign e6 expression q3 .)
    WHILE           reduce using rule 34 (var_assignation -> ID e5 assign e6 expression q3 .)
    IF              reduce using rule 34 (var_assignation -> ID e5 assign e6 expression q3 .)
    WRITE           reduce using rule 34 (var_assignation -> ID e5 assign e6 expression q3 .)
    READ            reduce using rule 34 (var_assignation -> ID e5 assign e6 expression q3 .)
    ID              reduce using rule 34 (var_assignation -> ID e5 assign e6 expression q3 .)
    BOOL            reduce using rule 34 (var_assignation -> ID e5 assign e6 expression q3 .)
    WORD            reduce using rule 34 (var_assignation -> ID e5 assign e6 expression q3 .)
    NUMBER          reduce using rule 34 (var_assignation -> ID e5 assign e6 expression q3 .)
    CENTER          reduce using rule 34 (var_assignation -> ID e5 assign e6 expression q3 .)
    FORWARD         reduce using rule 34 (var_assignation -> ID e5 assign e6 expression q3 .)
    RIGHT           reduce using rule 34 (var_assignation -> ID e5 assign e6 expression q3 .)
    LEFT            reduce using rule 34 (var_assignation -> ID e5 assign e6 expression q3 .)
    END             reduce using rule 34 (var_assignation -> ID e5 assign e6 expression q3 .)
    ELSE            reduce using rule 34 (var_assignation -> ID e5 assign e6 expression q3 .)


state 173

    (81) multiple_fc_param -> COMMA func_call_param .
    CLOSE_PTH       reduce using rule 81 (multiple_fc_param -> COMMA func_call_param .)


state 174

    (98) while_stmnt -> WHILE w1 con_expression w2 stmnt w3 . END
    END             shift and go to state 184


state 175

    (91) if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .
    RETURN          reduce using rule 91 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)
    PEN_DOWN        reduce using rule 91 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)
    PEN_UP          reduce using rule 91 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)
    WHILE           reduce using rule 91 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)
    IF              reduce using rule 91 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)
    WRITE           reduce using rule 91 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)
    READ            reduce using rule 91 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)
    ID              reduce using rule 91 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)
    BOOL            reduce using rule 91 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)
    WORD            reduce using rule 91 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)
    NUMBER          reduce using rule 91 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)
    CENTER          reduce using rule 91 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)
    FORWARD         reduce using rule 91 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)
    RIGHT           reduce using rule 91 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)
    LEFT            reduce using rule 91 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)
    END             reduce using rule 91 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)
    ELSE            reduce using rule 91 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)


state 176

    (94) else_stmnt -> END .
    RETURN          reduce using rule 94 (else_stmnt -> END .)
    PEN_DOWN        reduce using rule 94 (else_stmnt -> END .)
    PEN_UP          reduce using rule 94 (else_stmnt -> END .)
    WHILE           reduce using rule 94 (else_stmnt -> END .)
    IF              reduce using rule 94 (else_stmnt -> END .)
    WRITE           reduce using rule 94 (else_stmnt -> END .)
    READ            reduce using rule 94 (else_stmnt -> END .)
    ID              reduce using rule 94 (else_stmnt -> END .)
    BOOL            reduce using rule 94 (else_stmnt -> END .)
    WORD            reduce using rule 94 (else_stmnt -> END .)
    NUMBER          reduce using rule 94 (else_stmnt -> END .)
    CENTER          reduce using rule 94 (else_stmnt -> END .)
    FORWARD         reduce using rule 94 (else_stmnt -> END .)
    RIGHT           reduce using rule 94 (else_stmnt -> END .)
    LEFT            reduce using rule 94 (else_stmnt -> END .)
    END             reduce using rule 94 (else_stmnt -> END .)
    ELSE            reduce using rule 94 (else_stmnt -> END .)


state 177

    (95) else_stmnt -> ELSE . if3 stmnt if4 END
    (96) if3 -> .
    RETURN          reduce using rule 96 (if3 -> .)
    PEN_DOWN        reduce using rule 96 (if3 -> .)
    PEN_UP          reduce using rule 96 (if3 -> .)
    WHILE           reduce using rule 96 (if3 -> .)
    IF              reduce using rule 96 (if3 -> .)
    WRITE           reduce using rule 96 (if3 -> .)
    READ            reduce using rule 96 (if3 -> .)
    ID              reduce using rule 96 (if3 -> .)
    BOOL            reduce using rule 96 (if3 -> .)
    WORD            reduce using rule 96 (if3 -> .)
    NUMBER          reduce using rule 96 (if3 -> .)
    CENTER          reduce using rule 96 (if3 -> .)
    FORWARD         reduce using rule 96 (if3 -> .)
    RIGHT           reduce using rule 96 (if3 -> .)
    LEFT            reduce using rule 96 (if3 -> .)
    END             reduce using rule 96 (if3 -> .)

    if3                            shift and go to state 185

state 178

    (103) con_expression -> expression q5 log_op e7 expression . q5
    (105) q5 -> .
    RETURN          reduce using rule 105 (q5 -> .)
    PEN_DOWN        reduce using rule 105 (q5 -> .)
    PEN_UP          reduce using rule 105 (q5 -> .)
    WHILE           reduce using rule 105 (q5 -> .)
    IF              reduce using rule 105 (q5 -> .)
    WRITE           reduce using rule 105 (q5 -> .)
    READ            reduce using rule 105 (q5 -> .)
    ID              reduce using rule 105 (q5 -> .)
    BOOL            reduce using rule 105 (q5 -> .)
    WORD            reduce using rule 105 (q5 -> .)
    NUMBER          reduce using rule 105 (q5 -> .)
    CENTER          reduce using rule 105 (q5 -> .)
    FORWARD         reduce using rule 105 (q5 -> .)
    RIGHT           reduce using rule 105 (q5 -> .)
    LEFT            reduce using rule 105 (q5 -> .)
    END             reduce using rule 105 (q5 -> .)
    ELSE            reduce using rule 105 (q5 -> .)

    q5                             shift and go to state 186

state 179

    (11) func_declaration -> FUNC func_type ID fd1 OPEN_PTH parameter CLOSE_PTH stmnt . END
    END             shift and go to state 187


state 180

    (18) parameter -> var_type ID multiple_parameters .
    CLOSE_PTH       reduce using rule 18 (parameter -> var_type ID multiple_parameters .)


state 181

    (19) multiple_parameters -> empty .
    CLOSE_PTH       reduce using rule 19 (multiple_parameters -> empty .)


state 182

    (20) multiple_parameters -> COMMA . parameter
    (17) parameter -> . empty
    (18) parameter -> . var_type ID multiple_parameters
    (114) empty -> .
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    CLOSE_PTH       reduce using rule 114 (empty -> .)
    BOOL            shift and go to state 8
    WORD            shift and go to state 9
    NUMBER          shift and go to state 10

    parameter                      shift and go to state 188
    empty                          shift and go to state 149
    var_type                       shift and go to state 150

state 183

    (87) matrix -> OPEN_SQR expression . CLOSE_SQR
    CLOSE_SQR       shift and go to state 189


state 184

    (98) while_stmnt -> WHILE w1 con_expression w2 stmnt w3 END .
    RETURN          reduce using rule 98 (while_stmnt -> WHILE w1 con_expression w2 stmnt w3 END .)
    PEN_DOWN        reduce using rule 98 (while_stmnt -> WHILE w1 con_expression w2 stmnt w3 END .)
    PEN_UP          reduce using rule 98 (while_stmnt -> WHILE w1 con_expression w2 stmnt w3 END .)
    WHILE           reduce using rule 98 (while_stmnt -> WHILE w1 con_expression w2 stmnt w3 END .)
    IF              reduce using rule 98 (while_stmnt -> WHILE w1 con_expression w2 stmnt w3 END .)
    WRITE           reduce using rule 98 (while_stmnt -> WHILE w1 con_expression w2 stmnt w3 END .)
    READ            reduce using rule 98 (while_stmnt -> WHILE w1 con_expression w2 stmnt w3 END .)
    ID              reduce using rule 98 (while_stmnt -> WHILE w1 con_expression w2 stmnt w3 END .)
    BOOL            reduce using rule 98 (while_stmnt -> WHILE w1 con_expression w2 stmnt w3 END .)
    WORD            reduce using rule 98 (while_stmnt -> WHILE w1 con_expression w2 stmnt w3 END .)
    NUMBER          reduce using rule 98 (while_stmnt -> WHILE w1 con_expression w2 stmnt w3 END .)
    CENTER          reduce using rule 98 (while_stmnt -> WHILE w1 con_expression w2 stmnt w3 END .)
    FORWARD         reduce using rule 98 (while_stmnt -> WHILE w1 con_expression w2 stmnt w3 END .)
    RIGHT           reduce using rule 98 (while_stmnt -> WHILE w1 con_expression w2 stmnt w3 END .)
    LEFT            reduce using rule 98 (while_stmnt -> WHILE w1 con_expression w2 stmnt w3 END .)
    END             reduce using rule 98 (while_stmnt -> WHILE w1 con_expression w2 stmnt w3 END .)
    ELSE            reduce using rule 98 (while_stmnt -> WHILE w1 con_expression w2 stmnt w3 END .)


state 185

    (95) else_stmnt -> ELSE if3 . stmnt if4 END
    (21) stmnt -> . empty
    (22) stmnt -> . returnf stmnt
    (23) stmnt -> . var_declaration_func stmnt
    (24) stmnt -> . pen_func stmnt
    (25) stmnt -> . move_func stmnt
    (26) stmnt -> . while_stmnt stmnt
    (27) stmnt -> . if_stmnt stmnt
    (28) stmnt -> . write stmnt
    (29) stmnt -> . read stmnt
    (30) stmnt -> . func_call stmnt
    (31) stmnt -> . var_assignation stmnt
    (114) empty -> .
    (32) returnf -> . RETURN expression
    (33) var_declaration_func -> . var_type ID multiple_vars
    (111) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (112) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (106) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (98) while_stmnt -> . WHILE w1 con_expression w2 stmnt w3 END
    (91) if_stmnt -> . IF con_expression if1 stmnt if2 else_stmnt
    (90) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (82) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (75) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (34) var_assignation -> . ID e5 assign e6 expression q3
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (107) move_type -> . CENTER
    (108) move_type -> . FORWARD
    (109) move_type -> . RIGHT
    (110) move_type -> . LEFT
    END             reduce using rule 114 (empty -> .)
    RETURN          shift and go to state 37
    PEN_DOWN        shift and go to state 40
    PEN_UP          shift and go to state 41
    WHILE           shift and go to state 43
    IF              shift and go to state 44
    WRITE           shift and go to state 45
    READ            shift and go to state 46
    ID              shift and go to state 39
    BOOL            shift and go to state 8
    WORD            shift and go to state 9
    NUMBER          shift and go to state 10
    CENTER          shift and go to state 47
    FORWARD         shift and go to state 48
    RIGHT           shift and go to state 49
    LEFT            shift and go to state 50

    stmnt                          shift and go to state 190
    empty                          shift and go to state 26
    returnf                        shift and go to state 27
    var_declaration_func           shift and go to state 28
    pen_func                       shift and go to state 29
    move_func                      shift and go to state 30
    while_stmnt                    shift and go to state 31
    if_stmnt                       shift and go to state 32
    write                          shift and go to state 33
    read                           shift and go to state 34
    func_call                      shift and go to state 35
    var_assignation                shift and go to state 36
    var_type                       shift and go to state 38
    move_type                      shift and go to state 42

state 186

    (103) con_expression -> expression q5 log_op e7 expression q5 .
    RETURN          reduce using rule 103 (con_expression -> expression q5 log_op e7 expression q5 .)
    PEN_DOWN        reduce using rule 103 (con_expression -> expression q5 log_op e7 expression q5 .)
    PEN_UP          reduce using rule 103 (con_expression -> expression q5 log_op e7 expression q5 .)
    WHILE           reduce using rule 103 (con_expression -> expression q5 log_op e7 expression q5 .)
    IF              reduce using rule 103 (con_expression -> expression q5 log_op e7 expression q5 .)
    WRITE           reduce using rule 103 (con_expression -> expression q5 log_op e7 expression q5 .)
    READ            reduce using rule 103 (con_expression -> expression q5 log_op e7 expression q5 .)
    ID              reduce using rule 103 (con_expression -> expression q5 log_op e7 expression q5 .)
    BOOL            reduce using rule 103 (con_expression -> expression q5 log_op e7 expression q5 .)
    WORD            reduce using rule 103 (con_expression -> expression q5 log_op e7 expression q5 .)
    NUMBER          reduce using rule 103 (con_expression -> expression q5 log_op e7 expression q5 .)
    CENTER          reduce using rule 103 (con_expression -> expression q5 log_op e7 expression q5 .)
    FORWARD         reduce using rule 103 (con_expression -> expression q5 log_op e7 expression q5 .)
    RIGHT           reduce using rule 103 (con_expression -> expression q5 log_op e7 expression q5 .)
    LEFT            reduce using rule 103 (con_expression -> expression q5 log_op e7 expression q5 .)
    END             reduce using rule 103 (con_expression -> expression q5 log_op e7 expression q5 .)
    ELSE            reduce using rule 103 (con_expression -> expression q5 log_op e7 expression q5 .)


state 187

    (11) func_declaration -> FUNC func_type ID fd1 OPEN_PTH parameter CLOSE_PTH stmnt END .
    MAIN            reduce using rule 11 (func_declaration -> FUNC func_type ID fd1 OPEN_PTH parameter CLOSE_PTH stmnt END .)


state 188

    (20) multiple_parameters -> COMMA parameter .
    CLOSE_PTH       reduce using rule 20 (multiple_parameters -> COMMA parameter .)


state 189

    (87) matrix -> OPEN_SQR expression CLOSE_SQR .
    DIV             reduce using rule 87 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    MULT            reduce using rule 87 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    SUB             reduce using rule 87 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    SUM             reduce using rule 87 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    EQUAL_TO        reduce using rule 87 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    MORE_OR_EQ_THAN reduce using rule 87 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    LESS_OR_EQ_THAN reduce using rule 87 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    DIFFERENT_TO    reduce using rule 87 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    MORE_THAN       reduce using rule 87 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    LESS_THAN       reduce using rule 87 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    RETURN          reduce using rule 87 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    PEN_DOWN        reduce using rule 87 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    PEN_UP          reduce using rule 87 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    WHILE           reduce using rule 87 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    IF              reduce using rule 87 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    WRITE           reduce using rule 87 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    READ            reduce using rule 87 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    ID              reduce using rule 87 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    BOOL            reduce using rule 87 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    WORD            reduce using rule 87 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    NUMBER          reduce using rule 87 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    CENTER          reduce using rule 87 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    FORWARD         reduce using rule 87 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    RIGHT           reduce using rule 87 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    LEFT            reduce using rule 87 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    END             reduce using rule 87 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    ELSE            reduce using rule 87 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    OR              reduce using rule 87 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    AND             reduce using rule 87 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    CLOSE_PTH       reduce using rule 87 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    COMMA           reduce using rule 87 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    CLOSE_SQR       reduce using rule 87 (matrix -> OPEN_SQR expression CLOSE_SQR .)


state 190

    (95) else_stmnt -> ELSE if3 stmnt . if4 END
    (97) if4 -> .
    END             reduce using rule 97 (if4 -> .)

    if4                            shift and go to state 191

state 191

    (95) else_stmnt -> ELSE if3 stmnt if4 . END
    END             shift and go to state 192


state 192

    (95) else_stmnt -> ELSE if3 stmnt if4 END .
    RETURN          reduce using rule 95 (else_stmnt -> ELSE if3 stmnt if4 END .)
    PEN_DOWN        reduce using rule 95 (else_stmnt -> ELSE if3 stmnt if4 END .)
    PEN_UP          reduce using rule 95 (else_stmnt -> ELSE if3 stmnt if4 END .)
    WHILE           reduce using rule 95 (else_stmnt -> ELSE if3 stmnt if4 END .)
    IF              reduce using rule 95 (else_stmnt -> ELSE if3 stmnt if4 END .)
    WRITE           reduce using rule 95 (else_stmnt -> ELSE if3 stmnt if4 END .)
    READ            reduce using rule 95 (else_stmnt -> ELSE if3 stmnt if4 END .)
    ID              reduce using rule 95 (else_stmnt -> ELSE if3 stmnt if4 END .)
    BOOL            reduce using rule 95 (else_stmnt -> ELSE if3 stmnt if4 END .)
    WORD            reduce using rule 95 (else_stmnt -> ELSE if3 stmnt if4 END .)
    NUMBER          reduce using rule 95 (else_stmnt -> ELSE if3 stmnt if4 END .)
    CENTER          reduce using rule 95 (else_stmnt -> ELSE if3 stmnt if4 END .)
    FORWARD         reduce using rule 95 (else_stmnt -> ELSE if3 stmnt if4 END .)
    RIGHT           reduce using rule 95 (else_stmnt -> ELSE if3 stmnt if4 END .)
    LEFT            reduce using rule 95 (else_stmnt -> ELSE if3 stmnt if4 END .)
    END             reduce using rule 95 (else_stmnt -> ELSE if3 stmnt if4 END .)
    ELSE            reduce using rule 95 (else_stmnt -> ELSE if3 stmnt if4 END .)


Conflicts:

shift/reduce conflict for EQUAL_TO in state 65 resolved as shift
shift/reduce conflict for MORE_OR_EQ_THAN in state 65 resolved as shift
shift/reduce conflict for LESS_OR_EQ_THAN in state 65 resolved as shift
shift/reduce conflict for DIFFERENT_TO in state 65 resolved as shift
shift/reduce conflict for MORE_THAN in state 65 resolved as shift
shift/reduce conflict for LESS_THAN in state 65 resolved as shift
shift/reduce conflict for SUB in state 66 resolved as shift
shift/reduce conflict for SUM in state 66 resolved as shift