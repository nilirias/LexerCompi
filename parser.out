Grammar:

Rule 0     S' -> program
Rule 1     program -> DRAWING ID declaration
Rule 2     declaration -> var_declaration func_declaration main
Rule 3     var_declaration -> var_type ID multiple_var
Rule 4     multiple_var -> empty
Rule 5     multiple_var -> COMMA ID multiple_var
Rule 6     var_type -> BOOL
Rule 7     var_type -> WORD
Rule 8     var_type -> NUMBER
Rule 9     func_declaration -> empty
Rule 10    func_declaration -> func_type FUNC ID OPEN_PTH parameter CLOSE_PTH stmnt END
Rule 11    func_type -> BOOL
Rule 12    func_type -> WORD
Rule 13    func_type -> NUMBER
Rule 14    func_type -> VOID
Rule 15    parameter -> empty
Rule 16    parameter -> var_type ID multiple_parameters
Rule 17    multiple_parameters -> empty
Rule 18    multiple_parameters -> COMMA parameter
Rule 19    stmnt -> empty
Rule 20    stmnt -> var_declaration_func stmnt
Rule 21    stmnt -> pen_func stmnt
Rule 22    stmnt -> move_func stmnt
Rule 23    stmnt -> while_stmnt stmnt
Rule 24    stmnt -> if_stmnt stmnt
Rule 25    stmnt -> write stmnt
Rule 26    stmnt -> read stmnt
Rule 27    stmnt -> func_call stmnt
Rule 28    stmnt -> var_assignation stmnt
Rule 29    var_declaration_func -> var_type ID multiple_vars
Rule 30    var_assignation -> id assign expression e3
Rule 31    e3 -> <empty>
Rule 32    id -> ID
Rule 33    assign -> ASSIGN
Rule 34    var_cte -> func_call
Rule 35    var_cte -> cte_bool
Rule 36    var_cte -> CTE_STR
Rule 37    var_cte -> CTE_NUM
Rule 38    var_cte -> variable
Rule 39    cte_bool -> FALSE
Rule 40    cte_bool -> TRUE
Rule 41    expression -> exp
Rule 42    expression -> exp rel_op exp
Rule 43    exp -> termino e1
Rule 44    exp -> termino term_op termino e1
Rule 45    e1 -> <empty>
Rule 46    term_op -> SUB
Rule 47    term_op -> SUM
Rule 48    termino -> factor e2
Rule 49    termino -> factor fact_op factor e2
Rule 50    e2 -> <empty>
Rule 51    fact_op -> DIV
Rule 52    fact_op -> MULT
Rule 53    factor -> expression
Rule 54    factor -> term_op var_cte
Rule 55    factor -> var_cte
Rule 56    factor -> open_pth expression close_pth
Rule 57    open_pth -> OPEN_PTH
Rule 58    close_pth -> CLOSE_PTH
Rule 59    log_op -> OR
Rule 60    log_op -> AND
Rule 61    rel_op -> EQUAL_TO
Rule 62    rel_op -> MORE_OR_EQ_THAN
Rule 63    rel_op -> LESS_OR_EQ_THAN
Rule 64    rel_op -> DIFFERENT_TO
Rule 65    rel_op -> MORE_THAN
Rule 66    rel_op -> LESS_THAN
Rule 67    func_call -> ID OPEN_PTH func_call_param CLOSE_PTH
Rule 68    func_call_param -> expression multiple_fc_param
Rule 69    multiple_fc_param -> empty
Rule 70    multiple_fc_param -> COMMA func_call_param
Rule 71    read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH
Rule 72    variable -> ID array
Rule 73    array -> empty
Rule 74    array -> OPEN_SQR expression CLOSE_SQR matrix
Rule 75    matrix -> empty
Rule 76    matrix -> OPEN_SQR expression CLOSE_SQR
Rule 77    multiple_vars -> empty
Rule 78    multiple_vars -> COMMA variable
Rule 79    write -> WRITE OPEN_PTH expression CLOSE_PTH
Rule 80    if_stmnt -> IF con_expression stmnt else_stmnt
Rule 81    else_stmnt -> END
Rule 82    else_stmnt -> ELSE stmnt END
Rule 83    while_stmnt -> WHILE con_expression stmnt END
Rule 84    con_expression -> expression log_op expression
Rule 85    move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH
Rule 86    move_type -> CENTER
Rule 87    move_type -> FORWARD
Rule 88    move_type -> RIGHT
Rule 89    move_type -> LEFT
Rule 90    pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH
Rule 91    pen_func -> PEN_UP OPEN_PTH CLOSE_PTH
Rule 92    main -> MAIN stmnt END
Rule 93    empty -> <empty>

Terminals, with rules where they appear:

AND                  : 60
ASSIGN               : 33
BOOL                 : 6 11
CENTER               : 86
CLOSE_PTH            : 10 58 67 71 79 85 90 91
CLOSE_SQR            : 74 76
COMMA                : 5 18 70 78
CTE_NUM              : 37
CTE_STR              : 36
DIFFERENT_TO         : 64
DIV                  : 51
DRAWING              : 1
ELSE                 : 82
END                  : 10 81 82 83 92
EQUAL_TO             : 61
FALSE                : 39
FORWARD              : 87
FUNC                 : 10
ID                   : 1 3 5 10 16 29 32 67 72
IF                   : 80
LEFT                 : 89
LESS_OR_EQ_THAN      : 63
LESS_THAN            : 66
MAIN                 : 92
MORE_OR_EQ_THAN      : 62
MORE_THAN            : 65
MULT                 : 52
NUMBER               : 8 13
OPEN_PTH             : 10 57 67 71 79 85 90 91
OPEN_SQR             : 74 76
OR                   : 59
PEN_DOWN             : 90
PEN_UP               : 91
READ                 : 71
RIGHT                : 88
SUB                  : 46
SUM                  : 47
TRUE                 : 40
VOID                 : 14
WHILE                : 83
WORD                 : 7 12
WRITE                : 79
error                : 

Nonterminals, with rules where they appear:

array                : 72
assign               : 30
close_pth            : 56
con_expression       : 80 83
cte_bool             : 35
declaration          : 1
e1                   : 43 44
e2                   : 48 49
e3                   : 30
else_stmnt           : 80
empty                : 4 9 15 17 19 69 73 75 77
exp                  : 41 42 42
expression           : 30 53 56 68 74 76 79 84 84
fact_op              : 49
factor               : 48 49 49
func_call            : 27 34
func_call_param      : 67 70 85
func_declaration     : 2
func_type            : 10
id                   : 30
if_stmnt             : 24
log_op               : 84
main                 : 2
matrix               : 74
move_func            : 22
move_type            : 85
multiple_fc_param    : 68
multiple_parameters  : 16
multiple_var         : 3 5
multiple_vars        : 29 71
open_pth             : 56
parameter            : 10 18
pen_func             : 21
program              : 0
read                 : 26
rel_op               : 42
stmnt                : 10 20 21 22 23 24 25 26 27 28 80 82 83 92
term_op              : 44 54
termino              : 43 44 44
var_assignation      : 28
var_cte              : 54 55
var_declaration      : 2
var_declaration_func : 20
var_type             : 3 16 29
variable             : 38 71 78
while_stmnt          : 23
write                : 25


state 0

    (0) S' -> . program
    (1) program -> . DRAWING ID declaration
    DRAWING         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .


state 2

    (1) program -> DRAWING . ID declaration
    ID              shift and go to state 3


state 3

    (1) program -> DRAWING ID . declaration
    (2) declaration -> . var_declaration func_declaration main
    (3) var_declaration -> . var_type ID multiple_var
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9

    declaration                    shift and go to state 4
    var_declaration                shift and go to state 5
    var_type                       shift and go to state 6

state 4

    (1) program -> DRAWING ID declaration .
    $end            reduce using rule 1 (program -> DRAWING ID declaration .)


state 5

    (2) declaration -> var_declaration . func_declaration main
    (9) func_declaration -> . empty
    (10) func_declaration -> . func_type FUNC ID OPEN_PTH parameter CLOSE_PTH stmnt END
    (93) empty -> .
    (11) func_type -> . BOOL
    (12) func_type -> . WORD
    (13) func_type -> . NUMBER
    (14) func_type -> . VOID
    MAIN            reduce using rule 93 (empty -> .)
    BOOL            shift and go to state 13
    WORD            shift and go to state 14
    NUMBER          shift and go to state 15
    VOID            shift and go to state 16

    func_declaration               shift and go to state 10
    empty                          shift and go to state 11
    func_type                      shift and go to state 12

state 6

    (3) var_declaration -> var_type . ID multiple_var
    ID              shift and go to state 17


state 7

    (6) var_type -> BOOL .
    ID              reduce using rule 6 (var_type -> BOOL .)


state 8

    (7) var_type -> WORD .
    ID              reduce using rule 7 (var_type -> WORD .)


state 9

    (8) var_type -> NUMBER .
    ID              reduce using rule 8 (var_type -> NUMBER .)


state 10

    (2) declaration -> var_declaration func_declaration . main
    (92) main -> . MAIN stmnt END
    MAIN            shift and go to state 19

    main                           shift and go to state 18

state 11

    (9) func_declaration -> empty .
    MAIN            reduce using rule 9 (func_declaration -> empty .)


state 12

    (10) func_declaration -> func_type . FUNC ID OPEN_PTH parameter CLOSE_PTH stmnt END
    FUNC            shift and go to state 20


state 13

    (11) func_type -> BOOL .
    FUNC            reduce using rule 11 (func_type -> BOOL .)


state 14

    (12) func_type -> WORD .
    FUNC            reduce using rule 12 (func_type -> WORD .)


state 15

    (13) func_type -> NUMBER .
    FUNC            reduce using rule 13 (func_type -> NUMBER .)


state 16

    (14) func_type -> VOID .
    FUNC            reduce using rule 14 (func_type -> VOID .)


state 17

    (3) var_declaration -> var_type ID . multiple_var
    (4) multiple_var -> . empty
    (5) multiple_var -> . COMMA ID multiple_var
    (93) empty -> .
    COMMA           shift and go to state 23
    BOOL            reduce using rule 93 (empty -> .)
    WORD            reduce using rule 93 (empty -> .)
    NUMBER          reduce using rule 93 (empty -> .)
    VOID            reduce using rule 93 (empty -> .)
    MAIN            reduce using rule 93 (empty -> .)

    multiple_var                   shift and go to state 21
    empty                          shift and go to state 22

state 18

    (2) declaration -> var_declaration func_declaration main .
    $end            reduce using rule 2 (declaration -> var_declaration func_declaration main .)


state 19

    (92) main -> MAIN . stmnt END
    (19) stmnt -> . empty
    (20) stmnt -> . var_declaration_func stmnt
    (21) stmnt -> . pen_func stmnt
    (22) stmnt -> . move_func stmnt
    (23) stmnt -> . while_stmnt stmnt
    (24) stmnt -> . if_stmnt stmnt
    (25) stmnt -> . write stmnt
    (26) stmnt -> . read stmnt
    (27) stmnt -> . func_call stmnt
    (28) stmnt -> . var_assignation stmnt
    (93) empty -> .
    (29) var_declaration_func -> . var_type ID multiple_vars
    (90) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (91) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (85) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (83) while_stmnt -> . WHILE con_expression stmnt END
    (80) if_stmnt -> . IF con_expression stmnt else_stmnt
    (79) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (71) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (67) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (30) var_assignation -> . id assign expression e3
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    (86) move_type -> . CENTER
    (87) move_type -> . FORWARD
    (88) move_type -> . RIGHT
    (89) move_type -> . LEFT
    (32) id -> . ID
    END             reduce using rule 93 (empty -> .)
    PEN_DOWN        shift and go to state 37
    PEN_UP          shift and go to state 38
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    WRITE           shift and go to state 42
    READ            shift and go to state 43
    ID              shift and go to state 36
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9
    CENTER          shift and go to state 45
    FORWARD         shift and go to state 46
    RIGHT           shift and go to state 47
    LEFT            shift and go to state 48

    stmnt                          shift and go to state 24
    empty                          shift and go to state 25
    var_declaration_func           shift and go to state 26
    pen_func                       shift and go to state 27
    move_func                      shift and go to state 28
    while_stmnt                    shift and go to state 29
    if_stmnt                       shift and go to state 30
    write                          shift and go to state 31
    read                           shift and go to state 32
    func_call                      shift and go to state 33
    var_assignation                shift and go to state 34
    var_type                       shift and go to state 35
    move_type                      shift and go to state 39
    id                             shift and go to state 44

state 20

    (10) func_declaration -> func_type FUNC . ID OPEN_PTH parameter CLOSE_PTH stmnt END
    ID              shift and go to state 49


state 21

    (3) var_declaration -> var_type ID multiple_var .
    BOOL            reduce using rule 3 (var_declaration -> var_type ID multiple_var .)
    WORD            reduce using rule 3 (var_declaration -> var_type ID multiple_var .)
    NUMBER          reduce using rule 3 (var_declaration -> var_type ID multiple_var .)
    VOID            reduce using rule 3 (var_declaration -> var_type ID multiple_var .)
    MAIN            reduce using rule 3 (var_declaration -> var_type ID multiple_var .)


state 22

    (4) multiple_var -> empty .
    BOOL            reduce using rule 4 (multiple_var -> empty .)
    WORD            reduce using rule 4 (multiple_var -> empty .)
    NUMBER          reduce using rule 4 (multiple_var -> empty .)
    VOID            reduce using rule 4 (multiple_var -> empty .)
    MAIN            reduce using rule 4 (multiple_var -> empty .)


state 23

    (5) multiple_var -> COMMA . ID multiple_var
    ID              shift and go to state 50


state 24

    (92) main -> MAIN stmnt . END
    END             shift and go to state 51


state 25

    (19) stmnt -> empty .
    END             reduce using rule 19 (stmnt -> empty .)
    ELSE            reduce using rule 19 (stmnt -> empty .)


state 26

    (20) stmnt -> var_declaration_func . stmnt
    (19) stmnt -> . empty
    (20) stmnt -> . var_declaration_func stmnt
    (21) stmnt -> . pen_func stmnt
    (22) stmnt -> . move_func stmnt
    (23) stmnt -> . while_stmnt stmnt
    (24) stmnt -> . if_stmnt stmnt
    (25) stmnt -> . write stmnt
    (26) stmnt -> . read stmnt
    (27) stmnt -> . func_call stmnt
    (28) stmnt -> . var_assignation stmnt
    (93) empty -> .
    (29) var_declaration_func -> . var_type ID multiple_vars
    (90) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (91) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (85) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (83) while_stmnt -> . WHILE con_expression stmnt END
    (80) if_stmnt -> . IF con_expression stmnt else_stmnt
    (79) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (71) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (67) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (30) var_assignation -> . id assign expression e3
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    (86) move_type -> . CENTER
    (87) move_type -> . FORWARD
    (88) move_type -> . RIGHT
    (89) move_type -> . LEFT
    (32) id -> . ID
    END             reduce using rule 93 (empty -> .)
    ELSE            reduce using rule 93 (empty -> .)
    PEN_DOWN        shift and go to state 37
    PEN_UP          shift and go to state 38
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    WRITE           shift and go to state 42
    READ            shift and go to state 43
    ID              shift and go to state 36
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9
    CENTER          shift and go to state 45
    FORWARD         shift and go to state 46
    RIGHT           shift and go to state 47
    LEFT            shift and go to state 48

    var_declaration_func           shift and go to state 26
    stmnt                          shift and go to state 52
    empty                          shift and go to state 25
    pen_func                       shift and go to state 27
    move_func                      shift and go to state 28
    while_stmnt                    shift and go to state 29
    if_stmnt                       shift and go to state 30
    write                          shift and go to state 31
    read                           shift and go to state 32
    func_call                      shift and go to state 33
    var_assignation                shift and go to state 34
    var_type                       shift and go to state 35
    move_type                      shift and go to state 39
    id                             shift and go to state 44

state 27

    (21) stmnt -> pen_func . stmnt
    (19) stmnt -> . empty
    (20) stmnt -> . var_declaration_func stmnt
    (21) stmnt -> . pen_func stmnt
    (22) stmnt -> . move_func stmnt
    (23) stmnt -> . while_stmnt stmnt
    (24) stmnt -> . if_stmnt stmnt
    (25) stmnt -> . write stmnt
    (26) stmnt -> . read stmnt
    (27) stmnt -> . func_call stmnt
    (28) stmnt -> . var_assignation stmnt
    (93) empty -> .
    (29) var_declaration_func -> . var_type ID multiple_vars
    (90) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (91) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (85) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (83) while_stmnt -> . WHILE con_expression stmnt END
    (80) if_stmnt -> . IF con_expression stmnt else_stmnt
    (79) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (71) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (67) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (30) var_assignation -> . id assign expression e3
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    (86) move_type -> . CENTER
    (87) move_type -> . FORWARD
    (88) move_type -> . RIGHT
    (89) move_type -> . LEFT
    (32) id -> . ID
    END             reduce using rule 93 (empty -> .)
    ELSE            reduce using rule 93 (empty -> .)
    PEN_DOWN        shift and go to state 37
    PEN_UP          shift and go to state 38
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    WRITE           shift and go to state 42
    READ            shift and go to state 43
    ID              shift and go to state 36
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9
    CENTER          shift and go to state 45
    FORWARD         shift and go to state 46
    RIGHT           shift and go to state 47
    LEFT            shift and go to state 48

    pen_func                       shift and go to state 27
    stmnt                          shift and go to state 53
    empty                          shift and go to state 25
    var_declaration_func           shift and go to state 26
    move_func                      shift and go to state 28
    while_stmnt                    shift and go to state 29
    if_stmnt                       shift and go to state 30
    write                          shift and go to state 31
    read                           shift and go to state 32
    func_call                      shift and go to state 33
    var_assignation                shift and go to state 34
    var_type                       shift and go to state 35
    move_type                      shift and go to state 39
    id                             shift and go to state 44

state 28

    (22) stmnt -> move_func . stmnt
    (19) stmnt -> . empty
    (20) stmnt -> . var_declaration_func stmnt
    (21) stmnt -> . pen_func stmnt
    (22) stmnt -> . move_func stmnt
    (23) stmnt -> . while_stmnt stmnt
    (24) stmnt -> . if_stmnt stmnt
    (25) stmnt -> . write stmnt
    (26) stmnt -> . read stmnt
    (27) stmnt -> . func_call stmnt
    (28) stmnt -> . var_assignation stmnt
    (93) empty -> .
    (29) var_declaration_func -> . var_type ID multiple_vars
    (90) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (91) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (85) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (83) while_stmnt -> . WHILE con_expression stmnt END
    (80) if_stmnt -> . IF con_expression stmnt else_stmnt
    (79) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (71) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (67) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (30) var_assignation -> . id assign expression e3
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    (86) move_type -> . CENTER
    (87) move_type -> . FORWARD
    (88) move_type -> . RIGHT
    (89) move_type -> . LEFT
    (32) id -> . ID
    END             reduce using rule 93 (empty -> .)
    ELSE            reduce using rule 93 (empty -> .)
    PEN_DOWN        shift and go to state 37
    PEN_UP          shift and go to state 38
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    WRITE           shift and go to state 42
    READ            shift and go to state 43
    ID              shift and go to state 36
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9
    CENTER          shift and go to state 45
    FORWARD         shift and go to state 46
    RIGHT           shift and go to state 47
    LEFT            shift and go to state 48

    move_func                      shift and go to state 28
    stmnt                          shift and go to state 54
    empty                          shift and go to state 25
    var_declaration_func           shift and go to state 26
    pen_func                       shift and go to state 27
    while_stmnt                    shift and go to state 29
    if_stmnt                       shift and go to state 30
    write                          shift and go to state 31
    read                           shift and go to state 32
    func_call                      shift and go to state 33
    var_assignation                shift and go to state 34
    var_type                       shift and go to state 35
    move_type                      shift and go to state 39
    id                             shift and go to state 44

state 29

    (23) stmnt -> while_stmnt . stmnt
    (19) stmnt -> . empty
    (20) stmnt -> . var_declaration_func stmnt
    (21) stmnt -> . pen_func stmnt
    (22) stmnt -> . move_func stmnt
    (23) stmnt -> . while_stmnt stmnt
    (24) stmnt -> . if_stmnt stmnt
    (25) stmnt -> . write stmnt
    (26) stmnt -> . read stmnt
    (27) stmnt -> . func_call stmnt
    (28) stmnt -> . var_assignation stmnt
    (93) empty -> .
    (29) var_declaration_func -> . var_type ID multiple_vars
    (90) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (91) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (85) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (83) while_stmnt -> . WHILE con_expression stmnt END
    (80) if_stmnt -> . IF con_expression stmnt else_stmnt
    (79) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (71) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (67) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (30) var_assignation -> . id assign expression e3
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    (86) move_type -> . CENTER
    (87) move_type -> . FORWARD
    (88) move_type -> . RIGHT
    (89) move_type -> . LEFT
    (32) id -> . ID
    END             reduce using rule 93 (empty -> .)
    ELSE            reduce using rule 93 (empty -> .)
    PEN_DOWN        shift and go to state 37
    PEN_UP          shift and go to state 38
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    WRITE           shift and go to state 42
    READ            shift and go to state 43
    ID              shift and go to state 36
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9
    CENTER          shift and go to state 45
    FORWARD         shift and go to state 46
    RIGHT           shift and go to state 47
    LEFT            shift and go to state 48

    while_stmnt                    shift and go to state 29
    stmnt                          shift and go to state 55
    empty                          shift and go to state 25
    var_declaration_func           shift and go to state 26
    pen_func                       shift and go to state 27
    move_func                      shift and go to state 28
    if_stmnt                       shift and go to state 30
    write                          shift and go to state 31
    read                           shift and go to state 32
    func_call                      shift and go to state 33
    var_assignation                shift and go to state 34
    var_type                       shift and go to state 35
    move_type                      shift and go to state 39
    id                             shift and go to state 44

state 30

    (24) stmnt -> if_stmnt . stmnt
    (19) stmnt -> . empty
    (20) stmnt -> . var_declaration_func stmnt
    (21) stmnt -> . pen_func stmnt
    (22) stmnt -> . move_func stmnt
    (23) stmnt -> . while_stmnt stmnt
    (24) stmnt -> . if_stmnt stmnt
    (25) stmnt -> . write stmnt
    (26) stmnt -> . read stmnt
    (27) stmnt -> . func_call stmnt
    (28) stmnt -> . var_assignation stmnt
    (93) empty -> .
    (29) var_declaration_func -> . var_type ID multiple_vars
    (90) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (91) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (85) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (83) while_stmnt -> . WHILE con_expression stmnt END
    (80) if_stmnt -> . IF con_expression stmnt else_stmnt
    (79) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (71) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (67) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (30) var_assignation -> . id assign expression e3
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    (86) move_type -> . CENTER
    (87) move_type -> . FORWARD
    (88) move_type -> . RIGHT
    (89) move_type -> . LEFT
    (32) id -> . ID
    END             reduce using rule 93 (empty -> .)
    ELSE            reduce using rule 93 (empty -> .)
    PEN_DOWN        shift and go to state 37
    PEN_UP          shift and go to state 38
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    WRITE           shift and go to state 42
    READ            shift and go to state 43
    ID              shift and go to state 36
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9
    CENTER          shift and go to state 45
    FORWARD         shift and go to state 46
    RIGHT           shift and go to state 47
    LEFT            shift and go to state 48

    if_stmnt                       shift and go to state 30
    stmnt                          shift and go to state 56
    empty                          shift and go to state 25
    var_declaration_func           shift and go to state 26
    pen_func                       shift and go to state 27
    move_func                      shift and go to state 28
    while_stmnt                    shift and go to state 29
    write                          shift and go to state 31
    read                           shift and go to state 32
    func_call                      shift and go to state 33
    var_assignation                shift and go to state 34
    var_type                       shift and go to state 35
    move_type                      shift and go to state 39
    id                             shift and go to state 44

state 31

    (25) stmnt -> write . stmnt
    (19) stmnt -> . empty
    (20) stmnt -> . var_declaration_func stmnt
    (21) stmnt -> . pen_func stmnt
    (22) stmnt -> . move_func stmnt
    (23) stmnt -> . while_stmnt stmnt
    (24) stmnt -> . if_stmnt stmnt
    (25) stmnt -> . write stmnt
    (26) stmnt -> . read stmnt
    (27) stmnt -> . func_call stmnt
    (28) stmnt -> . var_assignation stmnt
    (93) empty -> .
    (29) var_declaration_func -> . var_type ID multiple_vars
    (90) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (91) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (85) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (83) while_stmnt -> . WHILE con_expression stmnt END
    (80) if_stmnt -> . IF con_expression stmnt else_stmnt
    (79) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (71) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (67) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (30) var_assignation -> . id assign expression e3
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    (86) move_type -> . CENTER
    (87) move_type -> . FORWARD
    (88) move_type -> . RIGHT
    (89) move_type -> . LEFT
    (32) id -> . ID
    END             reduce using rule 93 (empty -> .)
    ELSE            reduce using rule 93 (empty -> .)
    PEN_DOWN        shift and go to state 37
    PEN_UP          shift and go to state 38
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    WRITE           shift and go to state 42
    READ            shift and go to state 43
    ID              shift and go to state 36
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9
    CENTER          shift and go to state 45
    FORWARD         shift and go to state 46
    RIGHT           shift and go to state 47
    LEFT            shift and go to state 48

    write                          shift and go to state 31
    stmnt                          shift and go to state 57
    empty                          shift and go to state 25
    var_declaration_func           shift and go to state 26
    pen_func                       shift and go to state 27
    move_func                      shift and go to state 28
    while_stmnt                    shift and go to state 29
    if_stmnt                       shift and go to state 30
    read                           shift and go to state 32
    func_call                      shift and go to state 33
    var_assignation                shift and go to state 34
    var_type                       shift and go to state 35
    move_type                      shift and go to state 39
    id                             shift and go to state 44

state 32

    (26) stmnt -> read . stmnt
    (19) stmnt -> . empty
    (20) stmnt -> . var_declaration_func stmnt
    (21) stmnt -> . pen_func stmnt
    (22) stmnt -> . move_func stmnt
    (23) stmnt -> . while_stmnt stmnt
    (24) stmnt -> . if_stmnt stmnt
    (25) stmnt -> . write stmnt
    (26) stmnt -> . read stmnt
    (27) stmnt -> . func_call stmnt
    (28) stmnt -> . var_assignation stmnt
    (93) empty -> .
    (29) var_declaration_func -> . var_type ID multiple_vars
    (90) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (91) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (85) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (83) while_stmnt -> . WHILE con_expression stmnt END
    (80) if_stmnt -> . IF con_expression stmnt else_stmnt
    (79) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (71) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (67) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (30) var_assignation -> . id assign expression e3
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    (86) move_type -> . CENTER
    (87) move_type -> . FORWARD
    (88) move_type -> . RIGHT
    (89) move_type -> . LEFT
    (32) id -> . ID
    END             reduce using rule 93 (empty -> .)
    ELSE            reduce using rule 93 (empty -> .)
    PEN_DOWN        shift and go to state 37
    PEN_UP          shift and go to state 38
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    WRITE           shift and go to state 42
    READ            shift and go to state 43
    ID              shift and go to state 36
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9
    CENTER          shift and go to state 45
    FORWARD         shift and go to state 46
    RIGHT           shift and go to state 47
    LEFT            shift and go to state 48

    read                           shift and go to state 32
    stmnt                          shift and go to state 58
    empty                          shift and go to state 25
    var_declaration_func           shift and go to state 26
    pen_func                       shift and go to state 27
    move_func                      shift and go to state 28
    while_stmnt                    shift and go to state 29
    if_stmnt                       shift and go to state 30
    write                          shift and go to state 31
    func_call                      shift and go to state 33
    var_assignation                shift and go to state 34
    var_type                       shift and go to state 35
    move_type                      shift and go to state 39
    id                             shift and go to state 44

state 33

    (27) stmnt -> func_call . stmnt
    (19) stmnt -> . empty
    (20) stmnt -> . var_declaration_func stmnt
    (21) stmnt -> . pen_func stmnt
    (22) stmnt -> . move_func stmnt
    (23) stmnt -> . while_stmnt stmnt
    (24) stmnt -> . if_stmnt stmnt
    (25) stmnt -> . write stmnt
    (26) stmnt -> . read stmnt
    (27) stmnt -> . func_call stmnt
    (28) stmnt -> . var_assignation stmnt
    (93) empty -> .
    (29) var_declaration_func -> . var_type ID multiple_vars
    (90) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (91) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (85) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (83) while_stmnt -> . WHILE con_expression stmnt END
    (80) if_stmnt -> . IF con_expression stmnt else_stmnt
    (79) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (71) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (67) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (30) var_assignation -> . id assign expression e3
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    (86) move_type -> . CENTER
    (87) move_type -> . FORWARD
    (88) move_type -> . RIGHT
    (89) move_type -> . LEFT
    (32) id -> . ID
    END             reduce using rule 93 (empty -> .)
    ELSE            reduce using rule 93 (empty -> .)
    PEN_DOWN        shift and go to state 37
    PEN_UP          shift and go to state 38
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    WRITE           shift and go to state 42
    READ            shift and go to state 43
    ID              shift and go to state 36
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9
    CENTER          shift and go to state 45
    FORWARD         shift and go to state 46
    RIGHT           shift and go to state 47
    LEFT            shift and go to state 48

    func_call                      shift and go to state 33
    stmnt                          shift and go to state 59
    empty                          shift and go to state 25
    var_declaration_func           shift and go to state 26
    pen_func                       shift and go to state 27
    move_func                      shift and go to state 28
    while_stmnt                    shift and go to state 29
    if_stmnt                       shift and go to state 30
    write                          shift and go to state 31
    read                           shift and go to state 32
    var_assignation                shift and go to state 34
    var_type                       shift and go to state 35
    move_type                      shift and go to state 39
    id                             shift and go to state 44

state 34

    (28) stmnt -> var_assignation . stmnt
    (19) stmnt -> . empty
    (20) stmnt -> . var_declaration_func stmnt
    (21) stmnt -> . pen_func stmnt
    (22) stmnt -> . move_func stmnt
    (23) stmnt -> . while_stmnt stmnt
    (24) stmnt -> . if_stmnt stmnt
    (25) stmnt -> . write stmnt
    (26) stmnt -> . read stmnt
    (27) stmnt -> . func_call stmnt
    (28) stmnt -> . var_assignation stmnt
    (93) empty -> .
    (29) var_declaration_func -> . var_type ID multiple_vars
    (90) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (91) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (85) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (83) while_stmnt -> . WHILE con_expression stmnt END
    (80) if_stmnt -> . IF con_expression stmnt else_stmnt
    (79) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (71) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (67) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (30) var_assignation -> . id assign expression e3
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    (86) move_type -> . CENTER
    (87) move_type -> . FORWARD
    (88) move_type -> . RIGHT
    (89) move_type -> . LEFT
    (32) id -> . ID
    END             reduce using rule 93 (empty -> .)
    ELSE            reduce using rule 93 (empty -> .)
    PEN_DOWN        shift and go to state 37
    PEN_UP          shift and go to state 38
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    WRITE           shift and go to state 42
    READ            shift and go to state 43
    ID              shift and go to state 36
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9
    CENTER          shift and go to state 45
    FORWARD         shift and go to state 46
    RIGHT           shift and go to state 47
    LEFT            shift and go to state 48

    var_assignation                shift and go to state 34
    stmnt                          shift and go to state 60
    empty                          shift and go to state 25
    var_declaration_func           shift and go to state 26
    pen_func                       shift and go to state 27
    move_func                      shift and go to state 28
    while_stmnt                    shift and go to state 29
    if_stmnt                       shift and go to state 30
    write                          shift and go to state 31
    read                           shift and go to state 32
    func_call                      shift and go to state 33
    var_type                       shift and go to state 35
    move_type                      shift and go to state 39
    id                             shift and go to state 44

state 35

    (29) var_declaration_func -> var_type . ID multiple_vars
    ID              shift and go to state 61


state 36

    (67) func_call -> ID . OPEN_PTH func_call_param CLOSE_PTH
    (32) id -> ID .
    OPEN_PTH        shift and go to state 62
    ASSIGN          reduce using rule 32 (id -> ID .)


state 37

    (90) pen_func -> PEN_DOWN . OPEN_PTH CLOSE_PTH
    OPEN_PTH        shift and go to state 63


state 38

    (91) pen_func -> PEN_UP . OPEN_PTH CLOSE_PTH
    OPEN_PTH        shift and go to state 64


state 39

    (85) move_func -> move_type . OPEN_PTH func_call_param CLOSE_PTH
    OPEN_PTH        shift and go to state 65


state 40

    (83) while_stmnt -> WHILE . con_expression stmnt END
    (84) con_expression -> . expression log_op expression
    (41) expression -> . exp
    (42) expression -> . exp rel_op exp
    (43) exp -> . termino e1
    (44) exp -> . termino term_op termino e1
    (48) termino -> . factor e2
    (49) termino -> . factor fact_op factor e2
    (53) factor -> . expression
    (54) factor -> . term_op var_cte
    (55) factor -> . var_cte
    (56) factor -> . open_pth expression close_pth
    (46) term_op -> . SUB
    (47) term_op -> . SUM
    (34) var_cte -> . func_call
    (35) var_cte -> . cte_bool
    (36) var_cte -> . CTE_STR
    (37) var_cte -> . CTE_NUM
    (38) var_cte -> . variable
    (57) open_pth -> . OPEN_PTH
    (67) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (39) cte_bool -> . FALSE
    (40) cte_bool -> . TRUE
    (72) variable -> . ID array
    SUB             shift and go to state 74
    SUM             shift and go to state 75
    CTE_STR         shift and go to state 78
    CTE_NUM         shift and go to state 79
    OPEN_PTH        shift and go to state 81
    ID              shift and go to state 82
    FALSE           shift and go to state 83
    TRUE            shift and go to state 84

    con_expression                 shift and go to state 66
    expression                     shift and go to state 67
    exp                            shift and go to state 68
    termino                        shift and go to state 69
    term_op                        shift and go to state 70
    factor                         shift and go to state 71
    var_cte                        shift and go to state 72
    open_pth                       shift and go to state 73
    func_call                      shift and go to state 76
    cte_bool                       shift and go to state 77
    variable                       shift and go to state 80

state 41

    (80) if_stmnt -> IF . con_expression stmnt else_stmnt
    (84) con_expression -> . expression log_op expression
    (41) expression -> . exp
    (42) expression -> . exp rel_op exp
    (43) exp -> . termino e1
    (44) exp -> . termino term_op termino e1
    (48) termino -> . factor e2
    (49) termino -> . factor fact_op factor e2
    (53) factor -> . expression
    (54) factor -> . term_op var_cte
    (55) factor -> . var_cte
    (56) factor -> . open_pth expression close_pth
    (46) term_op -> . SUB
    (47) term_op -> . SUM
    (34) var_cte -> . func_call
    (35) var_cte -> . cte_bool
    (36) var_cte -> . CTE_STR
    (37) var_cte -> . CTE_NUM
    (38) var_cte -> . variable
    (57) open_pth -> . OPEN_PTH
    (67) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (39) cte_bool -> . FALSE
    (40) cte_bool -> . TRUE
    (72) variable -> . ID array
    SUB             shift and go to state 74
    SUM             shift and go to state 75
    CTE_STR         shift and go to state 78
    CTE_NUM         shift and go to state 79
    OPEN_PTH        shift and go to state 81
    ID              shift and go to state 82
    FALSE           shift and go to state 83
    TRUE            shift and go to state 84

    con_expression                 shift and go to state 85
    expression                     shift and go to state 67
    exp                            shift and go to state 68
    termino                        shift and go to state 69
    term_op                        shift and go to state 70
    factor                         shift and go to state 71
    var_cte                        shift and go to state 72
    open_pth                       shift and go to state 73
    func_call                      shift and go to state 76
    cte_bool                       shift and go to state 77
    variable                       shift and go to state 80

state 42

    (79) write -> WRITE . OPEN_PTH expression CLOSE_PTH
    OPEN_PTH        shift and go to state 86


state 43

    (71) read -> READ . OPEN_PTH variable multiple_vars CLOSE_PTH
    OPEN_PTH        shift and go to state 87


state 44

    (30) var_assignation -> id . assign expression e3
    (33) assign -> . ASSIGN
    ASSIGN          shift and go to state 89

    assign                         shift and go to state 88

state 45

    (86) move_type -> CENTER .
    OPEN_PTH        reduce using rule 86 (move_type -> CENTER .)


state 46

    (87) move_type -> FORWARD .
    OPEN_PTH        reduce using rule 87 (move_type -> FORWARD .)


state 47

    (88) move_type -> RIGHT .
    OPEN_PTH        reduce using rule 88 (move_type -> RIGHT .)


state 48

    (89) move_type -> LEFT .
    OPEN_PTH        reduce using rule 89 (move_type -> LEFT .)


state 49

    (10) func_declaration -> func_type FUNC ID . OPEN_PTH parameter CLOSE_PTH stmnt END
    OPEN_PTH        shift and go to state 90


state 50

    (5) multiple_var -> COMMA ID . multiple_var
    (4) multiple_var -> . empty
    (5) multiple_var -> . COMMA ID multiple_var
    (93) empty -> .
    COMMA           shift and go to state 23
    BOOL            reduce using rule 93 (empty -> .)
    WORD            reduce using rule 93 (empty -> .)
    NUMBER          reduce using rule 93 (empty -> .)
    VOID            reduce using rule 93 (empty -> .)
    MAIN            reduce using rule 93 (empty -> .)

    multiple_var                   shift and go to state 91
    empty                          shift and go to state 22

state 51

    (92) main -> MAIN stmnt END .
    $end            reduce using rule 92 (main -> MAIN stmnt END .)


state 52

    (20) stmnt -> var_declaration_func stmnt .
    END             reduce using rule 20 (stmnt -> var_declaration_func stmnt .)
    ELSE            reduce using rule 20 (stmnt -> var_declaration_func stmnt .)


state 53

    (21) stmnt -> pen_func stmnt .
    END             reduce using rule 21 (stmnt -> pen_func stmnt .)
    ELSE            reduce using rule 21 (stmnt -> pen_func stmnt .)


state 54

    (22) stmnt -> move_func stmnt .
    END             reduce using rule 22 (stmnt -> move_func stmnt .)
    ELSE            reduce using rule 22 (stmnt -> move_func stmnt .)


state 55

    (23) stmnt -> while_stmnt stmnt .
    END             reduce using rule 23 (stmnt -> while_stmnt stmnt .)
    ELSE            reduce using rule 23 (stmnt -> while_stmnt stmnt .)


state 56

    (24) stmnt -> if_stmnt stmnt .
    END             reduce using rule 24 (stmnt -> if_stmnt stmnt .)
    ELSE            reduce using rule 24 (stmnt -> if_stmnt stmnt .)


state 57

    (25) stmnt -> write stmnt .
    END             reduce using rule 25 (stmnt -> write stmnt .)
    ELSE            reduce using rule 25 (stmnt -> write stmnt .)


state 58

    (26) stmnt -> read stmnt .
    END             reduce using rule 26 (stmnt -> read stmnt .)
    ELSE            reduce using rule 26 (stmnt -> read stmnt .)


state 59

    (27) stmnt -> func_call stmnt .
    END             reduce using rule 27 (stmnt -> func_call stmnt .)
    ELSE            reduce using rule 27 (stmnt -> func_call stmnt .)


state 60

    (28) stmnt -> var_assignation stmnt .
    END             reduce using rule 28 (stmnt -> var_assignation stmnt .)
    ELSE            reduce using rule 28 (stmnt -> var_assignation stmnt .)


state 61

    (29) var_declaration_func -> var_type ID . multiple_vars
    (77) multiple_vars -> . empty
    (78) multiple_vars -> . COMMA variable
    (93) empty -> .
    COMMA           shift and go to state 94
    PEN_DOWN        reduce using rule 93 (empty -> .)
    PEN_UP          reduce using rule 93 (empty -> .)
    WHILE           reduce using rule 93 (empty -> .)
    IF              reduce using rule 93 (empty -> .)
    WRITE           reduce using rule 93 (empty -> .)
    READ            reduce using rule 93 (empty -> .)
    ID              reduce using rule 93 (empty -> .)
    BOOL            reduce using rule 93 (empty -> .)
    WORD            reduce using rule 93 (empty -> .)
    NUMBER          reduce using rule 93 (empty -> .)
    CENTER          reduce using rule 93 (empty -> .)
    FORWARD         reduce using rule 93 (empty -> .)
    RIGHT           reduce using rule 93 (empty -> .)
    LEFT            reduce using rule 93 (empty -> .)
    END             reduce using rule 93 (empty -> .)
    ELSE            reduce using rule 93 (empty -> .)

    multiple_vars                  shift and go to state 92
    empty                          shift and go to state 93

state 62

    (67) func_call -> ID OPEN_PTH . func_call_param CLOSE_PTH
    (68) func_call_param -> . expression multiple_fc_param
    (41) expression -> . exp
    (42) expression -> . exp rel_op exp
    (43) exp -> . termino e1
    (44) exp -> . termino term_op termino e1
    (48) termino -> . factor e2
    (49) termino -> . factor fact_op factor e2
    (53) factor -> . expression
    (54) factor -> . term_op var_cte
    (55) factor -> . var_cte
    (56) factor -> . open_pth expression close_pth
    (46) term_op -> . SUB
    (47) term_op -> . SUM
    (34) var_cte -> . func_call
    (35) var_cte -> . cte_bool
    (36) var_cte -> . CTE_STR
    (37) var_cte -> . CTE_NUM
    (38) var_cte -> . variable
    (57) open_pth -> . OPEN_PTH
    (67) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (39) cte_bool -> . FALSE
    (40) cte_bool -> . TRUE
    (72) variable -> . ID array
    SUB             shift and go to state 74
    SUM             shift and go to state 75
    CTE_STR         shift and go to state 78
    CTE_NUM         shift and go to state 79
    OPEN_PTH        shift and go to state 81
    ID              shift and go to state 82
    FALSE           shift and go to state 83
    TRUE            shift and go to state 84

    func_call_param                shift and go to state 95
    expression                     shift and go to state 96
    exp                            shift and go to state 68
    termino                        shift and go to state 69
    term_op                        shift and go to state 70
    factor                         shift and go to state 71
    var_cte                        shift and go to state 72
    open_pth                       shift and go to state 73
    func_call                      shift and go to state 76
    cte_bool                       shift and go to state 77
    variable                       shift and go to state 80

state 63

    (90) pen_func -> PEN_DOWN OPEN_PTH . CLOSE_PTH
    CLOSE_PTH       shift and go to state 97


state 64

    (91) pen_func -> PEN_UP OPEN_PTH . CLOSE_PTH
    CLOSE_PTH       shift and go to state 98


state 65

    (85) move_func -> move_type OPEN_PTH . func_call_param CLOSE_PTH
    (68) func_call_param -> . expression multiple_fc_param
    (41) expression -> . exp
    (42) expression -> . exp rel_op exp
    (43) exp -> . termino e1
    (44) exp -> . termino term_op termino e1
    (48) termino -> . factor e2
    (49) termino -> . factor fact_op factor e2
    (53) factor -> . expression
    (54) factor -> . term_op var_cte
    (55) factor -> . var_cte
    (56) factor -> . open_pth expression close_pth
    (46) term_op -> . SUB
    (47) term_op -> . SUM
    (34) var_cte -> . func_call
    (35) var_cte -> . cte_bool
    (36) var_cte -> . CTE_STR
    (37) var_cte -> . CTE_NUM
    (38) var_cte -> . variable
    (57) open_pth -> . OPEN_PTH
    (67) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (39) cte_bool -> . FALSE
    (40) cte_bool -> . TRUE
    (72) variable -> . ID array
    SUB             shift and go to state 74
    SUM             shift and go to state 75
    CTE_STR         shift and go to state 78
    CTE_NUM         shift and go to state 79
    OPEN_PTH        shift and go to state 81
    ID              shift and go to state 82
    FALSE           shift and go to state 83
    TRUE            shift and go to state 84

    func_call_param                shift and go to state 99
    expression                     shift and go to state 96
    exp                            shift and go to state 68
    termino                        shift and go to state 69
    term_op                        shift and go to state 70
    factor                         shift and go to state 71
    var_cte                        shift and go to state 72
    open_pth                       shift and go to state 73
    func_call                      shift and go to state 76
    cte_bool                       shift and go to state 77
    variable                       shift and go to state 80

state 66

    (83) while_stmnt -> WHILE con_expression . stmnt END
    (19) stmnt -> . empty
    (20) stmnt -> . var_declaration_func stmnt
    (21) stmnt -> . pen_func stmnt
    (22) stmnt -> . move_func stmnt
    (23) stmnt -> . while_stmnt stmnt
    (24) stmnt -> . if_stmnt stmnt
    (25) stmnt -> . write stmnt
    (26) stmnt -> . read stmnt
    (27) stmnt -> . func_call stmnt
    (28) stmnt -> . var_assignation stmnt
    (93) empty -> .
    (29) var_declaration_func -> . var_type ID multiple_vars
    (90) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (91) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (85) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (83) while_stmnt -> . WHILE con_expression stmnt END
    (80) if_stmnt -> . IF con_expression stmnt else_stmnt
    (79) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (71) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (67) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (30) var_assignation -> . id assign expression e3
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    (86) move_type -> . CENTER
    (87) move_type -> . FORWARD
    (88) move_type -> . RIGHT
    (89) move_type -> . LEFT
    (32) id -> . ID
    END             reduce using rule 93 (empty -> .)
    PEN_DOWN        shift and go to state 37
    PEN_UP          shift and go to state 38
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    WRITE           shift and go to state 42
    READ            shift and go to state 43
    ID              shift and go to state 36
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9
    CENTER          shift and go to state 45
    FORWARD         shift and go to state 46
    RIGHT           shift and go to state 47
    LEFT            shift and go to state 48

    stmnt                          shift and go to state 100
    empty                          shift and go to state 25
    var_declaration_func           shift and go to state 26
    pen_func                       shift and go to state 27
    move_func                      shift and go to state 28
    while_stmnt                    shift and go to state 29
    if_stmnt                       shift and go to state 30
    write                          shift and go to state 31
    read                           shift and go to state 32
    func_call                      shift and go to state 33
    var_assignation                shift and go to state 34
    var_type                       shift and go to state 35
    move_type                      shift and go to state 39
    id                             shift and go to state 44

state 67

    (84) con_expression -> expression . log_op expression
    (53) factor -> expression .
    (59) log_op -> . OR
    (60) log_op -> . AND
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    DIV             reduce using rule 53 (factor -> expression .)
    MULT            reduce using rule 53 (factor -> expression .)
    SUB             reduce using rule 53 (factor -> expression .)
    SUM             reduce using rule 53 (factor -> expression .)
    EQUAL_TO        reduce using rule 53 (factor -> expression .)
    MORE_OR_EQ_THAN reduce using rule 53 (factor -> expression .)
    LESS_OR_EQ_THAN reduce using rule 53 (factor -> expression .)
    DIFFERENT_TO    reduce using rule 53 (factor -> expression .)
    MORE_THAN       reduce using rule 53 (factor -> expression .)
    LESS_THAN       reduce using rule 53 (factor -> expression .)
    OR              shift and go to state 102
    AND             shift and go to state 103

    log_op                         shift and go to state 101

state 68

    (41) expression -> exp .
    (42) expression -> exp . rel_op exp
    (61) rel_op -> . EQUAL_TO
    (62) rel_op -> . MORE_OR_EQ_THAN
    (63) rel_op -> . LESS_OR_EQ_THAN
    (64) rel_op -> . DIFFERENT_TO
    (65) rel_op -> . MORE_THAN
    (66) rel_op -> . LESS_THAN
  ! shift/reduce conflict for EQUAL_TO resolved as shift
  ! shift/reduce conflict for MORE_OR_EQ_THAN resolved as shift
  ! shift/reduce conflict for LESS_OR_EQ_THAN resolved as shift
  ! shift/reduce conflict for DIFFERENT_TO resolved as shift
  ! shift/reduce conflict for MORE_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
    OR              reduce using rule 41 (expression -> exp .)
    AND             reduce using rule 41 (expression -> exp .)
    DIV             reduce using rule 41 (expression -> exp .)
    MULT            reduce using rule 41 (expression -> exp .)
    SUB             reduce using rule 41 (expression -> exp .)
    SUM             reduce using rule 41 (expression -> exp .)
    COMMA           reduce using rule 41 (expression -> exp .)
    CLOSE_PTH       reduce using rule 41 (expression -> exp .)
    PEN_DOWN        reduce using rule 41 (expression -> exp .)
    PEN_UP          reduce using rule 41 (expression -> exp .)
    WHILE           reduce using rule 41 (expression -> exp .)
    IF              reduce using rule 41 (expression -> exp .)
    WRITE           reduce using rule 41 (expression -> exp .)
    READ            reduce using rule 41 (expression -> exp .)
    ID              reduce using rule 41 (expression -> exp .)
    BOOL            reduce using rule 41 (expression -> exp .)
    WORD            reduce using rule 41 (expression -> exp .)
    NUMBER          reduce using rule 41 (expression -> exp .)
    CENTER          reduce using rule 41 (expression -> exp .)
    FORWARD         reduce using rule 41 (expression -> exp .)
    RIGHT           reduce using rule 41 (expression -> exp .)
    LEFT            reduce using rule 41 (expression -> exp .)
    END             reduce using rule 41 (expression -> exp .)
    ELSE            reduce using rule 41 (expression -> exp .)
    CLOSE_SQR       reduce using rule 41 (expression -> exp .)
    EQUAL_TO        shift and go to state 105
    MORE_OR_EQ_THAN shift and go to state 106
    LESS_OR_EQ_THAN shift and go to state 107
    DIFFERENT_TO    shift and go to state 108
    MORE_THAN       shift and go to state 109
    LESS_THAN       shift and go to state 110

    rel_op                         shift and go to state 104

state 69

    (43) exp -> termino . e1
    (44) exp -> termino . term_op termino e1
    (45) e1 -> .
    (46) term_op -> . SUB
    (47) term_op -> . SUM
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for SUM resolved as shift
    OR              reduce using rule 45 (e1 -> .)
    AND             reduce using rule 45 (e1 -> .)
    DIV             reduce using rule 45 (e1 -> .)
    MULT            reduce using rule 45 (e1 -> .)
    EQUAL_TO        reduce using rule 45 (e1 -> .)
    MORE_OR_EQ_THAN reduce using rule 45 (e1 -> .)
    LESS_OR_EQ_THAN reduce using rule 45 (e1 -> .)
    DIFFERENT_TO    reduce using rule 45 (e1 -> .)
    MORE_THAN       reduce using rule 45 (e1 -> .)
    LESS_THAN       reduce using rule 45 (e1 -> .)
    COMMA           reduce using rule 45 (e1 -> .)
    CLOSE_PTH       reduce using rule 45 (e1 -> .)
    PEN_DOWN        reduce using rule 45 (e1 -> .)
    PEN_UP          reduce using rule 45 (e1 -> .)
    WHILE           reduce using rule 45 (e1 -> .)
    IF              reduce using rule 45 (e1 -> .)
    WRITE           reduce using rule 45 (e1 -> .)
    READ            reduce using rule 45 (e1 -> .)
    ID              reduce using rule 45 (e1 -> .)
    BOOL            reduce using rule 45 (e1 -> .)
    WORD            reduce using rule 45 (e1 -> .)
    NUMBER          reduce using rule 45 (e1 -> .)
    CENTER          reduce using rule 45 (e1 -> .)
    FORWARD         reduce using rule 45 (e1 -> .)
    RIGHT           reduce using rule 45 (e1 -> .)
    LEFT            reduce using rule 45 (e1 -> .)
    END             reduce using rule 45 (e1 -> .)
    ELSE            reduce using rule 45 (e1 -> .)
    CLOSE_SQR       reduce using rule 45 (e1 -> .)
    SUB             shift and go to state 74
    SUM             shift and go to state 75

    e1                             shift and go to state 111
    term_op                        shift and go to state 112

state 70

    (54) factor -> term_op . var_cte
    (34) var_cte -> . func_call
    (35) var_cte -> . cte_bool
    (36) var_cte -> . CTE_STR
    (37) var_cte -> . CTE_NUM
    (38) var_cte -> . variable
    (67) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (39) cte_bool -> . FALSE
    (40) cte_bool -> . TRUE
    (72) variable -> . ID array
    CTE_STR         shift and go to state 78
    CTE_NUM         shift and go to state 79
    ID              shift and go to state 82
    FALSE           shift and go to state 83
    TRUE            shift and go to state 84

    var_cte                        shift and go to state 113
    func_call                      shift and go to state 76
    cte_bool                       shift and go to state 77
    variable                       shift and go to state 80

state 71

    (48) termino -> factor . e2
    (49) termino -> factor . fact_op factor e2
    (50) e2 -> .
    (51) fact_op -> . DIV
    (52) fact_op -> . MULT
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
    OR              reduce using rule 50 (e2 -> .)
    AND             reduce using rule 50 (e2 -> .)
    SUB             reduce using rule 50 (e2 -> .)
    SUM             reduce using rule 50 (e2 -> .)
    EQUAL_TO        reduce using rule 50 (e2 -> .)
    MORE_OR_EQ_THAN reduce using rule 50 (e2 -> .)
    LESS_OR_EQ_THAN reduce using rule 50 (e2 -> .)
    DIFFERENT_TO    reduce using rule 50 (e2 -> .)
    MORE_THAN       reduce using rule 50 (e2 -> .)
    LESS_THAN       reduce using rule 50 (e2 -> .)
    COMMA           reduce using rule 50 (e2 -> .)
    CLOSE_PTH       reduce using rule 50 (e2 -> .)
    PEN_DOWN        reduce using rule 50 (e2 -> .)
    PEN_UP          reduce using rule 50 (e2 -> .)
    WHILE           reduce using rule 50 (e2 -> .)
    IF              reduce using rule 50 (e2 -> .)
    WRITE           reduce using rule 50 (e2 -> .)
    READ            reduce using rule 50 (e2 -> .)
    ID              reduce using rule 50 (e2 -> .)
    BOOL            reduce using rule 50 (e2 -> .)
    WORD            reduce using rule 50 (e2 -> .)
    NUMBER          reduce using rule 50 (e2 -> .)
    CENTER          reduce using rule 50 (e2 -> .)
    FORWARD         reduce using rule 50 (e2 -> .)
    RIGHT           reduce using rule 50 (e2 -> .)
    LEFT            reduce using rule 50 (e2 -> .)
    END             reduce using rule 50 (e2 -> .)
    ELSE            reduce using rule 50 (e2 -> .)
    CLOSE_SQR       reduce using rule 50 (e2 -> .)
    DIV             shift and go to state 116
    MULT            shift and go to state 117

    e2                             shift and go to state 114
    fact_op                        shift and go to state 115

state 72

    (55) factor -> var_cte .
    OR              reduce using rule 55 (factor -> var_cte .)
    AND             reduce using rule 55 (factor -> var_cte .)
    DIV             reduce using rule 55 (factor -> var_cte .)
    MULT            reduce using rule 55 (factor -> var_cte .)
    SUB             reduce using rule 55 (factor -> var_cte .)
    SUM             reduce using rule 55 (factor -> var_cte .)
    EQUAL_TO        reduce using rule 55 (factor -> var_cte .)
    MORE_OR_EQ_THAN reduce using rule 55 (factor -> var_cte .)
    LESS_OR_EQ_THAN reduce using rule 55 (factor -> var_cte .)
    DIFFERENT_TO    reduce using rule 55 (factor -> var_cte .)
    MORE_THAN       reduce using rule 55 (factor -> var_cte .)
    LESS_THAN       reduce using rule 55 (factor -> var_cte .)
    COMMA           reduce using rule 55 (factor -> var_cte .)
    CLOSE_PTH       reduce using rule 55 (factor -> var_cte .)
    PEN_DOWN        reduce using rule 55 (factor -> var_cte .)
    PEN_UP          reduce using rule 55 (factor -> var_cte .)
    WHILE           reduce using rule 55 (factor -> var_cte .)
    IF              reduce using rule 55 (factor -> var_cte .)
    WRITE           reduce using rule 55 (factor -> var_cte .)
    READ            reduce using rule 55 (factor -> var_cte .)
    ID              reduce using rule 55 (factor -> var_cte .)
    BOOL            reduce using rule 55 (factor -> var_cte .)
    WORD            reduce using rule 55 (factor -> var_cte .)
    NUMBER          reduce using rule 55 (factor -> var_cte .)
    CENTER          reduce using rule 55 (factor -> var_cte .)
    FORWARD         reduce using rule 55 (factor -> var_cte .)
    RIGHT           reduce using rule 55 (factor -> var_cte .)
    LEFT            reduce using rule 55 (factor -> var_cte .)
    END             reduce using rule 55 (factor -> var_cte .)
    ELSE            reduce using rule 55 (factor -> var_cte .)
    CLOSE_SQR       reduce using rule 55 (factor -> var_cte .)


state 73

    (56) factor -> open_pth . expression close_pth
    (41) expression -> . exp
    (42) expression -> . exp rel_op exp
    (43) exp -> . termino e1
    (44) exp -> . termino term_op termino e1
    (48) termino -> . factor e2
    (49) termino -> . factor fact_op factor e2
    (53) factor -> . expression
    (54) factor -> . term_op var_cte
    (55) factor -> . var_cte
    (56) factor -> . open_pth expression close_pth
    (46) term_op -> . SUB
    (47) term_op -> . SUM
    (34) var_cte -> . func_call
    (35) var_cte -> . cte_bool
    (36) var_cte -> . CTE_STR
    (37) var_cte -> . CTE_NUM
    (38) var_cte -> . variable
    (57) open_pth -> . OPEN_PTH
    (67) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (39) cte_bool -> . FALSE
    (40) cte_bool -> . TRUE
    (72) variable -> . ID array
    SUB             shift and go to state 74
    SUM             shift and go to state 75
    CTE_STR         shift and go to state 78
    CTE_NUM         shift and go to state 79
    OPEN_PTH        shift and go to state 81
    ID              shift and go to state 82
    FALSE           shift and go to state 83
    TRUE            shift and go to state 84

    open_pth                       shift and go to state 73
    expression                     shift and go to state 118
    exp                            shift and go to state 68
    termino                        shift and go to state 69
    term_op                        shift and go to state 70
    factor                         shift and go to state 71
    var_cte                        shift and go to state 72
    func_call                      shift and go to state 76
    cte_bool                       shift and go to state 77
    variable                       shift and go to state 80

state 74

    (46) term_op -> SUB .
    CTE_STR         reduce using rule 46 (term_op -> SUB .)
    CTE_NUM         reduce using rule 46 (term_op -> SUB .)
    ID              reduce using rule 46 (term_op -> SUB .)
    FALSE           reduce using rule 46 (term_op -> SUB .)
    TRUE            reduce using rule 46 (term_op -> SUB .)
    SUB             reduce using rule 46 (term_op -> SUB .)
    SUM             reduce using rule 46 (term_op -> SUB .)
    OPEN_PTH        reduce using rule 46 (term_op -> SUB .)


state 75

    (47) term_op -> SUM .
    CTE_STR         reduce using rule 47 (term_op -> SUM .)
    CTE_NUM         reduce using rule 47 (term_op -> SUM .)
    ID              reduce using rule 47 (term_op -> SUM .)
    FALSE           reduce using rule 47 (term_op -> SUM .)
    TRUE            reduce using rule 47 (term_op -> SUM .)
    SUB             reduce using rule 47 (term_op -> SUM .)
    SUM             reduce using rule 47 (term_op -> SUM .)
    OPEN_PTH        reduce using rule 47 (term_op -> SUM .)


state 76

    (34) var_cte -> func_call .
    OR              reduce using rule 34 (var_cte -> func_call .)
    AND             reduce using rule 34 (var_cte -> func_call .)
    DIV             reduce using rule 34 (var_cte -> func_call .)
    MULT            reduce using rule 34 (var_cte -> func_call .)
    SUB             reduce using rule 34 (var_cte -> func_call .)
    SUM             reduce using rule 34 (var_cte -> func_call .)
    EQUAL_TO        reduce using rule 34 (var_cte -> func_call .)
    MORE_OR_EQ_THAN reduce using rule 34 (var_cte -> func_call .)
    LESS_OR_EQ_THAN reduce using rule 34 (var_cte -> func_call .)
    DIFFERENT_TO    reduce using rule 34 (var_cte -> func_call .)
    MORE_THAN       reduce using rule 34 (var_cte -> func_call .)
    LESS_THAN       reduce using rule 34 (var_cte -> func_call .)
    COMMA           reduce using rule 34 (var_cte -> func_call .)
    CLOSE_PTH       reduce using rule 34 (var_cte -> func_call .)
    PEN_DOWN        reduce using rule 34 (var_cte -> func_call .)
    PEN_UP          reduce using rule 34 (var_cte -> func_call .)
    WHILE           reduce using rule 34 (var_cte -> func_call .)
    IF              reduce using rule 34 (var_cte -> func_call .)
    WRITE           reduce using rule 34 (var_cte -> func_call .)
    READ            reduce using rule 34 (var_cte -> func_call .)
    ID              reduce using rule 34 (var_cte -> func_call .)
    BOOL            reduce using rule 34 (var_cte -> func_call .)
    WORD            reduce using rule 34 (var_cte -> func_call .)
    NUMBER          reduce using rule 34 (var_cte -> func_call .)
    CENTER          reduce using rule 34 (var_cte -> func_call .)
    FORWARD         reduce using rule 34 (var_cte -> func_call .)
    RIGHT           reduce using rule 34 (var_cte -> func_call .)
    LEFT            reduce using rule 34 (var_cte -> func_call .)
    END             reduce using rule 34 (var_cte -> func_call .)
    ELSE            reduce using rule 34 (var_cte -> func_call .)
    CLOSE_SQR       reduce using rule 34 (var_cte -> func_call .)


state 77

    (35) var_cte -> cte_bool .
    OR              reduce using rule 35 (var_cte -> cte_bool .)
    AND             reduce using rule 35 (var_cte -> cte_bool .)
    DIV             reduce using rule 35 (var_cte -> cte_bool .)
    MULT            reduce using rule 35 (var_cte -> cte_bool .)
    SUB             reduce using rule 35 (var_cte -> cte_bool .)
    SUM             reduce using rule 35 (var_cte -> cte_bool .)
    EQUAL_TO        reduce using rule 35 (var_cte -> cte_bool .)
    MORE_OR_EQ_THAN reduce using rule 35 (var_cte -> cte_bool .)
    LESS_OR_EQ_THAN reduce using rule 35 (var_cte -> cte_bool .)
    DIFFERENT_TO    reduce using rule 35 (var_cte -> cte_bool .)
    MORE_THAN       reduce using rule 35 (var_cte -> cte_bool .)
    LESS_THAN       reduce using rule 35 (var_cte -> cte_bool .)
    COMMA           reduce using rule 35 (var_cte -> cte_bool .)
    CLOSE_PTH       reduce using rule 35 (var_cte -> cte_bool .)
    PEN_DOWN        reduce using rule 35 (var_cte -> cte_bool .)
    PEN_UP          reduce using rule 35 (var_cte -> cte_bool .)
    WHILE           reduce using rule 35 (var_cte -> cte_bool .)
    IF              reduce using rule 35 (var_cte -> cte_bool .)
    WRITE           reduce using rule 35 (var_cte -> cte_bool .)
    READ            reduce using rule 35 (var_cte -> cte_bool .)
    ID              reduce using rule 35 (var_cte -> cte_bool .)
    BOOL            reduce using rule 35 (var_cte -> cte_bool .)
    WORD            reduce using rule 35 (var_cte -> cte_bool .)
    NUMBER          reduce using rule 35 (var_cte -> cte_bool .)
    CENTER          reduce using rule 35 (var_cte -> cte_bool .)
    FORWARD         reduce using rule 35 (var_cte -> cte_bool .)
    RIGHT           reduce using rule 35 (var_cte -> cte_bool .)
    LEFT            reduce using rule 35 (var_cte -> cte_bool .)
    END             reduce using rule 35 (var_cte -> cte_bool .)
    ELSE            reduce using rule 35 (var_cte -> cte_bool .)
    CLOSE_SQR       reduce using rule 35 (var_cte -> cte_bool .)


state 78

    (36) var_cte -> CTE_STR .
    OR              reduce using rule 36 (var_cte -> CTE_STR .)
    AND             reduce using rule 36 (var_cte -> CTE_STR .)
    DIV             reduce using rule 36 (var_cte -> CTE_STR .)
    MULT            reduce using rule 36 (var_cte -> CTE_STR .)
    SUB             reduce using rule 36 (var_cte -> CTE_STR .)
    SUM             reduce using rule 36 (var_cte -> CTE_STR .)
    EQUAL_TO        reduce using rule 36 (var_cte -> CTE_STR .)
    MORE_OR_EQ_THAN reduce using rule 36 (var_cte -> CTE_STR .)
    LESS_OR_EQ_THAN reduce using rule 36 (var_cte -> CTE_STR .)
    DIFFERENT_TO    reduce using rule 36 (var_cte -> CTE_STR .)
    MORE_THAN       reduce using rule 36 (var_cte -> CTE_STR .)
    LESS_THAN       reduce using rule 36 (var_cte -> CTE_STR .)
    COMMA           reduce using rule 36 (var_cte -> CTE_STR .)
    CLOSE_PTH       reduce using rule 36 (var_cte -> CTE_STR .)
    PEN_DOWN        reduce using rule 36 (var_cte -> CTE_STR .)
    PEN_UP          reduce using rule 36 (var_cte -> CTE_STR .)
    WHILE           reduce using rule 36 (var_cte -> CTE_STR .)
    IF              reduce using rule 36 (var_cte -> CTE_STR .)
    WRITE           reduce using rule 36 (var_cte -> CTE_STR .)
    READ            reduce using rule 36 (var_cte -> CTE_STR .)
    ID              reduce using rule 36 (var_cte -> CTE_STR .)
    BOOL            reduce using rule 36 (var_cte -> CTE_STR .)
    WORD            reduce using rule 36 (var_cte -> CTE_STR .)
    NUMBER          reduce using rule 36 (var_cte -> CTE_STR .)
    CENTER          reduce using rule 36 (var_cte -> CTE_STR .)
    FORWARD         reduce using rule 36 (var_cte -> CTE_STR .)
    RIGHT           reduce using rule 36 (var_cte -> CTE_STR .)
    LEFT            reduce using rule 36 (var_cte -> CTE_STR .)
    END             reduce using rule 36 (var_cte -> CTE_STR .)
    ELSE            reduce using rule 36 (var_cte -> CTE_STR .)
    CLOSE_SQR       reduce using rule 36 (var_cte -> CTE_STR .)


state 79

    (37) var_cte -> CTE_NUM .
    OR              reduce using rule 37 (var_cte -> CTE_NUM .)
    AND             reduce using rule 37 (var_cte -> CTE_NUM .)
    DIV             reduce using rule 37 (var_cte -> CTE_NUM .)
    MULT            reduce using rule 37 (var_cte -> CTE_NUM .)
    SUB             reduce using rule 37 (var_cte -> CTE_NUM .)
    SUM             reduce using rule 37 (var_cte -> CTE_NUM .)
    EQUAL_TO        reduce using rule 37 (var_cte -> CTE_NUM .)
    MORE_OR_EQ_THAN reduce using rule 37 (var_cte -> CTE_NUM .)
    LESS_OR_EQ_THAN reduce using rule 37 (var_cte -> CTE_NUM .)
    DIFFERENT_TO    reduce using rule 37 (var_cte -> CTE_NUM .)
    MORE_THAN       reduce using rule 37 (var_cte -> CTE_NUM .)
    LESS_THAN       reduce using rule 37 (var_cte -> CTE_NUM .)
    COMMA           reduce using rule 37 (var_cte -> CTE_NUM .)
    CLOSE_PTH       reduce using rule 37 (var_cte -> CTE_NUM .)
    PEN_DOWN        reduce using rule 37 (var_cte -> CTE_NUM .)
    PEN_UP          reduce using rule 37 (var_cte -> CTE_NUM .)
    WHILE           reduce using rule 37 (var_cte -> CTE_NUM .)
    IF              reduce using rule 37 (var_cte -> CTE_NUM .)
    WRITE           reduce using rule 37 (var_cte -> CTE_NUM .)
    READ            reduce using rule 37 (var_cte -> CTE_NUM .)
    ID              reduce using rule 37 (var_cte -> CTE_NUM .)
    BOOL            reduce using rule 37 (var_cte -> CTE_NUM .)
    WORD            reduce using rule 37 (var_cte -> CTE_NUM .)
    NUMBER          reduce using rule 37 (var_cte -> CTE_NUM .)
    CENTER          reduce using rule 37 (var_cte -> CTE_NUM .)
    FORWARD         reduce using rule 37 (var_cte -> CTE_NUM .)
    RIGHT           reduce using rule 37 (var_cte -> CTE_NUM .)
    LEFT            reduce using rule 37 (var_cte -> CTE_NUM .)
    END             reduce using rule 37 (var_cte -> CTE_NUM .)
    ELSE            reduce using rule 37 (var_cte -> CTE_NUM .)
    CLOSE_SQR       reduce using rule 37 (var_cte -> CTE_NUM .)


state 80

    (38) var_cte -> variable .
    OR              reduce using rule 38 (var_cte -> variable .)
    AND             reduce using rule 38 (var_cte -> variable .)
    DIV             reduce using rule 38 (var_cte -> variable .)
    MULT            reduce using rule 38 (var_cte -> variable .)
    SUB             reduce using rule 38 (var_cte -> variable .)
    SUM             reduce using rule 38 (var_cte -> variable .)
    EQUAL_TO        reduce using rule 38 (var_cte -> variable .)
    MORE_OR_EQ_THAN reduce using rule 38 (var_cte -> variable .)
    LESS_OR_EQ_THAN reduce using rule 38 (var_cte -> variable .)
    DIFFERENT_TO    reduce using rule 38 (var_cte -> variable .)
    MORE_THAN       reduce using rule 38 (var_cte -> variable .)
    LESS_THAN       reduce using rule 38 (var_cte -> variable .)
    COMMA           reduce using rule 38 (var_cte -> variable .)
    CLOSE_PTH       reduce using rule 38 (var_cte -> variable .)
    PEN_DOWN        reduce using rule 38 (var_cte -> variable .)
    PEN_UP          reduce using rule 38 (var_cte -> variable .)
    WHILE           reduce using rule 38 (var_cte -> variable .)
    IF              reduce using rule 38 (var_cte -> variable .)
    WRITE           reduce using rule 38 (var_cte -> variable .)
    READ            reduce using rule 38 (var_cte -> variable .)
    ID              reduce using rule 38 (var_cte -> variable .)
    BOOL            reduce using rule 38 (var_cte -> variable .)
    WORD            reduce using rule 38 (var_cte -> variable .)
    NUMBER          reduce using rule 38 (var_cte -> variable .)
    CENTER          reduce using rule 38 (var_cte -> variable .)
    FORWARD         reduce using rule 38 (var_cte -> variable .)
    RIGHT           reduce using rule 38 (var_cte -> variable .)
    LEFT            reduce using rule 38 (var_cte -> variable .)
    END             reduce using rule 38 (var_cte -> variable .)
    ELSE            reduce using rule 38 (var_cte -> variable .)
    CLOSE_SQR       reduce using rule 38 (var_cte -> variable .)


state 81

    (57) open_pth -> OPEN_PTH .
    SUB             reduce using rule 57 (open_pth -> OPEN_PTH .)
    SUM             reduce using rule 57 (open_pth -> OPEN_PTH .)
    CTE_STR         reduce using rule 57 (open_pth -> OPEN_PTH .)
    CTE_NUM         reduce using rule 57 (open_pth -> OPEN_PTH .)
    OPEN_PTH        reduce using rule 57 (open_pth -> OPEN_PTH .)
    ID              reduce using rule 57 (open_pth -> OPEN_PTH .)
    FALSE           reduce using rule 57 (open_pth -> OPEN_PTH .)
    TRUE            reduce using rule 57 (open_pth -> OPEN_PTH .)


state 82

    (67) func_call -> ID . OPEN_PTH func_call_param CLOSE_PTH
    (72) variable -> ID . array
    (73) array -> . empty
    (74) array -> . OPEN_SQR expression CLOSE_SQR matrix
    (93) empty -> .
    OPEN_PTH        shift and go to state 62
    OPEN_SQR        shift and go to state 121
    OR              reduce using rule 93 (empty -> .)
    AND             reduce using rule 93 (empty -> .)
    DIV             reduce using rule 93 (empty -> .)
    MULT            reduce using rule 93 (empty -> .)
    SUB             reduce using rule 93 (empty -> .)
    SUM             reduce using rule 93 (empty -> .)
    EQUAL_TO        reduce using rule 93 (empty -> .)
    MORE_OR_EQ_THAN reduce using rule 93 (empty -> .)
    LESS_OR_EQ_THAN reduce using rule 93 (empty -> .)
    DIFFERENT_TO    reduce using rule 93 (empty -> .)
    MORE_THAN       reduce using rule 93 (empty -> .)
    LESS_THAN       reduce using rule 93 (empty -> .)
    COMMA           reduce using rule 93 (empty -> .)
    CLOSE_PTH       reduce using rule 93 (empty -> .)
    PEN_DOWN        reduce using rule 93 (empty -> .)
    PEN_UP          reduce using rule 93 (empty -> .)
    WHILE           reduce using rule 93 (empty -> .)
    IF              reduce using rule 93 (empty -> .)
    WRITE           reduce using rule 93 (empty -> .)
    READ            reduce using rule 93 (empty -> .)
    ID              reduce using rule 93 (empty -> .)
    BOOL            reduce using rule 93 (empty -> .)
    WORD            reduce using rule 93 (empty -> .)
    NUMBER          reduce using rule 93 (empty -> .)
    CENTER          reduce using rule 93 (empty -> .)
    FORWARD         reduce using rule 93 (empty -> .)
    RIGHT           reduce using rule 93 (empty -> .)
    LEFT            reduce using rule 93 (empty -> .)
    END             reduce using rule 93 (empty -> .)
    ELSE            reduce using rule 93 (empty -> .)
    CLOSE_SQR       reduce using rule 93 (empty -> .)

    array                          shift and go to state 119
    empty                          shift and go to state 120

state 83

    (39) cte_bool -> FALSE .
    OR              reduce using rule 39 (cte_bool -> FALSE .)
    AND             reduce using rule 39 (cte_bool -> FALSE .)
    DIV             reduce using rule 39 (cte_bool -> FALSE .)
    MULT            reduce using rule 39 (cte_bool -> FALSE .)
    SUB             reduce using rule 39 (cte_bool -> FALSE .)
    SUM             reduce using rule 39 (cte_bool -> FALSE .)
    EQUAL_TO        reduce using rule 39 (cte_bool -> FALSE .)
    MORE_OR_EQ_THAN reduce using rule 39 (cte_bool -> FALSE .)
    LESS_OR_EQ_THAN reduce using rule 39 (cte_bool -> FALSE .)
    DIFFERENT_TO    reduce using rule 39 (cte_bool -> FALSE .)
    MORE_THAN       reduce using rule 39 (cte_bool -> FALSE .)
    LESS_THAN       reduce using rule 39 (cte_bool -> FALSE .)
    COMMA           reduce using rule 39 (cte_bool -> FALSE .)
    CLOSE_PTH       reduce using rule 39 (cte_bool -> FALSE .)
    PEN_DOWN        reduce using rule 39 (cte_bool -> FALSE .)
    PEN_UP          reduce using rule 39 (cte_bool -> FALSE .)
    WHILE           reduce using rule 39 (cte_bool -> FALSE .)
    IF              reduce using rule 39 (cte_bool -> FALSE .)
    WRITE           reduce using rule 39 (cte_bool -> FALSE .)
    READ            reduce using rule 39 (cte_bool -> FALSE .)
    ID              reduce using rule 39 (cte_bool -> FALSE .)
    BOOL            reduce using rule 39 (cte_bool -> FALSE .)
    WORD            reduce using rule 39 (cte_bool -> FALSE .)
    NUMBER          reduce using rule 39 (cte_bool -> FALSE .)
    CENTER          reduce using rule 39 (cte_bool -> FALSE .)
    FORWARD         reduce using rule 39 (cte_bool -> FALSE .)
    RIGHT           reduce using rule 39 (cte_bool -> FALSE .)
    LEFT            reduce using rule 39 (cte_bool -> FALSE .)
    END             reduce using rule 39 (cte_bool -> FALSE .)
    ELSE            reduce using rule 39 (cte_bool -> FALSE .)
    CLOSE_SQR       reduce using rule 39 (cte_bool -> FALSE .)


state 84

    (40) cte_bool -> TRUE .
    OR              reduce using rule 40 (cte_bool -> TRUE .)
    AND             reduce using rule 40 (cte_bool -> TRUE .)
    DIV             reduce using rule 40 (cte_bool -> TRUE .)
    MULT            reduce using rule 40 (cte_bool -> TRUE .)
    SUB             reduce using rule 40 (cte_bool -> TRUE .)
    SUM             reduce using rule 40 (cte_bool -> TRUE .)
    EQUAL_TO        reduce using rule 40 (cte_bool -> TRUE .)
    MORE_OR_EQ_THAN reduce using rule 40 (cte_bool -> TRUE .)
    LESS_OR_EQ_THAN reduce using rule 40 (cte_bool -> TRUE .)
    DIFFERENT_TO    reduce using rule 40 (cte_bool -> TRUE .)
    MORE_THAN       reduce using rule 40 (cte_bool -> TRUE .)
    LESS_THAN       reduce using rule 40 (cte_bool -> TRUE .)
    COMMA           reduce using rule 40 (cte_bool -> TRUE .)
    CLOSE_PTH       reduce using rule 40 (cte_bool -> TRUE .)
    PEN_DOWN        reduce using rule 40 (cte_bool -> TRUE .)
    PEN_UP          reduce using rule 40 (cte_bool -> TRUE .)
    WHILE           reduce using rule 40 (cte_bool -> TRUE .)
    IF              reduce using rule 40 (cte_bool -> TRUE .)
    WRITE           reduce using rule 40 (cte_bool -> TRUE .)
    READ            reduce using rule 40 (cte_bool -> TRUE .)
    ID              reduce using rule 40 (cte_bool -> TRUE .)
    BOOL            reduce using rule 40 (cte_bool -> TRUE .)
    WORD            reduce using rule 40 (cte_bool -> TRUE .)
    NUMBER          reduce using rule 40 (cte_bool -> TRUE .)
    CENTER          reduce using rule 40 (cte_bool -> TRUE .)
    FORWARD         reduce using rule 40 (cte_bool -> TRUE .)
    RIGHT           reduce using rule 40 (cte_bool -> TRUE .)
    LEFT            reduce using rule 40 (cte_bool -> TRUE .)
    END             reduce using rule 40 (cte_bool -> TRUE .)
    ELSE            reduce using rule 40 (cte_bool -> TRUE .)
    CLOSE_SQR       reduce using rule 40 (cte_bool -> TRUE .)


state 85

    (80) if_stmnt -> IF con_expression . stmnt else_stmnt
    (19) stmnt -> . empty
    (20) stmnt -> . var_declaration_func stmnt
    (21) stmnt -> . pen_func stmnt
    (22) stmnt -> . move_func stmnt
    (23) stmnt -> . while_stmnt stmnt
    (24) stmnt -> . if_stmnt stmnt
    (25) stmnt -> . write stmnt
    (26) stmnt -> . read stmnt
    (27) stmnt -> . func_call stmnt
    (28) stmnt -> . var_assignation stmnt
    (93) empty -> .
    (29) var_declaration_func -> . var_type ID multiple_vars
    (90) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (91) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (85) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (83) while_stmnt -> . WHILE con_expression stmnt END
    (80) if_stmnt -> . IF con_expression stmnt else_stmnt
    (79) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (71) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (67) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (30) var_assignation -> . id assign expression e3
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    (86) move_type -> . CENTER
    (87) move_type -> . FORWARD
    (88) move_type -> . RIGHT
    (89) move_type -> . LEFT
    (32) id -> . ID
    END             reduce using rule 93 (empty -> .)
    ELSE            reduce using rule 93 (empty -> .)
    PEN_DOWN        shift and go to state 37
    PEN_UP          shift and go to state 38
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    WRITE           shift and go to state 42
    READ            shift and go to state 43
    ID              shift and go to state 36
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9
    CENTER          shift and go to state 45
    FORWARD         shift and go to state 46
    RIGHT           shift and go to state 47
    LEFT            shift and go to state 48

    stmnt                          shift and go to state 122
    empty                          shift and go to state 25
    var_declaration_func           shift and go to state 26
    pen_func                       shift and go to state 27
    move_func                      shift and go to state 28
    while_stmnt                    shift and go to state 29
    if_stmnt                       shift and go to state 30
    write                          shift and go to state 31
    read                           shift and go to state 32
    func_call                      shift and go to state 33
    var_assignation                shift and go to state 34
    var_type                       shift and go to state 35
    move_type                      shift and go to state 39
    id                             shift and go to state 44

state 86

    (79) write -> WRITE OPEN_PTH . expression CLOSE_PTH
    (41) expression -> . exp
    (42) expression -> . exp rel_op exp
    (43) exp -> . termino e1
    (44) exp -> . termino term_op termino e1
    (48) termino -> . factor e2
    (49) termino -> . factor fact_op factor e2
    (53) factor -> . expression
    (54) factor -> . term_op var_cte
    (55) factor -> . var_cte
    (56) factor -> . open_pth expression close_pth
    (46) term_op -> . SUB
    (47) term_op -> . SUM
    (34) var_cte -> . func_call
    (35) var_cte -> . cte_bool
    (36) var_cte -> . CTE_STR
    (37) var_cte -> . CTE_NUM
    (38) var_cte -> . variable
    (57) open_pth -> . OPEN_PTH
    (67) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (39) cte_bool -> . FALSE
    (40) cte_bool -> . TRUE
    (72) variable -> . ID array
    SUB             shift and go to state 74
    SUM             shift and go to state 75
    CTE_STR         shift and go to state 78
    CTE_NUM         shift and go to state 79
    OPEN_PTH        shift and go to state 81
    ID              shift and go to state 82
    FALSE           shift and go to state 83
    TRUE            shift and go to state 84

    expression                     shift and go to state 123
    exp                            shift and go to state 68
    termino                        shift and go to state 69
    term_op                        shift and go to state 70
    factor                         shift and go to state 71
    var_cte                        shift and go to state 72
    open_pth                       shift and go to state 73
    func_call                      shift and go to state 76
    cte_bool                       shift and go to state 77
    variable                       shift and go to state 80

state 87

    (71) read -> READ OPEN_PTH . variable multiple_vars CLOSE_PTH
    (72) variable -> . ID array
    ID              shift and go to state 125

    variable                       shift and go to state 124

state 88

    (30) var_assignation -> id assign . expression e3
    (41) expression -> . exp
    (42) expression -> . exp rel_op exp
    (43) exp -> . termino e1
    (44) exp -> . termino term_op termino e1
    (48) termino -> . factor e2
    (49) termino -> . factor fact_op factor e2
    (53) factor -> . expression
    (54) factor -> . term_op var_cte
    (55) factor -> . var_cte
    (56) factor -> . open_pth expression close_pth
    (46) term_op -> . SUB
    (47) term_op -> . SUM
    (34) var_cte -> . func_call
    (35) var_cte -> . cte_bool
    (36) var_cte -> . CTE_STR
    (37) var_cte -> . CTE_NUM
    (38) var_cte -> . variable
    (57) open_pth -> . OPEN_PTH
    (67) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (39) cte_bool -> . FALSE
    (40) cte_bool -> . TRUE
    (72) variable -> . ID array
    SUB             shift and go to state 74
    SUM             shift and go to state 75
    CTE_STR         shift and go to state 78
    CTE_NUM         shift and go to state 79
    OPEN_PTH        shift and go to state 81
    ID              shift and go to state 82
    FALSE           shift and go to state 83
    TRUE            shift and go to state 84

    expression                     shift and go to state 126
    exp                            shift and go to state 68
    termino                        shift and go to state 69
    term_op                        shift and go to state 70
    factor                         shift and go to state 71
    var_cte                        shift and go to state 72
    open_pth                       shift and go to state 73
    func_call                      shift and go to state 76
    cte_bool                       shift and go to state 77
    variable                       shift and go to state 80

state 89

    (33) assign -> ASSIGN .
    SUB             reduce using rule 33 (assign -> ASSIGN .)
    SUM             reduce using rule 33 (assign -> ASSIGN .)
    CTE_STR         reduce using rule 33 (assign -> ASSIGN .)
    CTE_NUM         reduce using rule 33 (assign -> ASSIGN .)
    OPEN_PTH        reduce using rule 33 (assign -> ASSIGN .)
    ID              reduce using rule 33 (assign -> ASSIGN .)
    FALSE           reduce using rule 33 (assign -> ASSIGN .)
    TRUE            reduce using rule 33 (assign -> ASSIGN .)


state 90

    (10) func_declaration -> func_type FUNC ID OPEN_PTH . parameter CLOSE_PTH stmnt END
    (15) parameter -> . empty
    (16) parameter -> . var_type ID multiple_parameters
    (93) empty -> .
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    CLOSE_PTH       reduce using rule 93 (empty -> .)
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9

    parameter                      shift and go to state 127
    empty                          shift and go to state 128
    var_type                       shift and go to state 129

state 91

    (5) multiple_var -> COMMA ID multiple_var .
    BOOL            reduce using rule 5 (multiple_var -> COMMA ID multiple_var .)
    WORD            reduce using rule 5 (multiple_var -> COMMA ID multiple_var .)
    NUMBER          reduce using rule 5 (multiple_var -> COMMA ID multiple_var .)
    VOID            reduce using rule 5 (multiple_var -> COMMA ID multiple_var .)
    MAIN            reduce using rule 5 (multiple_var -> COMMA ID multiple_var .)


state 92

    (29) var_declaration_func -> var_type ID multiple_vars .
    PEN_DOWN        reduce using rule 29 (var_declaration_func -> var_type ID multiple_vars .)
    PEN_UP          reduce using rule 29 (var_declaration_func -> var_type ID multiple_vars .)
    WHILE           reduce using rule 29 (var_declaration_func -> var_type ID multiple_vars .)
    IF              reduce using rule 29 (var_declaration_func -> var_type ID multiple_vars .)
    WRITE           reduce using rule 29 (var_declaration_func -> var_type ID multiple_vars .)
    READ            reduce using rule 29 (var_declaration_func -> var_type ID multiple_vars .)
    ID              reduce using rule 29 (var_declaration_func -> var_type ID multiple_vars .)
    BOOL            reduce using rule 29 (var_declaration_func -> var_type ID multiple_vars .)
    WORD            reduce using rule 29 (var_declaration_func -> var_type ID multiple_vars .)
    NUMBER          reduce using rule 29 (var_declaration_func -> var_type ID multiple_vars .)
    CENTER          reduce using rule 29 (var_declaration_func -> var_type ID multiple_vars .)
    FORWARD         reduce using rule 29 (var_declaration_func -> var_type ID multiple_vars .)
    RIGHT           reduce using rule 29 (var_declaration_func -> var_type ID multiple_vars .)
    LEFT            reduce using rule 29 (var_declaration_func -> var_type ID multiple_vars .)
    END             reduce using rule 29 (var_declaration_func -> var_type ID multiple_vars .)
    ELSE            reduce using rule 29 (var_declaration_func -> var_type ID multiple_vars .)


state 93

    (77) multiple_vars -> empty .
    PEN_DOWN        reduce using rule 77 (multiple_vars -> empty .)
    PEN_UP          reduce using rule 77 (multiple_vars -> empty .)
    WHILE           reduce using rule 77 (multiple_vars -> empty .)
    IF              reduce using rule 77 (multiple_vars -> empty .)
    WRITE           reduce using rule 77 (multiple_vars -> empty .)
    READ            reduce using rule 77 (multiple_vars -> empty .)
    ID              reduce using rule 77 (multiple_vars -> empty .)
    BOOL            reduce using rule 77 (multiple_vars -> empty .)
    WORD            reduce using rule 77 (multiple_vars -> empty .)
    NUMBER          reduce using rule 77 (multiple_vars -> empty .)
    CENTER          reduce using rule 77 (multiple_vars -> empty .)
    FORWARD         reduce using rule 77 (multiple_vars -> empty .)
    RIGHT           reduce using rule 77 (multiple_vars -> empty .)
    LEFT            reduce using rule 77 (multiple_vars -> empty .)
    END             reduce using rule 77 (multiple_vars -> empty .)
    ELSE            reduce using rule 77 (multiple_vars -> empty .)
    CLOSE_PTH       reduce using rule 77 (multiple_vars -> empty .)


state 94

    (78) multiple_vars -> COMMA . variable
    (72) variable -> . ID array
    ID              shift and go to state 125

    variable                       shift and go to state 130

state 95

    (67) func_call -> ID OPEN_PTH func_call_param . CLOSE_PTH
    CLOSE_PTH       shift and go to state 131


state 96

    (68) func_call_param -> expression . multiple_fc_param
    (53) factor -> expression .
    (69) multiple_fc_param -> . empty
    (70) multiple_fc_param -> . COMMA func_call_param
    (93) empty -> .
  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for CLOSE_PTH resolved using rule 53 (factor -> expression .)
    CLOSE_PTH       reduce using rule 53 (factor -> expression .)
    DIV             reduce using rule 53 (factor -> expression .)
    MULT            reduce using rule 53 (factor -> expression .)
    SUB             reduce using rule 53 (factor -> expression .)
    SUM             reduce using rule 53 (factor -> expression .)
    EQUAL_TO        reduce using rule 53 (factor -> expression .)
    MORE_OR_EQ_THAN reduce using rule 53 (factor -> expression .)
    LESS_OR_EQ_THAN reduce using rule 53 (factor -> expression .)
    DIFFERENT_TO    reduce using rule 53 (factor -> expression .)
    MORE_THAN       reduce using rule 53 (factor -> expression .)
    LESS_THAN       reduce using rule 53 (factor -> expression .)
    COMMA           shift and go to state 134

    multiple_fc_param              shift and go to state 132
    empty                          shift and go to state 133

state 97

    (90) pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .
    PEN_DOWN        reduce using rule 90 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    PEN_UP          reduce using rule 90 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    WHILE           reduce using rule 90 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    IF              reduce using rule 90 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    WRITE           reduce using rule 90 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    READ            reduce using rule 90 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    ID              reduce using rule 90 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    BOOL            reduce using rule 90 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    WORD            reduce using rule 90 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    NUMBER          reduce using rule 90 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    CENTER          reduce using rule 90 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    FORWARD         reduce using rule 90 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    RIGHT           reduce using rule 90 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    LEFT            reduce using rule 90 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    END             reduce using rule 90 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    ELSE            reduce using rule 90 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)


state 98

    (91) pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .
    PEN_DOWN        reduce using rule 91 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    PEN_UP          reduce using rule 91 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    WHILE           reduce using rule 91 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    IF              reduce using rule 91 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    WRITE           reduce using rule 91 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    READ            reduce using rule 91 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    ID              reduce using rule 91 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    BOOL            reduce using rule 91 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    WORD            reduce using rule 91 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    NUMBER          reduce using rule 91 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    CENTER          reduce using rule 91 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    FORWARD         reduce using rule 91 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    RIGHT           reduce using rule 91 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    LEFT            reduce using rule 91 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    END             reduce using rule 91 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    ELSE            reduce using rule 91 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)


state 99

    (85) move_func -> move_type OPEN_PTH func_call_param . CLOSE_PTH
    CLOSE_PTH       shift and go to state 135


state 100

    (83) while_stmnt -> WHILE con_expression stmnt . END
    END             shift and go to state 136


state 101

    (84) con_expression -> expression log_op . expression
    (41) expression -> . exp
    (42) expression -> . exp rel_op exp
    (43) exp -> . termino e1
    (44) exp -> . termino term_op termino e1
    (48) termino -> . factor e2
    (49) termino -> . factor fact_op factor e2
    (53) factor -> . expression
    (54) factor -> . term_op var_cte
    (55) factor -> . var_cte
    (56) factor -> . open_pth expression close_pth
    (46) term_op -> . SUB
    (47) term_op -> . SUM
    (34) var_cte -> . func_call
    (35) var_cte -> . cte_bool
    (36) var_cte -> . CTE_STR
    (37) var_cte -> . CTE_NUM
    (38) var_cte -> . variable
    (57) open_pth -> . OPEN_PTH
    (67) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (39) cte_bool -> . FALSE
    (40) cte_bool -> . TRUE
    (72) variable -> . ID array
    SUB             shift and go to state 74
    SUM             shift and go to state 75
    CTE_STR         shift and go to state 78
    CTE_NUM         shift and go to state 79
    OPEN_PTH        shift and go to state 81
    ID              shift and go to state 82
    FALSE           shift and go to state 83
    TRUE            shift and go to state 84

    expression                     shift and go to state 137
    exp                            shift and go to state 68
    termino                        shift and go to state 69
    term_op                        shift and go to state 70
    factor                         shift and go to state 71
    var_cte                        shift and go to state 72
    open_pth                       shift and go to state 73
    func_call                      shift and go to state 76
    cte_bool                       shift and go to state 77
    variable                       shift and go to state 80

state 102

    (59) log_op -> OR .
    SUB             reduce using rule 59 (log_op -> OR .)
    SUM             reduce using rule 59 (log_op -> OR .)
    CTE_STR         reduce using rule 59 (log_op -> OR .)
    CTE_NUM         reduce using rule 59 (log_op -> OR .)
    OPEN_PTH        reduce using rule 59 (log_op -> OR .)
    ID              reduce using rule 59 (log_op -> OR .)
    FALSE           reduce using rule 59 (log_op -> OR .)
    TRUE            reduce using rule 59 (log_op -> OR .)


state 103

    (60) log_op -> AND .
    SUB             reduce using rule 60 (log_op -> AND .)
    SUM             reduce using rule 60 (log_op -> AND .)
    CTE_STR         reduce using rule 60 (log_op -> AND .)
    CTE_NUM         reduce using rule 60 (log_op -> AND .)
    OPEN_PTH        reduce using rule 60 (log_op -> AND .)
    ID              reduce using rule 60 (log_op -> AND .)
    FALSE           reduce using rule 60 (log_op -> AND .)
    TRUE            reduce using rule 60 (log_op -> AND .)


state 104

    (42) expression -> exp rel_op . exp
    (43) exp -> . termino e1
    (44) exp -> . termino term_op termino e1
    (48) termino -> . factor e2
    (49) termino -> . factor fact_op factor e2
    (53) factor -> . expression
    (54) factor -> . term_op var_cte
    (55) factor -> . var_cte
    (56) factor -> . open_pth expression close_pth
    (41) expression -> . exp
    (42) expression -> . exp rel_op exp
    (46) term_op -> . SUB
    (47) term_op -> . SUM
    (34) var_cte -> . func_call
    (35) var_cte -> . cte_bool
    (36) var_cte -> . CTE_STR
    (37) var_cte -> . CTE_NUM
    (38) var_cte -> . variable
    (57) open_pth -> . OPEN_PTH
    (67) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (39) cte_bool -> . FALSE
    (40) cte_bool -> . TRUE
    (72) variable -> . ID array
    SUB             shift and go to state 74
    SUM             shift and go to state 75
    CTE_STR         shift and go to state 78
    CTE_NUM         shift and go to state 79
    OPEN_PTH        shift and go to state 81
    ID              shift and go to state 82
    FALSE           shift and go to state 83
    TRUE            shift and go to state 84

    exp                            shift and go to state 138
    termino                        shift and go to state 69
    term_op                        shift and go to state 70
    factor                         shift and go to state 71
    expression                     shift and go to state 139
    var_cte                        shift and go to state 72
    open_pth                       shift and go to state 73
    func_call                      shift and go to state 76
    cte_bool                       shift and go to state 77
    variable                       shift and go to state 80

state 105

    (61) rel_op -> EQUAL_TO .
    SUB             reduce using rule 61 (rel_op -> EQUAL_TO .)
    SUM             reduce using rule 61 (rel_op -> EQUAL_TO .)
    CTE_STR         reduce using rule 61 (rel_op -> EQUAL_TO .)
    CTE_NUM         reduce using rule 61 (rel_op -> EQUAL_TO .)
    OPEN_PTH        reduce using rule 61 (rel_op -> EQUAL_TO .)
    ID              reduce using rule 61 (rel_op -> EQUAL_TO .)
    FALSE           reduce using rule 61 (rel_op -> EQUAL_TO .)
    TRUE            reduce using rule 61 (rel_op -> EQUAL_TO .)


state 106

    (62) rel_op -> MORE_OR_EQ_THAN .
    SUB             reduce using rule 62 (rel_op -> MORE_OR_EQ_THAN .)
    SUM             reduce using rule 62 (rel_op -> MORE_OR_EQ_THAN .)
    CTE_STR         reduce using rule 62 (rel_op -> MORE_OR_EQ_THAN .)
    CTE_NUM         reduce using rule 62 (rel_op -> MORE_OR_EQ_THAN .)
    OPEN_PTH        reduce using rule 62 (rel_op -> MORE_OR_EQ_THAN .)
    ID              reduce using rule 62 (rel_op -> MORE_OR_EQ_THAN .)
    FALSE           reduce using rule 62 (rel_op -> MORE_OR_EQ_THAN .)
    TRUE            reduce using rule 62 (rel_op -> MORE_OR_EQ_THAN .)


state 107

    (63) rel_op -> LESS_OR_EQ_THAN .
    SUB             reduce using rule 63 (rel_op -> LESS_OR_EQ_THAN .)
    SUM             reduce using rule 63 (rel_op -> LESS_OR_EQ_THAN .)
    CTE_STR         reduce using rule 63 (rel_op -> LESS_OR_EQ_THAN .)
    CTE_NUM         reduce using rule 63 (rel_op -> LESS_OR_EQ_THAN .)
    OPEN_PTH        reduce using rule 63 (rel_op -> LESS_OR_EQ_THAN .)
    ID              reduce using rule 63 (rel_op -> LESS_OR_EQ_THAN .)
    FALSE           reduce using rule 63 (rel_op -> LESS_OR_EQ_THAN .)
    TRUE            reduce using rule 63 (rel_op -> LESS_OR_EQ_THAN .)


state 108

    (64) rel_op -> DIFFERENT_TO .
    SUB             reduce using rule 64 (rel_op -> DIFFERENT_TO .)
    SUM             reduce using rule 64 (rel_op -> DIFFERENT_TO .)
    CTE_STR         reduce using rule 64 (rel_op -> DIFFERENT_TO .)
    CTE_NUM         reduce using rule 64 (rel_op -> DIFFERENT_TO .)
    OPEN_PTH        reduce using rule 64 (rel_op -> DIFFERENT_TO .)
    ID              reduce using rule 64 (rel_op -> DIFFERENT_TO .)
    FALSE           reduce using rule 64 (rel_op -> DIFFERENT_TO .)
    TRUE            reduce using rule 64 (rel_op -> DIFFERENT_TO .)


state 109

    (65) rel_op -> MORE_THAN .
    SUB             reduce using rule 65 (rel_op -> MORE_THAN .)
    SUM             reduce using rule 65 (rel_op -> MORE_THAN .)
    CTE_STR         reduce using rule 65 (rel_op -> MORE_THAN .)
    CTE_NUM         reduce using rule 65 (rel_op -> MORE_THAN .)
    OPEN_PTH        reduce using rule 65 (rel_op -> MORE_THAN .)
    ID              reduce using rule 65 (rel_op -> MORE_THAN .)
    FALSE           reduce using rule 65 (rel_op -> MORE_THAN .)
    TRUE            reduce using rule 65 (rel_op -> MORE_THAN .)


state 110

    (66) rel_op -> LESS_THAN .
    SUB             reduce using rule 66 (rel_op -> LESS_THAN .)
    SUM             reduce using rule 66 (rel_op -> LESS_THAN .)
    CTE_STR         reduce using rule 66 (rel_op -> LESS_THAN .)
    CTE_NUM         reduce using rule 66 (rel_op -> LESS_THAN .)
    OPEN_PTH        reduce using rule 66 (rel_op -> LESS_THAN .)
    ID              reduce using rule 66 (rel_op -> LESS_THAN .)
    FALSE           reduce using rule 66 (rel_op -> LESS_THAN .)
    TRUE            reduce using rule 66 (rel_op -> LESS_THAN .)


state 111

    (43) exp -> termino e1 .
    OR              reduce using rule 43 (exp -> termino e1 .)
    AND             reduce using rule 43 (exp -> termino e1 .)
    DIV             reduce using rule 43 (exp -> termino e1 .)
    MULT            reduce using rule 43 (exp -> termino e1 .)
    SUB             reduce using rule 43 (exp -> termino e1 .)
    SUM             reduce using rule 43 (exp -> termino e1 .)
    EQUAL_TO        reduce using rule 43 (exp -> termino e1 .)
    MORE_OR_EQ_THAN reduce using rule 43 (exp -> termino e1 .)
    LESS_OR_EQ_THAN reduce using rule 43 (exp -> termino e1 .)
    DIFFERENT_TO    reduce using rule 43 (exp -> termino e1 .)
    MORE_THAN       reduce using rule 43 (exp -> termino e1 .)
    LESS_THAN       reduce using rule 43 (exp -> termino e1 .)
    COMMA           reduce using rule 43 (exp -> termino e1 .)
    CLOSE_PTH       reduce using rule 43 (exp -> termino e1 .)
    PEN_DOWN        reduce using rule 43 (exp -> termino e1 .)
    PEN_UP          reduce using rule 43 (exp -> termino e1 .)
    WHILE           reduce using rule 43 (exp -> termino e1 .)
    IF              reduce using rule 43 (exp -> termino e1 .)
    WRITE           reduce using rule 43 (exp -> termino e1 .)
    READ            reduce using rule 43 (exp -> termino e1 .)
    ID              reduce using rule 43 (exp -> termino e1 .)
    BOOL            reduce using rule 43 (exp -> termino e1 .)
    WORD            reduce using rule 43 (exp -> termino e1 .)
    NUMBER          reduce using rule 43 (exp -> termino e1 .)
    CENTER          reduce using rule 43 (exp -> termino e1 .)
    FORWARD         reduce using rule 43 (exp -> termino e1 .)
    RIGHT           reduce using rule 43 (exp -> termino e1 .)
    LEFT            reduce using rule 43 (exp -> termino e1 .)
    END             reduce using rule 43 (exp -> termino e1 .)
    ELSE            reduce using rule 43 (exp -> termino e1 .)
    CLOSE_SQR       reduce using rule 43 (exp -> termino e1 .)


state 112

    (44) exp -> termino term_op . termino e1
    (48) termino -> . factor e2
    (49) termino -> . factor fact_op factor e2
    (53) factor -> . expression
    (54) factor -> . term_op var_cte
    (55) factor -> . var_cte
    (56) factor -> . open_pth expression close_pth
    (41) expression -> . exp
    (42) expression -> . exp rel_op exp
    (46) term_op -> . SUB
    (47) term_op -> . SUM
    (34) var_cte -> . func_call
    (35) var_cte -> . cte_bool
    (36) var_cte -> . CTE_STR
    (37) var_cte -> . CTE_NUM
    (38) var_cte -> . variable
    (57) open_pth -> . OPEN_PTH
    (43) exp -> . termino e1
    (44) exp -> . termino term_op termino e1
    (67) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (39) cte_bool -> . FALSE
    (40) cte_bool -> . TRUE
    (72) variable -> . ID array
    SUB             shift and go to state 74
    SUM             shift and go to state 75
    CTE_STR         shift and go to state 78
    CTE_NUM         shift and go to state 79
    OPEN_PTH        shift and go to state 81
    ID              shift and go to state 82
    FALSE           shift and go to state 83
    TRUE            shift and go to state 84

    termino                        shift and go to state 140
    term_op                        shift and go to state 70
    factor                         shift and go to state 71
    expression                     shift and go to state 139
    var_cte                        shift and go to state 72
    open_pth                       shift and go to state 73
    exp                            shift and go to state 68
    func_call                      shift and go to state 76
    cte_bool                       shift and go to state 77
    variable                       shift and go to state 80

state 113

    (54) factor -> term_op var_cte .
    OR              reduce using rule 54 (factor -> term_op var_cte .)
    AND             reduce using rule 54 (factor -> term_op var_cte .)
    DIV             reduce using rule 54 (factor -> term_op var_cte .)
    MULT            reduce using rule 54 (factor -> term_op var_cte .)
    SUB             reduce using rule 54 (factor -> term_op var_cte .)
    SUM             reduce using rule 54 (factor -> term_op var_cte .)
    EQUAL_TO        reduce using rule 54 (factor -> term_op var_cte .)
    MORE_OR_EQ_THAN reduce using rule 54 (factor -> term_op var_cte .)
    LESS_OR_EQ_THAN reduce using rule 54 (factor -> term_op var_cte .)
    DIFFERENT_TO    reduce using rule 54 (factor -> term_op var_cte .)
    MORE_THAN       reduce using rule 54 (factor -> term_op var_cte .)
    LESS_THAN       reduce using rule 54 (factor -> term_op var_cte .)
    COMMA           reduce using rule 54 (factor -> term_op var_cte .)
    CLOSE_PTH       reduce using rule 54 (factor -> term_op var_cte .)
    PEN_DOWN        reduce using rule 54 (factor -> term_op var_cte .)
    PEN_UP          reduce using rule 54 (factor -> term_op var_cte .)
    WHILE           reduce using rule 54 (factor -> term_op var_cte .)
    IF              reduce using rule 54 (factor -> term_op var_cte .)
    WRITE           reduce using rule 54 (factor -> term_op var_cte .)
    READ            reduce using rule 54 (factor -> term_op var_cte .)
    ID              reduce using rule 54 (factor -> term_op var_cte .)
    BOOL            reduce using rule 54 (factor -> term_op var_cte .)
    WORD            reduce using rule 54 (factor -> term_op var_cte .)
    NUMBER          reduce using rule 54 (factor -> term_op var_cte .)
    CENTER          reduce using rule 54 (factor -> term_op var_cte .)
    FORWARD         reduce using rule 54 (factor -> term_op var_cte .)
    RIGHT           reduce using rule 54 (factor -> term_op var_cte .)
    LEFT            reduce using rule 54 (factor -> term_op var_cte .)
    END             reduce using rule 54 (factor -> term_op var_cte .)
    ELSE            reduce using rule 54 (factor -> term_op var_cte .)
    CLOSE_SQR       reduce using rule 54 (factor -> term_op var_cte .)


state 114

    (48) termino -> factor e2 .
    OR              reduce using rule 48 (termino -> factor e2 .)
    AND             reduce using rule 48 (termino -> factor e2 .)
    DIV             reduce using rule 48 (termino -> factor e2 .)
    MULT            reduce using rule 48 (termino -> factor e2 .)
    SUB             reduce using rule 48 (termino -> factor e2 .)
    SUM             reduce using rule 48 (termino -> factor e2 .)
    EQUAL_TO        reduce using rule 48 (termino -> factor e2 .)
    MORE_OR_EQ_THAN reduce using rule 48 (termino -> factor e2 .)
    LESS_OR_EQ_THAN reduce using rule 48 (termino -> factor e2 .)
    DIFFERENT_TO    reduce using rule 48 (termino -> factor e2 .)
    MORE_THAN       reduce using rule 48 (termino -> factor e2 .)
    LESS_THAN       reduce using rule 48 (termino -> factor e2 .)
    COMMA           reduce using rule 48 (termino -> factor e2 .)
    CLOSE_PTH       reduce using rule 48 (termino -> factor e2 .)
    PEN_DOWN        reduce using rule 48 (termino -> factor e2 .)
    PEN_UP          reduce using rule 48 (termino -> factor e2 .)
    WHILE           reduce using rule 48 (termino -> factor e2 .)
    IF              reduce using rule 48 (termino -> factor e2 .)
    WRITE           reduce using rule 48 (termino -> factor e2 .)
    READ            reduce using rule 48 (termino -> factor e2 .)
    ID              reduce using rule 48 (termino -> factor e2 .)
    BOOL            reduce using rule 48 (termino -> factor e2 .)
    WORD            reduce using rule 48 (termino -> factor e2 .)
    NUMBER          reduce using rule 48 (termino -> factor e2 .)
    CENTER          reduce using rule 48 (termino -> factor e2 .)
    FORWARD         reduce using rule 48 (termino -> factor e2 .)
    RIGHT           reduce using rule 48 (termino -> factor e2 .)
    LEFT            reduce using rule 48 (termino -> factor e2 .)
    END             reduce using rule 48 (termino -> factor e2 .)
    ELSE            reduce using rule 48 (termino -> factor e2 .)
    CLOSE_SQR       reduce using rule 48 (termino -> factor e2 .)


state 115

    (49) termino -> factor fact_op . factor e2
    (53) factor -> . expression
    (54) factor -> . term_op var_cte
    (55) factor -> . var_cte
    (56) factor -> . open_pth expression close_pth
    (41) expression -> . exp
    (42) expression -> . exp rel_op exp
    (46) term_op -> . SUB
    (47) term_op -> . SUM
    (34) var_cte -> . func_call
    (35) var_cte -> . cte_bool
    (36) var_cte -> . CTE_STR
    (37) var_cte -> . CTE_NUM
    (38) var_cte -> . variable
    (57) open_pth -> . OPEN_PTH
    (43) exp -> . termino e1
    (44) exp -> . termino term_op termino e1
    (67) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (39) cte_bool -> . FALSE
    (40) cte_bool -> . TRUE
    (72) variable -> . ID array
    (48) termino -> . factor e2
    (49) termino -> . factor fact_op factor e2
    SUB             shift and go to state 74
    SUM             shift and go to state 75
    CTE_STR         shift and go to state 78
    CTE_NUM         shift and go to state 79
    OPEN_PTH        shift and go to state 81
    ID              shift and go to state 82
    FALSE           shift and go to state 83
    TRUE            shift and go to state 84

    factor                         shift and go to state 141
    expression                     shift and go to state 139
    term_op                        shift and go to state 70
    var_cte                        shift and go to state 72
    open_pth                       shift and go to state 73
    exp                            shift and go to state 68
    func_call                      shift and go to state 76
    cte_bool                       shift and go to state 77
    variable                       shift and go to state 80
    termino                        shift and go to state 69

state 116

    (51) fact_op -> DIV .
    SUB             reduce using rule 51 (fact_op -> DIV .)
    SUM             reduce using rule 51 (fact_op -> DIV .)
    CTE_STR         reduce using rule 51 (fact_op -> DIV .)
    CTE_NUM         reduce using rule 51 (fact_op -> DIV .)
    OPEN_PTH        reduce using rule 51 (fact_op -> DIV .)
    ID              reduce using rule 51 (fact_op -> DIV .)
    FALSE           reduce using rule 51 (fact_op -> DIV .)
    TRUE            reduce using rule 51 (fact_op -> DIV .)


state 117

    (52) fact_op -> MULT .
    SUB             reduce using rule 52 (fact_op -> MULT .)
    SUM             reduce using rule 52 (fact_op -> MULT .)
    CTE_STR         reduce using rule 52 (fact_op -> MULT .)
    CTE_NUM         reduce using rule 52 (fact_op -> MULT .)
    OPEN_PTH        reduce using rule 52 (fact_op -> MULT .)
    ID              reduce using rule 52 (fact_op -> MULT .)
    FALSE           reduce using rule 52 (fact_op -> MULT .)
    TRUE            reduce using rule 52 (fact_op -> MULT .)


state 118

    (56) factor -> open_pth expression . close_pth
    (53) factor -> expression .
    (58) close_pth -> . CLOSE_PTH
  ! shift/reduce conflict for CLOSE_PTH resolved as shift
    EQUAL_TO        reduce using rule 53 (factor -> expression .)
    MORE_OR_EQ_THAN reduce using rule 53 (factor -> expression .)
    LESS_OR_EQ_THAN reduce using rule 53 (factor -> expression .)
    DIFFERENT_TO    reduce using rule 53 (factor -> expression .)
    MORE_THAN       reduce using rule 53 (factor -> expression .)
    LESS_THAN       reduce using rule 53 (factor -> expression .)
    DIV             reduce using rule 53 (factor -> expression .)
    MULT            reduce using rule 53 (factor -> expression .)
    SUB             reduce using rule 53 (factor -> expression .)
    SUM             reduce using rule 53 (factor -> expression .)
    CLOSE_PTH       shift and go to state 143

    close_pth                      shift and go to state 142

state 119

    (72) variable -> ID array .
    OR              reduce using rule 72 (variable -> ID array .)
    AND             reduce using rule 72 (variable -> ID array .)
    DIV             reduce using rule 72 (variable -> ID array .)
    MULT            reduce using rule 72 (variable -> ID array .)
    SUB             reduce using rule 72 (variable -> ID array .)
    SUM             reduce using rule 72 (variable -> ID array .)
    EQUAL_TO        reduce using rule 72 (variable -> ID array .)
    MORE_OR_EQ_THAN reduce using rule 72 (variable -> ID array .)
    LESS_OR_EQ_THAN reduce using rule 72 (variable -> ID array .)
    DIFFERENT_TO    reduce using rule 72 (variable -> ID array .)
    MORE_THAN       reduce using rule 72 (variable -> ID array .)
    LESS_THAN       reduce using rule 72 (variable -> ID array .)
    COMMA           reduce using rule 72 (variable -> ID array .)
    CLOSE_PTH       reduce using rule 72 (variable -> ID array .)
    PEN_DOWN        reduce using rule 72 (variable -> ID array .)
    PEN_UP          reduce using rule 72 (variable -> ID array .)
    WHILE           reduce using rule 72 (variable -> ID array .)
    IF              reduce using rule 72 (variable -> ID array .)
    WRITE           reduce using rule 72 (variable -> ID array .)
    READ            reduce using rule 72 (variable -> ID array .)
    ID              reduce using rule 72 (variable -> ID array .)
    BOOL            reduce using rule 72 (variable -> ID array .)
    WORD            reduce using rule 72 (variable -> ID array .)
    NUMBER          reduce using rule 72 (variable -> ID array .)
    CENTER          reduce using rule 72 (variable -> ID array .)
    FORWARD         reduce using rule 72 (variable -> ID array .)
    RIGHT           reduce using rule 72 (variable -> ID array .)
    LEFT            reduce using rule 72 (variable -> ID array .)
    END             reduce using rule 72 (variable -> ID array .)
    ELSE            reduce using rule 72 (variable -> ID array .)
    CLOSE_SQR       reduce using rule 72 (variable -> ID array .)


state 120

    (73) array -> empty .
    OR              reduce using rule 73 (array -> empty .)
    AND             reduce using rule 73 (array -> empty .)
    DIV             reduce using rule 73 (array -> empty .)
    MULT            reduce using rule 73 (array -> empty .)
    SUB             reduce using rule 73 (array -> empty .)
    SUM             reduce using rule 73 (array -> empty .)
    EQUAL_TO        reduce using rule 73 (array -> empty .)
    MORE_OR_EQ_THAN reduce using rule 73 (array -> empty .)
    LESS_OR_EQ_THAN reduce using rule 73 (array -> empty .)
    DIFFERENT_TO    reduce using rule 73 (array -> empty .)
    MORE_THAN       reduce using rule 73 (array -> empty .)
    LESS_THAN       reduce using rule 73 (array -> empty .)
    COMMA           reduce using rule 73 (array -> empty .)
    CLOSE_PTH       reduce using rule 73 (array -> empty .)
    PEN_DOWN        reduce using rule 73 (array -> empty .)
    PEN_UP          reduce using rule 73 (array -> empty .)
    WHILE           reduce using rule 73 (array -> empty .)
    IF              reduce using rule 73 (array -> empty .)
    WRITE           reduce using rule 73 (array -> empty .)
    READ            reduce using rule 73 (array -> empty .)
    ID              reduce using rule 73 (array -> empty .)
    BOOL            reduce using rule 73 (array -> empty .)
    WORD            reduce using rule 73 (array -> empty .)
    NUMBER          reduce using rule 73 (array -> empty .)
    CENTER          reduce using rule 73 (array -> empty .)
    FORWARD         reduce using rule 73 (array -> empty .)
    RIGHT           reduce using rule 73 (array -> empty .)
    LEFT            reduce using rule 73 (array -> empty .)
    END             reduce using rule 73 (array -> empty .)
    ELSE            reduce using rule 73 (array -> empty .)
    CLOSE_SQR       reduce using rule 73 (array -> empty .)


state 121

    (74) array -> OPEN_SQR . expression CLOSE_SQR matrix
    (41) expression -> . exp
    (42) expression -> . exp rel_op exp
    (43) exp -> . termino e1
    (44) exp -> . termino term_op termino e1
    (48) termino -> . factor e2
    (49) termino -> . factor fact_op factor e2
    (53) factor -> . expression
    (54) factor -> . term_op var_cte
    (55) factor -> . var_cte
    (56) factor -> . open_pth expression close_pth
    (46) term_op -> . SUB
    (47) term_op -> . SUM
    (34) var_cte -> . func_call
    (35) var_cte -> . cte_bool
    (36) var_cte -> . CTE_STR
    (37) var_cte -> . CTE_NUM
    (38) var_cte -> . variable
    (57) open_pth -> . OPEN_PTH
    (67) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (39) cte_bool -> . FALSE
    (40) cte_bool -> . TRUE
    (72) variable -> . ID array
    SUB             shift and go to state 74
    SUM             shift and go to state 75
    CTE_STR         shift and go to state 78
    CTE_NUM         shift and go to state 79
    OPEN_PTH        shift and go to state 81
    ID              shift and go to state 82
    FALSE           shift and go to state 83
    TRUE            shift and go to state 84

    expression                     shift and go to state 144
    exp                            shift and go to state 68
    termino                        shift and go to state 69
    term_op                        shift and go to state 70
    factor                         shift and go to state 71
    var_cte                        shift and go to state 72
    open_pth                       shift and go to state 73
    func_call                      shift and go to state 76
    cte_bool                       shift and go to state 77
    variable                       shift and go to state 80

state 122

    (80) if_stmnt -> IF con_expression stmnt . else_stmnt
    (81) else_stmnt -> . END
    (82) else_stmnt -> . ELSE stmnt END
    END             shift and go to state 146
    ELSE            shift and go to state 147

    else_stmnt                     shift and go to state 145

state 123

    (79) write -> WRITE OPEN_PTH expression . CLOSE_PTH
    (53) factor -> expression .
  ! shift/reduce conflict for CLOSE_PTH resolved as shift
    CLOSE_PTH       shift and go to state 148
    EQUAL_TO        reduce using rule 53 (factor -> expression .)
    MORE_OR_EQ_THAN reduce using rule 53 (factor -> expression .)
    LESS_OR_EQ_THAN reduce using rule 53 (factor -> expression .)
    DIFFERENT_TO    reduce using rule 53 (factor -> expression .)
    MORE_THAN       reduce using rule 53 (factor -> expression .)
    LESS_THAN       reduce using rule 53 (factor -> expression .)
    DIV             reduce using rule 53 (factor -> expression .)
    MULT            reduce using rule 53 (factor -> expression .)
    SUB             reduce using rule 53 (factor -> expression .)
    SUM             reduce using rule 53 (factor -> expression .)


state 124

    (71) read -> READ OPEN_PTH variable . multiple_vars CLOSE_PTH
    (77) multiple_vars -> . empty
    (78) multiple_vars -> . COMMA variable
    (93) empty -> .
    COMMA           shift and go to state 94
    CLOSE_PTH       reduce using rule 93 (empty -> .)

    multiple_vars                  shift and go to state 149
    empty                          shift and go to state 93

state 125

    (72) variable -> ID . array
    (73) array -> . empty
    (74) array -> . OPEN_SQR expression CLOSE_SQR matrix
    (93) empty -> .
    OPEN_SQR        shift and go to state 121
    COMMA           reduce using rule 93 (empty -> .)
    CLOSE_PTH       reduce using rule 93 (empty -> .)
    PEN_DOWN        reduce using rule 93 (empty -> .)
    PEN_UP          reduce using rule 93 (empty -> .)
    WHILE           reduce using rule 93 (empty -> .)
    IF              reduce using rule 93 (empty -> .)
    WRITE           reduce using rule 93 (empty -> .)
    READ            reduce using rule 93 (empty -> .)
    ID              reduce using rule 93 (empty -> .)
    BOOL            reduce using rule 93 (empty -> .)
    WORD            reduce using rule 93 (empty -> .)
    NUMBER          reduce using rule 93 (empty -> .)
    CENTER          reduce using rule 93 (empty -> .)
    FORWARD         reduce using rule 93 (empty -> .)
    RIGHT           reduce using rule 93 (empty -> .)
    LEFT            reduce using rule 93 (empty -> .)
    END             reduce using rule 93 (empty -> .)
    ELSE            reduce using rule 93 (empty -> .)

    array                          shift and go to state 119
    empty                          shift and go to state 120

state 126

    (30) var_assignation -> id assign expression . e3
    (53) factor -> expression .
    (31) e3 -> .
  ! reduce/reduce conflict for PEN_DOWN resolved using rule 31 (e3 -> .)
  ! reduce/reduce conflict for PEN_UP resolved using rule 31 (e3 -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 31 (e3 -> .)
  ! reduce/reduce conflict for IF resolved using rule 31 (e3 -> .)
  ! reduce/reduce conflict for WRITE resolved using rule 31 (e3 -> .)
  ! reduce/reduce conflict for READ resolved using rule 31 (e3 -> .)
  ! reduce/reduce conflict for ID resolved using rule 31 (e3 -> .)
  ! reduce/reduce conflict for BOOL resolved using rule 31 (e3 -> .)
  ! reduce/reduce conflict for WORD resolved using rule 31 (e3 -> .)
  ! reduce/reduce conflict for NUMBER resolved using rule 31 (e3 -> .)
  ! reduce/reduce conflict for CENTER resolved using rule 31 (e3 -> .)
  ! reduce/reduce conflict for FORWARD resolved using rule 31 (e3 -> .)
  ! reduce/reduce conflict for RIGHT resolved using rule 31 (e3 -> .)
  ! reduce/reduce conflict for LEFT resolved using rule 31 (e3 -> .)
  ! reduce/reduce conflict for END resolved using rule 31 (e3 -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 31 (e3 -> .)
    EQUAL_TO        reduce using rule 53 (factor -> expression .)
    MORE_OR_EQ_THAN reduce using rule 53 (factor -> expression .)
    LESS_OR_EQ_THAN reduce using rule 53 (factor -> expression .)
    DIFFERENT_TO    reduce using rule 53 (factor -> expression .)
    MORE_THAN       reduce using rule 53 (factor -> expression .)
    LESS_THAN       reduce using rule 53 (factor -> expression .)
    DIV             reduce using rule 53 (factor -> expression .)
    MULT            reduce using rule 53 (factor -> expression .)
    SUB             reduce using rule 53 (factor -> expression .)
    SUM             reduce using rule 53 (factor -> expression .)
    PEN_DOWN        reduce using rule 31 (e3 -> .)
    PEN_UP          reduce using rule 31 (e3 -> .)
    WHILE           reduce using rule 31 (e3 -> .)
    IF              reduce using rule 31 (e3 -> .)
    WRITE           reduce using rule 31 (e3 -> .)
    READ            reduce using rule 31 (e3 -> .)
    ID              reduce using rule 31 (e3 -> .)
    BOOL            reduce using rule 31 (e3 -> .)
    WORD            reduce using rule 31 (e3 -> .)
    NUMBER          reduce using rule 31 (e3 -> .)
    CENTER          reduce using rule 31 (e3 -> .)
    FORWARD         reduce using rule 31 (e3 -> .)
    RIGHT           reduce using rule 31 (e3 -> .)
    LEFT            reduce using rule 31 (e3 -> .)
    END             reduce using rule 31 (e3 -> .)
    ELSE            reduce using rule 31 (e3 -> .)

    e3                             shift and go to state 150

state 127

    (10) func_declaration -> func_type FUNC ID OPEN_PTH parameter . CLOSE_PTH stmnt END
    CLOSE_PTH       shift and go to state 151


state 128

    (15) parameter -> empty .
    CLOSE_PTH       reduce using rule 15 (parameter -> empty .)


state 129

    (16) parameter -> var_type . ID multiple_parameters
    ID              shift and go to state 152


state 130

    (78) multiple_vars -> COMMA variable .
    PEN_DOWN        reduce using rule 78 (multiple_vars -> COMMA variable .)
    PEN_UP          reduce using rule 78 (multiple_vars -> COMMA variable .)
    WHILE           reduce using rule 78 (multiple_vars -> COMMA variable .)
    IF              reduce using rule 78 (multiple_vars -> COMMA variable .)
    WRITE           reduce using rule 78 (multiple_vars -> COMMA variable .)
    READ            reduce using rule 78 (multiple_vars -> COMMA variable .)
    ID              reduce using rule 78 (multiple_vars -> COMMA variable .)
    BOOL            reduce using rule 78 (multiple_vars -> COMMA variable .)
    WORD            reduce using rule 78 (multiple_vars -> COMMA variable .)
    NUMBER          reduce using rule 78 (multiple_vars -> COMMA variable .)
    CENTER          reduce using rule 78 (multiple_vars -> COMMA variable .)
    FORWARD         reduce using rule 78 (multiple_vars -> COMMA variable .)
    RIGHT           reduce using rule 78 (multiple_vars -> COMMA variable .)
    LEFT            reduce using rule 78 (multiple_vars -> COMMA variable .)
    END             reduce using rule 78 (multiple_vars -> COMMA variable .)
    ELSE            reduce using rule 78 (multiple_vars -> COMMA variable .)
    CLOSE_PTH       reduce using rule 78 (multiple_vars -> COMMA variable .)


state 131

    (67) func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .
    PEN_DOWN        reduce using rule 67 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    PEN_UP          reduce using rule 67 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    WHILE           reduce using rule 67 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    IF              reduce using rule 67 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    WRITE           reduce using rule 67 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    READ            reduce using rule 67 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    ID              reduce using rule 67 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    BOOL            reduce using rule 67 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    WORD            reduce using rule 67 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    NUMBER          reduce using rule 67 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    CENTER          reduce using rule 67 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    FORWARD         reduce using rule 67 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    RIGHT           reduce using rule 67 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    LEFT            reduce using rule 67 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    END             reduce using rule 67 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    ELSE            reduce using rule 67 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    OR              reduce using rule 67 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    AND             reduce using rule 67 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    DIV             reduce using rule 67 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    MULT            reduce using rule 67 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    SUB             reduce using rule 67 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    SUM             reduce using rule 67 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    EQUAL_TO        reduce using rule 67 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    MORE_OR_EQ_THAN reduce using rule 67 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    LESS_OR_EQ_THAN reduce using rule 67 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    DIFFERENT_TO    reduce using rule 67 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    MORE_THAN       reduce using rule 67 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    LESS_THAN       reduce using rule 67 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    COMMA           reduce using rule 67 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    CLOSE_PTH       reduce using rule 67 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    CLOSE_SQR       reduce using rule 67 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)


state 132

    (68) func_call_param -> expression multiple_fc_param .
    CLOSE_PTH       reduce using rule 68 (func_call_param -> expression multiple_fc_param .)


state 133

    (69) multiple_fc_param -> empty .
    CLOSE_PTH       reduce using rule 69 (multiple_fc_param -> empty .)


state 134

    (70) multiple_fc_param -> COMMA . func_call_param
    (68) func_call_param -> . expression multiple_fc_param
    (41) expression -> . exp
    (42) expression -> . exp rel_op exp
    (43) exp -> . termino e1
    (44) exp -> . termino term_op termino e1
    (48) termino -> . factor e2
    (49) termino -> . factor fact_op factor e2
    (53) factor -> . expression
    (54) factor -> . term_op var_cte
    (55) factor -> . var_cte
    (56) factor -> . open_pth expression close_pth
    (46) term_op -> . SUB
    (47) term_op -> . SUM
    (34) var_cte -> . func_call
    (35) var_cte -> . cte_bool
    (36) var_cte -> . CTE_STR
    (37) var_cte -> . CTE_NUM
    (38) var_cte -> . variable
    (57) open_pth -> . OPEN_PTH
    (67) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (39) cte_bool -> . FALSE
    (40) cte_bool -> . TRUE
    (72) variable -> . ID array
    SUB             shift and go to state 74
    SUM             shift and go to state 75
    CTE_STR         shift and go to state 78
    CTE_NUM         shift and go to state 79
    OPEN_PTH        shift and go to state 81
    ID              shift and go to state 82
    FALSE           shift and go to state 83
    TRUE            shift and go to state 84

    func_call_param                shift and go to state 153
    expression                     shift and go to state 96
    exp                            shift and go to state 68
    termino                        shift and go to state 69
    term_op                        shift and go to state 70
    factor                         shift and go to state 71
    var_cte                        shift and go to state 72
    open_pth                       shift and go to state 73
    func_call                      shift and go to state 76
    cte_bool                       shift and go to state 77
    variable                       shift and go to state 80

state 135

    (85) move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .
    PEN_DOWN        reduce using rule 85 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    PEN_UP          reduce using rule 85 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    WHILE           reduce using rule 85 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    IF              reduce using rule 85 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    WRITE           reduce using rule 85 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    READ            reduce using rule 85 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    ID              reduce using rule 85 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    BOOL            reduce using rule 85 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    WORD            reduce using rule 85 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    NUMBER          reduce using rule 85 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    CENTER          reduce using rule 85 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    FORWARD         reduce using rule 85 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    RIGHT           reduce using rule 85 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    LEFT            reduce using rule 85 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    END             reduce using rule 85 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    ELSE            reduce using rule 85 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)


state 136

    (83) while_stmnt -> WHILE con_expression stmnt END .
    PEN_DOWN        reduce using rule 83 (while_stmnt -> WHILE con_expression stmnt END .)
    PEN_UP          reduce using rule 83 (while_stmnt -> WHILE con_expression stmnt END .)
    WHILE           reduce using rule 83 (while_stmnt -> WHILE con_expression stmnt END .)
    IF              reduce using rule 83 (while_stmnt -> WHILE con_expression stmnt END .)
    WRITE           reduce using rule 83 (while_stmnt -> WHILE con_expression stmnt END .)
    READ            reduce using rule 83 (while_stmnt -> WHILE con_expression stmnt END .)
    ID              reduce using rule 83 (while_stmnt -> WHILE con_expression stmnt END .)
    BOOL            reduce using rule 83 (while_stmnt -> WHILE con_expression stmnt END .)
    WORD            reduce using rule 83 (while_stmnt -> WHILE con_expression stmnt END .)
    NUMBER          reduce using rule 83 (while_stmnt -> WHILE con_expression stmnt END .)
    CENTER          reduce using rule 83 (while_stmnt -> WHILE con_expression stmnt END .)
    FORWARD         reduce using rule 83 (while_stmnt -> WHILE con_expression stmnt END .)
    RIGHT           reduce using rule 83 (while_stmnt -> WHILE con_expression stmnt END .)
    LEFT            reduce using rule 83 (while_stmnt -> WHILE con_expression stmnt END .)
    END             reduce using rule 83 (while_stmnt -> WHILE con_expression stmnt END .)
    ELSE            reduce using rule 83 (while_stmnt -> WHILE con_expression stmnt END .)


state 137

    (84) con_expression -> expression log_op expression .
    (53) factor -> expression .
  ! reduce/reduce conflict for PEN_DOWN resolved using rule 53 (factor -> expression .)
  ! reduce/reduce conflict for PEN_UP resolved using rule 53 (factor -> expression .)
  ! reduce/reduce conflict for WHILE resolved using rule 53 (factor -> expression .)
  ! reduce/reduce conflict for IF resolved using rule 53 (factor -> expression .)
  ! reduce/reduce conflict for WRITE resolved using rule 53 (factor -> expression .)
  ! reduce/reduce conflict for READ resolved using rule 53 (factor -> expression .)
  ! reduce/reduce conflict for ID resolved using rule 53 (factor -> expression .)
  ! reduce/reduce conflict for BOOL resolved using rule 53 (factor -> expression .)
  ! reduce/reduce conflict for WORD resolved using rule 53 (factor -> expression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 53 (factor -> expression .)
  ! reduce/reduce conflict for CENTER resolved using rule 53 (factor -> expression .)
  ! reduce/reduce conflict for FORWARD resolved using rule 53 (factor -> expression .)
  ! reduce/reduce conflict for RIGHT resolved using rule 53 (factor -> expression .)
  ! reduce/reduce conflict for LEFT resolved using rule 53 (factor -> expression .)
  ! reduce/reduce conflict for END resolved using rule 53 (factor -> expression .)
  ! reduce/reduce conflict for ELSE resolved using rule 53 (factor -> expression .)
    EQUAL_TO        reduce using rule 53 (factor -> expression .)
    MORE_OR_EQ_THAN reduce using rule 53 (factor -> expression .)
    LESS_OR_EQ_THAN reduce using rule 53 (factor -> expression .)
    DIFFERENT_TO    reduce using rule 53 (factor -> expression .)
    MORE_THAN       reduce using rule 53 (factor -> expression .)
    LESS_THAN       reduce using rule 53 (factor -> expression .)
    PEN_DOWN        reduce using rule 53 (factor -> expression .)
    PEN_UP          reduce using rule 53 (factor -> expression .)
    WHILE           reduce using rule 53 (factor -> expression .)
    IF              reduce using rule 53 (factor -> expression .)
    WRITE           reduce using rule 53 (factor -> expression .)
    READ            reduce using rule 53 (factor -> expression .)
    ID              reduce using rule 53 (factor -> expression .)
    BOOL            reduce using rule 53 (factor -> expression .)
    WORD            reduce using rule 53 (factor -> expression .)
    NUMBER          reduce using rule 53 (factor -> expression .)
    CENTER          reduce using rule 53 (factor -> expression .)
    FORWARD         reduce using rule 53 (factor -> expression .)
    RIGHT           reduce using rule 53 (factor -> expression .)
    LEFT            reduce using rule 53 (factor -> expression .)
    END             reduce using rule 53 (factor -> expression .)
    ELSE            reduce using rule 53 (factor -> expression .)
    DIV             reduce using rule 53 (factor -> expression .)
    MULT            reduce using rule 53 (factor -> expression .)
    SUB             reduce using rule 53 (factor -> expression .)
    SUM             reduce using rule 53 (factor -> expression .)


state 138

    (42) expression -> exp rel_op exp .
    (41) expression -> exp .
    (42) expression -> exp . rel_op exp
    (61) rel_op -> . EQUAL_TO
    (62) rel_op -> . MORE_OR_EQ_THAN
    (63) rel_op -> . LESS_OR_EQ_THAN
    (64) rel_op -> . DIFFERENT_TO
    (65) rel_op -> . MORE_THAN
    (66) rel_op -> . LESS_THAN
  ! reduce/reduce conflict for EQUAL_TO resolved using rule 42 (expression -> exp rel_op exp .)
  ! reduce/reduce conflict for MORE_OR_EQ_THAN resolved using rule 42 (expression -> exp rel_op exp .)
  ! reduce/reduce conflict for LESS_OR_EQ_THAN resolved using rule 42 (expression -> exp rel_op exp .)
  ! reduce/reduce conflict for DIFFERENT_TO resolved using rule 42 (expression -> exp rel_op exp .)
  ! reduce/reduce conflict for MORE_THAN resolved using rule 42 (expression -> exp rel_op exp .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 42 (expression -> exp rel_op exp .)
  ! reduce/reduce conflict for OR resolved using rule 42 (expression -> exp rel_op exp .)
  ! reduce/reduce conflict for AND resolved using rule 42 (expression -> exp rel_op exp .)
  ! reduce/reduce conflict for DIV resolved using rule 42 (expression -> exp rel_op exp .)
  ! reduce/reduce conflict for MULT resolved using rule 42 (expression -> exp rel_op exp .)
  ! reduce/reduce conflict for SUB resolved using rule 42 (expression -> exp rel_op exp .)
  ! reduce/reduce conflict for SUM resolved using rule 42 (expression -> exp rel_op exp .)
  ! reduce/reduce conflict for COMMA resolved using rule 42 (expression -> exp rel_op exp .)
  ! reduce/reduce conflict for CLOSE_PTH resolved using rule 42 (expression -> exp rel_op exp .)
  ! reduce/reduce conflict for PEN_DOWN resolved using rule 42 (expression -> exp rel_op exp .)
  ! reduce/reduce conflict for PEN_UP resolved using rule 42 (expression -> exp rel_op exp .)
  ! reduce/reduce conflict for WHILE resolved using rule 42 (expression -> exp rel_op exp .)
  ! reduce/reduce conflict for IF resolved using rule 42 (expression -> exp rel_op exp .)
  ! reduce/reduce conflict for WRITE resolved using rule 42 (expression -> exp rel_op exp .)
  ! reduce/reduce conflict for READ resolved using rule 42 (expression -> exp rel_op exp .)
  ! reduce/reduce conflict for ID resolved using rule 42 (expression -> exp rel_op exp .)
  ! reduce/reduce conflict for BOOL resolved using rule 42 (expression -> exp rel_op exp .)
  ! reduce/reduce conflict for WORD resolved using rule 42 (expression -> exp rel_op exp .)
  ! reduce/reduce conflict for NUMBER resolved using rule 42 (expression -> exp rel_op exp .)
  ! reduce/reduce conflict for CENTER resolved using rule 42 (expression -> exp rel_op exp .)
  ! reduce/reduce conflict for FORWARD resolved using rule 42 (expression -> exp rel_op exp .)
  ! reduce/reduce conflict for RIGHT resolved using rule 42 (expression -> exp rel_op exp .)
  ! reduce/reduce conflict for LEFT resolved using rule 42 (expression -> exp rel_op exp .)
  ! reduce/reduce conflict for END resolved using rule 42 (expression -> exp rel_op exp .)
  ! reduce/reduce conflict for ELSE resolved using rule 42 (expression -> exp rel_op exp .)
  ! reduce/reduce conflict for CLOSE_SQR resolved using rule 42 (expression -> exp rel_op exp .)
  ! shift/reduce conflict for EQUAL_TO resolved as shift
  ! shift/reduce conflict for MORE_OR_EQ_THAN resolved as shift
  ! shift/reduce conflict for LESS_OR_EQ_THAN resolved as shift
  ! shift/reduce conflict for DIFFERENT_TO resolved as shift
  ! shift/reduce conflict for MORE_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
    OR              reduce using rule 42 (expression -> exp rel_op exp .)
    AND             reduce using rule 42 (expression -> exp rel_op exp .)
    DIV             reduce using rule 42 (expression -> exp rel_op exp .)
    MULT            reduce using rule 42 (expression -> exp rel_op exp .)
    SUB             reduce using rule 42 (expression -> exp rel_op exp .)
    SUM             reduce using rule 42 (expression -> exp rel_op exp .)
    COMMA           reduce using rule 42 (expression -> exp rel_op exp .)
    CLOSE_PTH       reduce using rule 42 (expression -> exp rel_op exp .)
    PEN_DOWN        reduce using rule 42 (expression -> exp rel_op exp .)
    PEN_UP          reduce using rule 42 (expression -> exp rel_op exp .)
    WHILE           reduce using rule 42 (expression -> exp rel_op exp .)
    IF              reduce using rule 42 (expression -> exp rel_op exp .)
    WRITE           reduce using rule 42 (expression -> exp rel_op exp .)
    READ            reduce using rule 42 (expression -> exp rel_op exp .)
    ID              reduce using rule 42 (expression -> exp rel_op exp .)
    BOOL            reduce using rule 42 (expression -> exp rel_op exp .)
    WORD            reduce using rule 42 (expression -> exp rel_op exp .)
    NUMBER          reduce using rule 42 (expression -> exp rel_op exp .)
    CENTER          reduce using rule 42 (expression -> exp rel_op exp .)
    FORWARD         reduce using rule 42 (expression -> exp rel_op exp .)
    RIGHT           reduce using rule 42 (expression -> exp rel_op exp .)
    LEFT            reduce using rule 42 (expression -> exp rel_op exp .)
    END             reduce using rule 42 (expression -> exp rel_op exp .)
    ELSE            reduce using rule 42 (expression -> exp rel_op exp .)
    CLOSE_SQR       reduce using rule 42 (expression -> exp rel_op exp .)
    EQUAL_TO        shift and go to state 105
    MORE_OR_EQ_THAN shift and go to state 106
    LESS_OR_EQ_THAN shift and go to state 107
    DIFFERENT_TO    shift and go to state 108
    MORE_THAN       shift and go to state 109
    LESS_THAN       shift and go to state 110

    rel_op                         shift and go to state 104

state 139

    (53) factor -> expression .
    EQUAL_TO        reduce using rule 53 (factor -> expression .)
    MORE_OR_EQ_THAN reduce using rule 53 (factor -> expression .)
    LESS_OR_EQ_THAN reduce using rule 53 (factor -> expression .)
    DIFFERENT_TO    reduce using rule 53 (factor -> expression .)
    MORE_THAN       reduce using rule 53 (factor -> expression .)
    LESS_THAN       reduce using rule 53 (factor -> expression .)
    OR              reduce using rule 53 (factor -> expression .)
    AND             reduce using rule 53 (factor -> expression .)
    DIV             reduce using rule 53 (factor -> expression .)
    MULT            reduce using rule 53 (factor -> expression .)
    SUB             reduce using rule 53 (factor -> expression .)
    SUM             reduce using rule 53 (factor -> expression .)
    COMMA           reduce using rule 53 (factor -> expression .)
    CLOSE_PTH       reduce using rule 53 (factor -> expression .)
    PEN_DOWN        reduce using rule 53 (factor -> expression .)
    PEN_UP          reduce using rule 53 (factor -> expression .)
    WHILE           reduce using rule 53 (factor -> expression .)
    IF              reduce using rule 53 (factor -> expression .)
    WRITE           reduce using rule 53 (factor -> expression .)
    READ            reduce using rule 53 (factor -> expression .)
    ID              reduce using rule 53 (factor -> expression .)
    BOOL            reduce using rule 53 (factor -> expression .)
    WORD            reduce using rule 53 (factor -> expression .)
    NUMBER          reduce using rule 53 (factor -> expression .)
    CENTER          reduce using rule 53 (factor -> expression .)
    FORWARD         reduce using rule 53 (factor -> expression .)
    RIGHT           reduce using rule 53 (factor -> expression .)
    LEFT            reduce using rule 53 (factor -> expression .)
    END             reduce using rule 53 (factor -> expression .)
    ELSE            reduce using rule 53 (factor -> expression .)
    CLOSE_SQR       reduce using rule 53 (factor -> expression .)


state 140

    (44) exp -> termino term_op termino . e1
    (43) exp -> termino . e1
    (44) exp -> termino . term_op termino e1
    (45) e1 -> .
    (46) term_op -> . SUB
    (47) term_op -> . SUM
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for SUM resolved as shift
    OR              reduce using rule 45 (e1 -> .)
    AND             reduce using rule 45 (e1 -> .)
    DIV             reduce using rule 45 (e1 -> .)
    MULT            reduce using rule 45 (e1 -> .)
    EQUAL_TO        reduce using rule 45 (e1 -> .)
    MORE_OR_EQ_THAN reduce using rule 45 (e1 -> .)
    LESS_OR_EQ_THAN reduce using rule 45 (e1 -> .)
    DIFFERENT_TO    reduce using rule 45 (e1 -> .)
    MORE_THAN       reduce using rule 45 (e1 -> .)
    LESS_THAN       reduce using rule 45 (e1 -> .)
    COMMA           reduce using rule 45 (e1 -> .)
    CLOSE_PTH       reduce using rule 45 (e1 -> .)
    PEN_DOWN        reduce using rule 45 (e1 -> .)
    PEN_UP          reduce using rule 45 (e1 -> .)
    WHILE           reduce using rule 45 (e1 -> .)
    IF              reduce using rule 45 (e1 -> .)
    WRITE           reduce using rule 45 (e1 -> .)
    READ            reduce using rule 45 (e1 -> .)
    ID              reduce using rule 45 (e1 -> .)
    BOOL            reduce using rule 45 (e1 -> .)
    WORD            reduce using rule 45 (e1 -> .)
    NUMBER          reduce using rule 45 (e1 -> .)
    CENTER          reduce using rule 45 (e1 -> .)
    FORWARD         reduce using rule 45 (e1 -> .)
    RIGHT           reduce using rule 45 (e1 -> .)
    LEFT            reduce using rule 45 (e1 -> .)
    END             reduce using rule 45 (e1 -> .)
    ELSE            reduce using rule 45 (e1 -> .)
    CLOSE_SQR       reduce using rule 45 (e1 -> .)
    SUB             shift and go to state 74
    SUM             shift and go to state 75

    term_op                        shift and go to state 112
    e1                             shift and go to state 154

state 141

    (49) termino -> factor fact_op factor . e2
    (48) termino -> factor . e2
    (49) termino -> factor . fact_op factor e2
    (50) e2 -> .
    (51) fact_op -> . DIV
    (52) fact_op -> . MULT
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
    OR              reduce using rule 50 (e2 -> .)
    AND             reduce using rule 50 (e2 -> .)
    SUB             reduce using rule 50 (e2 -> .)
    SUM             reduce using rule 50 (e2 -> .)
    EQUAL_TO        reduce using rule 50 (e2 -> .)
    MORE_OR_EQ_THAN reduce using rule 50 (e2 -> .)
    LESS_OR_EQ_THAN reduce using rule 50 (e2 -> .)
    DIFFERENT_TO    reduce using rule 50 (e2 -> .)
    MORE_THAN       reduce using rule 50 (e2 -> .)
    LESS_THAN       reduce using rule 50 (e2 -> .)
    COMMA           reduce using rule 50 (e2 -> .)
    CLOSE_PTH       reduce using rule 50 (e2 -> .)
    PEN_DOWN        reduce using rule 50 (e2 -> .)
    PEN_UP          reduce using rule 50 (e2 -> .)
    WHILE           reduce using rule 50 (e2 -> .)
    IF              reduce using rule 50 (e2 -> .)
    WRITE           reduce using rule 50 (e2 -> .)
    READ            reduce using rule 50 (e2 -> .)
    ID              reduce using rule 50 (e2 -> .)
    BOOL            reduce using rule 50 (e2 -> .)
    WORD            reduce using rule 50 (e2 -> .)
    NUMBER          reduce using rule 50 (e2 -> .)
    CENTER          reduce using rule 50 (e2 -> .)
    FORWARD         reduce using rule 50 (e2 -> .)
    RIGHT           reduce using rule 50 (e2 -> .)
    LEFT            reduce using rule 50 (e2 -> .)
    END             reduce using rule 50 (e2 -> .)
    ELSE            reduce using rule 50 (e2 -> .)
    CLOSE_SQR       reduce using rule 50 (e2 -> .)
    DIV             shift and go to state 116
    MULT            shift and go to state 117

    fact_op                        shift and go to state 115
    e2                             shift and go to state 155

state 142

    (56) factor -> open_pth expression close_pth .
    OR              reduce using rule 56 (factor -> open_pth expression close_pth .)
    AND             reduce using rule 56 (factor -> open_pth expression close_pth .)
    DIV             reduce using rule 56 (factor -> open_pth expression close_pth .)
    MULT            reduce using rule 56 (factor -> open_pth expression close_pth .)
    SUB             reduce using rule 56 (factor -> open_pth expression close_pth .)
    SUM             reduce using rule 56 (factor -> open_pth expression close_pth .)
    EQUAL_TO        reduce using rule 56 (factor -> open_pth expression close_pth .)
    MORE_OR_EQ_THAN reduce using rule 56 (factor -> open_pth expression close_pth .)
    LESS_OR_EQ_THAN reduce using rule 56 (factor -> open_pth expression close_pth .)
    DIFFERENT_TO    reduce using rule 56 (factor -> open_pth expression close_pth .)
    MORE_THAN       reduce using rule 56 (factor -> open_pth expression close_pth .)
    LESS_THAN       reduce using rule 56 (factor -> open_pth expression close_pth .)
    COMMA           reduce using rule 56 (factor -> open_pth expression close_pth .)
    CLOSE_PTH       reduce using rule 56 (factor -> open_pth expression close_pth .)
    PEN_DOWN        reduce using rule 56 (factor -> open_pth expression close_pth .)
    PEN_UP          reduce using rule 56 (factor -> open_pth expression close_pth .)
    WHILE           reduce using rule 56 (factor -> open_pth expression close_pth .)
    IF              reduce using rule 56 (factor -> open_pth expression close_pth .)
    WRITE           reduce using rule 56 (factor -> open_pth expression close_pth .)
    READ            reduce using rule 56 (factor -> open_pth expression close_pth .)
    ID              reduce using rule 56 (factor -> open_pth expression close_pth .)
    BOOL            reduce using rule 56 (factor -> open_pth expression close_pth .)
    WORD            reduce using rule 56 (factor -> open_pth expression close_pth .)
    NUMBER          reduce using rule 56 (factor -> open_pth expression close_pth .)
    CENTER          reduce using rule 56 (factor -> open_pth expression close_pth .)
    FORWARD         reduce using rule 56 (factor -> open_pth expression close_pth .)
    RIGHT           reduce using rule 56 (factor -> open_pth expression close_pth .)
    LEFT            reduce using rule 56 (factor -> open_pth expression close_pth .)
    END             reduce using rule 56 (factor -> open_pth expression close_pth .)
    ELSE            reduce using rule 56 (factor -> open_pth expression close_pth .)
    CLOSE_SQR       reduce using rule 56 (factor -> open_pth expression close_pth .)


state 143

    (58) close_pth -> CLOSE_PTH .
    OR              reduce using rule 58 (close_pth -> CLOSE_PTH .)
    AND             reduce using rule 58 (close_pth -> CLOSE_PTH .)
    DIV             reduce using rule 58 (close_pth -> CLOSE_PTH .)
    MULT            reduce using rule 58 (close_pth -> CLOSE_PTH .)
    SUB             reduce using rule 58 (close_pth -> CLOSE_PTH .)
    SUM             reduce using rule 58 (close_pth -> CLOSE_PTH .)
    EQUAL_TO        reduce using rule 58 (close_pth -> CLOSE_PTH .)
    MORE_OR_EQ_THAN reduce using rule 58 (close_pth -> CLOSE_PTH .)
    LESS_OR_EQ_THAN reduce using rule 58 (close_pth -> CLOSE_PTH .)
    DIFFERENT_TO    reduce using rule 58 (close_pth -> CLOSE_PTH .)
    MORE_THAN       reduce using rule 58 (close_pth -> CLOSE_PTH .)
    LESS_THAN       reduce using rule 58 (close_pth -> CLOSE_PTH .)
    COMMA           reduce using rule 58 (close_pth -> CLOSE_PTH .)
    CLOSE_PTH       reduce using rule 58 (close_pth -> CLOSE_PTH .)
    PEN_DOWN        reduce using rule 58 (close_pth -> CLOSE_PTH .)
    PEN_UP          reduce using rule 58 (close_pth -> CLOSE_PTH .)
    WHILE           reduce using rule 58 (close_pth -> CLOSE_PTH .)
    IF              reduce using rule 58 (close_pth -> CLOSE_PTH .)
    WRITE           reduce using rule 58 (close_pth -> CLOSE_PTH .)
    READ            reduce using rule 58 (close_pth -> CLOSE_PTH .)
    ID              reduce using rule 58 (close_pth -> CLOSE_PTH .)
    BOOL            reduce using rule 58 (close_pth -> CLOSE_PTH .)
    WORD            reduce using rule 58 (close_pth -> CLOSE_PTH .)
    NUMBER          reduce using rule 58 (close_pth -> CLOSE_PTH .)
    CENTER          reduce using rule 58 (close_pth -> CLOSE_PTH .)
    FORWARD         reduce using rule 58 (close_pth -> CLOSE_PTH .)
    RIGHT           reduce using rule 58 (close_pth -> CLOSE_PTH .)
    LEFT            reduce using rule 58 (close_pth -> CLOSE_PTH .)
    END             reduce using rule 58 (close_pth -> CLOSE_PTH .)
    ELSE            reduce using rule 58 (close_pth -> CLOSE_PTH .)
    CLOSE_SQR       reduce using rule 58 (close_pth -> CLOSE_PTH .)


state 144

    (74) array -> OPEN_SQR expression . CLOSE_SQR matrix
    (53) factor -> expression .
  ! shift/reduce conflict for CLOSE_SQR resolved as shift
    CLOSE_SQR       shift and go to state 156
    SUB             reduce using rule 53 (factor -> expression .)
    SUM             reduce using rule 53 (factor -> expression .)
    EQUAL_TO        reduce using rule 53 (factor -> expression .)
    MORE_OR_EQ_THAN reduce using rule 53 (factor -> expression .)
    LESS_OR_EQ_THAN reduce using rule 53 (factor -> expression .)
    DIFFERENT_TO    reduce using rule 53 (factor -> expression .)
    MORE_THAN       reduce using rule 53 (factor -> expression .)
    LESS_THAN       reduce using rule 53 (factor -> expression .)
    DIV             reduce using rule 53 (factor -> expression .)
    MULT            reduce using rule 53 (factor -> expression .)


state 145

    (80) if_stmnt -> IF con_expression stmnt else_stmnt .
    PEN_DOWN        reduce using rule 80 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    PEN_UP          reduce using rule 80 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    WHILE           reduce using rule 80 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    IF              reduce using rule 80 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    WRITE           reduce using rule 80 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    READ            reduce using rule 80 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    ID              reduce using rule 80 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    BOOL            reduce using rule 80 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    WORD            reduce using rule 80 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    NUMBER          reduce using rule 80 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    CENTER          reduce using rule 80 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    FORWARD         reduce using rule 80 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    RIGHT           reduce using rule 80 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    LEFT            reduce using rule 80 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    END             reduce using rule 80 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    ELSE            reduce using rule 80 (if_stmnt -> IF con_expression stmnt else_stmnt .)


state 146

    (81) else_stmnt -> END .
    PEN_DOWN        reduce using rule 81 (else_stmnt -> END .)
    PEN_UP          reduce using rule 81 (else_stmnt -> END .)
    WHILE           reduce using rule 81 (else_stmnt -> END .)
    IF              reduce using rule 81 (else_stmnt -> END .)
    WRITE           reduce using rule 81 (else_stmnt -> END .)
    READ            reduce using rule 81 (else_stmnt -> END .)
    ID              reduce using rule 81 (else_stmnt -> END .)
    BOOL            reduce using rule 81 (else_stmnt -> END .)
    WORD            reduce using rule 81 (else_stmnt -> END .)
    NUMBER          reduce using rule 81 (else_stmnt -> END .)
    CENTER          reduce using rule 81 (else_stmnt -> END .)
    FORWARD         reduce using rule 81 (else_stmnt -> END .)
    RIGHT           reduce using rule 81 (else_stmnt -> END .)
    LEFT            reduce using rule 81 (else_stmnt -> END .)
    END             reduce using rule 81 (else_stmnt -> END .)
    ELSE            reduce using rule 81 (else_stmnt -> END .)


state 147

    (82) else_stmnt -> ELSE . stmnt END
    (19) stmnt -> . empty
    (20) stmnt -> . var_declaration_func stmnt
    (21) stmnt -> . pen_func stmnt
    (22) stmnt -> . move_func stmnt
    (23) stmnt -> . while_stmnt stmnt
    (24) stmnt -> . if_stmnt stmnt
    (25) stmnt -> . write stmnt
    (26) stmnt -> . read stmnt
    (27) stmnt -> . func_call stmnt
    (28) stmnt -> . var_assignation stmnt
    (93) empty -> .
    (29) var_declaration_func -> . var_type ID multiple_vars
    (90) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (91) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (85) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (83) while_stmnt -> . WHILE con_expression stmnt END
    (80) if_stmnt -> . IF con_expression stmnt else_stmnt
    (79) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (71) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (67) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (30) var_assignation -> . id assign expression e3
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    (86) move_type -> . CENTER
    (87) move_type -> . FORWARD
    (88) move_type -> . RIGHT
    (89) move_type -> . LEFT
    (32) id -> . ID
    END             reduce using rule 93 (empty -> .)
    PEN_DOWN        shift and go to state 37
    PEN_UP          shift and go to state 38
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    WRITE           shift and go to state 42
    READ            shift and go to state 43
    ID              shift and go to state 36
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9
    CENTER          shift and go to state 45
    FORWARD         shift and go to state 46
    RIGHT           shift and go to state 47
    LEFT            shift and go to state 48

    stmnt                          shift and go to state 157
    empty                          shift and go to state 25
    var_declaration_func           shift and go to state 26
    pen_func                       shift and go to state 27
    move_func                      shift and go to state 28
    while_stmnt                    shift and go to state 29
    if_stmnt                       shift and go to state 30
    write                          shift and go to state 31
    read                           shift and go to state 32
    func_call                      shift and go to state 33
    var_assignation                shift and go to state 34
    var_type                       shift and go to state 35
    move_type                      shift and go to state 39
    id                             shift and go to state 44

state 148

    (79) write -> WRITE OPEN_PTH expression CLOSE_PTH .
    PEN_DOWN        reduce using rule 79 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    PEN_UP          reduce using rule 79 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    WHILE           reduce using rule 79 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    IF              reduce using rule 79 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    WRITE           reduce using rule 79 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    READ            reduce using rule 79 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    ID              reduce using rule 79 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    BOOL            reduce using rule 79 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    WORD            reduce using rule 79 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    NUMBER          reduce using rule 79 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    CENTER          reduce using rule 79 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    FORWARD         reduce using rule 79 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    RIGHT           reduce using rule 79 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    LEFT            reduce using rule 79 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    END             reduce using rule 79 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    ELSE            reduce using rule 79 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)


state 149

    (71) read -> READ OPEN_PTH variable multiple_vars . CLOSE_PTH
    CLOSE_PTH       shift and go to state 158


state 150

    (30) var_assignation -> id assign expression e3 .
    PEN_DOWN        reduce using rule 30 (var_assignation -> id assign expression e3 .)
    PEN_UP          reduce using rule 30 (var_assignation -> id assign expression e3 .)
    WHILE           reduce using rule 30 (var_assignation -> id assign expression e3 .)
    IF              reduce using rule 30 (var_assignation -> id assign expression e3 .)
    WRITE           reduce using rule 30 (var_assignation -> id assign expression e3 .)
    READ            reduce using rule 30 (var_assignation -> id assign expression e3 .)
    ID              reduce using rule 30 (var_assignation -> id assign expression e3 .)
    BOOL            reduce using rule 30 (var_assignation -> id assign expression e3 .)
    WORD            reduce using rule 30 (var_assignation -> id assign expression e3 .)
    NUMBER          reduce using rule 30 (var_assignation -> id assign expression e3 .)
    CENTER          reduce using rule 30 (var_assignation -> id assign expression e3 .)
    FORWARD         reduce using rule 30 (var_assignation -> id assign expression e3 .)
    RIGHT           reduce using rule 30 (var_assignation -> id assign expression e3 .)
    LEFT            reduce using rule 30 (var_assignation -> id assign expression e3 .)
    END             reduce using rule 30 (var_assignation -> id assign expression e3 .)
    ELSE            reduce using rule 30 (var_assignation -> id assign expression e3 .)


state 151

    (10) func_declaration -> func_type FUNC ID OPEN_PTH parameter CLOSE_PTH . stmnt END
    (19) stmnt -> . empty
    (20) stmnt -> . var_declaration_func stmnt
    (21) stmnt -> . pen_func stmnt
    (22) stmnt -> . move_func stmnt
    (23) stmnt -> . while_stmnt stmnt
    (24) stmnt -> . if_stmnt stmnt
    (25) stmnt -> . write stmnt
    (26) stmnt -> . read stmnt
    (27) stmnt -> . func_call stmnt
    (28) stmnt -> . var_assignation stmnt
    (93) empty -> .
    (29) var_declaration_func -> . var_type ID multiple_vars
    (90) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (91) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (85) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (83) while_stmnt -> . WHILE con_expression stmnt END
    (80) if_stmnt -> . IF con_expression stmnt else_stmnt
    (79) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (71) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (67) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (30) var_assignation -> . id assign expression e3
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    (86) move_type -> . CENTER
    (87) move_type -> . FORWARD
    (88) move_type -> . RIGHT
    (89) move_type -> . LEFT
    (32) id -> . ID
    END             reduce using rule 93 (empty -> .)
    PEN_DOWN        shift and go to state 37
    PEN_UP          shift and go to state 38
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    WRITE           shift and go to state 42
    READ            shift and go to state 43
    ID              shift and go to state 36
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9
    CENTER          shift and go to state 45
    FORWARD         shift and go to state 46
    RIGHT           shift and go to state 47
    LEFT            shift and go to state 48

    stmnt                          shift and go to state 159
    empty                          shift and go to state 25
    var_declaration_func           shift and go to state 26
    pen_func                       shift and go to state 27
    move_func                      shift and go to state 28
    while_stmnt                    shift and go to state 29
    if_stmnt                       shift and go to state 30
    write                          shift and go to state 31
    read                           shift and go to state 32
    func_call                      shift and go to state 33
    var_assignation                shift and go to state 34
    var_type                       shift and go to state 35
    move_type                      shift and go to state 39
    id                             shift and go to state 44

state 152

    (16) parameter -> var_type ID . multiple_parameters
    (17) multiple_parameters -> . empty
    (18) multiple_parameters -> . COMMA parameter
    (93) empty -> .
    COMMA           shift and go to state 162
    CLOSE_PTH       reduce using rule 93 (empty -> .)

    multiple_parameters            shift and go to state 160
    empty                          shift and go to state 161

state 153

    (70) multiple_fc_param -> COMMA func_call_param .
    CLOSE_PTH       reduce using rule 70 (multiple_fc_param -> COMMA func_call_param .)


state 154

    (44) exp -> termino term_op termino e1 .
    (43) exp -> termino e1 .
  ! reduce/reduce conflict for EQUAL_TO resolved using rule 44 (exp -> termino term_op termino e1 .)
  ! reduce/reduce conflict for MORE_OR_EQ_THAN resolved using rule 44 (exp -> termino term_op termino e1 .)
  ! reduce/reduce conflict for LESS_OR_EQ_THAN resolved using rule 44 (exp -> termino term_op termino e1 .)
  ! reduce/reduce conflict for DIFFERENT_TO resolved using rule 44 (exp -> termino term_op termino e1 .)
  ! reduce/reduce conflict for MORE_THAN resolved using rule 44 (exp -> termino term_op termino e1 .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 44 (exp -> termino term_op termino e1 .)
  ! reduce/reduce conflict for OR resolved using rule 44 (exp -> termino term_op termino e1 .)
  ! reduce/reduce conflict for AND resolved using rule 44 (exp -> termino term_op termino e1 .)
  ! reduce/reduce conflict for DIV resolved using rule 44 (exp -> termino term_op termino e1 .)
  ! reduce/reduce conflict for MULT resolved using rule 44 (exp -> termino term_op termino e1 .)
  ! reduce/reduce conflict for SUB resolved using rule 44 (exp -> termino term_op termino e1 .)
  ! reduce/reduce conflict for SUM resolved using rule 44 (exp -> termino term_op termino e1 .)
  ! reduce/reduce conflict for COMMA resolved using rule 44 (exp -> termino term_op termino e1 .)
  ! reduce/reduce conflict for CLOSE_PTH resolved using rule 44 (exp -> termino term_op termino e1 .)
  ! reduce/reduce conflict for PEN_DOWN resolved using rule 44 (exp -> termino term_op termino e1 .)
  ! reduce/reduce conflict for PEN_UP resolved using rule 44 (exp -> termino term_op termino e1 .)
  ! reduce/reduce conflict for WHILE resolved using rule 44 (exp -> termino term_op termino e1 .)
  ! reduce/reduce conflict for IF resolved using rule 44 (exp -> termino term_op termino e1 .)
  ! reduce/reduce conflict for WRITE resolved using rule 44 (exp -> termino term_op termino e1 .)
  ! reduce/reduce conflict for READ resolved using rule 44 (exp -> termino term_op termino e1 .)
  ! reduce/reduce conflict for ID resolved using rule 44 (exp -> termino term_op termino e1 .)
  ! reduce/reduce conflict for BOOL resolved using rule 44 (exp -> termino term_op termino e1 .)
  ! reduce/reduce conflict for WORD resolved using rule 44 (exp -> termino term_op termino e1 .)
  ! reduce/reduce conflict for NUMBER resolved using rule 44 (exp -> termino term_op termino e1 .)
  ! reduce/reduce conflict for CENTER resolved using rule 44 (exp -> termino term_op termino e1 .)
  ! reduce/reduce conflict for FORWARD resolved using rule 44 (exp -> termino term_op termino e1 .)
  ! reduce/reduce conflict for RIGHT resolved using rule 44 (exp -> termino term_op termino e1 .)
  ! reduce/reduce conflict for LEFT resolved using rule 44 (exp -> termino term_op termino e1 .)
  ! reduce/reduce conflict for END resolved using rule 44 (exp -> termino term_op termino e1 .)
  ! reduce/reduce conflict for ELSE resolved using rule 44 (exp -> termino term_op termino e1 .)
  ! reduce/reduce conflict for CLOSE_SQR resolved using rule 44 (exp -> termino term_op termino e1 .)
    OR              reduce using rule 44 (exp -> termino term_op termino e1 .)
    AND             reduce using rule 44 (exp -> termino term_op termino e1 .)
    DIV             reduce using rule 44 (exp -> termino term_op termino e1 .)
    MULT            reduce using rule 44 (exp -> termino term_op termino e1 .)
    SUB             reduce using rule 44 (exp -> termino term_op termino e1 .)
    SUM             reduce using rule 44 (exp -> termino term_op termino e1 .)
    EQUAL_TO        reduce using rule 44 (exp -> termino term_op termino e1 .)
    MORE_OR_EQ_THAN reduce using rule 44 (exp -> termino term_op termino e1 .)
    LESS_OR_EQ_THAN reduce using rule 44 (exp -> termino term_op termino e1 .)
    DIFFERENT_TO    reduce using rule 44 (exp -> termino term_op termino e1 .)
    MORE_THAN       reduce using rule 44 (exp -> termino term_op termino e1 .)
    LESS_THAN       reduce using rule 44 (exp -> termino term_op termino e1 .)
    COMMA           reduce using rule 44 (exp -> termino term_op termino e1 .)
    CLOSE_PTH       reduce using rule 44 (exp -> termino term_op termino e1 .)
    PEN_DOWN        reduce using rule 44 (exp -> termino term_op termino e1 .)
    PEN_UP          reduce using rule 44 (exp -> termino term_op termino e1 .)
    WHILE           reduce using rule 44 (exp -> termino term_op termino e1 .)
    IF              reduce using rule 44 (exp -> termino term_op termino e1 .)
    WRITE           reduce using rule 44 (exp -> termino term_op termino e1 .)
    READ            reduce using rule 44 (exp -> termino term_op termino e1 .)
    ID              reduce using rule 44 (exp -> termino term_op termino e1 .)
    BOOL            reduce using rule 44 (exp -> termino term_op termino e1 .)
    WORD            reduce using rule 44 (exp -> termino term_op termino e1 .)
    NUMBER          reduce using rule 44 (exp -> termino term_op termino e1 .)
    CENTER          reduce using rule 44 (exp -> termino term_op termino e1 .)
    FORWARD         reduce using rule 44 (exp -> termino term_op termino e1 .)
    RIGHT           reduce using rule 44 (exp -> termino term_op termino e1 .)
    LEFT            reduce using rule 44 (exp -> termino term_op termino e1 .)
    END             reduce using rule 44 (exp -> termino term_op termino e1 .)
    ELSE            reduce using rule 44 (exp -> termino term_op termino e1 .)
    CLOSE_SQR       reduce using rule 44 (exp -> termino term_op termino e1 .)


state 155

    (49) termino -> factor fact_op factor e2 .
    (48) termino -> factor e2 .
  ! reduce/reduce conflict for EQUAL_TO resolved using rule 49 (termino -> factor fact_op factor e2 .)
  ! reduce/reduce conflict for MORE_OR_EQ_THAN resolved using rule 49 (termino -> factor fact_op factor e2 .)
  ! reduce/reduce conflict for LESS_OR_EQ_THAN resolved using rule 49 (termino -> factor fact_op factor e2 .)
  ! reduce/reduce conflict for DIFFERENT_TO resolved using rule 49 (termino -> factor fact_op factor e2 .)
  ! reduce/reduce conflict for MORE_THAN resolved using rule 49 (termino -> factor fact_op factor e2 .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 49 (termino -> factor fact_op factor e2 .)
  ! reduce/reduce conflict for OR resolved using rule 49 (termino -> factor fact_op factor e2 .)
  ! reduce/reduce conflict for AND resolved using rule 49 (termino -> factor fact_op factor e2 .)
  ! reduce/reduce conflict for DIV resolved using rule 49 (termino -> factor fact_op factor e2 .)
  ! reduce/reduce conflict for MULT resolved using rule 49 (termino -> factor fact_op factor e2 .)
  ! reduce/reduce conflict for SUB resolved using rule 49 (termino -> factor fact_op factor e2 .)
  ! reduce/reduce conflict for SUM resolved using rule 49 (termino -> factor fact_op factor e2 .)
  ! reduce/reduce conflict for COMMA resolved using rule 49 (termino -> factor fact_op factor e2 .)
  ! reduce/reduce conflict for CLOSE_PTH resolved using rule 49 (termino -> factor fact_op factor e2 .)
  ! reduce/reduce conflict for PEN_DOWN resolved using rule 49 (termino -> factor fact_op factor e2 .)
  ! reduce/reduce conflict for PEN_UP resolved using rule 49 (termino -> factor fact_op factor e2 .)
  ! reduce/reduce conflict for WHILE resolved using rule 49 (termino -> factor fact_op factor e2 .)
  ! reduce/reduce conflict for IF resolved using rule 49 (termino -> factor fact_op factor e2 .)
  ! reduce/reduce conflict for WRITE resolved using rule 49 (termino -> factor fact_op factor e2 .)
  ! reduce/reduce conflict for READ resolved using rule 49 (termino -> factor fact_op factor e2 .)
  ! reduce/reduce conflict for ID resolved using rule 49 (termino -> factor fact_op factor e2 .)
  ! reduce/reduce conflict for BOOL resolved using rule 49 (termino -> factor fact_op factor e2 .)
  ! reduce/reduce conflict for WORD resolved using rule 49 (termino -> factor fact_op factor e2 .)
  ! reduce/reduce conflict for NUMBER resolved using rule 49 (termino -> factor fact_op factor e2 .)
  ! reduce/reduce conflict for CENTER resolved using rule 49 (termino -> factor fact_op factor e2 .)
  ! reduce/reduce conflict for FORWARD resolved using rule 49 (termino -> factor fact_op factor e2 .)
  ! reduce/reduce conflict for RIGHT resolved using rule 49 (termino -> factor fact_op factor e2 .)
  ! reduce/reduce conflict for LEFT resolved using rule 49 (termino -> factor fact_op factor e2 .)
  ! reduce/reduce conflict for END resolved using rule 49 (termino -> factor fact_op factor e2 .)
  ! reduce/reduce conflict for ELSE resolved using rule 49 (termino -> factor fact_op factor e2 .)
  ! reduce/reduce conflict for CLOSE_SQR resolved using rule 49 (termino -> factor fact_op factor e2 .)
    OR              reduce using rule 49 (termino -> factor fact_op factor e2 .)
    AND             reduce using rule 49 (termino -> factor fact_op factor e2 .)
    DIV             reduce using rule 49 (termino -> factor fact_op factor e2 .)
    MULT            reduce using rule 49 (termino -> factor fact_op factor e2 .)
    SUB             reduce using rule 49 (termino -> factor fact_op factor e2 .)
    SUM             reduce using rule 49 (termino -> factor fact_op factor e2 .)
    EQUAL_TO        reduce using rule 49 (termino -> factor fact_op factor e2 .)
    MORE_OR_EQ_THAN reduce using rule 49 (termino -> factor fact_op factor e2 .)
    LESS_OR_EQ_THAN reduce using rule 49 (termino -> factor fact_op factor e2 .)
    DIFFERENT_TO    reduce using rule 49 (termino -> factor fact_op factor e2 .)
    MORE_THAN       reduce using rule 49 (termino -> factor fact_op factor e2 .)
    LESS_THAN       reduce using rule 49 (termino -> factor fact_op factor e2 .)
    COMMA           reduce using rule 49 (termino -> factor fact_op factor e2 .)
    CLOSE_PTH       reduce using rule 49 (termino -> factor fact_op factor e2 .)
    PEN_DOWN        reduce using rule 49 (termino -> factor fact_op factor e2 .)
    PEN_UP          reduce using rule 49 (termino -> factor fact_op factor e2 .)
    WHILE           reduce using rule 49 (termino -> factor fact_op factor e2 .)
    IF              reduce using rule 49 (termino -> factor fact_op factor e2 .)
    WRITE           reduce using rule 49 (termino -> factor fact_op factor e2 .)
    READ            reduce using rule 49 (termino -> factor fact_op factor e2 .)
    ID              reduce using rule 49 (termino -> factor fact_op factor e2 .)
    BOOL            reduce using rule 49 (termino -> factor fact_op factor e2 .)
    WORD            reduce using rule 49 (termino -> factor fact_op factor e2 .)
    NUMBER          reduce using rule 49 (termino -> factor fact_op factor e2 .)
    CENTER          reduce using rule 49 (termino -> factor fact_op factor e2 .)
    FORWARD         reduce using rule 49 (termino -> factor fact_op factor e2 .)
    RIGHT           reduce using rule 49 (termino -> factor fact_op factor e2 .)
    LEFT            reduce using rule 49 (termino -> factor fact_op factor e2 .)
    END             reduce using rule 49 (termino -> factor fact_op factor e2 .)
    ELSE            reduce using rule 49 (termino -> factor fact_op factor e2 .)
    CLOSE_SQR       reduce using rule 49 (termino -> factor fact_op factor e2 .)


state 156

    (74) array -> OPEN_SQR expression CLOSE_SQR . matrix
    (75) matrix -> . empty
    (76) matrix -> . OPEN_SQR expression CLOSE_SQR
    (93) empty -> .
    OPEN_SQR        shift and go to state 163
    OR              reduce using rule 93 (empty -> .)
    AND             reduce using rule 93 (empty -> .)
    DIV             reduce using rule 93 (empty -> .)
    MULT            reduce using rule 93 (empty -> .)
    SUB             reduce using rule 93 (empty -> .)
    SUM             reduce using rule 93 (empty -> .)
    EQUAL_TO        reduce using rule 93 (empty -> .)
    MORE_OR_EQ_THAN reduce using rule 93 (empty -> .)
    LESS_OR_EQ_THAN reduce using rule 93 (empty -> .)
    DIFFERENT_TO    reduce using rule 93 (empty -> .)
    MORE_THAN       reduce using rule 93 (empty -> .)
    LESS_THAN       reduce using rule 93 (empty -> .)
    COMMA           reduce using rule 93 (empty -> .)
    CLOSE_PTH       reduce using rule 93 (empty -> .)
    PEN_DOWN        reduce using rule 93 (empty -> .)
    PEN_UP          reduce using rule 93 (empty -> .)
    WHILE           reduce using rule 93 (empty -> .)
    IF              reduce using rule 93 (empty -> .)
    WRITE           reduce using rule 93 (empty -> .)
    READ            reduce using rule 93 (empty -> .)
    ID              reduce using rule 93 (empty -> .)
    BOOL            reduce using rule 93 (empty -> .)
    WORD            reduce using rule 93 (empty -> .)
    NUMBER          reduce using rule 93 (empty -> .)
    CENTER          reduce using rule 93 (empty -> .)
    FORWARD         reduce using rule 93 (empty -> .)
    RIGHT           reduce using rule 93 (empty -> .)
    LEFT            reduce using rule 93 (empty -> .)
    END             reduce using rule 93 (empty -> .)
    ELSE            reduce using rule 93 (empty -> .)
    CLOSE_SQR       reduce using rule 93 (empty -> .)

    matrix                         shift and go to state 164
    empty                          shift and go to state 165

state 157

    (82) else_stmnt -> ELSE stmnt . END
    END             shift and go to state 166


state 158

    (71) read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .
    PEN_DOWN        reduce using rule 71 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    PEN_UP          reduce using rule 71 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    WHILE           reduce using rule 71 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    IF              reduce using rule 71 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    WRITE           reduce using rule 71 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    READ            reduce using rule 71 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    ID              reduce using rule 71 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    BOOL            reduce using rule 71 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    WORD            reduce using rule 71 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    NUMBER          reduce using rule 71 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    CENTER          reduce using rule 71 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    FORWARD         reduce using rule 71 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    RIGHT           reduce using rule 71 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    LEFT            reduce using rule 71 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    END             reduce using rule 71 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    ELSE            reduce using rule 71 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)


state 159

    (10) func_declaration -> func_type FUNC ID OPEN_PTH parameter CLOSE_PTH stmnt . END
    END             shift and go to state 167


state 160

    (16) parameter -> var_type ID multiple_parameters .
    CLOSE_PTH       reduce using rule 16 (parameter -> var_type ID multiple_parameters .)


state 161

    (17) multiple_parameters -> empty .
    CLOSE_PTH       reduce using rule 17 (multiple_parameters -> empty .)


state 162

    (18) multiple_parameters -> COMMA . parameter
    (15) parameter -> . empty
    (16) parameter -> . var_type ID multiple_parameters
    (93) empty -> .
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    CLOSE_PTH       reduce using rule 93 (empty -> .)
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9

    parameter                      shift and go to state 168
    empty                          shift and go to state 128
    var_type                       shift and go to state 129

state 163

    (76) matrix -> OPEN_SQR . expression CLOSE_SQR
    (41) expression -> . exp
    (42) expression -> . exp rel_op exp
    (43) exp -> . termino e1
    (44) exp -> . termino term_op termino e1
    (48) termino -> . factor e2
    (49) termino -> . factor fact_op factor e2
    (53) factor -> . expression
    (54) factor -> . term_op var_cte
    (55) factor -> . var_cte
    (56) factor -> . open_pth expression close_pth
    (46) term_op -> . SUB
    (47) term_op -> . SUM
    (34) var_cte -> . func_call
    (35) var_cte -> . cte_bool
    (36) var_cte -> . CTE_STR
    (37) var_cte -> . CTE_NUM
    (38) var_cte -> . variable
    (57) open_pth -> . OPEN_PTH
    (67) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (39) cte_bool -> . FALSE
    (40) cte_bool -> . TRUE
    (72) variable -> . ID array
    SUB             shift and go to state 74
    SUM             shift and go to state 75
    CTE_STR         shift and go to state 78
    CTE_NUM         shift and go to state 79
    OPEN_PTH        shift and go to state 81
    ID              shift and go to state 82
    FALSE           shift and go to state 83
    TRUE            shift and go to state 84

    expression                     shift and go to state 169
    exp                            shift and go to state 68
    termino                        shift and go to state 69
    term_op                        shift and go to state 70
    factor                         shift and go to state 71
    var_cte                        shift and go to state 72
    open_pth                       shift and go to state 73
    func_call                      shift and go to state 76
    cte_bool                       shift and go to state 77
    variable                       shift and go to state 80

state 164

    (74) array -> OPEN_SQR expression CLOSE_SQR matrix .
    OR              reduce using rule 74 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    AND             reduce using rule 74 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    DIV             reduce using rule 74 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    MULT            reduce using rule 74 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    SUB             reduce using rule 74 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    SUM             reduce using rule 74 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    EQUAL_TO        reduce using rule 74 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    MORE_OR_EQ_THAN reduce using rule 74 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    LESS_OR_EQ_THAN reduce using rule 74 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    DIFFERENT_TO    reduce using rule 74 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    MORE_THAN       reduce using rule 74 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    LESS_THAN       reduce using rule 74 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    COMMA           reduce using rule 74 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    CLOSE_PTH       reduce using rule 74 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    PEN_DOWN        reduce using rule 74 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    PEN_UP          reduce using rule 74 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    WHILE           reduce using rule 74 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    IF              reduce using rule 74 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    WRITE           reduce using rule 74 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    READ            reduce using rule 74 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    ID              reduce using rule 74 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    BOOL            reduce using rule 74 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    WORD            reduce using rule 74 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    NUMBER          reduce using rule 74 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    CENTER          reduce using rule 74 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    FORWARD         reduce using rule 74 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    RIGHT           reduce using rule 74 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    LEFT            reduce using rule 74 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    END             reduce using rule 74 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    ELSE            reduce using rule 74 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    CLOSE_SQR       reduce using rule 74 (array -> OPEN_SQR expression CLOSE_SQR matrix .)


state 165

    (75) matrix -> empty .
    OR              reduce using rule 75 (matrix -> empty .)
    AND             reduce using rule 75 (matrix -> empty .)
    DIV             reduce using rule 75 (matrix -> empty .)
    MULT            reduce using rule 75 (matrix -> empty .)
    SUB             reduce using rule 75 (matrix -> empty .)
    SUM             reduce using rule 75 (matrix -> empty .)
    EQUAL_TO        reduce using rule 75 (matrix -> empty .)
    MORE_OR_EQ_THAN reduce using rule 75 (matrix -> empty .)
    LESS_OR_EQ_THAN reduce using rule 75 (matrix -> empty .)
    DIFFERENT_TO    reduce using rule 75 (matrix -> empty .)
    MORE_THAN       reduce using rule 75 (matrix -> empty .)
    LESS_THAN       reduce using rule 75 (matrix -> empty .)
    COMMA           reduce using rule 75 (matrix -> empty .)
    CLOSE_PTH       reduce using rule 75 (matrix -> empty .)
    PEN_DOWN        reduce using rule 75 (matrix -> empty .)
    PEN_UP          reduce using rule 75 (matrix -> empty .)
    WHILE           reduce using rule 75 (matrix -> empty .)
    IF              reduce using rule 75 (matrix -> empty .)
    WRITE           reduce using rule 75 (matrix -> empty .)
    READ            reduce using rule 75 (matrix -> empty .)
    ID              reduce using rule 75 (matrix -> empty .)
    BOOL            reduce using rule 75 (matrix -> empty .)
    WORD            reduce using rule 75 (matrix -> empty .)
    NUMBER          reduce using rule 75 (matrix -> empty .)
    CENTER          reduce using rule 75 (matrix -> empty .)
    FORWARD         reduce using rule 75 (matrix -> empty .)
    RIGHT           reduce using rule 75 (matrix -> empty .)
    LEFT            reduce using rule 75 (matrix -> empty .)
    END             reduce using rule 75 (matrix -> empty .)
    ELSE            reduce using rule 75 (matrix -> empty .)
    CLOSE_SQR       reduce using rule 75 (matrix -> empty .)


state 166

    (82) else_stmnt -> ELSE stmnt END .
    PEN_DOWN        reduce using rule 82 (else_stmnt -> ELSE stmnt END .)
    PEN_UP          reduce using rule 82 (else_stmnt -> ELSE stmnt END .)
    WHILE           reduce using rule 82 (else_stmnt -> ELSE stmnt END .)
    IF              reduce using rule 82 (else_stmnt -> ELSE stmnt END .)
    WRITE           reduce using rule 82 (else_stmnt -> ELSE stmnt END .)
    READ            reduce using rule 82 (else_stmnt -> ELSE stmnt END .)
    ID              reduce using rule 82 (else_stmnt -> ELSE stmnt END .)
    BOOL            reduce using rule 82 (else_stmnt -> ELSE stmnt END .)
    WORD            reduce using rule 82 (else_stmnt -> ELSE stmnt END .)
    NUMBER          reduce using rule 82 (else_stmnt -> ELSE stmnt END .)
    CENTER          reduce using rule 82 (else_stmnt -> ELSE stmnt END .)
    FORWARD         reduce using rule 82 (else_stmnt -> ELSE stmnt END .)
    RIGHT           reduce using rule 82 (else_stmnt -> ELSE stmnt END .)
    LEFT            reduce using rule 82 (else_stmnt -> ELSE stmnt END .)
    END             reduce using rule 82 (else_stmnt -> ELSE stmnt END .)
    ELSE            reduce using rule 82 (else_stmnt -> ELSE stmnt END .)


state 167

    (10) func_declaration -> func_type FUNC ID OPEN_PTH parameter CLOSE_PTH stmnt END .
    MAIN            reduce using rule 10 (func_declaration -> func_type FUNC ID OPEN_PTH parameter CLOSE_PTH stmnt END .)


state 168

    (18) multiple_parameters -> COMMA parameter .
    CLOSE_PTH       reduce using rule 18 (multiple_parameters -> COMMA parameter .)


state 169

    (76) matrix -> OPEN_SQR expression . CLOSE_SQR
    (53) factor -> expression .
  ! shift/reduce conflict for CLOSE_SQR resolved as shift
    CLOSE_SQR       shift and go to state 170
    SUB             reduce using rule 53 (factor -> expression .)
    SUM             reduce using rule 53 (factor -> expression .)
    EQUAL_TO        reduce using rule 53 (factor -> expression .)
    MORE_OR_EQ_THAN reduce using rule 53 (factor -> expression .)
    LESS_OR_EQ_THAN reduce using rule 53 (factor -> expression .)
    DIFFERENT_TO    reduce using rule 53 (factor -> expression .)
    MORE_THAN       reduce using rule 53 (factor -> expression .)
    LESS_THAN       reduce using rule 53 (factor -> expression .)
    DIV             reduce using rule 53 (factor -> expression .)
    MULT            reduce using rule 53 (factor -> expression .)


state 170

    (76) matrix -> OPEN_SQR expression CLOSE_SQR .
    OR              reduce using rule 76 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    AND             reduce using rule 76 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    DIV             reduce using rule 76 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    MULT            reduce using rule 76 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    SUB             reduce using rule 76 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    SUM             reduce using rule 76 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    EQUAL_TO        reduce using rule 76 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    MORE_OR_EQ_THAN reduce using rule 76 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    LESS_OR_EQ_THAN reduce using rule 76 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    DIFFERENT_TO    reduce using rule 76 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    MORE_THAN       reduce using rule 76 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    LESS_THAN       reduce using rule 76 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    COMMA           reduce using rule 76 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    CLOSE_PTH       reduce using rule 76 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    PEN_DOWN        reduce using rule 76 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    PEN_UP          reduce using rule 76 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    WHILE           reduce using rule 76 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    IF              reduce using rule 76 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    WRITE           reduce using rule 76 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    READ            reduce using rule 76 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    ID              reduce using rule 76 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    BOOL            reduce using rule 76 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    WORD            reduce using rule 76 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    NUMBER          reduce using rule 76 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    CENTER          reduce using rule 76 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    FORWARD         reduce using rule 76 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    RIGHT           reduce using rule 76 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    LEFT            reduce using rule 76 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    END             reduce using rule 76 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    ELSE            reduce using rule 76 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    CLOSE_SQR       reduce using rule 76 (matrix -> OPEN_SQR expression CLOSE_SQR .)


Conflicts:

shift/reduce conflict for OR in state 67 resolved as shift
shift/reduce conflict for AND in state 67 resolved as shift
shift/reduce conflict for EQUAL_TO in state 68 resolved as shift
shift/reduce conflict for MORE_OR_EQ_THAN in state 68 resolved as shift
shift/reduce conflict for LESS_OR_EQ_THAN in state 68 resolved as shift
shift/reduce conflict for DIFFERENT_TO in state 68 resolved as shift
shift/reduce conflict for MORE_THAN in state 68 resolved as shift
shift/reduce conflict for LESS_THAN in state 68 resolved as shift
shift/reduce conflict for SUB in state 69 resolved as shift
shift/reduce conflict for SUM in state 69 resolved as shift
shift/reduce conflict for DIV in state 71 resolved as shift
shift/reduce conflict for MULT in state 71 resolved as shift
shift/reduce conflict for COMMA in state 96 resolved as shift
shift/reduce conflict for CLOSE_PTH in state 118 resolved as shift
shift/reduce conflict for CLOSE_PTH in state 123 resolved as shift
shift/reduce conflict for EQUAL_TO in state 138 resolved as shift
shift/reduce conflict for MORE_OR_EQ_THAN in state 138 resolved as shift
shift/reduce conflict for LESS_OR_EQ_THAN in state 138 resolved as shift
shift/reduce conflict for DIFFERENT_TO in state 138 resolved as shift
shift/reduce conflict for MORE_THAN in state 138 resolved as shift
shift/reduce conflict for LESS_THAN in state 138 resolved as shift
shift/reduce conflict for SUB in state 140 resolved as shift
shift/reduce conflict for SUM in state 140 resolved as shift
shift/reduce conflict for DIV in state 141 resolved as shift
shift/reduce conflict for MULT in state 141 resolved as shift
shift/reduce conflict for CLOSE_SQR in state 144 resolved as shift
shift/reduce conflict for CLOSE_SQR in state 169 resolved as shift
reduce/reduce conflict in state 96 resolved using rule factor -> expression
rejected rule (empty -> <empty>) in state 96
reduce/reduce conflict in state 126 resolved using rule e3 -> <empty>
rejected rule (factor -> expression) in state 126
reduce/reduce conflict in state 137 resolved using rule factor -> expression
rejected rule (con_expression -> expression log_op expression) in state 137
reduce/reduce conflict in state 138 resolved using rule expression -> exp rel_op exp
rejected rule (expression -> exp) in state 138
reduce/reduce conflict in state 154 resolved using rule exp -> termino term_op termino e1
rejected rule (exp -> termino e1) in state 154
reduce/reduce conflict in state 155 resolved using rule termino -> factor fact_op factor e2
rejected rule (termino -> factor e2) in state 155
Rule (con_expression -> expression log_op expression) is never reduced