Grammar:

Rule 0     S' -> program
Rule 1     program -> DRAWING ID declaration
Rule 2     declaration -> var_declaration func_declaration main
Rule 3     var_declaration -> var_type ID multiple_var
Rule 4     multiple_var -> empty
Rule 5     multiple_var -> COMMA ID multiple_var
Rule 6     var_type -> BOOL
Rule 7     var_type -> WORD
Rule 8     var_type -> NUMBER
Rule 9     func_declaration -> empty
Rule 10    func_declaration -> func_type FUNC ID OPEN_PTH parameter CLOSE_PTH stmnt END
Rule 11    func_type -> BOOL
Rule 12    func_type -> WORD
Rule 13    func_type -> NUMBER
Rule 14    func_type -> VOID
Rule 15    parameter -> empty
Rule 16    parameter -> var_type ID multiple_parameters
Rule 17    multiple_parameters -> empty
Rule 18    multiple_parameters -> COMMA parameter
Rule 19    stmnt -> empty
Rule 20    stmnt -> var_declaration_func stmnt
Rule 21    stmnt -> pen_func stmnt
Rule 22    stmnt -> move_func stmnt
Rule 23    stmnt -> while_stmnt stmnt
Rule 24    stmnt -> if_stmnt stmnt
Rule 25    stmnt -> write stmnt
Rule 26    stmnt -> read stmnt
Rule 27    stmnt -> func_call stmnt
Rule 28    stmnt -> var_assignation stmnt
Rule 29    var_declaration_func -> var_type ID multiple_vars
Rule 30    var_assignation -> ID ASSIGN expression
Rule 31    var_assignation -> ID ASSIGN var_cte
Rule 32    var_cte -> func_call
Rule 33    var_cte -> cte_bool
Rule 34    var_cte -> CTE_STR
Rule 35    var_cte -> CTE_NUM
Rule 36    var_cte -> variable
Rule 37    cte_bool -> FALSE
Rule 38    cte_bool -> TRUE
Rule 39    expression -> mult_expr
Rule 40    expression -> var_cte
Rule 41    expression -> complex_expr
Rule 42    mult_expr -> OPEN_PTH expression CLOSE_PTH
Rule 43    complex_expr -> expression e1 operator expression e2 quads
Rule 44    e1 -> <empty>
Rule 45    e2 -> <empty>
Rule 46    quads -> <empty>
Rule 47    operator -> rel_op
Rule 48    operator -> log_op
Rule 49    operator -> art_op
Rule 50    art_op -> DIV
Rule 51    art_op -> MULT
Rule 52    art_op -> SUB
Rule 53    art_op -> SUM
Rule 54    log_op -> OR
Rule 55    log_op -> AND
Rule 56    rel_op -> EQUAL_TO
Rule 57    rel_op -> MORE_OR_EQ_THAN
Rule 58    rel_op -> LESS_OR_EQ_THAN
Rule 59    rel_op -> DIFFERENT_TO
Rule 60    rel_op -> MORE_THAN
Rule 61    rel_op -> LESS_THAN
Rule 62    func_call -> ID OPEN_PTH func_call_param CLOSE_PTH
Rule 63    func_call_param -> expression multiple_fc_param
Rule 64    multiple_fc_param -> empty
Rule 65    multiple_fc_param -> COMMA func_call_param
Rule 66    read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH
Rule 67    variable -> ID array
Rule 68    array -> empty
Rule 69    array -> OPEN_SQR expression CLOSE_SQR matrix
Rule 70    matrix -> empty
Rule 71    matrix -> OPEN_SQR expression CLOSE_SQR
Rule 72    multiple_vars -> empty
Rule 73    multiple_vars -> COMMA variable
Rule 74    write -> WRITE OPEN_PTH expression multiple_expression CLOSE_PTH
Rule 75    multiple_expression -> empty
Rule 76    multiple_expression -> COMMA expression
Rule 77    if_stmnt -> IF expression stmnt else_stmnt
Rule 78    else_stmnt -> END
Rule 79    else_stmnt -> ELSE stmnt END
Rule 80    while_stmnt -> WHILE expression stmnt END
Rule 81    move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH
Rule 82    move_type -> CENTER
Rule 83    move_type -> FORWARD
Rule 84    move_type -> RIGHT
Rule 85    move_type -> LEFT
Rule 86    pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH
Rule 87    pen_func -> PEN_UP OPEN_PTH CLOSE_PTH
Rule 88    main -> MAIN stmnt END
Rule 89    empty -> <empty>

Terminals, with rules where they appear:

AND                  : 55
ASSIGN               : 30 31
BOOL                 : 6 11
CENTER               : 82
CLOSE_PTH            : 10 42 62 66 74 81 86 87
CLOSE_SQR            : 69 71
COMMA                : 5 18 65 73 76
CTE_NUM              : 35
CTE_STR              : 34
DIFFERENT_TO         : 59
DIV                  : 50
DRAWING              : 1
ELSE                 : 79
END                  : 10 78 79 80 88
EQUAL_TO             : 56
FALSE                : 37
FORWARD              : 83
FUNC                 : 10
ID                   : 1 3 5 10 16 29 30 31 62 67
IF                   : 77
LEFT                 : 85
LESS_OR_EQ_THAN      : 58
LESS_THAN            : 61
MAIN                 : 88
MORE_OR_EQ_THAN      : 57
MORE_THAN            : 60
MULT                 : 51
NUMBER               : 8 13
OPEN_PTH             : 10 42 62 66 74 81 86 87
OPEN_SQR             : 69 71
OR                   : 54
PEN_DOWN             : 86
PEN_UP               : 87
READ                 : 66
RIGHT                : 84
SUB                  : 52
SUM                  : 53
TRUE                 : 38
VOID                 : 14
WHILE                : 80
WORD                 : 7 12
WRITE                : 74
error                : 

Nonterminals, with rules where they appear:

array                : 67
art_op               : 49
complex_expr         : 41
cte_bool             : 33
declaration          : 1
e1                   : 43
e2                   : 43
else_stmnt           : 77
empty                : 4 9 15 17 19 64 68 70 72 75
expression           : 30 42 43 43 63 69 71 74 76 77 80
func_call            : 27 32
func_call_param      : 62 65 81
func_declaration     : 2
func_type            : 10
if_stmnt             : 24
log_op               : 48
main                 : 2
matrix               : 69
move_func            : 22
move_type            : 81
mult_expr            : 39
multiple_expression  : 74
multiple_fc_param    : 63
multiple_parameters  : 16
multiple_var         : 3 5
multiple_vars        : 29 66
operator             : 43
parameter            : 10 18
pen_func             : 21
program              : 0
quads                : 43
read                 : 26
rel_op               : 47
stmnt                : 10 20 21 22 23 24 25 26 27 28 77 79 80 88
var_assignation      : 28
var_cte              : 31 40
var_declaration      : 2
var_declaration_func : 20
var_type             : 3 16 29
variable             : 36 66 73
while_stmnt          : 23
write                : 25


state 0

    (0) S' -> . program
    (1) program -> . DRAWING ID declaration
    DRAWING         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .


state 2

    (1) program -> DRAWING . ID declaration
    ID              shift and go to state 3


state 3

    (1) program -> DRAWING ID . declaration
    (2) declaration -> . var_declaration func_declaration main
    (3) var_declaration -> . var_type ID multiple_var
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9

    declaration                    shift and go to state 4
    var_declaration                shift and go to state 5
    var_type                       shift and go to state 6

state 4

    (1) program -> DRAWING ID declaration .
    $end            reduce using rule 1 (program -> DRAWING ID declaration .)


state 5

    (2) declaration -> var_declaration . func_declaration main
    (9) func_declaration -> . empty
    (10) func_declaration -> . func_type FUNC ID OPEN_PTH parameter CLOSE_PTH stmnt END
    (89) empty -> .
    (11) func_type -> . BOOL
    (12) func_type -> . WORD
    (13) func_type -> . NUMBER
    (14) func_type -> . VOID
    MAIN            reduce using rule 89 (empty -> .)
    BOOL            shift and go to state 13
    WORD            shift and go to state 14
    NUMBER          shift and go to state 15
    VOID            shift and go to state 16

    func_declaration               shift and go to state 10
    empty                          shift and go to state 11
    func_type                      shift and go to state 12

state 6

    (3) var_declaration -> var_type . ID multiple_var
    ID              shift and go to state 17


state 7

    (6) var_type -> BOOL .
    ID              reduce using rule 6 (var_type -> BOOL .)


state 8

    (7) var_type -> WORD .
    ID              reduce using rule 7 (var_type -> WORD .)


state 9

    (8) var_type -> NUMBER .
    ID              reduce using rule 8 (var_type -> NUMBER .)


state 10

    (2) declaration -> var_declaration func_declaration . main
    (88) main -> . MAIN stmnt END
    MAIN            shift and go to state 19

    main                           shift and go to state 18

state 11

    (9) func_declaration -> empty .
    MAIN            reduce using rule 9 (func_declaration -> empty .)


state 12

    (10) func_declaration -> func_type . FUNC ID OPEN_PTH parameter CLOSE_PTH stmnt END
    FUNC            shift and go to state 20


state 13

    (11) func_type -> BOOL .
    FUNC            reduce using rule 11 (func_type -> BOOL .)


state 14

    (12) func_type -> WORD .
    FUNC            reduce using rule 12 (func_type -> WORD .)


state 15

    (13) func_type -> NUMBER .
    FUNC            reduce using rule 13 (func_type -> NUMBER .)


state 16

    (14) func_type -> VOID .
    FUNC            reduce using rule 14 (func_type -> VOID .)


state 17

    (3) var_declaration -> var_type ID . multiple_var
    (4) multiple_var -> . empty
    (5) multiple_var -> . COMMA ID multiple_var
    (89) empty -> .
    COMMA           shift and go to state 23
    BOOL            reduce using rule 89 (empty -> .)
    WORD            reduce using rule 89 (empty -> .)
    NUMBER          reduce using rule 89 (empty -> .)
    VOID            reduce using rule 89 (empty -> .)
    MAIN            reduce using rule 89 (empty -> .)

    multiple_var                   shift and go to state 21
    empty                          shift and go to state 22

state 18

    (2) declaration -> var_declaration func_declaration main .
    $end            reduce using rule 2 (declaration -> var_declaration func_declaration main .)


state 19

    (88) main -> MAIN . stmnt END
    (19) stmnt -> . empty
    (20) stmnt -> . var_declaration_func stmnt
    (21) stmnt -> . pen_func stmnt
    (22) stmnt -> . move_func stmnt
    (23) stmnt -> . while_stmnt stmnt
    (24) stmnt -> . if_stmnt stmnt
    (25) stmnt -> . write stmnt
    (26) stmnt -> . read stmnt
    (27) stmnt -> . func_call stmnt
    (28) stmnt -> . var_assignation stmnt
    (89) empty -> .
    (29) var_declaration_func -> . var_type ID multiple_vars
    (86) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (87) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (81) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (80) while_stmnt -> . WHILE expression stmnt END
    (77) if_stmnt -> . IF expression stmnt else_stmnt
    (74) write -> . WRITE OPEN_PTH expression multiple_expression CLOSE_PTH
    (66) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (62) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (30) var_assignation -> . ID ASSIGN expression
    (31) var_assignation -> . ID ASSIGN var_cte
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    (82) move_type -> . CENTER
    (83) move_type -> . FORWARD
    (84) move_type -> . RIGHT
    (85) move_type -> . LEFT
    END             reduce using rule 89 (empty -> .)
    PEN_DOWN        shift and go to state 37
    PEN_UP          shift and go to state 38
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    WRITE           shift and go to state 42
    READ            shift and go to state 43
    ID              shift and go to state 36
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9
    CENTER          shift and go to state 44
    FORWARD         shift and go to state 45
    RIGHT           shift and go to state 46
    LEFT            shift and go to state 47

    stmnt                          shift and go to state 24
    empty                          shift and go to state 25
    var_declaration_func           shift and go to state 26
    pen_func                       shift and go to state 27
    move_func                      shift and go to state 28
    while_stmnt                    shift and go to state 29
    if_stmnt                       shift and go to state 30
    write                          shift and go to state 31
    read                           shift and go to state 32
    func_call                      shift and go to state 33
    var_assignation                shift and go to state 34
    var_type                       shift and go to state 35
    move_type                      shift and go to state 39

state 20

    (10) func_declaration -> func_type FUNC . ID OPEN_PTH parameter CLOSE_PTH stmnt END
    ID              shift and go to state 48


state 21

    (3) var_declaration -> var_type ID multiple_var .
    BOOL            reduce using rule 3 (var_declaration -> var_type ID multiple_var .)
    WORD            reduce using rule 3 (var_declaration -> var_type ID multiple_var .)
    NUMBER          reduce using rule 3 (var_declaration -> var_type ID multiple_var .)
    VOID            reduce using rule 3 (var_declaration -> var_type ID multiple_var .)
    MAIN            reduce using rule 3 (var_declaration -> var_type ID multiple_var .)


state 22

    (4) multiple_var -> empty .
    BOOL            reduce using rule 4 (multiple_var -> empty .)
    WORD            reduce using rule 4 (multiple_var -> empty .)
    NUMBER          reduce using rule 4 (multiple_var -> empty .)
    VOID            reduce using rule 4 (multiple_var -> empty .)
    MAIN            reduce using rule 4 (multiple_var -> empty .)


state 23

    (5) multiple_var -> COMMA . ID multiple_var
    ID              shift and go to state 49


state 24

    (88) main -> MAIN stmnt . END
    END             shift and go to state 50


state 25

    (19) stmnt -> empty .
    END             reduce using rule 19 (stmnt -> empty .)
    ELSE            reduce using rule 19 (stmnt -> empty .)


state 26

    (20) stmnt -> var_declaration_func . stmnt
    (19) stmnt -> . empty
    (20) stmnt -> . var_declaration_func stmnt
    (21) stmnt -> . pen_func stmnt
    (22) stmnt -> . move_func stmnt
    (23) stmnt -> . while_stmnt stmnt
    (24) stmnt -> . if_stmnt stmnt
    (25) stmnt -> . write stmnt
    (26) stmnt -> . read stmnt
    (27) stmnt -> . func_call stmnt
    (28) stmnt -> . var_assignation stmnt
    (89) empty -> .
    (29) var_declaration_func -> . var_type ID multiple_vars
    (86) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (87) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (81) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (80) while_stmnt -> . WHILE expression stmnt END
    (77) if_stmnt -> . IF expression stmnt else_stmnt
    (74) write -> . WRITE OPEN_PTH expression multiple_expression CLOSE_PTH
    (66) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (62) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (30) var_assignation -> . ID ASSIGN expression
    (31) var_assignation -> . ID ASSIGN var_cte
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    (82) move_type -> . CENTER
    (83) move_type -> . FORWARD
    (84) move_type -> . RIGHT
    (85) move_type -> . LEFT
    END             reduce using rule 89 (empty -> .)
    ELSE            reduce using rule 89 (empty -> .)
    PEN_DOWN        shift and go to state 37
    PEN_UP          shift and go to state 38
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    WRITE           shift and go to state 42
    READ            shift and go to state 43
    ID              shift and go to state 36
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9
    CENTER          shift and go to state 44
    FORWARD         shift and go to state 45
    RIGHT           shift and go to state 46
    LEFT            shift and go to state 47

    var_declaration_func           shift and go to state 26
    stmnt                          shift and go to state 51
    empty                          shift and go to state 25
    pen_func                       shift and go to state 27
    move_func                      shift and go to state 28
    while_stmnt                    shift and go to state 29
    if_stmnt                       shift and go to state 30
    write                          shift and go to state 31
    read                           shift and go to state 32
    func_call                      shift and go to state 33
    var_assignation                shift and go to state 34
    var_type                       shift and go to state 35
    move_type                      shift and go to state 39

state 27

    (21) stmnt -> pen_func . stmnt
    (19) stmnt -> . empty
    (20) stmnt -> . var_declaration_func stmnt
    (21) stmnt -> . pen_func stmnt
    (22) stmnt -> . move_func stmnt
    (23) stmnt -> . while_stmnt stmnt
    (24) stmnt -> . if_stmnt stmnt
    (25) stmnt -> . write stmnt
    (26) stmnt -> . read stmnt
    (27) stmnt -> . func_call stmnt
    (28) stmnt -> . var_assignation stmnt
    (89) empty -> .
    (29) var_declaration_func -> . var_type ID multiple_vars
    (86) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (87) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (81) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (80) while_stmnt -> . WHILE expression stmnt END
    (77) if_stmnt -> . IF expression stmnt else_stmnt
    (74) write -> . WRITE OPEN_PTH expression multiple_expression CLOSE_PTH
    (66) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (62) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (30) var_assignation -> . ID ASSIGN expression
    (31) var_assignation -> . ID ASSIGN var_cte
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    (82) move_type -> . CENTER
    (83) move_type -> . FORWARD
    (84) move_type -> . RIGHT
    (85) move_type -> . LEFT
    END             reduce using rule 89 (empty -> .)
    ELSE            reduce using rule 89 (empty -> .)
    PEN_DOWN        shift and go to state 37
    PEN_UP          shift and go to state 38
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    WRITE           shift and go to state 42
    READ            shift and go to state 43
    ID              shift and go to state 36
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9
    CENTER          shift and go to state 44
    FORWARD         shift and go to state 45
    RIGHT           shift and go to state 46
    LEFT            shift and go to state 47

    pen_func                       shift and go to state 27
    stmnt                          shift and go to state 52
    empty                          shift and go to state 25
    var_declaration_func           shift and go to state 26
    move_func                      shift and go to state 28
    while_stmnt                    shift and go to state 29
    if_stmnt                       shift and go to state 30
    write                          shift and go to state 31
    read                           shift and go to state 32
    func_call                      shift and go to state 33
    var_assignation                shift and go to state 34
    var_type                       shift and go to state 35
    move_type                      shift and go to state 39

state 28

    (22) stmnt -> move_func . stmnt
    (19) stmnt -> . empty
    (20) stmnt -> . var_declaration_func stmnt
    (21) stmnt -> . pen_func stmnt
    (22) stmnt -> . move_func stmnt
    (23) stmnt -> . while_stmnt stmnt
    (24) stmnt -> . if_stmnt stmnt
    (25) stmnt -> . write stmnt
    (26) stmnt -> . read stmnt
    (27) stmnt -> . func_call stmnt
    (28) stmnt -> . var_assignation stmnt
    (89) empty -> .
    (29) var_declaration_func -> . var_type ID multiple_vars
    (86) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (87) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (81) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (80) while_stmnt -> . WHILE expression stmnt END
    (77) if_stmnt -> . IF expression stmnt else_stmnt
    (74) write -> . WRITE OPEN_PTH expression multiple_expression CLOSE_PTH
    (66) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (62) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (30) var_assignation -> . ID ASSIGN expression
    (31) var_assignation -> . ID ASSIGN var_cte
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    (82) move_type -> . CENTER
    (83) move_type -> . FORWARD
    (84) move_type -> . RIGHT
    (85) move_type -> . LEFT
    END             reduce using rule 89 (empty -> .)
    ELSE            reduce using rule 89 (empty -> .)
    PEN_DOWN        shift and go to state 37
    PEN_UP          shift and go to state 38
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    WRITE           shift and go to state 42
    READ            shift and go to state 43
    ID              shift and go to state 36
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9
    CENTER          shift and go to state 44
    FORWARD         shift and go to state 45
    RIGHT           shift and go to state 46
    LEFT            shift and go to state 47

    move_func                      shift and go to state 28
    stmnt                          shift and go to state 53
    empty                          shift and go to state 25
    var_declaration_func           shift and go to state 26
    pen_func                       shift and go to state 27
    while_stmnt                    shift and go to state 29
    if_stmnt                       shift and go to state 30
    write                          shift and go to state 31
    read                           shift and go to state 32
    func_call                      shift and go to state 33
    var_assignation                shift and go to state 34
    var_type                       shift and go to state 35
    move_type                      shift and go to state 39

state 29

    (23) stmnt -> while_stmnt . stmnt
    (19) stmnt -> . empty
    (20) stmnt -> . var_declaration_func stmnt
    (21) stmnt -> . pen_func stmnt
    (22) stmnt -> . move_func stmnt
    (23) stmnt -> . while_stmnt stmnt
    (24) stmnt -> . if_stmnt stmnt
    (25) stmnt -> . write stmnt
    (26) stmnt -> . read stmnt
    (27) stmnt -> . func_call stmnt
    (28) stmnt -> . var_assignation stmnt
    (89) empty -> .
    (29) var_declaration_func -> . var_type ID multiple_vars
    (86) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (87) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (81) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (80) while_stmnt -> . WHILE expression stmnt END
    (77) if_stmnt -> . IF expression stmnt else_stmnt
    (74) write -> . WRITE OPEN_PTH expression multiple_expression CLOSE_PTH
    (66) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (62) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (30) var_assignation -> . ID ASSIGN expression
    (31) var_assignation -> . ID ASSIGN var_cte
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    (82) move_type -> . CENTER
    (83) move_type -> . FORWARD
    (84) move_type -> . RIGHT
    (85) move_type -> . LEFT
    END             reduce using rule 89 (empty -> .)
    ELSE            reduce using rule 89 (empty -> .)
    PEN_DOWN        shift and go to state 37
    PEN_UP          shift and go to state 38
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    WRITE           shift and go to state 42
    READ            shift and go to state 43
    ID              shift and go to state 36
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9
    CENTER          shift and go to state 44
    FORWARD         shift and go to state 45
    RIGHT           shift and go to state 46
    LEFT            shift and go to state 47

    while_stmnt                    shift and go to state 29
    stmnt                          shift and go to state 54
    empty                          shift and go to state 25
    var_declaration_func           shift and go to state 26
    pen_func                       shift and go to state 27
    move_func                      shift and go to state 28
    if_stmnt                       shift and go to state 30
    write                          shift and go to state 31
    read                           shift and go to state 32
    func_call                      shift and go to state 33
    var_assignation                shift and go to state 34
    var_type                       shift and go to state 35
    move_type                      shift and go to state 39

state 30

    (24) stmnt -> if_stmnt . stmnt
    (19) stmnt -> . empty
    (20) stmnt -> . var_declaration_func stmnt
    (21) stmnt -> . pen_func stmnt
    (22) stmnt -> . move_func stmnt
    (23) stmnt -> . while_stmnt stmnt
    (24) stmnt -> . if_stmnt stmnt
    (25) stmnt -> . write stmnt
    (26) stmnt -> . read stmnt
    (27) stmnt -> . func_call stmnt
    (28) stmnt -> . var_assignation stmnt
    (89) empty -> .
    (29) var_declaration_func -> . var_type ID multiple_vars
    (86) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (87) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (81) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (80) while_stmnt -> . WHILE expression stmnt END
    (77) if_stmnt -> . IF expression stmnt else_stmnt
    (74) write -> . WRITE OPEN_PTH expression multiple_expression CLOSE_PTH
    (66) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (62) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (30) var_assignation -> . ID ASSIGN expression
    (31) var_assignation -> . ID ASSIGN var_cte
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    (82) move_type -> . CENTER
    (83) move_type -> . FORWARD
    (84) move_type -> . RIGHT
    (85) move_type -> . LEFT
    END             reduce using rule 89 (empty -> .)
    ELSE            reduce using rule 89 (empty -> .)
    PEN_DOWN        shift and go to state 37
    PEN_UP          shift and go to state 38
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    WRITE           shift and go to state 42
    READ            shift and go to state 43
    ID              shift and go to state 36
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9
    CENTER          shift and go to state 44
    FORWARD         shift and go to state 45
    RIGHT           shift and go to state 46
    LEFT            shift and go to state 47

    if_stmnt                       shift and go to state 30
    stmnt                          shift and go to state 55
    empty                          shift and go to state 25
    var_declaration_func           shift and go to state 26
    pen_func                       shift and go to state 27
    move_func                      shift and go to state 28
    while_stmnt                    shift and go to state 29
    write                          shift and go to state 31
    read                           shift and go to state 32
    func_call                      shift and go to state 33
    var_assignation                shift and go to state 34
    var_type                       shift and go to state 35
    move_type                      shift and go to state 39

state 31

    (25) stmnt -> write . stmnt
    (19) stmnt -> . empty
    (20) stmnt -> . var_declaration_func stmnt
    (21) stmnt -> . pen_func stmnt
    (22) stmnt -> . move_func stmnt
    (23) stmnt -> . while_stmnt stmnt
    (24) stmnt -> . if_stmnt stmnt
    (25) stmnt -> . write stmnt
    (26) stmnt -> . read stmnt
    (27) stmnt -> . func_call stmnt
    (28) stmnt -> . var_assignation stmnt
    (89) empty -> .
    (29) var_declaration_func -> . var_type ID multiple_vars
    (86) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (87) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (81) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (80) while_stmnt -> . WHILE expression stmnt END
    (77) if_stmnt -> . IF expression stmnt else_stmnt
    (74) write -> . WRITE OPEN_PTH expression multiple_expression CLOSE_PTH
    (66) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (62) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (30) var_assignation -> . ID ASSIGN expression
    (31) var_assignation -> . ID ASSIGN var_cte
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    (82) move_type -> . CENTER
    (83) move_type -> . FORWARD
    (84) move_type -> . RIGHT
    (85) move_type -> . LEFT
    END             reduce using rule 89 (empty -> .)
    ELSE            reduce using rule 89 (empty -> .)
    PEN_DOWN        shift and go to state 37
    PEN_UP          shift and go to state 38
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    WRITE           shift and go to state 42
    READ            shift and go to state 43
    ID              shift and go to state 36
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9
    CENTER          shift and go to state 44
    FORWARD         shift and go to state 45
    RIGHT           shift and go to state 46
    LEFT            shift and go to state 47

    write                          shift and go to state 31
    stmnt                          shift and go to state 56
    empty                          shift and go to state 25
    var_declaration_func           shift and go to state 26
    pen_func                       shift and go to state 27
    move_func                      shift and go to state 28
    while_stmnt                    shift and go to state 29
    if_stmnt                       shift and go to state 30
    read                           shift and go to state 32
    func_call                      shift and go to state 33
    var_assignation                shift and go to state 34
    var_type                       shift and go to state 35
    move_type                      shift and go to state 39

state 32

    (26) stmnt -> read . stmnt
    (19) stmnt -> . empty
    (20) stmnt -> . var_declaration_func stmnt
    (21) stmnt -> . pen_func stmnt
    (22) stmnt -> . move_func stmnt
    (23) stmnt -> . while_stmnt stmnt
    (24) stmnt -> . if_stmnt stmnt
    (25) stmnt -> . write stmnt
    (26) stmnt -> . read stmnt
    (27) stmnt -> . func_call stmnt
    (28) stmnt -> . var_assignation stmnt
    (89) empty -> .
    (29) var_declaration_func -> . var_type ID multiple_vars
    (86) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (87) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (81) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (80) while_stmnt -> . WHILE expression stmnt END
    (77) if_stmnt -> . IF expression stmnt else_stmnt
    (74) write -> . WRITE OPEN_PTH expression multiple_expression CLOSE_PTH
    (66) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (62) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (30) var_assignation -> . ID ASSIGN expression
    (31) var_assignation -> . ID ASSIGN var_cte
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    (82) move_type -> . CENTER
    (83) move_type -> . FORWARD
    (84) move_type -> . RIGHT
    (85) move_type -> . LEFT
    END             reduce using rule 89 (empty -> .)
    ELSE            reduce using rule 89 (empty -> .)
    PEN_DOWN        shift and go to state 37
    PEN_UP          shift and go to state 38
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    WRITE           shift and go to state 42
    READ            shift and go to state 43
    ID              shift and go to state 36
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9
    CENTER          shift and go to state 44
    FORWARD         shift and go to state 45
    RIGHT           shift and go to state 46
    LEFT            shift and go to state 47

    read                           shift and go to state 32
    stmnt                          shift and go to state 57
    empty                          shift and go to state 25
    var_declaration_func           shift and go to state 26
    pen_func                       shift and go to state 27
    move_func                      shift and go to state 28
    while_stmnt                    shift and go to state 29
    if_stmnt                       shift and go to state 30
    write                          shift and go to state 31
    func_call                      shift and go to state 33
    var_assignation                shift and go to state 34
    var_type                       shift and go to state 35
    move_type                      shift and go to state 39

state 33

    (27) stmnt -> func_call . stmnt
    (19) stmnt -> . empty
    (20) stmnt -> . var_declaration_func stmnt
    (21) stmnt -> . pen_func stmnt
    (22) stmnt -> . move_func stmnt
    (23) stmnt -> . while_stmnt stmnt
    (24) stmnt -> . if_stmnt stmnt
    (25) stmnt -> . write stmnt
    (26) stmnt -> . read stmnt
    (27) stmnt -> . func_call stmnt
    (28) stmnt -> . var_assignation stmnt
    (89) empty -> .
    (29) var_declaration_func -> . var_type ID multiple_vars
    (86) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (87) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (81) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (80) while_stmnt -> . WHILE expression stmnt END
    (77) if_stmnt -> . IF expression stmnt else_stmnt
    (74) write -> . WRITE OPEN_PTH expression multiple_expression CLOSE_PTH
    (66) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (62) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (30) var_assignation -> . ID ASSIGN expression
    (31) var_assignation -> . ID ASSIGN var_cte
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    (82) move_type -> . CENTER
    (83) move_type -> . FORWARD
    (84) move_type -> . RIGHT
    (85) move_type -> . LEFT
    END             reduce using rule 89 (empty -> .)
    ELSE            reduce using rule 89 (empty -> .)
    PEN_DOWN        shift and go to state 37
    PEN_UP          shift and go to state 38
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    WRITE           shift and go to state 42
    READ            shift and go to state 43
    ID              shift and go to state 36
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9
    CENTER          shift and go to state 44
    FORWARD         shift and go to state 45
    RIGHT           shift and go to state 46
    LEFT            shift and go to state 47

    func_call                      shift and go to state 33
    stmnt                          shift and go to state 58
    empty                          shift and go to state 25
    var_declaration_func           shift and go to state 26
    pen_func                       shift and go to state 27
    move_func                      shift and go to state 28
    while_stmnt                    shift and go to state 29
    if_stmnt                       shift and go to state 30
    write                          shift and go to state 31
    read                           shift and go to state 32
    var_assignation                shift and go to state 34
    var_type                       shift and go to state 35
    move_type                      shift and go to state 39

state 34

    (28) stmnt -> var_assignation . stmnt
    (19) stmnt -> . empty
    (20) stmnt -> . var_declaration_func stmnt
    (21) stmnt -> . pen_func stmnt
    (22) stmnt -> . move_func stmnt
    (23) stmnt -> . while_stmnt stmnt
    (24) stmnt -> . if_stmnt stmnt
    (25) stmnt -> . write stmnt
    (26) stmnt -> . read stmnt
    (27) stmnt -> . func_call stmnt
    (28) stmnt -> . var_assignation stmnt
    (89) empty -> .
    (29) var_declaration_func -> . var_type ID multiple_vars
    (86) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (87) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (81) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (80) while_stmnt -> . WHILE expression stmnt END
    (77) if_stmnt -> . IF expression stmnt else_stmnt
    (74) write -> . WRITE OPEN_PTH expression multiple_expression CLOSE_PTH
    (66) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (62) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (30) var_assignation -> . ID ASSIGN expression
    (31) var_assignation -> . ID ASSIGN var_cte
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    (82) move_type -> . CENTER
    (83) move_type -> . FORWARD
    (84) move_type -> . RIGHT
    (85) move_type -> . LEFT
    END             reduce using rule 89 (empty -> .)
    ELSE            reduce using rule 89 (empty -> .)
    PEN_DOWN        shift and go to state 37
    PEN_UP          shift and go to state 38
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    WRITE           shift and go to state 42
    READ            shift and go to state 43
    ID              shift and go to state 36
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9
    CENTER          shift and go to state 44
    FORWARD         shift and go to state 45
    RIGHT           shift and go to state 46
    LEFT            shift and go to state 47

    var_assignation                shift and go to state 34
    stmnt                          shift and go to state 59
    empty                          shift and go to state 25
    var_declaration_func           shift and go to state 26
    pen_func                       shift and go to state 27
    move_func                      shift and go to state 28
    while_stmnt                    shift and go to state 29
    if_stmnt                       shift and go to state 30
    write                          shift and go to state 31
    read                           shift and go to state 32
    func_call                      shift and go to state 33
    var_type                       shift and go to state 35
    move_type                      shift and go to state 39

state 35

    (29) var_declaration_func -> var_type . ID multiple_vars
    ID              shift and go to state 60


state 36

    (62) func_call -> ID . OPEN_PTH func_call_param CLOSE_PTH
    (30) var_assignation -> ID . ASSIGN expression
    (31) var_assignation -> ID . ASSIGN var_cte
    OPEN_PTH        shift and go to state 61
    ASSIGN          shift and go to state 62


state 37

    (86) pen_func -> PEN_DOWN . OPEN_PTH CLOSE_PTH
    OPEN_PTH        shift and go to state 63


state 38

    (87) pen_func -> PEN_UP . OPEN_PTH CLOSE_PTH
    OPEN_PTH        shift and go to state 64


state 39

    (81) move_func -> move_type . OPEN_PTH func_call_param CLOSE_PTH
    OPEN_PTH        shift and go to state 65


state 40

    (80) while_stmnt -> WHILE . expression stmnt END
    (39) expression -> . mult_expr
    (40) expression -> . var_cte
    (41) expression -> . complex_expr
    (42) mult_expr -> . OPEN_PTH expression CLOSE_PTH
    (32) var_cte -> . func_call
    (33) var_cte -> . cte_bool
    (34) var_cte -> . CTE_STR
    (35) var_cte -> . CTE_NUM
    (36) var_cte -> . variable
    (43) complex_expr -> . expression e1 operator expression e2 quads
    (62) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (37) cte_bool -> . FALSE
    (38) cte_bool -> . TRUE
    (67) variable -> . ID array
    OPEN_PTH        shift and go to state 70
    CTE_STR         shift and go to state 73
    CTE_NUM         shift and go to state 74
    ID              shift and go to state 76
    FALSE           shift and go to state 77
    TRUE            shift and go to state 78

    expression                     shift and go to state 66
    mult_expr                      shift and go to state 67
    var_cte                        shift and go to state 68
    complex_expr                   shift and go to state 69
    func_call                      shift and go to state 71
    cte_bool                       shift and go to state 72
    variable                       shift and go to state 75

state 41

    (77) if_stmnt -> IF . expression stmnt else_stmnt
    (39) expression -> . mult_expr
    (40) expression -> . var_cte
    (41) expression -> . complex_expr
    (42) mult_expr -> . OPEN_PTH expression CLOSE_PTH
    (32) var_cte -> . func_call
    (33) var_cte -> . cte_bool
    (34) var_cte -> . CTE_STR
    (35) var_cte -> . CTE_NUM
    (36) var_cte -> . variable
    (43) complex_expr -> . expression e1 operator expression e2 quads
    (62) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (37) cte_bool -> . FALSE
    (38) cte_bool -> . TRUE
    (67) variable -> . ID array
    OPEN_PTH        shift and go to state 70
    CTE_STR         shift and go to state 73
    CTE_NUM         shift and go to state 74
    ID              shift and go to state 76
    FALSE           shift and go to state 77
    TRUE            shift and go to state 78

    expression                     shift and go to state 79
    mult_expr                      shift and go to state 67
    var_cte                        shift and go to state 68
    complex_expr                   shift and go to state 69
    func_call                      shift and go to state 71
    cte_bool                       shift and go to state 72
    variable                       shift and go to state 75

state 42

    (74) write -> WRITE . OPEN_PTH expression multiple_expression CLOSE_PTH
    OPEN_PTH        shift and go to state 80


state 43

    (66) read -> READ . OPEN_PTH variable multiple_vars CLOSE_PTH
    OPEN_PTH        shift and go to state 81


state 44

    (82) move_type -> CENTER .
    OPEN_PTH        reduce using rule 82 (move_type -> CENTER .)


state 45

    (83) move_type -> FORWARD .
    OPEN_PTH        reduce using rule 83 (move_type -> FORWARD .)


state 46

    (84) move_type -> RIGHT .
    OPEN_PTH        reduce using rule 84 (move_type -> RIGHT .)


state 47

    (85) move_type -> LEFT .
    OPEN_PTH        reduce using rule 85 (move_type -> LEFT .)


state 48

    (10) func_declaration -> func_type FUNC ID . OPEN_PTH parameter CLOSE_PTH stmnt END
    OPEN_PTH        shift and go to state 82


state 49

    (5) multiple_var -> COMMA ID . multiple_var
    (4) multiple_var -> . empty
    (5) multiple_var -> . COMMA ID multiple_var
    (89) empty -> .
    COMMA           shift and go to state 23
    BOOL            reduce using rule 89 (empty -> .)
    WORD            reduce using rule 89 (empty -> .)
    NUMBER          reduce using rule 89 (empty -> .)
    VOID            reduce using rule 89 (empty -> .)
    MAIN            reduce using rule 89 (empty -> .)

    multiple_var                   shift and go to state 83
    empty                          shift and go to state 22

state 50

    (88) main -> MAIN stmnt END .
    $end            reduce using rule 88 (main -> MAIN stmnt END .)


state 51

    (20) stmnt -> var_declaration_func stmnt .
    END             reduce using rule 20 (stmnt -> var_declaration_func stmnt .)
    ELSE            reduce using rule 20 (stmnt -> var_declaration_func stmnt .)


state 52

    (21) stmnt -> pen_func stmnt .
    END             reduce using rule 21 (stmnt -> pen_func stmnt .)
    ELSE            reduce using rule 21 (stmnt -> pen_func stmnt .)


state 53

    (22) stmnt -> move_func stmnt .
    END             reduce using rule 22 (stmnt -> move_func stmnt .)
    ELSE            reduce using rule 22 (stmnt -> move_func stmnt .)


state 54

    (23) stmnt -> while_stmnt stmnt .
    END             reduce using rule 23 (stmnt -> while_stmnt stmnt .)
    ELSE            reduce using rule 23 (stmnt -> while_stmnt stmnt .)


state 55

    (24) stmnt -> if_stmnt stmnt .
    END             reduce using rule 24 (stmnt -> if_stmnt stmnt .)
    ELSE            reduce using rule 24 (stmnt -> if_stmnt stmnt .)


state 56

    (25) stmnt -> write stmnt .
    END             reduce using rule 25 (stmnt -> write stmnt .)
    ELSE            reduce using rule 25 (stmnt -> write stmnt .)


state 57

    (26) stmnt -> read stmnt .
    END             reduce using rule 26 (stmnt -> read stmnt .)
    ELSE            reduce using rule 26 (stmnt -> read stmnt .)


state 58

    (27) stmnt -> func_call stmnt .
    END             reduce using rule 27 (stmnt -> func_call stmnt .)
    ELSE            reduce using rule 27 (stmnt -> func_call stmnt .)


state 59

    (28) stmnt -> var_assignation stmnt .
    END             reduce using rule 28 (stmnt -> var_assignation stmnt .)
    ELSE            reduce using rule 28 (stmnt -> var_assignation stmnt .)


state 60

    (29) var_declaration_func -> var_type ID . multiple_vars
    (72) multiple_vars -> . empty
    (73) multiple_vars -> . COMMA variable
    (89) empty -> .
    COMMA           shift and go to state 86
    PEN_DOWN        reduce using rule 89 (empty -> .)
    PEN_UP          reduce using rule 89 (empty -> .)
    WHILE           reduce using rule 89 (empty -> .)
    IF              reduce using rule 89 (empty -> .)
    WRITE           reduce using rule 89 (empty -> .)
    READ            reduce using rule 89 (empty -> .)
    ID              reduce using rule 89 (empty -> .)
    BOOL            reduce using rule 89 (empty -> .)
    WORD            reduce using rule 89 (empty -> .)
    NUMBER          reduce using rule 89 (empty -> .)
    CENTER          reduce using rule 89 (empty -> .)
    FORWARD         reduce using rule 89 (empty -> .)
    RIGHT           reduce using rule 89 (empty -> .)
    LEFT            reduce using rule 89 (empty -> .)
    END             reduce using rule 89 (empty -> .)
    ELSE            reduce using rule 89 (empty -> .)

    multiple_vars                  shift and go to state 84
    empty                          shift and go to state 85

state 61

    (62) func_call -> ID OPEN_PTH . func_call_param CLOSE_PTH
    (63) func_call_param -> . expression multiple_fc_param
    (39) expression -> . mult_expr
    (40) expression -> . var_cte
    (41) expression -> . complex_expr
    (42) mult_expr -> . OPEN_PTH expression CLOSE_PTH
    (32) var_cte -> . func_call
    (33) var_cte -> . cte_bool
    (34) var_cte -> . CTE_STR
    (35) var_cte -> . CTE_NUM
    (36) var_cte -> . variable
    (43) complex_expr -> . expression e1 operator expression e2 quads
    (62) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (37) cte_bool -> . FALSE
    (38) cte_bool -> . TRUE
    (67) variable -> . ID array
    OPEN_PTH        shift and go to state 70
    CTE_STR         shift and go to state 73
    CTE_NUM         shift and go to state 74
    ID              shift and go to state 76
    FALSE           shift and go to state 77
    TRUE            shift and go to state 78

    func_call_param                shift and go to state 87
    expression                     shift and go to state 88
    mult_expr                      shift and go to state 67
    var_cte                        shift and go to state 68
    complex_expr                   shift and go to state 69
    func_call                      shift and go to state 71
    cte_bool                       shift and go to state 72
    variable                       shift and go to state 75

state 62

    (30) var_assignation -> ID ASSIGN . expression
    (31) var_assignation -> ID ASSIGN . var_cte
    (39) expression -> . mult_expr
    (40) expression -> . var_cte
    (41) expression -> . complex_expr
    (32) var_cte -> . func_call
    (33) var_cte -> . cte_bool
    (34) var_cte -> . CTE_STR
    (35) var_cte -> . CTE_NUM
    (36) var_cte -> . variable
    (42) mult_expr -> . OPEN_PTH expression CLOSE_PTH
    (43) complex_expr -> . expression e1 operator expression e2 quads
    (62) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (37) cte_bool -> . FALSE
    (38) cte_bool -> . TRUE
    (67) variable -> . ID array
    CTE_STR         shift and go to state 73
    CTE_NUM         shift and go to state 74
    OPEN_PTH        shift and go to state 70
    ID              shift and go to state 76
    FALSE           shift and go to state 77
    TRUE            shift and go to state 78

    expression                     shift and go to state 89
    var_cte                        shift and go to state 90
    mult_expr                      shift and go to state 67
    complex_expr                   shift and go to state 69
    func_call                      shift and go to state 71
    cte_bool                       shift and go to state 72
    variable                       shift and go to state 75

state 63

    (86) pen_func -> PEN_DOWN OPEN_PTH . CLOSE_PTH
    CLOSE_PTH       shift and go to state 91


state 64

    (87) pen_func -> PEN_UP OPEN_PTH . CLOSE_PTH
    CLOSE_PTH       shift and go to state 92


state 65

    (81) move_func -> move_type OPEN_PTH . func_call_param CLOSE_PTH
    (63) func_call_param -> . expression multiple_fc_param
    (39) expression -> . mult_expr
    (40) expression -> . var_cte
    (41) expression -> . complex_expr
    (42) mult_expr -> . OPEN_PTH expression CLOSE_PTH
    (32) var_cte -> . func_call
    (33) var_cte -> . cte_bool
    (34) var_cte -> . CTE_STR
    (35) var_cte -> . CTE_NUM
    (36) var_cte -> . variable
    (43) complex_expr -> . expression e1 operator expression e2 quads
    (62) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (37) cte_bool -> . FALSE
    (38) cte_bool -> . TRUE
    (67) variable -> . ID array
    OPEN_PTH        shift and go to state 70
    CTE_STR         shift and go to state 73
    CTE_NUM         shift and go to state 74
    ID              shift and go to state 76
    FALSE           shift and go to state 77
    TRUE            shift and go to state 78

    func_call_param                shift and go to state 93
    expression                     shift and go to state 88
    mult_expr                      shift and go to state 67
    var_cte                        shift and go to state 68
    complex_expr                   shift and go to state 69
    func_call                      shift and go to state 71
    cte_bool                       shift and go to state 72
    variable                       shift and go to state 75

state 66

    (80) while_stmnt -> WHILE expression . stmnt END
    (43) complex_expr -> expression . e1 operator expression e2 quads
    (19) stmnt -> . empty
    (20) stmnt -> . var_declaration_func stmnt
    (21) stmnt -> . pen_func stmnt
    (22) stmnt -> . move_func stmnt
    (23) stmnt -> . while_stmnt stmnt
    (24) stmnt -> . if_stmnt stmnt
    (25) stmnt -> . write stmnt
    (26) stmnt -> . read stmnt
    (27) stmnt -> . func_call stmnt
    (28) stmnt -> . var_assignation stmnt
    (44) e1 -> .
    (89) empty -> .
    (29) var_declaration_func -> . var_type ID multiple_vars
    (86) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (87) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (81) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (80) while_stmnt -> . WHILE expression stmnt END
    (77) if_stmnt -> . IF expression stmnt else_stmnt
    (74) write -> . WRITE OPEN_PTH expression multiple_expression CLOSE_PTH
    (66) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (62) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (30) var_assignation -> . ID ASSIGN expression
    (31) var_assignation -> . ID ASSIGN var_cte
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    (82) move_type -> . CENTER
    (83) move_type -> . FORWARD
    (84) move_type -> . RIGHT
    (85) move_type -> . LEFT
    EQUAL_TO        reduce using rule 44 (e1 -> .)
    MORE_OR_EQ_THAN reduce using rule 44 (e1 -> .)
    LESS_OR_EQ_THAN reduce using rule 44 (e1 -> .)
    DIFFERENT_TO    reduce using rule 44 (e1 -> .)
    MORE_THAN       reduce using rule 44 (e1 -> .)
    LESS_THAN       reduce using rule 44 (e1 -> .)
    OR              reduce using rule 44 (e1 -> .)
    AND             reduce using rule 44 (e1 -> .)
    DIV             reduce using rule 44 (e1 -> .)
    MULT            reduce using rule 44 (e1 -> .)
    SUB             reduce using rule 44 (e1 -> .)
    SUM             reduce using rule 44 (e1 -> .)
    END             reduce using rule 89 (empty -> .)
    PEN_DOWN        shift and go to state 37
    PEN_UP          shift and go to state 38
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    WRITE           shift and go to state 42
    READ            shift and go to state 43
    ID              shift and go to state 36
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9
    CENTER          shift and go to state 44
    FORWARD         shift and go to state 45
    RIGHT           shift and go to state 46
    LEFT            shift and go to state 47

    stmnt                          shift and go to state 94
    e1                             shift and go to state 95
    empty                          shift and go to state 25
    var_declaration_func           shift and go to state 26
    pen_func                       shift and go to state 27
    move_func                      shift and go to state 28
    while_stmnt                    shift and go to state 29
    if_stmnt                       shift and go to state 30
    write                          shift and go to state 31
    read                           shift and go to state 32
    func_call                      shift and go to state 33
    var_assignation                shift and go to state 34
    var_type                       shift and go to state 35
    move_type                      shift and go to state 39

state 67

    (39) expression -> mult_expr .
    PEN_DOWN        reduce using rule 39 (expression -> mult_expr .)
    PEN_UP          reduce using rule 39 (expression -> mult_expr .)
    WHILE           reduce using rule 39 (expression -> mult_expr .)
    IF              reduce using rule 39 (expression -> mult_expr .)
    WRITE           reduce using rule 39 (expression -> mult_expr .)
    READ            reduce using rule 39 (expression -> mult_expr .)
    ID              reduce using rule 39 (expression -> mult_expr .)
    BOOL            reduce using rule 39 (expression -> mult_expr .)
    WORD            reduce using rule 39 (expression -> mult_expr .)
    NUMBER          reduce using rule 39 (expression -> mult_expr .)
    CENTER          reduce using rule 39 (expression -> mult_expr .)
    FORWARD         reduce using rule 39 (expression -> mult_expr .)
    RIGHT           reduce using rule 39 (expression -> mult_expr .)
    LEFT            reduce using rule 39 (expression -> mult_expr .)
    END             reduce using rule 39 (expression -> mult_expr .)
    EQUAL_TO        reduce using rule 39 (expression -> mult_expr .)
    MORE_OR_EQ_THAN reduce using rule 39 (expression -> mult_expr .)
    LESS_OR_EQ_THAN reduce using rule 39 (expression -> mult_expr .)
    DIFFERENT_TO    reduce using rule 39 (expression -> mult_expr .)
    MORE_THAN       reduce using rule 39 (expression -> mult_expr .)
    LESS_THAN       reduce using rule 39 (expression -> mult_expr .)
    OR              reduce using rule 39 (expression -> mult_expr .)
    AND             reduce using rule 39 (expression -> mult_expr .)
    DIV             reduce using rule 39 (expression -> mult_expr .)
    MULT            reduce using rule 39 (expression -> mult_expr .)
    SUB             reduce using rule 39 (expression -> mult_expr .)
    SUM             reduce using rule 39 (expression -> mult_expr .)
    ELSE            reduce using rule 39 (expression -> mult_expr .)
    COMMA           reduce using rule 39 (expression -> mult_expr .)
    CLOSE_PTH       reduce using rule 39 (expression -> mult_expr .)
    CLOSE_SQR       reduce using rule 39 (expression -> mult_expr .)


state 68

    (40) expression -> var_cte .
    PEN_DOWN        reduce using rule 40 (expression -> var_cte .)
    PEN_UP          reduce using rule 40 (expression -> var_cte .)
    WHILE           reduce using rule 40 (expression -> var_cte .)
    IF              reduce using rule 40 (expression -> var_cte .)
    WRITE           reduce using rule 40 (expression -> var_cte .)
    READ            reduce using rule 40 (expression -> var_cte .)
    ID              reduce using rule 40 (expression -> var_cte .)
    BOOL            reduce using rule 40 (expression -> var_cte .)
    WORD            reduce using rule 40 (expression -> var_cte .)
    NUMBER          reduce using rule 40 (expression -> var_cte .)
    CENTER          reduce using rule 40 (expression -> var_cte .)
    FORWARD         reduce using rule 40 (expression -> var_cte .)
    RIGHT           reduce using rule 40 (expression -> var_cte .)
    LEFT            reduce using rule 40 (expression -> var_cte .)
    END             reduce using rule 40 (expression -> var_cte .)
    EQUAL_TO        reduce using rule 40 (expression -> var_cte .)
    MORE_OR_EQ_THAN reduce using rule 40 (expression -> var_cte .)
    LESS_OR_EQ_THAN reduce using rule 40 (expression -> var_cte .)
    DIFFERENT_TO    reduce using rule 40 (expression -> var_cte .)
    MORE_THAN       reduce using rule 40 (expression -> var_cte .)
    LESS_THAN       reduce using rule 40 (expression -> var_cte .)
    OR              reduce using rule 40 (expression -> var_cte .)
    AND             reduce using rule 40 (expression -> var_cte .)
    DIV             reduce using rule 40 (expression -> var_cte .)
    MULT            reduce using rule 40 (expression -> var_cte .)
    SUB             reduce using rule 40 (expression -> var_cte .)
    SUM             reduce using rule 40 (expression -> var_cte .)
    ELSE            reduce using rule 40 (expression -> var_cte .)
    COMMA           reduce using rule 40 (expression -> var_cte .)
    CLOSE_PTH       reduce using rule 40 (expression -> var_cte .)
    CLOSE_SQR       reduce using rule 40 (expression -> var_cte .)


state 69

    (41) expression -> complex_expr .
    PEN_DOWN        reduce using rule 41 (expression -> complex_expr .)
    PEN_UP          reduce using rule 41 (expression -> complex_expr .)
    WHILE           reduce using rule 41 (expression -> complex_expr .)
    IF              reduce using rule 41 (expression -> complex_expr .)
    WRITE           reduce using rule 41 (expression -> complex_expr .)
    READ            reduce using rule 41 (expression -> complex_expr .)
    ID              reduce using rule 41 (expression -> complex_expr .)
    BOOL            reduce using rule 41 (expression -> complex_expr .)
    WORD            reduce using rule 41 (expression -> complex_expr .)
    NUMBER          reduce using rule 41 (expression -> complex_expr .)
    CENTER          reduce using rule 41 (expression -> complex_expr .)
    FORWARD         reduce using rule 41 (expression -> complex_expr .)
    RIGHT           reduce using rule 41 (expression -> complex_expr .)
    LEFT            reduce using rule 41 (expression -> complex_expr .)
    END             reduce using rule 41 (expression -> complex_expr .)
    EQUAL_TO        reduce using rule 41 (expression -> complex_expr .)
    MORE_OR_EQ_THAN reduce using rule 41 (expression -> complex_expr .)
    LESS_OR_EQ_THAN reduce using rule 41 (expression -> complex_expr .)
    DIFFERENT_TO    reduce using rule 41 (expression -> complex_expr .)
    MORE_THAN       reduce using rule 41 (expression -> complex_expr .)
    LESS_THAN       reduce using rule 41 (expression -> complex_expr .)
    OR              reduce using rule 41 (expression -> complex_expr .)
    AND             reduce using rule 41 (expression -> complex_expr .)
    DIV             reduce using rule 41 (expression -> complex_expr .)
    MULT            reduce using rule 41 (expression -> complex_expr .)
    SUB             reduce using rule 41 (expression -> complex_expr .)
    SUM             reduce using rule 41 (expression -> complex_expr .)
    ELSE            reduce using rule 41 (expression -> complex_expr .)
    COMMA           reduce using rule 41 (expression -> complex_expr .)
    CLOSE_PTH       reduce using rule 41 (expression -> complex_expr .)
    CLOSE_SQR       reduce using rule 41 (expression -> complex_expr .)


state 70

    (42) mult_expr -> OPEN_PTH . expression CLOSE_PTH
    (39) expression -> . mult_expr
    (40) expression -> . var_cte
    (41) expression -> . complex_expr
    (42) mult_expr -> . OPEN_PTH expression CLOSE_PTH
    (32) var_cte -> . func_call
    (33) var_cte -> . cte_bool
    (34) var_cte -> . CTE_STR
    (35) var_cte -> . CTE_NUM
    (36) var_cte -> . variable
    (43) complex_expr -> . expression e1 operator expression e2 quads
    (62) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (37) cte_bool -> . FALSE
    (38) cte_bool -> . TRUE
    (67) variable -> . ID array
    OPEN_PTH        shift and go to state 70
    CTE_STR         shift and go to state 73
    CTE_NUM         shift and go to state 74
    ID              shift and go to state 76
    FALSE           shift and go to state 77
    TRUE            shift and go to state 78

    expression                     shift and go to state 96
    mult_expr                      shift and go to state 67
    var_cte                        shift and go to state 68
    complex_expr                   shift and go to state 69
    func_call                      shift and go to state 71
    cte_bool                       shift and go to state 72
    variable                       shift and go to state 75

state 71

    (32) var_cte -> func_call .
    PEN_DOWN        reduce using rule 32 (var_cte -> func_call .)
    PEN_UP          reduce using rule 32 (var_cte -> func_call .)
    WHILE           reduce using rule 32 (var_cte -> func_call .)
    IF              reduce using rule 32 (var_cte -> func_call .)
    WRITE           reduce using rule 32 (var_cte -> func_call .)
    READ            reduce using rule 32 (var_cte -> func_call .)
    ID              reduce using rule 32 (var_cte -> func_call .)
    BOOL            reduce using rule 32 (var_cte -> func_call .)
    WORD            reduce using rule 32 (var_cte -> func_call .)
    NUMBER          reduce using rule 32 (var_cte -> func_call .)
    CENTER          reduce using rule 32 (var_cte -> func_call .)
    FORWARD         reduce using rule 32 (var_cte -> func_call .)
    RIGHT           reduce using rule 32 (var_cte -> func_call .)
    LEFT            reduce using rule 32 (var_cte -> func_call .)
    END             reduce using rule 32 (var_cte -> func_call .)
    EQUAL_TO        reduce using rule 32 (var_cte -> func_call .)
    MORE_OR_EQ_THAN reduce using rule 32 (var_cte -> func_call .)
    LESS_OR_EQ_THAN reduce using rule 32 (var_cte -> func_call .)
    DIFFERENT_TO    reduce using rule 32 (var_cte -> func_call .)
    MORE_THAN       reduce using rule 32 (var_cte -> func_call .)
    LESS_THAN       reduce using rule 32 (var_cte -> func_call .)
    OR              reduce using rule 32 (var_cte -> func_call .)
    AND             reduce using rule 32 (var_cte -> func_call .)
    DIV             reduce using rule 32 (var_cte -> func_call .)
    MULT            reduce using rule 32 (var_cte -> func_call .)
    SUB             reduce using rule 32 (var_cte -> func_call .)
    SUM             reduce using rule 32 (var_cte -> func_call .)
    ELSE            reduce using rule 32 (var_cte -> func_call .)
    COMMA           reduce using rule 32 (var_cte -> func_call .)
    CLOSE_PTH       reduce using rule 32 (var_cte -> func_call .)
    CLOSE_SQR       reduce using rule 32 (var_cte -> func_call .)


state 72

    (33) var_cte -> cte_bool .
    PEN_DOWN        reduce using rule 33 (var_cte -> cte_bool .)
    PEN_UP          reduce using rule 33 (var_cte -> cte_bool .)
    WHILE           reduce using rule 33 (var_cte -> cte_bool .)
    IF              reduce using rule 33 (var_cte -> cte_bool .)
    WRITE           reduce using rule 33 (var_cte -> cte_bool .)
    READ            reduce using rule 33 (var_cte -> cte_bool .)
    ID              reduce using rule 33 (var_cte -> cte_bool .)
    BOOL            reduce using rule 33 (var_cte -> cte_bool .)
    WORD            reduce using rule 33 (var_cte -> cte_bool .)
    NUMBER          reduce using rule 33 (var_cte -> cte_bool .)
    CENTER          reduce using rule 33 (var_cte -> cte_bool .)
    FORWARD         reduce using rule 33 (var_cte -> cte_bool .)
    RIGHT           reduce using rule 33 (var_cte -> cte_bool .)
    LEFT            reduce using rule 33 (var_cte -> cte_bool .)
    END             reduce using rule 33 (var_cte -> cte_bool .)
    EQUAL_TO        reduce using rule 33 (var_cte -> cte_bool .)
    MORE_OR_EQ_THAN reduce using rule 33 (var_cte -> cte_bool .)
    LESS_OR_EQ_THAN reduce using rule 33 (var_cte -> cte_bool .)
    DIFFERENT_TO    reduce using rule 33 (var_cte -> cte_bool .)
    MORE_THAN       reduce using rule 33 (var_cte -> cte_bool .)
    LESS_THAN       reduce using rule 33 (var_cte -> cte_bool .)
    OR              reduce using rule 33 (var_cte -> cte_bool .)
    AND             reduce using rule 33 (var_cte -> cte_bool .)
    DIV             reduce using rule 33 (var_cte -> cte_bool .)
    MULT            reduce using rule 33 (var_cte -> cte_bool .)
    SUB             reduce using rule 33 (var_cte -> cte_bool .)
    SUM             reduce using rule 33 (var_cte -> cte_bool .)
    ELSE            reduce using rule 33 (var_cte -> cte_bool .)
    COMMA           reduce using rule 33 (var_cte -> cte_bool .)
    CLOSE_PTH       reduce using rule 33 (var_cte -> cte_bool .)
    CLOSE_SQR       reduce using rule 33 (var_cte -> cte_bool .)


state 73

    (34) var_cte -> CTE_STR .
    PEN_DOWN        reduce using rule 34 (var_cte -> CTE_STR .)
    PEN_UP          reduce using rule 34 (var_cte -> CTE_STR .)
    WHILE           reduce using rule 34 (var_cte -> CTE_STR .)
    IF              reduce using rule 34 (var_cte -> CTE_STR .)
    WRITE           reduce using rule 34 (var_cte -> CTE_STR .)
    READ            reduce using rule 34 (var_cte -> CTE_STR .)
    ID              reduce using rule 34 (var_cte -> CTE_STR .)
    BOOL            reduce using rule 34 (var_cte -> CTE_STR .)
    WORD            reduce using rule 34 (var_cte -> CTE_STR .)
    NUMBER          reduce using rule 34 (var_cte -> CTE_STR .)
    CENTER          reduce using rule 34 (var_cte -> CTE_STR .)
    FORWARD         reduce using rule 34 (var_cte -> CTE_STR .)
    RIGHT           reduce using rule 34 (var_cte -> CTE_STR .)
    LEFT            reduce using rule 34 (var_cte -> CTE_STR .)
    END             reduce using rule 34 (var_cte -> CTE_STR .)
    EQUAL_TO        reduce using rule 34 (var_cte -> CTE_STR .)
    MORE_OR_EQ_THAN reduce using rule 34 (var_cte -> CTE_STR .)
    LESS_OR_EQ_THAN reduce using rule 34 (var_cte -> CTE_STR .)
    DIFFERENT_TO    reduce using rule 34 (var_cte -> CTE_STR .)
    MORE_THAN       reduce using rule 34 (var_cte -> CTE_STR .)
    LESS_THAN       reduce using rule 34 (var_cte -> CTE_STR .)
    OR              reduce using rule 34 (var_cte -> CTE_STR .)
    AND             reduce using rule 34 (var_cte -> CTE_STR .)
    DIV             reduce using rule 34 (var_cte -> CTE_STR .)
    MULT            reduce using rule 34 (var_cte -> CTE_STR .)
    SUB             reduce using rule 34 (var_cte -> CTE_STR .)
    SUM             reduce using rule 34 (var_cte -> CTE_STR .)
    ELSE            reduce using rule 34 (var_cte -> CTE_STR .)
    COMMA           reduce using rule 34 (var_cte -> CTE_STR .)
    CLOSE_PTH       reduce using rule 34 (var_cte -> CTE_STR .)
    CLOSE_SQR       reduce using rule 34 (var_cte -> CTE_STR .)


state 74

    (35) var_cte -> CTE_NUM .
    PEN_DOWN        reduce using rule 35 (var_cte -> CTE_NUM .)
    PEN_UP          reduce using rule 35 (var_cte -> CTE_NUM .)
    WHILE           reduce using rule 35 (var_cte -> CTE_NUM .)
    IF              reduce using rule 35 (var_cte -> CTE_NUM .)
    WRITE           reduce using rule 35 (var_cte -> CTE_NUM .)
    READ            reduce using rule 35 (var_cte -> CTE_NUM .)
    ID              reduce using rule 35 (var_cte -> CTE_NUM .)
    BOOL            reduce using rule 35 (var_cte -> CTE_NUM .)
    WORD            reduce using rule 35 (var_cte -> CTE_NUM .)
    NUMBER          reduce using rule 35 (var_cte -> CTE_NUM .)
    CENTER          reduce using rule 35 (var_cte -> CTE_NUM .)
    FORWARD         reduce using rule 35 (var_cte -> CTE_NUM .)
    RIGHT           reduce using rule 35 (var_cte -> CTE_NUM .)
    LEFT            reduce using rule 35 (var_cte -> CTE_NUM .)
    END             reduce using rule 35 (var_cte -> CTE_NUM .)
    EQUAL_TO        reduce using rule 35 (var_cte -> CTE_NUM .)
    MORE_OR_EQ_THAN reduce using rule 35 (var_cte -> CTE_NUM .)
    LESS_OR_EQ_THAN reduce using rule 35 (var_cte -> CTE_NUM .)
    DIFFERENT_TO    reduce using rule 35 (var_cte -> CTE_NUM .)
    MORE_THAN       reduce using rule 35 (var_cte -> CTE_NUM .)
    LESS_THAN       reduce using rule 35 (var_cte -> CTE_NUM .)
    OR              reduce using rule 35 (var_cte -> CTE_NUM .)
    AND             reduce using rule 35 (var_cte -> CTE_NUM .)
    DIV             reduce using rule 35 (var_cte -> CTE_NUM .)
    MULT            reduce using rule 35 (var_cte -> CTE_NUM .)
    SUB             reduce using rule 35 (var_cte -> CTE_NUM .)
    SUM             reduce using rule 35 (var_cte -> CTE_NUM .)
    ELSE            reduce using rule 35 (var_cte -> CTE_NUM .)
    COMMA           reduce using rule 35 (var_cte -> CTE_NUM .)
    CLOSE_PTH       reduce using rule 35 (var_cte -> CTE_NUM .)
    CLOSE_SQR       reduce using rule 35 (var_cte -> CTE_NUM .)


state 75

    (36) var_cte -> variable .
    PEN_DOWN        reduce using rule 36 (var_cte -> variable .)
    PEN_UP          reduce using rule 36 (var_cte -> variable .)
    WHILE           reduce using rule 36 (var_cte -> variable .)
    IF              reduce using rule 36 (var_cte -> variable .)
    WRITE           reduce using rule 36 (var_cte -> variable .)
    READ            reduce using rule 36 (var_cte -> variable .)
    ID              reduce using rule 36 (var_cte -> variable .)
    BOOL            reduce using rule 36 (var_cte -> variable .)
    WORD            reduce using rule 36 (var_cte -> variable .)
    NUMBER          reduce using rule 36 (var_cte -> variable .)
    CENTER          reduce using rule 36 (var_cte -> variable .)
    FORWARD         reduce using rule 36 (var_cte -> variable .)
    RIGHT           reduce using rule 36 (var_cte -> variable .)
    LEFT            reduce using rule 36 (var_cte -> variable .)
    END             reduce using rule 36 (var_cte -> variable .)
    EQUAL_TO        reduce using rule 36 (var_cte -> variable .)
    MORE_OR_EQ_THAN reduce using rule 36 (var_cte -> variable .)
    LESS_OR_EQ_THAN reduce using rule 36 (var_cte -> variable .)
    DIFFERENT_TO    reduce using rule 36 (var_cte -> variable .)
    MORE_THAN       reduce using rule 36 (var_cte -> variable .)
    LESS_THAN       reduce using rule 36 (var_cte -> variable .)
    OR              reduce using rule 36 (var_cte -> variable .)
    AND             reduce using rule 36 (var_cte -> variable .)
    DIV             reduce using rule 36 (var_cte -> variable .)
    MULT            reduce using rule 36 (var_cte -> variable .)
    SUB             reduce using rule 36 (var_cte -> variable .)
    SUM             reduce using rule 36 (var_cte -> variable .)
    ELSE            reduce using rule 36 (var_cte -> variable .)
    COMMA           reduce using rule 36 (var_cte -> variable .)
    CLOSE_PTH       reduce using rule 36 (var_cte -> variable .)
    CLOSE_SQR       reduce using rule 36 (var_cte -> variable .)


state 76

    (62) func_call -> ID . OPEN_PTH func_call_param CLOSE_PTH
    (67) variable -> ID . array
    (68) array -> . empty
    (69) array -> . OPEN_SQR expression CLOSE_SQR matrix
    (89) empty -> .
    OPEN_PTH        shift and go to state 61
    OPEN_SQR        shift and go to state 99
    PEN_DOWN        reduce using rule 89 (empty -> .)
    PEN_UP          reduce using rule 89 (empty -> .)
    WHILE           reduce using rule 89 (empty -> .)
    IF              reduce using rule 89 (empty -> .)
    WRITE           reduce using rule 89 (empty -> .)
    READ            reduce using rule 89 (empty -> .)
    ID              reduce using rule 89 (empty -> .)
    BOOL            reduce using rule 89 (empty -> .)
    WORD            reduce using rule 89 (empty -> .)
    NUMBER          reduce using rule 89 (empty -> .)
    CENTER          reduce using rule 89 (empty -> .)
    FORWARD         reduce using rule 89 (empty -> .)
    RIGHT           reduce using rule 89 (empty -> .)
    LEFT            reduce using rule 89 (empty -> .)
    END             reduce using rule 89 (empty -> .)
    EQUAL_TO        reduce using rule 89 (empty -> .)
    MORE_OR_EQ_THAN reduce using rule 89 (empty -> .)
    LESS_OR_EQ_THAN reduce using rule 89 (empty -> .)
    DIFFERENT_TO    reduce using rule 89 (empty -> .)
    MORE_THAN       reduce using rule 89 (empty -> .)
    LESS_THAN       reduce using rule 89 (empty -> .)
    OR              reduce using rule 89 (empty -> .)
    AND             reduce using rule 89 (empty -> .)
    DIV             reduce using rule 89 (empty -> .)
    MULT            reduce using rule 89 (empty -> .)
    SUB             reduce using rule 89 (empty -> .)
    SUM             reduce using rule 89 (empty -> .)
    ELSE            reduce using rule 89 (empty -> .)
    COMMA           reduce using rule 89 (empty -> .)
    CLOSE_PTH       reduce using rule 89 (empty -> .)
    CLOSE_SQR       reduce using rule 89 (empty -> .)

    array                          shift and go to state 97
    empty                          shift and go to state 98

state 77

    (37) cte_bool -> FALSE .
    PEN_DOWN        reduce using rule 37 (cte_bool -> FALSE .)
    PEN_UP          reduce using rule 37 (cte_bool -> FALSE .)
    WHILE           reduce using rule 37 (cte_bool -> FALSE .)
    IF              reduce using rule 37 (cte_bool -> FALSE .)
    WRITE           reduce using rule 37 (cte_bool -> FALSE .)
    READ            reduce using rule 37 (cte_bool -> FALSE .)
    ID              reduce using rule 37 (cte_bool -> FALSE .)
    BOOL            reduce using rule 37 (cte_bool -> FALSE .)
    WORD            reduce using rule 37 (cte_bool -> FALSE .)
    NUMBER          reduce using rule 37 (cte_bool -> FALSE .)
    CENTER          reduce using rule 37 (cte_bool -> FALSE .)
    FORWARD         reduce using rule 37 (cte_bool -> FALSE .)
    RIGHT           reduce using rule 37 (cte_bool -> FALSE .)
    LEFT            reduce using rule 37 (cte_bool -> FALSE .)
    END             reduce using rule 37 (cte_bool -> FALSE .)
    EQUAL_TO        reduce using rule 37 (cte_bool -> FALSE .)
    MORE_OR_EQ_THAN reduce using rule 37 (cte_bool -> FALSE .)
    LESS_OR_EQ_THAN reduce using rule 37 (cte_bool -> FALSE .)
    DIFFERENT_TO    reduce using rule 37 (cte_bool -> FALSE .)
    MORE_THAN       reduce using rule 37 (cte_bool -> FALSE .)
    LESS_THAN       reduce using rule 37 (cte_bool -> FALSE .)
    OR              reduce using rule 37 (cte_bool -> FALSE .)
    AND             reduce using rule 37 (cte_bool -> FALSE .)
    DIV             reduce using rule 37 (cte_bool -> FALSE .)
    MULT            reduce using rule 37 (cte_bool -> FALSE .)
    SUB             reduce using rule 37 (cte_bool -> FALSE .)
    SUM             reduce using rule 37 (cte_bool -> FALSE .)
    ELSE            reduce using rule 37 (cte_bool -> FALSE .)
    COMMA           reduce using rule 37 (cte_bool -> FALSE .)
    CLOSE_PTH       reduce using rule 37 (cte_bool -> FALSE .)
    CLOSE_SQR       reduce using rule 37 (cte_bool -> FALSE .)


state 78

    (38) cte_bool -> TRUE .
    PEN_DOWN        reduce using rule 38 (cte_bool -> TRUE .)
    PEN_UP          reduce using rule 38 (cte_bool -> TRUE .)
    WHILE           reduce using rule 38 (cte_bool -> TRUE .)
    IF              reduce using rule 38 (cte_bool -> TRUE .)
    WRITE           reduce using rule 38 (cte_bool -> TRUE .)
    READ            reduce using rule 38 (cte_bool -> TRUE .)
    ID              reduce using rule 38 (cte_bool -> TRUE .)
    BOOL            reduce using rule 38 (cte_bool -> TRUE .)
    WORD            reduce using rule 38 (cte_bool -> TRUE .)
    NUMBER          reduce using rule 38 (cte_bool -> TRUE .)
    CENTER          reduce using rule 38 (cte_bool -> TRUE .)
    FORWARD         reduce using rule 38 (cte_bool -> TRUE .)
    RIGHT           reduce using rule 38 (cte_bool -> TRUE .)
    LEFT            reduce using rule 38 (cte_bool -> TRUE .)
    END             reduce using rule 38 (cte_bool -> TRUE .)
    EQUAL_TO        reduce using rule 38 (cte_bool -> TRUE .)
    MORE_OR_EQ_THAN reduce using rule 38 (cte_bool -> TRUE .)
    LESS_OR_EQ_THAN reduce using rule 38 (cte_bool -> TRUE .)
    DIFFERENT_TO    reduce using rule 38 (cte_bool -> TRUE .)
    MORE_THAN       reduce using rule 38 (cte_bool -> TRUE .)
    LESS_THAN       reduce using rule 38 (cte_bool -> TRUE .)
    OR              reduce using rule 38 (cte_bool -> TRUE .)
    AND             reduce using rule 38 (cte_bool -> TRUE .)
    DIV             reduce using rule 38 (cte_bool -> TRUE .)
    MULT            reduce using rule 38 (cte_bool -> TRUE .)
    SUB             reduce using rule 38 (cte_bool -> TRUE .)
    SUM             reduce using rule 38 (cte_bool -> TRUE .)
    ELSE            reduce using rule 38 (cte_bool -> TRUE .)
    COMMA           reduce using rule 38 (cte_bool -> TRUE .)
    CLOSE_PTH       reduce using rule 38 (cte_bool -> TRUE .)
    CLOSE_SQR       reduce using rule 38 (cte_bool -> TRUE .)


state 79

    (77) if_stmnt -> IF expression . stmnt else_stmnt
    (43) complex_expr -> expression . e1 operator expression e2 quads
    (19) stmnt -> . empty
    (20) stmnt -> . var_declaration_func stmnt
    (21) stmnt -> . pen_func stmnt
    (22) stmnt -> . move_func stmnt
    (23) stmnt -> . while_stmnt stmnt
    (24) stmnt -> . if_stmnt stmnt
    (25) stmnt -> . write stmnt
    (26) stmnt -> . read stmnt
    (27) stmnt -> . func_call stmnt
    (28) stmnt -> . var_assignation stmnt
    (44) e1 -> .
    (89) empty -> .
    (29) var_declaration_func -> . var_type ID multiple_vars
    (86) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (87) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (81) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (80) while_stmnt -> . WHILE expression stmnt END
    (77) if_stmnt -> . IF expression stmnt else_stmnt
    (74) write -> . WRITE OPEN_PTH expression multiple_expression CLOSE_PTH
    (66) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (62) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (30) var_assignation -> . ID ASSIGN expression
    (31) var_assignation -> . ID ASSIGN var_cte
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    (82) move_type -> . CENTER
    (83) move_type -> . FORWARD
    (84) move_type -> . RIGHT
    (85) move_type -> . LEFT
    EQUAL_TO        reduce using rule 44 (e1 -> .)
    MORE_OR_EQ_THAN reduce using rule 44 (e1 -> .)
    LESS_OR_EQ_THAN reduce using rule 44 (e1 -> .)
    DIFFERENT_TO    reduce using rule 44 (e1 -> .)
    MORE_THAN       reduce using rule 44 (e1 -> .)
    LESS_THAN       reduce using rule 44 (e1 -> .)
    OR              reduce using rule 44 (e1 -> .)
    AND             reduce using rule 44 (e1 -> .)
    DIV             reduce using rule 44 (e1 -> .)
    MULT            reduce using rule 44 (e1 -> .)
    SUB             reduce using rule 44 (e1 -> .)
    SUM             reduce using rule 44 (e1 -> .)
    END             reduce using rule 89 (empty -> .)
    ELSE            reduce using rule 89 (empty -> .)
    PEN_DOWN        shift and go to state 37
    PEN_UP          shift and go to state 38
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    WRITE           shift and go to state 42
    READ            shift and go to state 43
    ID              shift and go to state 36
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9
    CENTER          shift and go to state 44
    FORWARD         shift and go to state 45
    RIGHT           shift and go to state 46
    LEFT            shift and go to state 47

    stmnt                          shift and go to state 100
    e1                             shift and go to state 95
    empty                          shift and go to state 25
    var_declaration_func           shift and go to state 26
    pen_func                       shift and go to state 27
    move_func                      shift and go to state 28
    while_stmnt                    shift and go to state 29
    if_stmnt                       shift and go to state 30
    write                          shift and go to state 31
    read                           shift and go to state 32
    func_call                      shift and go to state 33
    var_assignation                shift and go to state 34
    var_type                       shift and go to state 35
    move_type                      shift and go to state 39

state 80

    (74) write -> WRITE OPEN_PTH . expression multiple_expression CLOSE_PTH
    (39) expression -> . mult_expr
    (40) expression -> . var_cte
    (41) expression -> . complex_expr
    (42) mult_expr -> . OPEN_PTH expression CLOSE_PTH
    (32) var_cte -> . func_call
    (33) var_cte -> . cte_bool
    (34) var_cte -> . CTE_STR
    (35) var_cte -> . CTE_NUM
    (36) var_cte -> . variable
    (43) complex_expr -> . expression e1 operator expression e2 quads
    (62) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (37) cte_bool -> . FALSE
    (38) cte_bool -> . TRUE
    (67) variable -> . ID array
    OPEN_PTH        shift and go to state 70
    CTE_STR         shift and go to state 73
    CTE_NUM         shift and go to state 74
    ID              shift and go to state 76
    FALSE           shift and go to state 77
    TRUE            shift and go to state 78

    expression                     shift and go to state 101
    mult_expr                      shift and go to state 67
    var_cte                        shift and go to state 68
    complex_expr                   shift and go to state 69
    func_call                      shift and go to state 71
    cte_bool                       shift and go to state 72
    variable                       shift and go to state 75

state 81

    (66) read -> READ OPEN_PTH . variable multiple_vars CLOSE_PTH
    (67) variable -> . ID array
    ID              shift and go to state 103

    variable                       shift and go to state 102

state 82

    (10) func_declaration -> func_type FUNC ID OPEN_PTH . parameter CLOSE_PTH stmnt END
    (15) parameter -> . empty
    (16) parameter -> . var_type ID multiple_parameters
    (89) empty -> .
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    CLOSE_PTH       reduce using rule 89 (empty -> .)
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9

    parameter                      shift and go to state 104
    empty                          shift and go to state 105
    var_type                       shift and go to state 106

state 83

    (5) multiple_var -> COMMA ID multiple_var .
    BOOL            reduce using rule 5 (multiple_var -> COMMA ID multiple_var .)
    WORD            reduce using rule 5 (multiple_var -> COMMA ID multiple_var .)
    NUMBER          reduce using rule 5 (multiple_var -> COMMA ID multiple_var .)
    VOID            reduce using rule 5 (multiple_var -> COMMA ID multiple_var .)
    MAIN            reduce using rule 5 (multiple_var -> COMMA ID multiple_var .)


state 84

    (29) var_declaration_func -> var_type ID multiple_vars .
    PEN_DOWN        reduce using rule 29 (var_declaration_func -> var_type ID multiple_vars .)
    PEN_UP          reduce using rule 29 (var_declaration_func -> var_type ID multiple_vars .)
    WHILE           reduce using rule 29 (var_declaration_func -> var_type ID multiple_vars .)
    IF              reduce using rule 29 (var_declaration_func -> var_type ID multiple_vars .)
    WRITE           reduce using rule 29 (var_declaration_func -> var_type ID multiple_vars .)
    READ            reduce using rule 29 (var_declaration_func -> var_type ID multiple_vars .)
    ID              reduce using rule 29 (var_declaration_func -> var_type ID multiple_vars .)
    BOOL            reduce using rule 29 (var_declaration_func -> var_type ID multiple_vars .)
    WORD            reduce using rule 29 (var_declaration_func -> var_type ID multiple_vars .)
    NUMBER          reduce using rule 29 (var_declaration_func -> var_type ID multiple_vars .)
    CENTER          reduce using rule 29 (var_declaration_func -> var_type ID multiple_vars .)
    FORWARD         reduce using rule 29 (var_declaration_func -> var_type ID multiple_vars .)
    RIGHT           reduce using rule 29 (var_declaration_func -> var_type ID multiple_vars .)
    LEFT            reduce using rule 29 (var_declaration_func -> var_type ID multiple_vars .)
    END             reduce using rule 29 (var_declaration_func -> var_type ID multiple_vars .)
    ELSE            reduce using rule 29 (var_declaration_func -> var_type ID multiple_vars .)


state 85

    (72) multiple_vars -> empty .
    PEN_DOWN        reduce using rule 72 (multiple_vars -> empty .)
    PEN_UP          reduce using rule 72 (multiple_vars -> empty .)
    WHILE           reduce using rule 72 (multiple_vars -> empty .)
    IF              reduce using rule 72 (multiple_vars -> empty .)
    WRITE           reduce using rule 72 (multiple_vars -> empty .)
    READ            reduce using rule 72 (multiple_vars -> empty .)
    ID              reduce using rule 72 (multiple_vars -> empty .)
    BOOL            reduce using rule 72 (multiple_vars -> empty .)
    WORD            reduce using rule 72 (multiple_vars -> empty .)
    NUMBER          reduce using rule 72 (multiple_vars -> empty .)
    CENTER          reduce using rule 72 (multiple_vars -> empty .)
    FORWARD         reduce using rule 72 (multiple_vars -> empty .)
    RIGHT           reduce using rule 72 (multiple_vars -> empty .)
    LEFT            reduce using rule 72 (multiple_vars -> empty .)
    END             reduce using rule 72 (multiple_vars -> empty .)
    ELSE            reduce using rule 72 (multiple_vars -> empty .)
    CLOSE_PTH       reduce using rule 72 (multiple_vars -> empty .)


state 86

    (73) multiple_vars -> COMMA . variable
    (67) variable -> . ID array
    ID              shift and go to state 103

    variable                       shift and go to state 107

state 87

    (62) func_call -> ID OPEN_PTH func_call_param . CLOSE_PTH
    CLOSE_PTH       shift and go to state 108


state 88

    (63) func_call_param -> expression . multiple_fc_param
    (43) complex_expr -> expression . e1 operator expression e2 quads
    (64) multiple_fc_param -> . empty
    (65) multiple_fc_param -> . COMMA func_call_param
    (44) e1 -> .
    (89) empty -> .
    COMMA           shift and go to state 111
    EQUAL_TO        reduce using rule 44 (e1 -> .)
    MORE_OR_EQ_THAN reduce using rule 44 (e1 -> .)
    LESS_OR_EQ_THAN reduce using rule 44 (e1 -> .)
    DIFFERENT_TO    reduce using rule 44 (e1 -> .)
    MORE_THAN       reduce using rule 44 (e1 -> .)
    LESS_THAN       reduce using rule 44 (e1 -> .)
    OR              reduce using rule 44 (e1 -> .)
    AND             reduce using rule 44 (e1 -> .)
    DIV             reduce using rule 44 (e1 -> .)
    MULT            reduce using rule 44 (e1 -> .)
    SUB             reduce using rule 44 (e1 -> .)
    SUM             reduce using rule 44 (e1 -> .)
    CLOSE_PTH       reduce using rule 89 (empty -> .)

    multiple_fc_param              shift and go to state 109
    e1                             shift and go to state 95
    empty                          shift and go to state 110

state 89

    (30) var_assignation -> ID ASSIGN expression .
    (43) complex_expr -> expression . e1 operator expression e2 quads
    (44) e1 -> .
    PEN_DOWN        reduce using rule 30 (var_assignation -> ID ASSIGN expression .)
    PEN_UP          reduce using rule 30 (var_assignation -> ID ASSIGN expression .)
    WHILE           reduce using rule 30 (var_assignation -> ID ASSIGN expression .)
    IF              reduce using rule 30 (var_assignation -> ID ASSIGN expression .)
    WRITE           reduce using rule 30 (var_assignation -> ID ASSIGN expression .)
    READ            reduce using rule 30 (var_assignation -> ID ASSIGN expression .)
    ID              reduce using rule 30 (var_assignation -> ID ASSIGN expression .)
    BOOL            reduce using rule 30 (var_assignation -> ID ASSIGN expression .)
    WORD            reduce using rule 30 (var_assignation -> ID ASSIGN expression .)
    NUMBER          reduce using rule 30 (var_assignation -> ID ASSIGN expression .)
    CENTER          reduce using rule 30 (var_assignation -> ID ASSIGN expression .)
    FORWARD         reduce using rule 30 (var_assignation -> ID ASSIGN expression .)
    RIGHT           reduce using rule 30 (var_assignation -> ID ASSIGN expression .)
    LEFT            reduce using rule 30 (var_assignation -> ID ASSIGN expression .)
    END             reduce using rule 30 (var_assignation -> ID ASSIGN expression .)
    ELSE            reduce using rule 30 (var_assignation -> ID ASSIGN expression .)
    EQUAL_TO        reduce using rule 44 (e1 -> .)
    MORE_OR_EQ_THAN reduce using rule 44 (e1 -> .)
    LESS_OR_EQ_THAN reduce using rule 44 (e1 -> .)
    DIFFERENT_TO    reduce using rule 44 (e1 -> .)
    MORE_THAN       reduce using rule 44 (e1 -> .)
    LESS_THAN       reduce using rule 44 (e1 -> .)
    OR              reduce using rule 44 (e1 -> .)
    AND             reduce using rule 44 (e1 -> .)
    DIV             reduce using rule 44 (e1 -> .)
    MULT            reduce using rule 44 (e1 -> .)
    SUB             reduce using rule 44 (e1 -> .)
    SUM             reduce using rule 44 (e1 -> .)

    e1                             shift and go to state 95

state 90

    (31) var_assignation -> ID ASSIGN var_cte .
    (40) expression -> var_cte .
  ! reduce/reduce conflict for PEN_DOWN resolved using rule 31 (var_assignation -> ID ASSIGN var_cte .)
  ! reduce/reduce conflict for PEN_UP resolved using rule 31 (var_assignation -> ID ASSIGN var_cte .)
  ! reduce/reduce conflict for WHILE resolved using rule 31 (var_assignation -> ID ASSIGN var_cte .)
  ! reduce/reduce conflict for IF resolved using rule 31 (var_assignation -> ID ASSIGN var_cte .)
  ! reduce/reduce conflict for WRITE resolved using rule 31 (var_assignation -> ID ASSIGN var_cte .)
  ! reduce/reduce conflict for READ resolved using rule 31 (var_assignation -> ID ASSIGN var_cte .)
  ! reduce/reduce conflict for ID resolved using rule 31 (var_assignation -> ID ASSIGN var_cte .)
  ! reduce/reduce conflict for BOOL resolved using rule 31 (var_assignation -> ID ASSIGN var_cte .)
  ! reduce/reduce conflict for WORD resolved using rule 31 (var_assignation -> ID ASSIGN var_cte .)
  ! reduce/reduce conflict for NUMBER resolved using rule 31 (var_assignation -> ID ASSIGN var_cte .)
  ! reduce/reduce conflict for CENTER resolved using rule 31 (var_assignation -> ID ASSIGN var_cte .)
  ! reduce/reduce conflict for FORWARD resolved using rule 31 (var_assignation -> ID ASSIGN var_cte .)
  ! reduce/reduce conflict for RIGHT resolved using rule 31 (var_assignation -> ID ASSIGN var_cte .)
  ! reduce/reduce conflict for LEFT resolved using rule 31 (var_assignation -> ID ASSIGN var_cte .)
  ! reduce/reduce conflict for END resolved using rule 31 (var_assignation -> ID ASSIGN var_cte .)
  ! reduce/reduce conflict for ELSE resolved using rule 31 (var_assignation -> ID ASSIGN var_cte .)
    PEN_DOWN        reduce using rule 31 (var_assignation -> ID ASSIGN var_cte .)
    PEN_UP          reduce using rule 31 (var_assignation -> ID ASSIGN var_cte .)
    WHILE           reduce using rule 31 (var_assignation -> ID ASSIGN var_cte .)
    IF              reduce using rule 31 (var_assignation -> ID ASSIGN var_cte .)
    WRITE           reduce using rule 31 (var_assignation -> ID ASSIGN var_cte .)
    READ            reduce using rule 31 (var_assignation -> ID ASSIGN var_cte .)
    ID              reduce using rule 31 (var_assignation -> ID ASSIGN var_cte .)
    BOOL            reduce using rule 31 (var_assignation -> ID ASSIGN var_cte .)
    WORD            reduce using rule 31 (var_assignation -> ID ASSIGN var_cte .)
    NUMBER          reduce using rule 31 (var_assignation -> ID ASSIGN var_cte .)
    CENTER          reduce using rule 31 (var_assignation -> ID ASSIGN var_cte .)
    FORWARD         reduce using rule 31 (var_assignation -> ID ASSIGN var_cte .)
    RIGHT           reduce using rule 31 (var_assignation -> ID ASSIGN var_cte .)
    LEFT            reduce using rule 31 (var_assignation -> ID ASSIGN var_cte .)
    END             reduce using rule 31 (var_assignation -> ID ASSIGN var_cte .)
    ELSE            reduce using rule 31 (var_assignation -> ID ASSIGN var_cte .)
    EQUAL_TO        reduce using rule 40 (expression -> var_cte .)
    MORE_OR_EQ_THAN reduce using rule 40 (expression -> var_cte .)
    LESS_OR_EQ_THAN reduce using rule 40 (expression -> var_cte .)
    DIFFERENT_TO    reduce using rule 40 (expression -> var_cte .)
    MORE_THAN       reduce using rule 40 (expression -> var_cte .)
    LESS_THAN       reduce using rule 40 (expression -> var_cte .)
    OR              reduce using rule 40 (expression -> var_cte .)
    AND             reduce using rule 40 (expression -> var_cte .)
    DIV             reduce using rule 40 (expression -> var_cte .)
    MULT            reduce using rule 40 (expression -> var_cte .)
    SUB             reduce using rule 40 (expression -> var_cte .)
    SUM             reduce using rule 40 (expression -> var_cte .)


state 91

    (86) pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .
    PEN_DOWN        reduce using rule 86 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    PEN_UP          reduce using rule 86 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    WHILE           reduce using rule 86 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    IF              reduce using rule 86 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    WRITE           reduce using rule 86 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    READ            reduce using rule 86 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    ID              reduce using rule 86 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    BOOL            reduce using rule 86 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    WORD            reduce using rule 86 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    NUMBER          reduce using rule 86 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    CENTER          reduce using rule 86 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    FORWARD         reduce using rule 86 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    RIGHT           reduce using rule 86 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    LEFT            reduce using rule 86 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    END             reduce using rule 86 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    ELSE            reduce using rule 86 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)


state 92

    (87) pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .
    PEN_DOWN        reduce using rule 87 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    PEN_UP          reduce using rule 87 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    WHILE           reduce using rule 87 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    IF              reduce using rule 87 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    WRITE           reduce using rule 87 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    READ            reduce using rule 87 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    ID              reduce using rule 87 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    BOOL            reduce using rule 87 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    WORD            reduce using rule 87 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    NUMBER          reduce using rule 87 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    CENTER          reduce using rule 87 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    FORWARD         reduce using rule 87 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    RIGHT           reduce using rule 87 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    LEFT            reduce using rule 87 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    END             reduce using rule 87 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    ELSE            reduce using rule 87 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)


state 93

    (81) move_func -> move_type OPEN_PTH func_call_param . CLOSE_PTH
    CLOSE_PTH       shift and go to state 112


state 94

    (80) while_stmnt -> WHILE expression stmnt . END
    END             shift and go to state 113


state 95

    (43) complex_expr -> expression e1 . operator expression e2 quads
    (47) operator -> . rel_op
    (48) operator -> . log_op
    (49) operator -> . art_op
    (56) rel_op -> . EQUAL_TO
    (57) rel_op -> . MORE_OR_EQ_THAN
    (58) rel_op -> . LESS_OR_EQ_THAN
    (59) rel_op -> . DIFFERENT_TO
    (60) rel_op -> . MORE_THAN
    (61) rel_op -> . LESS_THAN
    (54) log_op -> . OR
    (55) log_op -> . AND
    (50) art_op -> . DIV
    (51) art_op -> . MULT
    (52) art_op -> . SUB
    (53) art_op -> . SUM
    EQUAL_TO        shift and go to state 118
    MORE_OR_EQ_THAN shift and go to state 119
    LESS_OR_EQ_THAN shift and go to state 120
    DIFFERENT_TO    shift and go to state 121
    MORE_THAN       shift and go to state 122
    LESS_THAN       shift and go to state 123
    OR              shift and go to state 124
    AND             shift and go to state 125
    DIV             shift and go to state 126
    MULT            shift and go to state 127
    SUB             shift and go to state 128
    SUM             shift and go to state 129

    operator                       shift and go to state 114
    rel_op                         shift and go to state 115
    log_op                         shift and go to state 116
    art_op                         shift and go to state 117

state 96

    (42) mult_expr -> OPEN_PTH expression . CLOSE_PTH
    (43) complex_expr -> expression . e1 operator expression e2 quads
    (44) e1 -> .
    CLOSE_PTH       shift and go to state 130
    EQUAL_TO        reduce using rule 44 (e1 -> .)
    MORE_OR_EQ_THAN reduce using rule 44 (e1 -> .)
    LESS_OR_EQ_THAN reduce using rule 44 (e1 -> .)
    DIFFERENT_TO    reduce using rule 44 (e1 -> .)
    MORE_THAN       reduce using rule 44 (e1 -> .)
    LESS_THAN       reduce using rule 44 (e1 -> .)
    OR              reduce using rule 44 (e1 -> .)
    AND             reduce using rule 44 (e1 -> .)
    DIV             reduce using rule 44 (e1 -> .)
    MULT            reduce using rule 44 (e1 -> .)
    SUB             reduce using rule 44 (e1 -> .)
    SUM             reduce using rule 44 (e1 -> .)

    e1                             shift and go to state 95

state 97

    (67) variable -> ID array .
    PEN_DOWN        reduce using rule 67 (variable -> ID array .)
    PEN_UP          reduce using rule 67 (variable -> ID array .)
    WHILE           reduce using rule 67 (variable -> ID array .)
    IF              reduce using rule 67 (variable -> ID array .)
    WRITE           reduce using rule 67 (variable -> ID array .)
    READ            reduce using rule 67 (variable -> ID array .)
    ID              reduce using rule 67 (variable -> ID array .)
    BOOL            reduce using rule 67 (variable -> ID array .)
    WORD            reduce using rule 67 (variable -> ID array .)
    NUMBER          reduce using rule 67 (variable -> ID array .)
    CENTER          reduce using rule 67 (variable -> ID array .)
    FORWARD         reduce using rule 67 (variable -> ID array .)
    RIGHT           reduce using rule 67 (variable -> ID array .)
    LEFT            reduce using rule 67 (variable -> ID array .)
    END             reduce using rule 67 (variable -> ID array .)
    EQUAL_TO        reduce using rule 67 (variable -> ID array .)
    MORE_OR_EQ_THAN reduce using rule 67 (variable -> ID array .)
    LESS_OR_EQ_THAN reduce using rule 67 (variable -> ID array .)
    DIFFERENT_TO    reduce using rule 67 (variable -> ID array .)
    MORE_THAN       reduce using rule 67 (variable -> ID array .)
    LESS_THAN       reduce using rule 67 (variable -> ID array .)
    OR              reduce using rule 67 (variable -> ID array .)
    AND             reduce using rule 67 (variable -> ID array .)
    DIV             reduce using rule 67 (variable -> ID array .)
    MULT            reduce using rule 67 (variable -> ID array .)
    SUB             reduce using rule 67 (variable -> ID array .)
    SUM             reduce using rule 67 (variable -> ID array .)
    ELSE            reduce using rule 67 (variable -> ID array .)
    COMMA           reduce using rule 67 (variable -> ID array .)
    CLOSE_PTH       reduce using rule 67 (variable -> ID array .)
    CLOSE_SQR       reduce using rule 67 (variable -> ID array .)


state 98

    (68) array -> empty .
    PEN_DOWN        reduce using rule 68 (array -> empty .)
    PEN_UP          reduce using rule 68 (array -> empty .)
    WHILE           reduce using rule 68 (array -> empty .)
    IF              reduce using rule 68 (array -> empty .)
    WRITE           reduce using rule 68 (array -> empty .)
    READ            reduce using rule 68 (array -> empty .)
    ID              reduce using rule 68 (array -> empty .)
    BOOL            reduce using rule 68 (array -> empty .)
    WORD            reduce using rule 68 (array -> empty .)
    NUMBER          reduce using rule 68 (array -> empty .)
    CENTER          reduce using rule 68 (array -> empty .)
    FORWARD         reduce using rule 68 (array -> empty .)
    RIGHT           reduce using rule 68 (array -> empty .)
    LEFT            reduce using rule 68 (array -> empty .)
    END             reduce using rule 68 (array -> empty .)
    EQUAL_TO        reduce using rule 68 (array -> empty .)
    MORE_OR_EQ_THAN reduce using rule 68 (array -> empty .)
    LESS_OR_EQ_THAN reduce using rule 68 (array -> empty .)
    DIFFERENT_TO    reduce using rule 68 (array -> empty .)
    MORE_THAN       reduce using rule 68 (array -> empty .)
    LESS_THAN       reduce using rule 68 (array -> empty .)
    OR              reduce using rule 68 (array -> empty .)
    AND             reduce using rule 68 (array -> empty .)
    DIV             reduce using rule 68 (array -> empty .)
    MULT            reduce using rule 68 (array -> empty .)
    SUB             reduce using rule 68 (array -> empty .)
    SUM             reduce using rule 68 (array -> empty .)
    ELSE            reduce using rule 68 (array -> empty .)
    COMMA           reduce using rule 68 (array -> empty .)
    CLOSE_PTH       reduce using rule 68 (array -> empty .)
    CLOSE_SQR       reduce using rule 68 (array -> empty .)


state 99

    (69) array -> OPEN_SQR . expression CLOSE_SQR matrix
    (39) expression -> . mult_expr
    (40) expression -> . var_cte
    (41) expression -> . complex_expr
    (42) mult_expr -> . OPEN_PTH expression CLOSE_PTH
    (32) var_cte -> . func_call
    (33) var_cte -> . cte_bool
    (34) var_cte -> . CTE_STR
    (35) var_cte -> . CTE_NUM
    (36) var_cte -> . variable
    (43) complex_expr -> . expression e1 operator expression e2 quads
    (62) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (37) cte_bool -> . FALSE
    (38) cte_bool -> . TRUE
    (67) variable -> . ID array
    OPEN_PTH        shift and go to state 70
    CTE_STR         shift and go to state 73
    CTE_NUM         shift and go to state 74
    ID              shift and go to state 76
    FALSE           shift and go to state 77
    TRUE            shift and go to state 78

    expression                     shift and go to state 131
    mult_expr                      shift and go to state 67
    var_cte                        shift and go to state 68
    complex_expr                   shift and go to state 69
    func_call                      shift and go to state 71
    cte_bool                       shift and go to state 72
    variable                       shift and go to state 75

state 100

    (77) if_stmnt -> IF expression stmnt . else_stmnt
    (78) else_stmnt -> . END
    (79) else_stmnt -> . ELSE stmnt END
    END             shift and go to state 133
    ELSE            shift and go to state 134

    else_stmnt                     shift and go to state 132

state 101

    (74) write -> WRITE OPEN_PTH expression . multiple_expression CLOSE_PTH
    (43) complex_expr -> expression . e1 operator expression e2 quads
    (75) multiple_expression -> . empty
    (76) multiple_expression -> . COMMA expression
    (44) e1 -> .
    (89) empty -> .
    COMMA           shift and go to state 137
    EQUAL_TO        reduce using rule 44 (e1 -> .)
    MORE_OR_EQ_THAN reduce using rule 44 (e1 -> .)
    LESS_OR_EQ_THAN reduce using rule 44 (e1 -> .)
    DIFFERENT_TO    reduce using rule 44 (e1 -> .)
    MORE_THAN       reduce using rule 44 (e1 -> .)
    LESS_THAN       reduce using rule 44 (e1 -> .)
    OR              reduce using rule 44 (e1 -> .)
    AND             reduce using rule 44 (e1 -> .)
    DIV             reduce using rule 44 (e1 -> .)
    MULT            reduce using rule 44 (e1 -> .)
    SUB             reduce using rule 44 (e1 -> .)
    SUM             reduce using rule 44 (e1 -> .)
    CLOSE_PTH       reduce using rule 89 (empty -> .)

    multiple_expression            shift and go to state 135
    e1                             shift and go to state 95
    empty                          shift and go to state 136

state 102

    (66) read -> READ OPEN_PTH variable . multiple_vars CLOSE_PTH
    (72) multiple_vars -> . empty
    (73) multiple_vars -> . COMMA variable
    (89) empty -> .
    COMMA           shift and go to state 86
    CLOSE_PTH       reduce using rule 89 (empty -> .)

    multiple_vars                  shift and go to state 138
    empty                          shift and go to state 85

state 103

    (67) variable -> ID . array
    (68) array -> . empty
    (69) array -> . OPEN_SQR expression CLOSE_SQR matrix
    (89) empty -> .
    OPEN_SQR        shift and go to state 99
    COMMA           reduce using rule 89 (empty -> .)
    CLOSE_PTH       reduce using rule 89 (empty -> .)
    PEN_DOWN        reduce using rule 89 (empty -> .)
    PEN_UP          reduce using rule 89 (empty -> .)
    WHILE           reduce using rule 89 (empty -> .)
    IF              reduce using rule 89 (empty -> .)
    WRITE           reduce using rule 89 (empty -> .)
    READ            reduce using rule 89 (empty -> .)
    ID              reduce using rule 89 (empty -> .)
    BOOL            reduce using rule 89 (empty -> .)
    WORD            reduce using rule 89 (empty -> .)
    NUMBER          reduce using rule 89 (empty -> .)
    CENTER          reduce using rule 89 (empty -> .)
    FORWARD         reduce using rule 89 (empty -> .)
    RIGHT           reduce using rule 89 (empty -> .)
    LEFT            reduce using rule 89 (empty -> .)
    END             reduce using rule 89 (empty -> .)
    ELSE            reduce using rule 89 (empty -> .)

    array                          shift and go to state 97
    empty                          shift and go to state 98

state 104

    (10) func_declaration -> func_type FUNC ID OPEN_PTH parameter . CLOSE_PTH stmnt END
    CLOSE_PTH       shift and go to state 139


state 105

    (15) parameter -> empty .
    CLOSE_PTH       reduce using rule 15 (parameter -> empty .)


state 106

    (16) parameter -> var_type . ID multiple_parameters
    ID              shift and go to state 140


state 107

    (73) multiple_vars -> COMMA variable .
    PEN_DOWN        reduce using rule 73 (multiple_vars -> COMMA variable .)
    PEN_UP          reduce using rule 73 (multiple_vars -> COMMA variable .)
    WHILE           reduce using rule 73 (multiple_vars -> COMMA variable .)
    IF              reduce using rule 73 (multiple_vars -> COMMA variable .)
    WRITE           reduce using rule 73 (multiple_vars -> COMMA variable .)
    READ            reduce using rule 73 (multiple_vars -> COMMA variable .)
    ID              reduce using rule 73 (multiple_vars -> COMMA variable .)
    BOOL            reduce using rule 73 (multiple_vars -> COMMA variable .)
    WORD            reduce using rule 73 (multiple_vars -> COMMA variable .)
    NUMBER          reduce using rule 73 (multiple_vars -> COMMA variable .)
    CENTER          reduce using rule 73 (multiple_vars -> COMMA variable .)
    FORWARD         reduce using rule 73 (multiple_vars -> COMMA variable .)
    RIGHT           reduce using rule 73 (multiple_vars -> COMMA variable .)
    LEFT            reduce using rule 73 (multiple_vars -> COMMA variable .)
    END             reduce using rule 73 (multiple_vars -> COMMA variable .)
    ELSE            reduce using rule 73 (multiple_vars -> COMMA variable .)
    CLOSE_PTH       reduce using rule 73 (multiple_vars -> COMMA variable .)


state 108

    (62) func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .
    PEN_DOWN        reduce using rule 62 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    PEN_UP          reduce using rule 62 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    WHILE           reduce using rule 62 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    IF              reduce using rule 62 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    WRITE           reduce using rule 62 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    READ            reduce using rule 62 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    ID              reduce using rule 62 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    BOOL            reduce using rule 62 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    WORD            reduce using rule 62 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    NUMBER          reduce using rule 62 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    CENTER          reduce using rule 62 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    FORWARD         reduce using rule 62 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    RIGHT           reduce using rule 62 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    LEFT            reduce using rule 62 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    END             reduce using rule 62 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    ELSE            reduce using rule 62 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    EQUAL_TO        reduce using rule 62 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    MORE_OR_EQ_THAN reduce using rule 62 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    LESS_OR_EQ_THAN reduce using rule 62 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    DIFFERENT_TO    reduce using rule 62 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    MORE_THAN       reduce using rule 62 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    LESS_THAN       reduce using rule 62 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    OR              reduce using rule 62 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    AND             reduce using rule 62 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    DIV             reduce using rule 62 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    MULT            reduce using rule 62 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    SUB             reduce using rule 62 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    SUM             reduce using rule 62 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    COMMA           reduce using rule 62 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    CLOSE_PTH       reduce using rule 62 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    CLOSE_SQR       reduce using rule 62 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)


state 109

    (63) func_call_param -> expression multiple_fc_param .
    CLOSE_PTH       reduce using rule 63 (func_call_param -> expression multiple_fc_param .)


state 110

    (64) multiple_fc_param -> empty .
    CLOSE_PTH       reduce using rule 64 (multiple_fc_param -> empty .)


state 111

    (65) multiple_fc_param -> COMMA . func_call_param
    (63) func_call_param -> . expression multiple_fc_param
    (39) expression -> . mult_expr
    (40) expression -> . var_cte
    (41) expression -> . complex_expr
    (42) mult_expr -> . OPEN_PTH expression CLOSE_PTH
    (32) var_cte -> . func_call
    (33) var_cte -> . cte_bool
    (34) var_cte -> . CTE_STR
    (35) var_cte -> . CTE_NUM
    (36) var_cte -> . variable
    (43) complex_expr -> . expression e1 operator expression e2 quads
    (62) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (37) cte_bool -> . FALSE
    (38) cte_bool -> . TRUE
    (67) variable -> . ID array
    OPEN_PTH        shift and go to state 70
    CTE_STR         shift and go to state 73
    CTE_NUM         shift and go to state 74
    ID              shift and go to state 76
    FALSE           shift and go to state 77
    TRUE            shift and go to state 78

    func_call_param                shift and go to state 141
    expression                     shift and go to state 88
    mult_expr                      shift and go to state 67
    var_cte                        shift and go to state 68
    complex_expr                   shift and go to state 69
    func_call                      shift and go to state 71
    cte_bool                       shift and go to state 72
    variable                       shift and go to state 75

state 112

    (81) move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .
    PEN_DOWN        reduce using rule 81 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    PEN_UP          reduce using rule 81 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    WHILE           reduce using rule 81 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    IF              reduce using rule 81 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    WRITE           reduce using rule 81 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    READ            reduce using rule 81 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    ID              reduce using rule 81 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    BOOL            reduce using rule 81 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    WORD            reduce using rule 81 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    NUMBER          reduce using rule 81 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    CENTER          reduce using rule 81 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    FORWARD         reduce using rule 81 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    RIGHT           reduce using rule 81 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    LEFT            reduce using rule 81 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    END             reduce using rule 81 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    ELSE            reduce using rule 81 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)


state 113

    (80) while_stmnt -> WHILE expression stmnt END .
    PEN_DOWN        reduce using rule 80 (while_stmnt -> WHILE expression stmnt END .)
    PEN_UP          reduce using rule 80 (while_stmnt -> WHILE expression stmnt END .)
    WHILE           reduce using rule 80 (while_stmnt -> WHILE expression stmnt END .)
    IF              reduce using rule 80 (while_stmnt -> WHILE expression stmnt END .)
    WRITE           reduce using rule 80 (while_stmnt -> WHILE expression stmnt END .)
    READ            reduce using rule 80 (while_stmnt -> WHILE expression stmnt END .)
    ID              reduce using rule 80 (while_stmnt -> WHILE expression stmnt END .)
    BOOL            reduce using rule 80 (while_stmnt -> WHILE expression stmnt END .)
    WORD            reduce using rule 80 (while_stmnt -> WHILE expression stmnt END .)
    NUMBER          reduce using rule 80 (while_stmnt -> WHILE expression stmnt END .)
    CENTER          reduce using rule 80 (while_stmnt -> WHILE expression stmnt END .)
    FORWARD         reduce using rule 80 (while_stmnt -> WHILE expression stmnt END .)
    RIGHT           reduce using rule 80 (while_stmnt -> WHILE expression stmnt END .)
    LEFT            reduce using rule 80 (while_stmnt -> WHILE expression stmnt END .)
    END             reduce using rule 80 (while_stmnt -> WHILE expression stmnt END .)
    ELSE            reduce using rule 80 (while_stmnt -> WHILE expression stmnt END .)


state 114

    (43) complex_expr -> expression e1 operator . expression e2 quads
    (39) expression -> . mult_expr
    (40) expression -> . var_cte
    (41) expression -> . complex_expr
    (42) mult_expr -> . OPEN_PTH expression CLOSE_PTH
    (32) var_cte -> . func_call
    (33) var_cte -> . cte_bool
    (34) var_cte -> . CTE_STR
    (35) var_cte -> . CTE_NUM
    (36) var_cte -> . variable
    (43) complex_expr -> . expression e1 operator expression e2 quads
    (62) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (37) cte_bool -> . FALSE
    (38) cte_bool -> . TRUE
    (67) variable -> . ID array
    OPEN_PTH        shift and go to state 70
    CTE_STR         shift and go to state 73
    CTE_NUM         shift and go to state 74
    ID              shift and go to state 76
    FALSE           shift and go to state 77
    TRUE            shift and go to state 78

    expression                     shift and go to state 142
    mult_expr                      shift and go to state 67
    var_cte                        shift and go to state 68
    complex_expr                   shift and go to state 69
    func_call                      shift and go to state 71
    cte_bool                       shift and go to state 72
    variable                       shift and go to state 75

state 115

    (47) operator -> rel_op .
    OPEN_PTH        reduce using rule 47 (operator -> rel_op .)
    CTE_STR         reduce using rule 47 (operator -> rel_op .)
    CTE_NUM         reduce using rule 47 (operator -> rel_op .)
    ID              reduce using rule 47 (operator -> rel_op .)
    FALSE           reduce using rule 47 (operator -> rel_op .)
    TRUE            reduce using rule 47 (operator -> rel_op .)


state 116

    (48) operator -> log_op .
    OPEN_PTH        reduce using rule 48 (operator -> log_op .)
    CTE_STR         reduce using rule 48 (operator -> log_op .)
    CTE_NUM         reduce using rule 48 (operator -> log_op .)
    ID              reduce using rule 48 (operator -> log_op .)
    FALSE           reduce using rule 48 (operator -> log_op .)
    TRUE            reduce using rule 48 (operator -> log_op .)


state 117

    (49) operator -> art_op .
    OPEN_PTH        reduce using rule 49 (operator -> art_op .)
    CTE_STR         reduce using rule 49 (operator -> art_op .)
    CTE_NUM         reduce using rule 49 (operator -> art_op .)
    ID              reduce using rule 49 (operator -> art_op .)
    FALSE           reduce using rule 49 (operator -> art_op .)
    TRUE            reduce using rule 49 (operator -> art_op .)


state 118

    (56) rel_op -> EQUAL_TO .
    OPEN_PTH        reduce using rule 56 (rel_op -> EQUAL_TO .)
    CTE_STR         reduce using rule 56 (rel_op -> EQUAL_TO .)
    CTE_NUM         reduce using rule 56 (rel_op -> EQUAL_TO .)
    ID              reduce using rule 56 (rel_op -> EQUAL_TO .)
    FALSE           reduce using rule 56 (rel_op -> EQUAL_TO .)
    TRUE            reduce using rule 56 (rel_op -> EQUAL_TO .)


state 119

    (57) rel_op -> MORE_OR_EQ_THAN .
    OPEN_PTH        reduce using rule 57 (rel_op -> MORE_OR_EQ_THAN .)
    CTE_STR         reduce using rule 57 (rel_op -> MORE_OR_EQ_THAN .)
    CTE_NUM         reduce using rule 57 (rel_op -> MORE_OR_EQ_THAN .)
    ID              reduce using rule 57 (rel_op -> MORE_OR_EQ_THAN .)
    FALSE           reduce using rule 57 (rel_op -> MORE_OR_EQ_THAN .)
    TRUE            reduce using rule 57 (rel_op -> MORE_OR_EQ_THAN .)


state 120

    (58) rel_op -> LESS_OR_EQ_THAN .
    OPEN_PTH        reduce using rule 58 (rel_op -> LESS_OR_EQ_THAN .)
    CTE_STR         reduce using rule 58 (rel_op -> LESS_OR_EQ_THAN .)
    CTE_NUM         reduce using rule 58 (rel_op -> LESS_OR_EQ_THAN .)
    ID              reduce using rule 58 (rel_op -> LESS_OR_EQ_THAN .)
    FALSE           reduce using rule 58 (rel_op -> LESS_OR_EQ_THAN .)
    TRUE            reduce using rule 58 (rel_op -> LESS_OR_EQ_THAN .)


state 121

    (59) rel_op -> DIFFERENT_TO .
    OPEN_PTH        reduce using rule 59 (rel_op -> DIFFERENT_TO .)
    CTE_STR         reduce using rule 59 (rel_op -> DIFFERENT_TO .)
    CTE_NUM         reduce using rule 59 (rel_op -> DIFFERENT_TO .)
    ID              reduce using rule 59 (rel_op -> DIFFERENT_TO .)
    FALSE           reduce using rule 59 (rel_op -> DIFFERENT_TO .)
    TRUE            reduce using rule 59 (rel_op -> DIFFERENT_TO .)


state 122

    (60) rel_op -> MORE_THAN .
    OPEN_PTH        reduce using rule 60 (rel_op -> MORE_THAN .)
    CTE_STR         reduce using rule 60 (rel_op -> MORE_THAN .)
    CTE_NUM         reduce using rule 60 (rel_op -> MORE_THAN .)
    ID              reduce using rule 60 (rel_op -> MORE_THAN .)
    FALSE           reduce using rule 60 (rel_op -> MORE_THAN .)
    TRUE            reduce using rule 60 (rel_op -> MORE_THAN .)


state 123

    (61) rel_op -> LESS_THAN .
    OPEN_PTH        reduce using rule 61 (rel_op -> LESS_THAN .)
    CTE_STR         reduce using rule 61 (rel_op -> LESS_THAN .)
    CTE_NUM         reduce using rule 61 (rel_op -> LESS_THAN .)
    ID              reduce using rule 61 (rel_op -> LESS_THAN .)
    FALSE           reduce using rule 61 (rel_op -> LESS_THAN .)
    TRUE            reduce using rule 61 (rel_op -> LESS_THAN .)


state 124

    (54) log_op -> OR .
    OPEN_PTH        reduce using rule 54 (log_op -> OR .)
    CTE_STR         reduce using rule 54 (log_op -> OR .)
    CTE_NUM         reduce using rule 54 (log_op -> OR .)
    ID              reduce using rule 54 (log_op -> OR .)
    FALSE           reduce using rule 54 (log_op -> OR .)
    TRUE            reduce using rule 54 (log_op -> OR .)


state 125

    (55) log_op -> AND .
    OPEN_PTH        reduce using rule 55 (log_op -> AND .)
    CTE_STR         reduce using rule 55 (log_op -> AND .)
    CTE_NUM         reduce using rule 55 (log_op -> AND .)
    ID              reduce using rule 55 (log_op -> AND .)
    FALSE           reduce using rule 55 (log_op -> AND .)
    TRUE            reduce using rule 55 (log_op -> AND .)


state 126

    (50) art_op -> DIV .
    OPEN_PTH        reduce using rule 50 (art_op -> DIV .)
    CTE_STR         reduce using rule 50 (art_op -> DIV .)
    CTE_NUM         reduce using rule 50 (art_op -> DIV .)
    ID              reduce using rule 50 (art_op -> DIV .)
    FALSE           reduce using rule 50 (art_op -> DIV .)
    TRUE            reduce using rule 50 (art_op -> DIV .)


state 127

    (51) art_op -> MULT .
    OPEN_PTH        reduce using rule 51 (art_op -> MULT .)
    CTE_STR         reduce using rule 51 (art_op -> MULT .)
    CTE_NUM         reduce using rule 51 (art_op -> MULT .)
    ID              reduce using rule 51 (art_op -> MULT .)
    FALSE           reduce using rule 51 (art_op -> MULT .)
    TRUE            reduce using rule 51 (art_op -> MULT .)


state 128

    (52) art_op -> SUB .
    OPEN_PTH        reduce using rule 52 (art_op -> SUB .)
    CTE_STR         reduce using rule 52 (art_op -> SUB .)
    CTE_NUM         reduce using rule 52 (art_op -> SUB .)
    ID              reduce using rule 52 (art_op -> SUB .)
    FALSE           reduce using rule 52 (art_op -> SUB .)
    TRUE            reduce using rule 52 (art_op -> SUB .)


state 129

    (53) art_op -> SUM .
    OPEN_PTH        reduce using rule 53 (art_op -> SUM .)
    CTE_STR         reduce using rule 53 (art_op -> SUM .)
    CTE_NUM         reduce using rule 53 (art_op -> SUM .)
    ID              reduce using rule 53 (art_op -> SUM .)
    FALSE           reduce using rule 53 (art_op -> SUM .)
    TRUE            reduce using rule 53 (art_op -> SUM .)


state 130

    (42) mult_expr -> OPEN_PTH expression CLOSE_PTH .
    PEN_DOWN        reduce using rule 42 (mult_expr -> OPEN_PTH expression CLOSE_PTH .)
    PEN_UP          reduce using rule 42 (mult_expr -> OPEN_PTH expression CLOSE_PTH .)
    WHILE           reduce using rule 42 (mult_expr -> OPEN_PTH expression CLOSE_PTH .)
    IF              reduce using rule 42 (mult_expr -> OPEN_PTH expression CLOSE_PTH .)
    WRITE           reduce using rule 42 (mult_expr -> OPEN_PTH expression CLOSE_PTH .)
    READ            reduce using rule 42 (mult_expr -> OPEN_PTH expression CLOSE_PTH .)
    ID              reduce using rule 42 (mult_expr -> OPEN_PTH expression CLOSE_PTH .)
    BOOL            reduce using rule 42 (mult_expr -> OPEN_PTH expression CLOSE_PTH .)
    WORD            reduce using rule 42 (mult_expr -> OPEN_PTH expression CLOSE_PTH .)
    NUMBER          reduce using rule 42 (mult_expr -> OPEN_PTH expression CLOSE_PTH .)
    CENTER          reduce using rule 42 (mult_expr -> OPEN_PTH expression CLOSE_PTH .)
    FORWARD         reduce using rule 42 (mult_expr -> OPEN_PTH expression CLOSE_PTH .)
    RIGHT           reduce using rule 42 (mult_expr -> OPEN_PTH expression CLOSE_PTH .)
    LEFT            reduce using rule 42 (mult_expr -> OPEN_PTH expression CLOSE_PTH .)
    END             reduce using rule 42 (mult_expr -> OPEN_PTH expression CLOSE_PTH .)
    EQUAL_TO        reduce using rule 42 (mult_expr -> OPEN_PTH expression CLOSE_PTH .)
    MORE_OR_EQ_THAN reduce using rule 42 (mult_expr -> OPEN_PTH expression CLOSE_PTH .)
    LESS_OR_EQ_THAN reduce using rule 42 (mult_expr -> OPEN_PTH expression CLOSE_PTH .)
    DIFFERENT_TO    reduce using rule 42 (mult_expr -> OPEN_PTH expression CLOSE_PTH .)
    MORE_THAN       reduce using rule 42 (mult_expr -> OPEN_PTH expression CLOSE_PTH .)
    LESS_THAN       reduce using rule 42 (mult_expr -> OPEN_PTH expression CLOSE_PTH .)
    OR              reduce using rule 42 (mult_expr -> OPEN_PTH expression CLOSE_PTH .)
    AND             reduce using rule 42 (mult_expr -> OPEN_PTH expression CLOSE_PTH .)
    DIV             reduce using rule 42 (mult_expr -> OPEN_PTH expression CLOSE_PTH .)
    MULT            reduce using rule 42 (mult_expr -> OPEN_PTH expression CLOSE_PTH .)
    SUB             reduce using rule 42 (mult_expr -> OPEN_PTH expression CLOSE_PTH .)
    SUM             reduce using rule 42 (mult_expr -> OPEN_PTH expression CLOSE_PTH .)
    ELSE            reduce using rule 42 (mult_expr -> OPEN_PTH expression CLOSE_PTH .)
    COMMA           reduce using rule 42 (mult_expr -> OPEN_PTH expression CLOSE_PTH .)
    CLOSE_PTH       reduce using rule 42 (mult_expr -> OPEN_PTH expression CLOSE_PTH .)
    CLOSE_SQR       reduce using rule 42 (mult_expr -> OPEN_PTH expression CLOSE_PTH .)


state 131

    (69) array -> OPEN_SQR expression . CLOSE_SQR matrix
    (43) complex_expr -> expression . e1 operator expression e2 quads
    (44) e1 -> .
    CLOSE_SQR       shift and go to state 143
    EQUAL_TO        reduce using rule 44 (e1 -> .)
    MORE_OR_EQ_THAN reduce using rule 44 (e1 -> .)
    LESS_OR_EQ_THAN reduce using rule 44 (e1 -> .)
    DIFFERENT_TO    reduce using rule 44 (e1 -> .)
    MORE_THAN       reduce using rule 44 (e1 -> .)
    LESS_THAN       reduce using rule 44 (e1 -> .)
    OR              reduce using rule 44 (e1 -> .)
    AND             reduce using rule 44 (e1 -> .)
    DIV             reduce using rule 44 (e1 -> .)
    MULT            reduce using rule 44 (e1 -> .)
    SUB             reduce using rule 44 (e1 -> .)
    SUM             reduce using rule 44 (e1 -> .)

    e1                             shift and go to state 95

state 132

    (77) if_stmnt -> IF expression stmnt else_stmnt .
    PEN_DOWN        reduce using rule 77 (if_stmnt -> IF expression stmnt else_stmnt .)
    PEN_UP          reduce using rule 77 (if_stmnt -> IF expression stmnt else_stmnt .)
    WHILE           reduce using rule 77 (if_stmnt -> IF expression stmnt else_stmnt .)
    IF              reduce using rule 77 (if_stmnt -> IF expression stmnt else_stmnt .)
    WRITE           reduce using rule 77 (if_stmnt -> IF expression stmnt else_stmnt .)
    READ            reduce using rule 77 (if_stmnt -> IF expression stmnt else_stmnt .)
    ID              reduce using rule 77 (if_stmnt -> IF expression stmnt else_stmnt .)
    BOOL            reduce using rule 77 (if_stmnt -> IF expression stmnt else_stmnt .)
    WORD            reduce using rule 77 (if_stmnt -> IF expression stmnt else_stmnt .)
    NUMBER          reduce using rule 77 (if_stmnt -> IF expression stmnt else_stmnt .)
    CENTER          reduce using rule 77 (if_stmnt -> IF expression stmnt else_stmnt .)
    FORWARD         reduce using rule 77 (if_stmnt -> IF expression stmnt else_stmnt .)
    RIGHT           reduce using rule 77 (if_stmnt -> IF expression stmnt else_stmnt .)
    LEFT            reduce using rule 77 (if_stmnt -> IF expression stmnt else_stmnt .)
    END             reduce using rule 77 (if_stmnt -> IF expression stmnt else_stmnt .)
    ELSE            reduce using rule 77 (if_stmnt -> IF expression stmnt else_stmnt .)


state 133

    (78) else_stmnt -> END .
    PEN_DOWN        reduce using rule 78 (else_stmnt -> END .)
    PEN_UP          reduce using rule 78 (else_stmnt -> END .)
    WHILE           reduce using rule 78 (else_stmnt -> END .)
    IF              reduce using rule 78 (else_stmnt -> END .)
    WRITE           reduce using rule 78 (else_stmnt -> END .)
    READ            reduce using rule 78 (else_stmnt -> END .)
    ID              reduce using rule 78 (else_stmnt -> END .)
    BOOL            reduce using rule 78 (else_stmnt -> END .)
    WORD            reduce using rule 78 (else_stmnt -> END .)
    NUMBER          reduce using rule 78 (else_stmnt -> END .)
    CENTER          reduce using rule 78 (else_stmnt -> END .)
    FORWARD         reduce using rule 78 (else_stmnt -> END .)
    RIGHT           reduce using rule 78 (else_stmnt -> END .)
    LEFT            reduce using rule 78 (else_stmnt -> END .)
    END             reduce using rule 78 (else_stmnt -> END .)
    ELSE            reduce using rule 78 (else_stmnt -> END .)


state 134

    (79) else_stmnt -> ELSE . stmnt END
    (19) stmnt -> . empty
    (20) stmnt -> . var_declaration_func stmnt
    (21) stmnt -> . pen_func stmnt
    (22) stmnt -> . move_func stmnt
    (23) stmnt -> . while_stmnt stmnt
    (24) stmnt -> . if_stmnt stmnt
    (25) stmnt -> . write stmnt
    (26) stmnt -> . read stmnt
    (27) stmnt -> . func_call stmnt
    (28) stmnt -> . var_assignation stmnt
    (89) empty -> .
    (29) var_declaration_func -> . var_type ID multiple_vars
    (86) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (87) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (81) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (80) while_stmnt -> . WHILE expression stmnt END
    (77) if_stmnt -> . IF expression stmnt else_stmnt
    (74) write -> . WRITE OPEN_PTH expression multiple_expression CLOSE_PTH
    (66) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (62) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (30) var_assignation -> . ID ASSIGN expression
    (31) var_assignation -> . ID ASSIGN var_cte
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    (82) move_type -> . CENTER
    (83) move_type -> . FORWARD
    (84) move_type -> . RIGHT
    (85) move_type -> . LEFT
    END             reduce using rule 89 (empty -> .)
    PEN_DOWN        shift and go to state 37
    PEN_UP          shift and go to state 38
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    WRITE           shift and go to state 42
    READ            shift and go to state 43
    ID              shift and go to state 36
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9
    CENTER          shift and go to state 44
    FORWARD         shift and go to state 45
    RIGHT           shift and go to state 46
    LEFT            shift and go to state 47

    stmnt                          shift and go to state 144
    empty                          shift and go to state 25
    var_declaration_func           shift and go to state 26
    pen_func                       shift and go to state 27
    move_func                      shift and go to state 28
    while_stmnt                    shift and go to state 29
    if_stmnt                       shift and go to state 30
    write                          shift and go to state 31
    read                           shift and go to state 32
    func_call                      shift and go to state 33
    var_assignation                shift and go to state 34
    var_type                       shift and go to state 35
    move_type                      shift and go to state 39

state 135

    (74) write -> WRITE OPEN_PTH expression multiple_expression . CLOSE_PTH
    CLOSE_PTH       shift and go to state 145


state 136

    (75) multiple_expression -> empty .
    CLOSE_PTH       reduce using rule 75 (multiple_expression -> empty .)


state 137

    (76) multiple_expression -> COMMA . expression
    (39) expression -> . mult_expr
    (40) expression -> . var_cte
    (41) expression -> . complex_expr
    (42) mult_expr -> . OPEN_PTH expression CLOSE_PTH
    (32) var_cte -> . func_call
    (33) var_cte -> . cte_bool
    (34) var_cte -> . CTE_STR
    (35) var_cte -> . CTE_NUM
    (36) var_cte -> . variable
    (43) complex_expr -> . expression e1 operator expression e2 quads
    (62) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (37) cte_bool -> . FALSE
    (38) cte_bool -> . TRUE
    (67) variable -> . ID array
    OPEN_PTH        shift and go to state 70
    CTE_STR         shift and go to state 73
    CTE_NUM         shift and go to state 74
    ID              shift and go to state 76
    FALSE           shift and go to state 77
    TRUE            shift and go to state 78

    expression                     shift and go to state 146
    mult_expr                      shift and go to state 67
    var_cte                        shift and go to state 68
    complex_expr                   shift and go to state 69
    func_call                      shift and go to state 71
    cte_bool                       shift and go to state 72
    variable                       shift and go to state 75

state 138

    (66) read -> READ OPEN_PTH variable multiple_vars . CLOSE_PTH
    CLOSE_PTH       shift and go to state 147


state 139

    (10) func_declaration -> func_type FUNC ID OPEN_PTH parameter CLOSE_PTH . stmnt END
    (19) stmnt -> . empty
    (20) stmnt -> . var_declaration_func stmnt
    (21) stmnt -> . pen_func stmnt
    (22) stmnt -> . move_func stmnt
    (23) stmnt -> . while_stmnt stmnt
    (24) stmnt -> . if_stmnt stmnt
    (25) stmnt -> . write stmnt
    (26) stmnt -> . read stmnt
    (27) stmnt -> . func_call stmnt
    (28) stmnt -> . var_assignation stmnt
    (89) empty -> .
    (29) var_declaration_func -> . var_type ID multiple_vars
    (86) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (87) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (81) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (80) while_stmnt -> . WHILE expression stmnt END
    (77) if_stmnt -> . IF expression stmnt else_stmnt
    (74) write -> . WRITE OPEN_PTH expression multiple_expression CLOSE_PTH
    (66) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (62) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (30) var_assignation -> . ID ASSIGN expression
    (31) var_assignation -> . ID ASSIGN var_cte
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    (82) move_type -> . CENTER
    (83) move_type -> . FORWARD
    (84) move_type -> . RIGHT
    (85) move_type -> . LEFT
    END             reduce using rule 89 (empty -> .)
    PEN_DOWN        shift and go to state 37
    PEN_UP          shift and go to state 38
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    WRITE           shift and go to state 42
    READ            shift and go to state 43
    ID              shift and go to state 36
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9
    CENTER          shift and go to state 44
    FORWARD         shift and go to state 45
    RIGHT           shift and go to state 46
    LEFT            shift and go to state 47

    stmnt                          shift and go to state 148
    empty                          shift and go to state 25
    var_declaration_func           shift and go to state 26
    pen_func                       shift and go to state 27
    move_func                      shift and go to state 28
    while_stmnt                    shift and go to state 29
    if_stmnt                       shift and go to state 30
    write                          shift and go to state 31
    read                           shift and go to state 32
    func_call                      shift and go to state 33
    var_assignation                shift and go to state 34
    var_type                       shift and go to state 35
    move_type                      shift and go to state 39

state 140

    (16) parameter -> var_type ID . multiple_parameters
    (17) multiple_parameters -> . empty
    (18) multiple_parameters -> . COMMA parameter
    (89) empty -> .
    COMMA           shift and go to state 151
    CLOSE_PTH       reduce using rule 89 (empty -> .)

    multiple_parameters            shift and go to state 149
    empty                          shift and go to state 150

state 141

    (65) multiple_fc_param -> COMMA func_call_param .
    CLOSE_PTH       reduce using rule 65 (multiple_fc_param -> COMMA func_call_param .)


state 142

    (43) complex_expr -> expression e1 operator expression . e2 quads
    (43) complex_expr -> expression . e1 operator expression e2 quads
    (45) e2 -> .
    (44) e1 -> .
  ! reduce/reduce conflict for EQUAL_TO resolved using rule 44 (e1 -> .)
  ! reduce/reduce conflict for MORE_OR_EQ_THAN resolved using rule 44 (e1 -> .)
  ! reduce/reduce conflict for LESS_OR_EQ_THAN resolved using rule 44 (e1 -> .)
  ! reduce/reduce conflict for DIFFERENT_TO resolved using rule 44 (e1 -> .)
  ! reduce/reduce conflict for MORE_THAN resolved using rule 44 (e1 -> .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 44 (e1 -> .)
  ! reduce/reduce conflict for OR resolved using rule 44 (e1 -> .)
  ! reduce/reduce conflict for AND resolved using rule 44 (e1 -> .)
  ! reduce/reduce conflict for DIV resolved using rule 44 (e1 -> .)
  ! reduce/reduce conflict for MULT resolved using rule 44 (e1 -> .)
  ! reduce/reduce conflict for SUB resolved using rule 44 (e1 -> .)
  ! reduce/reduce conflict for SUM resolved using rule 44 (e1 -> .)
    PEN_DOWN        reduce using rule 45 (e2 -> .)
    PEN_UP          reduce using rule 45 (e2 -> .)
    WHILE           reduce using rule 45 (e2 -> .)
    IF              reduce using rule 45 (e2 -> .)
    WRITE           reduce using rule 45 (e2 -> .)
    READ            reduce using rule 45 (e2 -> .)
    ID              reduce using rule 45 (e2 -> .)
    BOOL            reduce using rule 45 (e2 -> .)
    WORD            reduce using rule 45 (e2 -> .)
    NUMBER          reduce using rule 45 (e2 -> .)
    CENTER          reduce using rule 45 (e2 -> .)
    FORWARD         reduce using rule 45 (e2 -> .)
    RIGHT           reduce using rule 45 (e2 -> .)
    LEFT            reduce using rule 45 (e2 -> .)
    END             reduce using rule 45 (e2 -> .)
    ELSE            reduce using rule 45 (e2 -> .)
    COMMA           reduce using rule 45 (e2 -> .)
    CLOSE_PTH       reduce using rule 45 (e2 -> .)
    CLOSE_SQR       reduce using rule 45 (e2 -> .)
    EQUAL_TO        reduce using rule 44 (e1 -> .)
    MORE_OR_EQ_THAN reduce using rule 44 (e1 -> .)
    LESS_OR_EQ_THAN reduce using rule 44 (e1 -> .)
    DIFFERENT_TO    reduce using rule 44 (e1 -> .)
    MORE_THAN       reduce using rule 44 (e1 -> .)
    LESS_THAN       reduce using rule 44 (e1 -> .)
    OR              reduce using rule 44 (e1 -> .)
    AND             reduce using rule 44 (e1 -> .)
    DIV             reduce using rule 44 (e1 -> .)
    MULT            reduce using rule 44 (e1 -> .)
    SUB             reduce using rule 44 (e1 -> .)
    SUM             reduce using rule 44 (e1 -> .)

    e1                             shift and go to state 95
    e2                             shift and go to state 152

state 143

    (69) array -> OPEN_SQR expression CLOSE_SQR . matrix
    (70) matrix -> . empty
    (71) matrix -> . OPEN_SQR expression CLOSE_SQR
    (89) empty -> .
    OPEN_SQR        shift and go to state 153
    PEN_DOWN        reduce using rule 89 (empty -> .)
    PEN_UP          reduce using rule 89 (empty -> .)
    WHILE           reduce using rule 89 (empty -> .)
    IF              reduce using rule 89 (empty -> .)
    WRITE           reduce using rule 89 (empty -> .)
    READ            reduce using rule 89 (empty -> .)
    ID              reduce using rule 89 (empty -> .)
    BOOL            reduce using rule 89 (empty -> .)
    WORD            reduce using rule 89 (empty -> .)
    NUMBER          reduce using rule 89 (empty -> .)
    CENTER          reduce using rule 89 (empty -> .)
    FORWARD         reduce using rule 89 (empty -> .)
    RIGHT           reduce using rule 89 (empty -> .)
    LEFT            reduce using rule 89 (empty -> .)
    END             reduce using rule 89 (empty -> .)
    EQUAL_TO        reduce using rule 89 (empty -> .)
    MORE_OR_EQ_THAN reduce using rule 89 (empty -> .)
    LESS_OR_EQ_THAN reduce using rule 89 (empty -> .)
    DIFFERENT_TO    reduce using rule 89 (empty -> .)
    MORE_THAN       reduce using rule 89 (empty -> .)
    LESS_THAN       reduce using rule 89 (empty -> .)
    OR              reduce using rule 89 (empty -> .)
    AND             reduce using rule 89 (empty -> .)
    DIV             reduce using rule 89 (empty -> .)
    MULT            reduce using rule 89 (empty -> .)
    SUB             reduce using rule 89 (empty -> .)
    SUM             reduce using rule 89 (empty -> .)
    ELSE            reduce using rule 89 (empty -> .)
    COMMA           reduce using rule 89 (empty -> .)
    CLOSE_PTH       reduce using rule 89 (empty -> .)
    CLOSE_SQR       reduce using rule 89 (empty -> .)

    matrix                         shift and go to state 154
    empty                          shift and go to state 155

state 144

    (79) else_stmnt -> ELSE stmnt . END
    END             shift and go to state 156


state 145

    (74) write -> WRITE OPEN_PTH expression multiple_expression CLOSE_PTH .
    PEN_DOWN        reduce using rule 74 (write -> WRITE OPEN_PTH expression multiple_expression CLOSE_PTH .)
    PEN_UP          reduce using rule 74 (write -> WRITE OPEN_PTH expression multiple_expression CLOSE_PTH .)
    WHILE           reduce using rule 74 (write -> WRITE OPEN_PTH expression multiple_expression CLOSE_PTH .)
    IF              reduce using rule 74 (write -> WRITE OPEN_PTH expression multiple_expression CLOSE_PTH .)
    WRITE           reduce using rule 74 (write -> WRITE OPEN_PTH expression multiple_expression CLOSE_PTH .)
    READ            reduce using rule 74 (write -> WRITE OPEN_PTH expression multiple_expression CLOSE_PTH .)
    ID              reduce using rule 74 (write -> WRITE OPEN_PTH expression multiple_expression CLOSE_PTH .)
    BOOL            reduce using rule 74 (write -> WRITE OPEN_PTH expression multiple_expression CLOSE_PTH .)
    WORD            reduce using rule 74 (write -> WRITE OPEN_PTH expression multiple_expression CLOSE_PTH .)
    NUMBER          reduce using rule 74 (write -> WRITE OPEN_PTH expression multiple_expression CLOSE_PTH .)
    CENTER          reduce using rule 74 (write -> WRITE OPEN_PTH expression multiple_expression CLOSE_PTH .)
    FORWARD         reduce using rule 74 (write -> WRITE OPEN_PTH expression multiple_expression CLOSE_PTH .)
    RIGHT           reduce using rule 74 (write -> WRITE OPEN_PTH expression multiple_expression CLOSE_PTH .)
    LEFT            reduce using rule 74 (write -> WRITE OPEN_PTH expression multiple_expression CLOSE_PTH .)
    END             reduce using rule 74 (write -> WRITE OPEN_PTH expression multiple_expression CLOSE_PTH .)
    ELSE            reduce using rule 74 (write -> WRITE OPEN_PTH expression multiple_expression CLOSE_PTH .)


state 146

    (76) multiple_expression -> COMMA expression .
    (43) complex_expr -> expression . e1 operator expression e2 quads
    (44) e1 -> .
    CLOSE_PTH       reduce using rule 76 (multiple_expression -> COMMA expression .)
    EQUAL_TO        reduce using rule 44 (e1 -> .)
    MORE_OR_EQ_THAN reduce using rule 44 (e1 -> .)
    LESS_OR_EQ_THAN reduce using rule 44 (e1 -> .)
    DIFFERENT_TO    reduce using rule 44 (e1 -> .)
    MORE_THAN       reduce using rule 44 (e1 -> .)
    LESS_THAN       reduce using rule 44 (e1 -> .)
    OR              reduce using rule 44 (e1 -> .)
    AND             reduce using rule 44 (e1 -> .)
    DIV             reduce using rule 44 (e1 -> .)
    MULT            reduce using rule 44 (e1 -> .)
    SUB             reduce using rule 44 (e1 -> .)
    SUM             reduce using rule 44 (e1 -> .)

    e1                             shift and go to state 95

state 147

    (66) read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .
    PEN_DOWN        reduce using rule 66 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    PEN_UP          reduce using rule 66 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    WHILE           reduce using rule 66 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    IF              reduce using rule 66 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    WRITE           reduce using rule 66 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    READ            reduce using rule 66 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    ID              reduce using rule 66 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    BOOL            reduce using rule 66 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    WORD            reduce using rule 66 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    NUMBER          reduce using rule 66 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    CENTER          reduce using rule 66 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    FORWARD         reduce using rule 66 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    RIGHT           reduce using rule 66 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    LEFT            reduce using rule 66 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    END             reduce using rule 66 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    ELSE            reduce using rule 66 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)


state 148

    (10) func_declaration -> func_type FUNC ID OPEN_PTH parameter CLOSE_PTH stmnt . END
    END             shift and go to state 157


state 149

    (16) parameter -> var_type ID multiple_parameters .
    CLOSE_PTH       reduce using rule 16 (parameter -> var_type ID multiple_parameters .)


state 150

    (17) multiple_parameters -> empty .
    CLOSE_PTH       reduce using rule 17 (multiple_parameters -> empty .)


state 151

    (18) multiple_parameters -> COMMA . parameter
    (15) parameter -> . empty
    (16) parameter -> . var_type ID multiple_parameters
    (89) empty -> .
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    CLOSE_PTH       reduce using rule 89 (empty -> .)
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9

    parameter                      shift and go to state 158
    empty                          shift and go to state 105
    var_type                       shift and go to state 106

state 152

    (43) complex_expr -> expression e1 operator expression e2 . quads
    (46) quads -> .
    PEN_DOWN        reduce using rule 46 (quads -> .)
    PEN_UP          reduce using rule 46 (quads -> .)
    WHILE           reduce using rule 46 (quads -> .)
    IF              reduce using rule 46 (quads -> .)
    WRITE           reduce using rule 46 (quads -> .)
    READ            reduce using rule 46 (quads -> .)
    ID              reduce using rule 46 (quads -> .)
    BOOL            reduce using rule 46 (quads -> .)
    WORD            reduce using rule 46 (quads -> .)
    NUMBER          reduce using rule 46 (quads -> .)
    CENTER          reduce using rule 46 (quads -> .)
    FORWARD         reduce using rule 46 (quads -> .)
    RIGHT           reduce using rule 46 (quads -> .)
    LEFT            reduce using rule 46 (quads -> .)
    END             reduce using rule 46 (quads -> .)
    EQUAL_TO        reduce using rule 46 (quads -> .)
    MORE_OR_EQ_THAN reduce using rule 46 (quads -> .)
    LESS_OR_EQ_THAN reduce using rule 46 (quads -> .)
    DIFFERENT_TO    reduce using rule 46 (quads -> .)
    MORE_THAN       reduce using rule 46 (quads -> .)
    LESS_THAN       reduce using rule 46 (quads -> .)
    OR              reduce using rule 46 (quads -> .)
    AND             reduce using rule 46 (quads -> .)
    DIV             reduce using rule 46 (quads -> .)
    MULT            reduce using rule 46 (quads -> .)
    SUB             reduce using rule 46 (quads -> .)
    SUM             reduce using rule 46 (quads -> .)
    ELSE            reduce using rule 46 (quads -> .)
    COMMA           reduce using rule 46 (quads -> .)
    CLOSE_PTH       reduce using rule 46 (quads -> .)
    CLOSE_SQR       reduce using rule 46 (quads -> .)

    quads                          shift and go to state 159

state 153

    (71) matrix -> OPEN_SQR . expression CLOSE_SQR
    (39) expression -> . mult_expr
    (40) expression -> . var_cte
    (41) expression -> . complex_expr
    (42) mult_expr -> . OPEN_PTH expression CLOSE_PTH
    (32) var_cte -> . func_call
    (33) var_cte -> . cte_bool
    (34) var_cte -> . CTE_STR
    (35) var_cte -> . CTE_NUM
    (36) var_cte -> . variable
    (43) complex_expr -> . expression e1 operator expression e2 quads
    (62) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (37) cte_bool -> . FALSE
    (38) cte_bool -> . TRUE
    (67) variable -> . ID array
    OPEN_PTH        shift and go to state 70
    CTE_STR         shift and go to state 73
    CTE_NUM         shift and go to state 74
    ID              shift and go to state 76
    FALSE           shift and go to state 77
    TRUE            shift and go to state 78

    expression                     shift and go to state 160
    mult_expr                      shift and go to state 67
    var_cte                        shift and go to state 68
    complex_expr                   shift and go to state 69
    func_call                      shift and go to state 71
    cte_bool                       shift and go to state 72
    variable                       shift and go to state 75

state 154

    (69) array -> OPEN_SQR expression CLOSE_SQR matrix .
    PEN_DOWN        reduce using rule 69 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    PEN_UP          reduce using rule 69 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    WHILE           reduce using rule 69 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    IF              reduce using rule 69 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    WRITE           reduce using rule 69 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    READ            reduce using rule 69 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    ID              reduce using rule 69 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    BOOL            reduce using rule 69 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    WORD            reduce using rule 69 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    NUMBER          reduce using rule 69 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    CENTER          reduce using rule 69 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    FORWARD         reduce using rule 69 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    RIGHT           reduce using rule 69 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    LEFT            reduce using rule 69 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    END             reduce using rule 69 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    EQUAL_TO        reduce using rule 69 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    MORE_OR_EQ_THAN reduce using rule 69 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    LESS_OR_EQ_THAN reduce using rule 69 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    DIFFERENT_TO    reduce using rule 69 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    MORE_THAN       reduce using rule 69 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    LESS_THAN       reduce using rule 69 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    OR              reduce using rule 69 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    AND             reduce using rule 69 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    DIV             reduce using rule 69 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    MULT            reduce using rule 69 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    SUB             reduce using rule 69 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    SUM             reduce using rule 69 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    ELSE            reduce using rule 69 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    COMMA           reduce using rule 69 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    CLOSE_PTH       reduce using rule 69 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    CLOSE_SQR       reduce using rule 69 (array -> OPEN_SQR expression CLOSE_SQR matrix .)


state 155

    (70) matrix -> empty .
    PEN_DOWN        reduce using rule 70 (matrix -> empty .)
    PEN_UP          reduce using rule 70 (matrix -> empty .)
    WHILE           reduce using rule 70 (matrix -> empty .)
    IF              reduce using rule 70 (matrix -> empty .)
    WRITE           reduce using rule 70 (matrix -> empty .)
    READ            reduce using rule 70 (matrix -> empty .)
    ID              reduce using rule 70 (matrix -> empty .)
    BOOL            reduce using rule 70 (matrix -> empty .)
    WORD            reduce using rule 70 (matrix -> empty .)
    NUMBER          reduce using rule 70 (matrix -> empty .)
    CENTER          reduce using rule 70 (matrix -> empty .)
    FORWARD         reduce using rule 70 (matrix -> empty .)
    RIGHT           reduce using rule 70 (matrix -> empty .)
    LEFT            reduce using rule 70 (matrix -> empty .)
    END             reduce using rule 70 (matrix -> empty .)
    EQUAL_TO        reduce using rule 70 (matrix -> empty .)
    MORE_OR_EQ_THAN reduce using rule 70 (matrix -> empty .)
    LESS_OR_EQ_THAN reduce using rule 70 (matrix -> empty .)
    DIFFERENT_TO    reduce using rule 70 (matrix -> empty .)
    MORE_THAN       reduce using rule 70 (matrix -> empty .)
    LESS_THAN       reduce using rule 70 (matrix -> empty .)
    OR              reduce using rule 70 (matrix -> empty .)
    AND             reduce using rule 70 (matrix -> empty .)
    DIV             reduce using rule 70 (matrix -> empty .)
    MULT            reduce using rule 70 (matrix -> empty .)
    SUB             reduce using rule 70 (matrix -> empty .)
    SUM             reduce using rule 70 (matrix -> empty .)
    ELSE            reduce using rule 70 (matrix -> empty .)
    COMMA           reduce using rule 70 (matrix -> empty .)
    CLOSE_PTH       reduce using rule 70 (matrix -> empty .)
    CLOSE_SQR       reduce using rule 70 (matrix -> empty .)


state 156

    (79) else_stmnt -> ELSE stmnt END .
    PEN_DOWN        reduce using rule 79 (else_stmnt -> ELSE stmnt END .)
    PEN_UP          reduce using rule 79 (else_stmnt -> ELSE stmnt END .)
    WHILE           reduce using rule 79 (else_stmnt -> ELSE stmnt END .)
    IF              reduce using rule 79 (else_stmnt -> ELSE stmnt END .)
    WRITE           reduce using rule 79 (else_stmnt -> ELSE stmnt END .)
    READ            reduce using rule 79 (else_stmnt -> ELSE stmnt END .)
    ID              reduce using rule 79 (else_stmnt -> ELSE stmnt END .)
    BOOL            reduce using rule 79 (else_stmnt -> ELSE stmnt END .)
    WORD            reduce using rule 79 (else_stmnt -> ELSE stmnt END .)
    NUMBER          reduce using rule 79 (else_stmnt -> ELSE stmnt END .)
    CENTER          reduce using rule 79 (else_stmnt -> ELSE stmnt END .)
    FORWARD         reduce using rule 79 (else_stmnt -> ELSE stmnt END .)
    RIGHT           reduce using rule 79 (else_stmnt -> ELSE stmnt END .)
    LEFT            reduce using rule 79 (else_stmnt -> ELSE stmnt END .)
    END             reduce using rule 79 (else_stmnt -> ELSE stmnt END .)
    ELSE            reduce using rule 79 (else_stmnt -> ELSE stmnt END .)


state 157

    (10) func_declaration -> func_type FUNC ID OPEN_PTH parameter CLOSE_PTH stmnt END .
    MAIN            reduce using rule 10 (func_declaration -> func_type FUNC ID OPEN_PTH parameter CLOSE_PTH stmnt END .)


state 158

    (18) multiple_parameters -> COMMA parameter .
    CLOSE_PTH       reduce using rule 18 (multiple_parameters -> COMMA parameter .)


state 159

    (43) complex_expr -> expression e1 operator expression e2 quads .
    PEN_DOWN        reduce using rule 43 (complex_expr -> expression e1 operator expression e2 quads .)
    PEN_UP          reduce using rule 43 (complex_expr -> expression e1 operator expression e2 quads .)
    WHILE           reduce using rule 43 (complex_expr -> expression e1 operator expression e2 quads .)
    IF              reduce using rule 43 (complex_expr -> expression e1 operator expression e2 quads .)
    WRITE           reduce using rule 43 (complex_expr -> expression e1 operator expression e2 quads .)
    READ            reduce using rule 43 (complex_expr -> expression e1 operator expression e2 quads .)
    ID              reduce using rule 43 (complex_expr -> expression e1 operator expression e2 quads .)
    BOOL            reduce using rule 43 (complex_expr -> expression e1 operator expression e2 quads .)
    WORD            reduce using rule 43 (complex_expr -> expression e1 operator expression e2 quads .)
    NUMBER          reduce using rule 43 (complex_expr -> expression e1 operator expression e2 quads .)
    CENTER          reduce using rule 43 (complex_expr -> expression e1 operator expression e2 quads .)
    FORWARD         reduce using rule 43 (complex_expr -> expression e1 operator expression e2 quads .)
    RIGHT           reduce using rule 43 (complex_expr -> expression e1 operator expression e2 quads .)
    LEFT            reduce using rule 43 (complex_expr -> expression e1 operator expression e2 quads .)
    END             reduce using rule 43 (complex_expr -> expression e1 operator expression e2 quads .)
    EQUAL_TO        reduce using rule 43 (complex_expr -> expression e1 operator expression e2 quads .)
    MORE_OR_EQ_THAN reduce using rule 43 (complex_expr -> expression e1 operator expression e2 quads .)
    LESS_OR_EQ_THAN reduce using rule 43 (complex_expr -> expression e1 operator expression e2 quads .)
    DIFFERENT_TO    reduce using rule 43 (complex_expr -> expression e1 operator expression e2 quads .)
    MORE_THAN       reduce using rule 43 (complex_expr -> expression e1 operator expression e2 quads .)
    LESS_THAN       reduce using rule 43 (complex_expr -> expression e1 operator expression e2 quads .)
    OR              reduce using rule 43 (complex_expr -> expression e1 operator expression e2 quads .)
    AND             reduce using rule 43 (complex_expr -> expression e1 operator expression e2 quads .)
    DIV             reduce using rule 43 (complex_expr -> expression e1 operator expression e2 quads .)
    MULT            reduce using rule 43 (complex_expr -> expression e1 operator expression e2 quads .)
    SUB             reduce using rule 43 (complex_expr -> expression e1 operator expression e2 quads .)
    SUM             reduce using rule 43 (complex_expr -> expression e1 operator expression e2 quads .)
    ELSE            reduce using rule 43 (complex_expr -> expression e1 operator expression e2 quads .)
    COMMA           reduce using rule 43 (complex_expr -> expression e1 operator expression e2 quads .)
    CLOSE_PTH       reduce using rule 43 (complex_expr -> expression e1 operator expression e2 quads .)
    CLOSE_SQR       reduce using rule 43 (complex_expr -> expression e1 operator expression e2 quads .)


state 160

    (71) matrix -> OPEN_SQR expression . CLOSE_SQR
    (43) complex_expr -> expression . e1 operator expression e2 quads
    (44) e1 -> .
    CLOSE_SQR       shift and go to state 161
    EQUAL_TO        reduce using rule 44 (e1 -> .)
    MORE_OR_EQ_THAN reduce using rule 44 (e1 -> .)
    LESS_OR_EQ_THAN reduce using rule 44 (e1 -> .)
    DIFFERENT_TO    reduce using rule 44 (e1 -> .)
    MORE_THAN       reduce using rule 44 (e1 -> .)
    LESS_THAN       reduce using rule 44 (e1 -> .)
    OR              reduce using rule 44 (e1 -> .)
    AND             reduce using rule 44 (e1 -> .)
    DIV             reduce using rule 44 (e1 -> .)
    MULT            reduce using rule 44 (e1 -> .)
    SUB             reduce using rule 44 (e1 -> .)
    SUM             reduce using rule 44 (e1 -> .)

    e1                             shift and go to state 95

state 161

    (71) matrix -> OPEN_SQR expression CLOSE_SQR .
    PEN_DOWN        reduce using rule 71 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    PEN_UP          reduce using rule 71 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    WHILE           reduce using rule 71 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    IF              reduce using rule 71 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    WRITE           reduce using rule 71 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    READ            reduce using rule 71 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    ID              reduce using rule 71 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    BOOL            reduce using rule 71 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    WORD            reduce using rule 71 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    NUMBER          reduce using rule 71 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    CENTER          reduce using rule 71 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    FORWARD         reduce using rule 71 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    RIGHT           reduce using rule 71 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    LEFT            reduce using rule 71 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    END             reduce using rule 71 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    EQUAL_TO        reduce using rule 71 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    MORE_OR_EQ_THAN reduce using rule 71 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    LESS_OR_EQ_THAN reduce using rule 71 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    DIFFERENT_TO    reduce using rule 71 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    MORE_THAN       reduce using rule 71 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    LESS_THAN       reduce using rule 71 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    OR              reduce using rule 71 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    AND             reduce using rule 71 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    DIV             reduce using rule 71 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    MULT            reduce using rule 71 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    SUB             reduce using rule 71 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    SUM             reduce using rule 71 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    ELSE            reduce using rule 71 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    COMMA           reduce using rule 71 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    CLOSE_PTH       reduce using rule 71 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    CLOSE_SQR       reduce using rule 71 (matrix -> OPEN_SQR expression CLOSE_SQR .)


Conflicts:

reduce/reduce conflict in state 90 resolved using rule var_assignation -> ID ASSIGN var_cte
rejected rule (expression -> var_cte) in state 90
reduce/reduce conflict in state 142 resolved using rule e1 -> <empty>
rejected rule (e2 -> <empty>) in state 142