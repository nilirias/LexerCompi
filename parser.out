Grammar:

Rule 0     S' -> program
Rule 1     program -> DRAWING ID declaration
Rule 2     declaration -> var_declaration func_declaration main
Rule 3     var_declaration -> empty
Rule 4     var_declaration -> var_type ID multiple_var
Rule 5     multiple_var -> empty
Rule 6     multiple_var -> COMMA ID multiple_var
Rule 7     var_type -> BOOL
Rule 8     var_type -> WORD
Rule 9     var_type -> NUMBER
Rule 10    func_declaration -> empty
Rule 11    func_declaration -> func_type FUNC ID OPEN_PTH parameter CLOSE_PTH stmnt END
Rule 12    func_type -> BOOL
Rule 13    func_type -> WORD
Rule 14    func_type -> NUMBER
Rule 15    func_type -> VOID
Rule 16    parameter -> empty
Rule 17    parameter -> var_type ID multiple_parameters
Rule 18    multiple_parameters -> empty
Rule 19    multiple_parameters -> COMMA parameter
Rule 20    stmnt -> empty
Rule 21    stmnt -> var_declaration_func stmnt
Rule 22    stmnt -> pen_func stmnt
Rule 23    stmnt -> move_func stmnt
Rule 24    stmnt -> while_stmnt stmnt
Rule 25    stmnt -> if_stmnt stmnt
Rule 26    stmnt -> write stmnt
Rule 27    stmnt -> read stmnt
Rule 28    stmnt -> func_call stmnt
Rule 29    stmnt -> var_assignation stmnt
Rule 30    var_declaration_func -> var_type ID multiple_vars
Rule 31    var_assignation -> id e5 assign e6 expression q3
Rule 32    e5 -> <empty>
Rule 33    e6 -> <empty>
Rule 34    id -> ID
Rule 35    assign -> ASSIGN
Rule 36    var_cte -> func_call
Rule 37    var_cte -> cte_bool
Rule 38    var_cte -> CTE_STR
Rule 39    var_cte -> CTE_NUM
Rule 40    var_cte -> variable
Rule 41    cte_bool -> FALSE
Rule 42    cte_bool -> TRUE
Rule 43    expression -> exp
Rule 44    expression -> exp rel_op e4 exp
Rule 45    e4 -> <empty>
Rule 46    exp -> termino q1
Rule 47    exp -> termino term_op e3 termino q1
Rule 48    e3 -> <empty>
Rule 49    q2 -> <empty>
Rule 50    term_op -> SUB
Rule 51    term_op -> SUM
Rule 52    termino -> factor q2
Rule 53    termino -> factor fact_op e2 factor q2
Rule 54    q1 -> <empty>
Rule 55    q3 -> <empty>
Rule 56    e2 -> <empty>
Rule 57    fact_op -> DIV
Rule 58    fact_op -> MULT
Rule 59    factor -> var_cte e1
Rule 60    factor -> expression
Rule 61    factor -> open_pth expression close_pth
Rule 62    e1 -> <empty>
Rule 63    open_pth -> OPEN_PTH
Rule 64    close_pth -> CLOSE_PTH
Rule 65    log_op -> OR
Rule 66    log_op -> AND
Rule 67    rel_op -> EQUAL_TO
Rule 68    rel_op -> MORE_OR_EQ_THAN
Rule 69    rel_op -> LESS_OR_EQ_THAN
Rule 70    rel_op -> DIFFERENT_TO
Rule 71    rel_op -> MORE_THAN
Rule 72    rel_op -> LESS_THAN
Rule 73    func_call -> ID OPEN_PTH func_call_param CLOSE_PTH
Rule 74    func_call_param -> expression multiple_fc_param
Rule 75    multiple_fc_param -> empty
Rule 76    multiple_fc_param -> COMMA func_call_param
Rule 77    read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH
Rule 78    variable -> ID array
Rule 79    array -> empty
Rule 80    array -> OPEN_SQR expression CLOSE_SQR matrix
Rule 81    matrix -> empty
Rule 82    matrix -> OPEN_SQR expression CLOSE_SQR
Rule 83    multiple_vars -> empty
Rule 84    multiple_vars -> COMMA variable
Rule 85    write -> WRITE OPEN_PTH expression CLOSE_PTH
Rule 86    if_stmnt -> IF con_expression stmnt else_stmnt
Rule 87    else_stmnt -> END
Rule 88    else_stmnt -> ELSE stmnt END
Rule 89    while_stmnt -> WHILE con_expression stmnt END
Rule 90    con_expression -> expression log_op expression
Rule 91    move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH
Rule 92    move_type -> CENTER
Rule 93    move_type -> FORWARD
Rule 94    move_type -> RIGHT
Rule 95    move_type -> LEFT
Rule 96    pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH
Rule 97    pen_func -> PEN_UP OPEN_PTH CLOSE_PTH
Rule 98    main -> MAIN stmnt END
Rule 99    empty -> <empty>

Terminals, with rules where they appear:

AND                  : 66
ASSIGN               : 35
BOOL                 : 7 12
CENTER               : 92
CLOSE_PTH            : 11 64 73 77 85 91 96 97
CLOSE_SQR            : 80 82
COMMA                : 6 19 76 84
CTE_NUM              : 39
CTE_STR              : 38
DIFFERENT_TO         : 70
DIV                  : 57
DRAWING              : 1
ELSE                 : 88
END                  : 11 87 88 89 98
EQUAL_TO             : 67
FALSE                : 41
FORWARD              : 93
FUNC                 : 11
ID                   : 1 4 6 11 17 30 34 73 78
IF                   : 86
LEFT                 : 95
LESS_OR_EQ_THAN      : 69
LESS_THAN            : 72
MAIN                 : 98
MORE_OR_EQ_THAN      : 68
MORE_THAN            : 71
MULT                 : 58
NUMBER               : 9 14
OPEN_PTH             : 11 63 73 77 85 91 96 97
OPEN_SQR             : 80 82
OR                   : 65
PEN_DOWN             : 96
PEN_UP               : 97
READ                 : 77
RIGHT                : 94
SUB                  : 50
SUM                  : 51
TRUE                 : 42
VOID                 : 15
WHILE                : 89
WORD                 : 8 13
WRITE                : 85
error                : 

Nonterminals, with rules where they appear:

array                : 78
assign               : 31
close_pth            : 61
con_expression       : 86 89
cte_bool             : 37
declaration          : 1
e1                   : 59
e2                   : 53
e3                   : 47
e4                   : 44
e5                   : 31
e6                   : 31
else_stmnt           : 86
empty                : 3 5 10 16 18 20 75 79 81 83
exp                  : 43 44 44
expression           : 31 60 61 74 80 82 85 90 90
fact_op              : 53
factor               : 52 53 53
func_call            : 28 36
func_call_param      : 73 76 91
func_declaration     : 2
func_type            : 11
id                   : 31
if_stmnt             : 25
log_op               : 90
main                 : 2
matrix               : 80
move_func            : 23
move_type            : 91
multiple_fc_param    : 74
multiple_parameters  : 17
multiple_var         : 4 6
multiple_vars        : 30 77
open_pth             : 61
parameter            : 11 19
pen_func             : 22
program              : 0
q1                   : 46 47
q2                   : 52 53
q3                   : 31
read                 : 27
rel_op               : 44
stmnt                : 11 21 22 23 24 25 26 27 28 29 86 88 89 98
term_op              : 47
termino              : 46 47 47
var_assignation      : 29
var_cte              : 59
var_declaration      : 2
var_declaration_func : 21
var_type             : 4 17 30
variable             : 40 77 84
while_stmnt          : 24
write                : 26


state 0

    (0) S' -> . program
    (1) program -> . DRAWING ID declaration
    DRAWING         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .


state 2

    (1) program -> DRAWING . ID declaration
    ID              shift and go to state 3


state 3

    (1) program -> DRAWING ID . declaration
    (2) declaration -> . var_declaration func_declaration main
    (3) var_declaration -> . empty
    (4) var_declaration -> . var_type ID multiple_var
    (99) empty -> .
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for WORD resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
    VOID            reduce using rule 99 (empty -> .)
    MAIN            reduce using rule 99 (empty -> .)
    BOOL            shift and go to state 8
    WORD            shift and go to state 9
    NUMBER          shift and go to state 10

    declaration                    shift and go to state 4
    var_declaration                shift and go to state 5
    empty                          shift and go to state 6
    var_type                       shift and go to state 7

state 4

    (1) program -> DRAWING ID declaration .
    $end            reduce using rule 1 (program -> DRAWING ID declaration .)


state 5

    (2) declaration -> var_declaration . func_declaration main
    (10) func_declaration -> . empty
    (11) func_declaration -> . func_type FUNC ID OPEN_PTH parameter CLOSE_PTH stmnt END
    (99) empty -> .
    (12) func_type -> . BOOL
    (13) func_type -> . WORD
    (14) func_type -> . NUMBER
    (15) func_type -> . VOID
    MAIN            reduce using rule 99 (empty -> .)
    BOOL            shift and go to state 14
    WORD            shift and go to state 15
    NUMBER          shift and go to state 16
    VOID            shift and go to state 17

    func_declaration               shift and go to state 11
    empty                          shift and go to state 12
    func_type                      shift and go to state 13

state 6

    (3) var_declaration -> empty .
    BOOL            reduce using rule 3 (var_declaration -> empty .)
    WORD            reduce using rule 3 (var_declaration -> empty .)
    NUMBER          reduce using rule 3 (var_declaration -> empty .)
    VOID            reduce using rule 3 (var_declaration -> empty .)
    MAIN            reduce using rule 3 (var_declaration -> empty .)


state 7

    (4) var_declaration -> var_type . ID multiple_var
    ID              shift and go to state 18


state 8

    (7) var_type -> BOOL .
    ID              reduce using rule 7 (var_type -> BOOL .)


state 9

    (8) var_type -> WORD .
    ID              reduce using rule 8 (var_type -> WORD .)


state 10

    (9) var_type -> NUMBER .
    ID              reduce using rule 9 (var_type -> NUMBER .)


state 11

    (2) declaration -> var_declaration func_declaration . main
    (98) main -> . MAIN stmnt END
    MAIN            shift and go to state 20

    main                           shift and go to state 19

state 12

    (10) func_declaration -> empty .
    MAIN            reduce using rule 10 (func_declaration -> empty .)


state 13

    (11) func_declaration -> func_type . FUNC ID OPEN_PTH parameter CLOSE_PTH stmnt END
    FUNC            shift and go to state 21


state 14

    (12) func_type -> BOOL .
    FUNC            reduce using rule 12 (func_type -> BOOL .)


state 15

    (13) func_type -> WORD .
    FUNC            reduce using rule 13 (func_type -> WORD .)


state 16

    (14) func_type -> NUMBER .
    FUNC            reduce using rule 14 (func_type -> NUMBER .)


state 17

    (15) func_type -> VOID .
    FUNC            reduce using rule 15 (func_type -> VOID .)


state 18

    (4) var_declaration -> var_type ID . multiple_var
    (5) multiple_var -> . empty
    (6) multiple_var -> . COMMA ID multiple_var
    (99) empty -> .
    COMMA           shift and go to state 24
    BOOL            reduce using rule 99 (empty -> .)
    WORD            reduce using rule 99 (empty -> .)
    NUMBER          reduce using rule 99 (empty -> .)
    VOID            reduce using rule 99 (empty -> .)
    MAIN            reduce using rule 99 (empty -> .)

    multiple_var                   shift and go to state 22
    empty                          shift and go to state 23

state 19

    (2) declaration -> var_declaration func_declaration main .
    $end            reduce using rule 2 (declaration -> var_declaration func_declaration main .)


state 20

    (98) main -> MAIN . stmnt END
    (20) stmnt -> . empty
    (21) stmnt -> . var_declaration_func stmnt
    (22) stmnt -> . pen_func stmnt
    (23) stmnt -> . move_func stmnt
    (24) stmnt -> . while_stmnt stmnt
    (25) stmnt -> . if_stmnt stmnt
    (26) stmnt -> . write stmnt
    (27) stmnt -> . read stmnt
    (28) stmnt -> . func_call stmnt
    (29) stmnt -> . var_assignation stmnt
    (99) empty -> .
    (30) var_declaration_func -> . var_type ID multiple_vars
    (96) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (97) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (91) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (89) while_stmnt -> . WHILE con_expression stmnt END
    (86) if_stmnt -> . IF con_expression stmnt else_stmnt
    (85) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (77) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (73) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (31) var_assignation -> . id e5 assign e6 expression q3
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (92) move_type -> . CENTER
    (93) move_type -> . FORWARD
    (94) move_type -> . RIGHT
    (95) move_type -> . LEFT
    (34) id -> . ID
    END             reduce using rule 99 (empty -> .)
    PEN_DOWN        shift and go to state 38
    PEN_UP          shift and go to state 39
    WHILE           shift and go to state 41
    IF              shift and go to state 42
    WRITE           shift and go to state 43
    READ            shift and go to state 44
    ID              shift and go to state 37
    BOOL            shift and go to state 8
    WORD            shift and go to state 9
    NUMBER          shift and go to state 10
    CENTER          shift and go to state 46
    FORWARD         shift and go to state 47
    RIGHT           shift and go to state 48
    LEFT            shift and go to state 49

    stmnt                          shift and go to state 25
    empty                          shift and go to state 26
    var_declaration_func           shift and go to state 27
    pen_func                       shift and go to state 28
    move_func                      shift and go to state 29
    while_stmnt                    shift and go to state 30
    if_stmnt                       shift and go to state 31
    write                          shift and go to state 32
    read                           shift and go to state 33
    func_call                      shift and go to state 34
    var_assignation                shift and go to state 35
    var_type                       shift and go to state 36
    move_type                      shift and go to state 40
    id                             shift and go to state 45

state 21

    (11) func_declaration -> func_type FUNC . ID OPEN_PTH parameter CLOSE_PTH stmnt END
    ID              shift and go to state 50


state 22

    (4) var_declaration -> var_type ID multiple_var .
    BOOL            reduce using rule 4 (var_declaration -> var_type ID multiple_var .)
    WORD            reduce using rule 4 (var_declaration -> var_type ID multiple_var .)
    NUMBER          reduce using rule 4 (var_declaration -> var_type ID multiple_var .)
    VOID            reduce using rule 4 (var_declaration -> var_type ID multiple_var .)
    MAIN            reduce using rule 4 (var_declaration -> var_type ID multiple_var .)


state 23

    (5) multiple_var -> empty .
    BOOL            reduce using rule 5 (multiple_var -> empty .)
    WORD            reduce using rule 5 (multiple_var -> empty .)
    NUMBER          reduce using rule 5 (multiple_var -> empty .)
    VOID            reduce using rule 5 (multiple_var -> empty .)
    MAIN            reduce using rule 5 (multiple_var -> empty .)


state 24

    (6) multiple_var -> COMMA . ID multiple_var
    ID              shift and go to state 51


state 25

    (98) main -> MAIN stmnt . END
    END             shift and go to state 52


state 26

    (20) stmnt -> empty .
    END             reduce using rule 20 (stmnt -> empty .)
    ELSE            reduce using rule 20 (stmnt -> empty .)


state 27

    (21) stmnt -> var_declaration_func . stmnt
    (20) stmnt -> . empty
    (21) stmnt -> . var_declaration_func stmnt
    (22) stmnt -> . pen_func stmnt
    (23) stmnt -> . move_func stmnt
    (24) stmnt -> . while_stmnt stmnt
    (25) stmnt -> . if_stmnt stmnt
    (26) stmnt -> . write stmnt
    (27) stmnt -> . read stmnt
    (28) stmnt -> . func_call stmnt
    (29) stmnt -> . var_assignation stmnt
    (99) empty -> .
    (30) var_declaration_func -> . var_type ID multiple_vars
    (96) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (97) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (91) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (89) while_stmnt -> . WHILE con_expression stmnt END
    (86) if_stmnt -> . IF con_expression stmnt else_stmnt
    (85) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (77) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (73) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (31) var_assignation -> . id e5 assign e6 expression q3
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (92) move_type -> . CENTER
    (93) move_type -> . FORWARD
    (94) move_type -> . RIGHT
    (95) move_type -> . LEFT
    (34) id -> . ID
    END             reduce using rule 99 (empty -> .)
    ELSE            reduce using rule 99 (empty -> .)
    PEN_DOWN        shift and go to state 38
    PEN_UP          shift and go to state 39
    WHILE           shift and go to state 41
    IF              shift and go to state 42
    WRITE           shift and go to state 43
    READ            shift and go to state 44
    ID              shift and go to state 37
    BOOL            shift and go to state 8
    WORD            shift and go to state 9
    NUMBER          shift and go to state 10
    CENTER          shift and go to state 46
    FORWARD         shift and go to state 47
    RIGHT           shift and go to state 48
    LEFT            shift and go to state 49

    var_declaration_func           shift and go to state 27
    stmnt                          shift and go to state 53
    empty                          shift and go to state 26
    pen_func                       shift and go to state 28
    move_func                      shift and go to state 29
    while_stmnt                    shift and go to state 30
    if_stmnt                       shift and go to state 31
    write                          shift and go to state 32
    read                           shift and go to state 33
    func_call                      shift and go to state 34
    var_assignation                shift and go to state 35
    var_type                       shift and go to state 36
    move_type                      shift and go to state 40
    id                             shift and go to state 45

state 28

    (22) stmnt -> pen_func . stmnt
    (20) stmnt -> . empty
    (21) stmnt -> . var_declaration_func stmnt
    (22) stmnt -> . pen_func stmnt
    (23) stmnt -> . move_func stmnt
    (24) stmnt -> . while_stmnt stmnt
    (25) stmnt -> . if_stmnt stmnt
    (26) stmnt -> . write stmnt
    (27) stmnt -> . read stmnt
    (28) stmnt -> . func_call stmnt
    (29) stmnt -> . var_assignation stmnt
    (99) empty -> .
    (30) var_declaration_func -> . var_type ID multiple_vars
    (96) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (97) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (91) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (89) while_stmnt -> . WHILE con_expression stmnt END
    (86) if_stmnt -> . IF con_expression stmnt else_stmnt
    (85) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (77) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (73) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (31) var_assignation -> . id e5 assign e6 expression q3
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (92) move_type -> . CENTER
    (93) move_type -> . FORWARD
    (94) move_type -> . RIGHT
    (95) move_type -> . LEFT
    (34) id -> . ID
    END             reduce using rule 99 (empty -> .)
    ELSE            reduce using rule 99 (empty -> .)
    PEN_DOWN        shift and go to state 38
    PEN_UP          shift and go to state 39
    WHILE           shift and go to state 41
    IF              shift and go to state 42
    WRITE           shift and go to state 43
    READ            shift and go to state 44
    ID              shift and go to state 37
    BOOL            shift and go to state 8
    WORD            shift and go to state 9
    NUMBER          shift and go to state 10
    CENTER          shift and go to state 46
    FORWARD         shift and go to state 47
    RIGHT           shift and go to state 48
    LEFT            shift and go to state 49

    pen_func                       shift and go to state 28
    stmnt                          shift and go to state 54
    empty                          shift and go to state 26
    var_declaration_func           shift and go to state 27
    move_func                      shift and go to state 29
    while_stmnt                    shift and go to state 30
    if_stmnt                       shift and go to state 31
    write                          shift and go to state 32
    read                           shift and go to state 33
    func_call                      shift and go to state 34
    var_assignation                shift and go to state 35
    var_type                       shift and go to state 36
    move_type                      shift and go to state 40
    id                             shift and go to state 45

state 29

    (23) stmnt -> move_func . stmnt
    (20) stmnt -> . empty
    (21) stmnt -> . var_declaration_func stmnt
    (22) stmnt -> . pen_func stmnt
    (23) stmnt -> . move_func stmnt
    (24) stmnt -> . while_stmnt stmnt
    (25) stmnt -> . if_stmnt stmnt
    (26) stmnt -> . write stmnt
    (27) stmnt -> . read stmnt
    (28) stmnt -> . func_call stmnt
    (29) stmnt -> . var_assignation stmnt
    (99) empty -> .
    (30) var_declaration_func -> . var_type ID multiple_vars
    (96) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (97) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (91) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (89) while_stmnt -> . WHILE con_expression stmnt END
    (86) if_stmnt -> . IF con_expression stmnt else_stmnt
    (85) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (77) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (73) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (31) var_assignation -> . id e5 assign e6 expression q3
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (92) move_type -> . CENTER
    (93) move_type -> . FORWARD
    (94) move_type -> . RIGHT
    (95) move_type -> . LEFT
    (34) id -> . ID
    END             reduce using rule 99 (empty -> .)
    ELSE            reduce using rule 99 (empty -> .)
    PEN_DOWN        shift and go to state 38
    PEN_UP          shift and go to state 39
    WHILE           shift and go to state 41
    IF              shift and go to state 42
    WRITE           shift and go to state 43
    READ            shift and go to state 44
    ID              shift and go to state 37
    BOOL            shift and go to state 8
    WORD            shift and go to state 9
    NUMBER          shift and go to state 10
    CENTER          shift and go to state 46
    FORWARD         shift and go to state 47
    RIGHT           shift and go to state 48
    LEFT            shift and go to state 49

    move_func                      shift and go to state 29
    stmnt                          shift and go to state 55
    empty                          shift and go to state 26
    var_declaration_func           shift and go to state 27
    pen_func                       shift and go to state 28
    while_stmnt                    shift and go to state 30
    if_stmnt                       shift and go to state 31
    write                          shift and go to state 32
    read                           shift and go to state 33
    func_call                      shift and go to state 34
    var_assignation                shift and go to state 35
    var_type                       shift and go to state 36
    move_type                      shift and go to state 40
    id                             shift and go to state 45

state 30

    (24) stmnt -> while_stmnt . stmnt
    (20) stmnt -> . empty
    (21) stmnt -> . var_declaration_func stmnt
    (22) stmnt -> . pen_func stmnt
    (23) stmnt -> . move_func stmnt
    (24) stmnt -> . while_stmnt stmnt
    (25) stmnt -> . if_stmnt stmnt
    (26) stmnt -> . write stmnt
    (27) stmnt -> . read stmnt
    (28) stmnt -> . func_call stmnt
    (29) stmnt -> . var_assignation stmnt
    (99) empty -> .
    (30) var_declaration_func -> . var_type ID multiple_vars
    (96) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (97) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (91) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (89) while_stmnt -> . WHILE con_expression stmnt END
    (86) if_stmnt -> . IF con_expression stmnt else_stmnt
    (85) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (77) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (73) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (31) var_assignation -> . id e5 assign e6 expression q3
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (92) move_type -> . CENTER
    (93) move_type -> . FORWARD
    (94) move_type -> . RIGHT
    (95) move_type -> . LEFT
    (34) id -> . ID
    END             reduce using rule 99 (empty -> .)
    ELSE            reduce using rule 99 (empty -> .)
    PEN_DOWN        shift and go to state 38
    PEN_UP          shift and go to state 39
    WHILE           shift and go to state 41
    IF              shift and go to state 42
    WRITE           shift and go to state 43
    READ            shift and go to state 44
    ID              shift and go to state 37
    BOOL            shift and go to state 8
    WORD            shift and go to state 9
    NUMBER          shift and go to state 10
    CENTER          shift and go to state 46
    FORWARD         shift and go to state 47
    RIGHT           shift and go to state 48
    LEFT            shift and go to state 49

    while_stmnt                    shift and go to state 30
    stmnt                          shift and go to state 56
    empty                          shift and go to state 26
    var_declaration_func           shift and go to state 27
    pen_func                       shift and go to state 28
    move_func                      shift and go to state 29
    if_stmnt                       shift and go to state 31
    write                          shift and go to state 32
    read                           shift and go to state 33
    func_call                      shift and go to state 34
    var_assignation                shift and go to state 35
    var_type                       shift and go to state 36
    move_type                      shift and go to state 40
    id                             shift and go to state 45

state 31

    (25) stmnt -> if_stmnt . stmnt
    (20) stmnt -> . empty
    (21) stmnt -> . var_declaration_func stmnt
    (22) stmnt -> . pen_func stmnt
    (23) stmnt -> . move_func stmnt
    (24) stmnt -> . while_stmnt stmnt
    (25) stmnt -> . if_stmnt stmnt
    (26) stmnt -> . write stmnt
    (27) stmnt -> . read stmnt
    (28) stmnt -> . func_call stmnt
    (29) stmnt -> . var_assignation stmnt
    (99) empty -> .
    (30) var_declaration_func -> . var_type ID multiple_vars
    (96) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (97) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (91) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (89) while_stmnt -> . WHILE con_expression stmnt END
    (86) if_stmnt -> . IF con_expression stmnt else_stmnt
    (85) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (77) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (73) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (31) var_assignation -> . id e5 assign e6 expression q3
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (92) move_type -> . CENTER
    (93) move_type -> . FORWARD
    (94) move_type -> . RIGHT
    (95) move_type -> . LEFT
    (34) id -> . ID
    END             reduce using rule 99 (empty -> .)
    ELSE            reduce using rule 99 (empty -> .)
    PEN_DOWN        shift and go to state 38
    PEN_UP          shift and go to state 39
    WHILE           shift and go to state 41
    IF              shift and go to state 42
    WRITE           shift and go to state 43
    READ            shift and go to state 44
    ID              shift and go to state 37
    BOOL            shift and go to state 8
    WORD            shift and go to state 9
    NUMBER          shift and go to state 10
    CENTER          shift and go to state 46
    FORWARD         shift and go to state 47
    RIGHT           shift and go to state 48
    LEFT            shift and go to state 49

    if_stmnt                       shift and go to state 31
    stmnt                          shift and go to state 57
    empty                          shift and go to state 26
    var_declaration_func           shift and go to state 27
    pen_func                       shift and go to state 28
    move_func                      shift and go to state 29
    while_stmnt                    shift and go to state 30
    write                          shift and go to state 32
    read                           shift and go to state 33
    func_call                      shift and go to state 34
    var_assignation                shift and go to state 35
    var_type                       shift and go to state 36
    move_type                      shift and go to state 40
    id                             shift and go to state 45

state 32

    (26) stmnt -> write . stmnt
    (20) stmnt -> . empty
    (21) stmnt -> . var_declaration_func stmnt
    (22) stmnt -> . pen_func stmnt
    (23) stmnt -> . move_func stmnt
    (24) stmnt -> . while_stmnt stmnt
    (25) stmnt -> . if_stmnt stmnt
    (26) stmnt -> . write stmnt
    (27) stmnt -> . read stmnt
    (28) stmnt -> . func_call stmnt
    (29) stmnt -> . var_assignation stmnt
    (99) empty -> .
    (30) var_declaration_func -> . var_type ID multiple_vars
    (96) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (97) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (91) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (89) while_stmnt -> . WHILE con_expression stmnt END
    (86) if_stmnt -> . IF con_expression stmnt else_stmnt
    (85) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (77) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (73) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (31) var_assignation -> . id e5 assign e6 expression q3
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (92) move_type -> . CENTER
    (93) move_type -> . FORWARD
    (94) move_type -> . RIGHT
    (95) move_type -> . LEFT
    (34) id -> . ID
    END             reduce using rule 99 (empty -> .)
    ELSE            reduce using rule 99 (empty -> .)
    PEN_DOWN        shift and go to state 38
    PEN_UP          shift and go to state 39
    WHILE           shift and go to state 41
    IF              shift and go to state 42
    WRITE           shift and go to state 43
    READ            shift and go to state 44
    ID              shift and go to state 37
    BOOL            shift and go to state 8
    WORD            shift and go to state 9
    NUMBER          shift and go to state 10
    CENTER          shift and go to state 46
    FORWARD         shift and go to state 47
    RIGHT           shift and go to state 48
    LEFT            shift and go to state 49

    write                          shift and go to state 32
    stmnt                          shift and go to state 58
    empty                          shift and go to state 26
    var_declaration_func           shift and go to state 27
    pen_func                       shift and go to state 28
    move_func                      shift and go to state 29
    while_stmnt                    shift and go to state 30
    if_stmnt                       shift and go to state 31
    read                           shift and go to state 33
    func_call                      shift and go to state 34
    var_assignation                shift and go to state 35
    var_type                       shift and go to state 36
    move_type                      shift and go to state 40
    id                             shift and go to state 45

state 33

    (27) stmnt -> read . stmnt
    (20) stmnt -> . empty
    (21) stmnt -> . var_declaration_func stmnt
    (22) stmnt -> . pen_func stmnt
    (23) stmnt -> . move_func stmnt
    (24) stmnt -> . while_stmnt stmnt
    (25) stmnt -> . if_stmnt stmnt
    (26) stmnt -> . write stmnt
    (27) stmnt -> . read stmnt
    (28) stmnt -> . func_call stmnt
    (29) stmnt -> . var_assignation stmnt
    (99) empty -> .
    (30) var_declaration_func -> . var_type ID multiple_vars
    (96) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (97) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (91) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (89) while_stmnt -> . WHILE con_expression stmnt END
    (86) if_stmnt -> . IF con_expression stmnt else_stmnt
    (85) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (77) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (73) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (31) var_assignation -> . id e5 assign e6 expression q3
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (92) move_type -> . CENTER
    (93) move_type -> . FORWARD
    (94) move_type -> . RIGHT
    (95) move_type -> . LEFT
    (34) id -> . ID
    END             reduce using rule 99 (empty -> .)
    ELSE            reduce using rule 99 (empty -> .)
    PEN_DOWN        shift and go to state 38
    PEN_UP          shift and go to state 39
    WHILE           shift and go to state 41
    IF              shift and go to state 42
    WRITE           shift and go to state 43
    READ            shift and go to state 44
    ID              shift and go to state 37
    BOOL            shift and go to state 8
    WORD            shift and go to state 9
    NUMBER          shift and go to state 10
    CENTER          shift and go to state 46
    FORWARD         shift and go to state 47
    RIGHT           shift and go to state 48
    LEFT            shift and go to state 49

    read                           shift and go to state 33
    stmnt                          shift and go to state 59
    empty                          shift and go to state 26
    var_declaration_func           shift and go to state 27
    pen_func                       shift and go to state 28
    move_func                      shift and go to state 29
    while_stmnt                    shift and go to state 30
    if_stmnt                       shift and go to state 31
    write                          shift and go to state 32
    func_call                      shift and go to state 34
    var_assignation                shift and go to state 35
    var_type                       shift and go to state 36
    move_type                      shift and go to state 40
    id                             shift and go to state 45

state 34

    (28) stmnt -> func_call . stmnt
    (20) stmnt -> . empty
    (21) stmnt -> . var_declaration_func stmnt
    (22) stmnt -> . pen_func stmnt
    (23) stmnt -> . move_func stmnt
    (24) stmnt -> . while_stmnt stmnt
    (25) stmnt -> . if_stmnt stmnt
    (26) stmnt -> . write stmnt
    (27) stmnt -> . read stmnt
    (28) stmnt -> . func_call stmnt
    (29) stmnt -> . var_assignation stmnt
    (99) empty -> .
    (30) var_declaration_func -> . var_type ID multiple_vars
    (96) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (97) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (91) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (89) while_stmnt -> . WHILE con_expression stmnt END
    (86) if_stmnt -> . IF con_expression stmnt else_stmnt
    (85) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (77) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (73) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (31) var_assignation -> . id e5 assign e6 expression q3
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (92) move_type -> . CENTER
    (93) move_type -> . FORWARD
    (94) move_type -> . RIGHT
    (95) move_type -> . LEFT
    (34) id -> . ID
    END             reduce using rule 99 (empty -> .)
    ELSE            reduce using rule 99 (empty -> .)
    PEN_DOWN        shift and go to state 38
    PEN_UP          shift and go to state 39
    WHILE           shift and go to state 41
    IF              shift and go to state 42
    WRITE           shift and go to state 43
    READ            shift and go to state 44
    ID              shift and go to state 37
    BOOL            shift and go to state 8
    WORD            shift and go to state 9
    NUMBER          shift and go to state 10
    CENTER          shift and go to state 46
    FORWARD         shift and go to state 47
    RIGHT           shift and go to state 48
    LEFT            shift and go to state 49

    func_call                      shift and go to state 34
    stmnt                          shift and go to state 60
    empty                          shift and go to state 26
    var_declaration_func           shift and go to state 27
    pen_func                       shift and go to state 28
    move_func                      shift and go to state 29
    while_stmnt                    shift and go to state 30
    if_stmnt                       shift and go to state 31
    write                          shift and go to state 32
    read                           shift and go to state 33
    var_assignation                shift and go to state 35
    var_type                       shift and go to state 36
    move_type                      shift and go to state 40
    id                             shift and go to state 45

state 35

    (29) stmnt -> var_assignation . stmnt
    (20) stmnt -> . empty
    (21) stmnt -> . var_declaration_func stmnt
    (22) stmnt -> . pen_func stmnt
    (23) stmnt -> . move_func stmnt
    (24) stmnt -> . while_stmnt stmnt
    (25) stmnt -> . if_stmnt stmnt
    (26) stmnt -> . write stmnt
    (27) stmnt -> . read stmnt
    (28) stmnt -> . func_call stmnt
    (29) stmnt -> . var_assignation stmnt
    (99) empty -> .
    (30) var_declaration_func -> . var_type ID multiple_vars
    (96) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (97) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (91) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (89) while_stmnt -> . WHILE con_expression stmnt END
    (86) if_stmnt -> . IF con_expression stmnt else_stmnt
    (85) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (77) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (73) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (31) var_assignation -> . id e5 assign e6 expression q3
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (92) move_type -> . CENTER
    (93) move_type -> . FORWARD
    (94) move_type -> . RIGHT
    (95) move_type -> . LEFT
    (34) id -> . ID
    END             reduce using rule 99 (empty -> .)
    ELSE            reduce using rule 99 (empty -> .)
    PEN_DOWN        shift and go to state 38
    PEN_UP          shift and go to state 39
    WHILE           shift and go to state 41
    IF              shift and go to state 42
    WRITE           shift and go to state 43
    READ            shift and go to state 44
    ID              shift and go to state 37
    BOOL            shift and go to state 8
    WORD            shift and go to state 9
    NUMBER          shift and go to state 10
    CENTER          shift and go to state 46
    FORWARD         shift and go to state 47
    RIGHT           shift and go to state 48
    LEFT            shift and go to state 49

    var_assignation                shift and go to state 35
    stmnt                          shift and go to state 61
    empty                          shift and go to state 26
    var_declaration_func           shift and go to state 27
    pen_func                       shift and go to state 28
    move_func                      shift and go to state 29
    while_stmnt                    shift and go to state 30
    if_stmnt                       shift and go to state 31
    write                          shift and go to state 32
    read                           shift and go to state 33
    func_call                      shift and go to state 34
    var_type                       shift and go to state 36
    move_type                      shift and go to state 40
    id                             shift and go to state 45

state 36

    (30) var_declaration_func -> var_type . ID multiple_vars
    ID              shift and go to state 62


state 37

    (73) func_call -> ID . OPEN_PTH func_call_param CLOSE_PTH
    (34) id -> ID .
    OPEN_PTH        shift and go to state 63
    ASSIGN          reduce using rule 34 (id -> ID .)


state 38

    (96) pen_func -> PEN_DOWN . OPEN_PTH CLOSE_PTH
    OPEN_PTH        shift and go to state 64


state 39

    (97) pen_func -> PEN_UP . OPEN_PTH CLOSE_PTH
    OPEN_PTH        shift and go to state 65


state 40

    (91) move_func -> move_type . OPEN_PTH func_call_param CLOSE_PTH
    OPEN_PTH        shift and go to state 66


state 41

    (89) while_stmnt -> WHILE . con_expression stmnt END
    (90) con_expression -> . expression log_op expression
    (43) expression -> . exp
    (44) expression -> . exp rel_op e4 exp
    (46) exp -> . termino q1
    (47) exp -> . termino term_op e3 termino q1
    (52) termino -> . factor q2
    (53) termino -> . factor fact_op e2 factor q2
    (59) factor -> . var_cte e1
    (60) factor -> . expression
    (61) factor -> . open_pth expression close_pth
    (36) var_cte -> . func_call
    (37) var_cte -> . cte_bool
    (38) var_cte -> . CTE_STR
    (39) var_cte -> . CTE_NUM
    (40) var_cte -> . variable
    (63) open_pth -> . OPEN_PTH
    (73) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (41) cte_bool -> . FALSE
    (42) cte_bool -> . TRUE
    (78) variable -> . ID array
    CTE_STR         shift and go to state 76
    CTE_NUM         shift and go to state 77
    OPEN_PTH        shift and go to state 79
    ID              shift and go to state 80
    FALSE           shift and go to state 81
    TRUE            shift and go to state 82

    con_expression                 shift and go to state 67
    expression                     shift and go to state 68
    exp                            shift and go to state 69
    termino                        shift and go to state 70
    factor                         shift and go to state 71
    var_cte                        shift and go to state 72
    open_pth                       shift and go to state 73
    func_call                      shift and go to state 74
    cte_bool                       shift and go to state 75
    variable                       shift and go to state 78

state 42

    (86) if_stmnt -> IF . con_expression stmnt else_stmnt
    (90) con_expression -> . expression log_op expression
    (43) expression -> . exp
    (44) expression -> . exp rel_op e4 exp
    (46) exp -> . termino q1
    (47) exp -> . termino term_op e3 termino q1
    (52) termino -> . factor q2
    (53) termino -> . factor fact_op e2 factor q2
    (59) factor -> . var_cte e1
    (60) factor -> . expression
    (61) factor -> . open_pth expression close_pth
    (36) var_cte -> . func_call
    (37) var_cte -> . cte_bool
    (38) var_cte -> . CTE_STR
    (39) var_cte -> . CTE_NUM
    (40) var_cte -> . variable
    (63) open_pth -> . OPEN_PTH
    (73) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (41) cte_bool -> . FALSE
    (42) cte_bool -> . TRUE
    (78) variable -> . ID array
    CTE_STR         shift and go to state 76
    CTE_NUM         shift and go to state 77
    OPEN_PTH        shift and go to state 79
    ID              shift and go to state 80
    FALSE           shift and go to state 81
    TRUE            shift and go to state 82

    con_expression                 shift and go to state 83
    expression                     shift and go to state 68
    exp                            shift and go to state 69
    termino                        shift and go to state 70
    factor                         shift and go to state 71
    var_cte                        shift and go to state 72
    open_pth                       shift and go to state 73
    func_call                      shift and go to state 74
    cte_bool                       shift and go to state 75
    variable                       shift and go to state 78

state 43

    (85) write -> WRITE . OPEN_PTH expression CLOSE_PTH
    OPEN_PTH        shift and go to state 84


state 44

    (77) read -> READ . OPEN_PTH variable multiple_vars CLOSE_PTH
    OPEN_PTH        shift and go to state 85


state 45

    (31) var_assignation -> id . e5 assign e6 expression q3
    (32) e5 -> .
    ASSIGN          reduce using rule 32 (e5 -> .)

    e5                             shift and go to state 86

state 46

    (92) move_type -> CENTER .
    OPEN_PTH        reduce using rule 92 (move_type -> CENTER .)


state 47

    (93) move_type -> FORWARD .
    OPEN_PTH        reduce using rule 93 (move_type -> FORWARD .)


state 48

    (94) move_type -> RIGHT .
    OPEN_PTH        reduce using rule 94 (move_type -> RIGHT .)


state 49

    (95) move_type -> LEFT .
    OPEN_PTH        reduce using rule 95 (move_type -> LEFT .)


state 50

    (11) func_declaration -> func_type FUNC ID . OPEN_PTH parameter CLOSE_PTH stmnt END
    OPEN_PTH        shift and go to state 87


state 51

    (6) multiple_var -> COMMA ID . multiple_var
    (5) multiple_var -> . empty
    (6) multiple_var -> . COMMA ID multiple_var
    (99) empty -> .
    COMMA           shift and go to state 24
    BOOL            reduce using rule 99 (empty -> .)
    WORD            reduce using rule 99 (empty -> .)
    NUMBER          reduce using rule 99 (empty -> .)
    VOID            reduce using rule 99 (empty -> .)
    MAIN            reduce using rule 99 (empty -> .)

    multiple_var                   shift and go to state 88
    empty                          shift and go to state 23

state 52

    (98) main -> MAIN stmnt END .
    $end            reduce using rule 98 (main -> MAIN stmnt END .)


state 53

    (21) stmnt -> var_declaration_func stmnt .
    END             reduce using rule 21 (stmnt -> var_declaration_func stmnt .)
    ELSE            reduce using rule 21 (stmnt -> var_declaration_func stmnt .)


state 54

    (22) stmnt -> pen_func stmnt .
    END             reduce using rule 22 (stmnt -> pen_func stmnt .)
    ELSE            reduce using rule 22 (stmnt -> pen_func stmnt .)


state 55

    (23) stmnt -> move_func stmnt .
    END             reduce using rule 23 (stmnt -> move_func stmnt .)
    ELSE            reduce using rule 23 (stmnt -> move_func stmnt .)


state 56

    (24) stmnt -> while_stmnt stmnt .
    END             reduce using rule 24 (stmnt -> while_stmnt stmnt .)
    ELSE            reduce using rule 24 (stmnt -> while_stmnt stmnt .)


state 57

    (25) stmnt -> if_stmnt stmnt .
    END             reduce using rule 25 (stmnt -> if_stmnt stmnt .)
    ELSE            reduce using rule 25 (stmnt -> if_stmnt stmnt .)


state 58

    (26) stmnt -> write stmnt .
    END             reduce using rule 26 (stmnt -> write stmnt .)
    ELSE            reduce using rule 26 (stmnt -> write stmnt .)


state 59

    (27) stmnt -> read stmnt .
    END             reduce using rule 27 (stmnt -> read stmnt .)
    ELSE            reduce using rule 27 (stmnt -> read stmnt .)


state 60

    (28) stmnt -> func_call stmnt .
    END             reduce using rule 28 (stmnt -> func_call stmnt .)
    ELSE            reduce using rule 28 (stmnt -> func_call stmnt .)


state 61

    (29) stmnt -> var_assignation stmnt .
    END             reduce using rule 29 (stmnt -> var_assignation stmnt .)
    ELSE            reduce using rule 29 (stmnt -> var_assignation stmnt .)


state 62

    (30) var_declaration_func -> var_type ID . multiple_vars
    (83) multiple_vars -> . empty
    (84) multiple_vars -> . COMMA variable
    (99) empty -> .
    COMMA           shift and go to state 91
    PEN_DOWN        reduce using rule 99 (empty -> .)
    PEN_UP          reduce using rule 99 (empty -> .)
    WHILE           reduce using rule 99 (empty -> .)
    IF              reduce using rule 99 (empty -> .)
    WRITE           reduce using rule 99 (empty -> .)
    READ            reduce using rule 99 (empty -> .)
    ID              reduce using rule 99 (empty -> .)
    BOOL            reduce using rule 99 (empty -> .)
    WORD            reduce using rule 99 (empty -> .)
    NUMBER          reduce using rule 99 (empty -> .)
    CENTER          reduce using rule 99 (empty -> .)
    FORWARD         reduce using rule 99 (empty -> .)
    RIGHT           reduce using rule 99 (empty -> .)
    LEFT            reduce using rule 99 (empty -> .)
    END             reduce using rule 99 (empty -> .)
    ELSE            reduce using rule 99 (empty -> .)

    multiple_vars                  shift and go to state 89
    empty                          shift and go to state 90

state 63

    (73) func_call -> ID OPEN_PTH . func_call_param CLOSE_PTH
    (74) func_call_param -> . expression multiple_fc_param
    (43) expression -> . exp
    (44) expression -> . exp rel_op e4 exp
    (46) exp -> . termino q1
    (47) exp -> . termino term_op e3 termino q1
    (52) termino -> . factor q2
    (53) termino -> . factor fact_op e2 factor q2
    (59) factor -> . var_cte e1
    (60) factor -> . expression
    (61) factor -> . open_pth expression close_pth
    (36) var_cte -> . func_call
    (37) var_cte -> . cte_bool
    (38) var_cte -> . CTE_STR
    (39) var_cte -> . CTE_NUM
    (40) var_cte -> . variable
    (63) open_pth -> . OPEN_PTH
    (73) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (41) cte_bool -> . FALSE
    (42) cte_bool -> . TRUE
    (78) variable -> . ID array
    CTE_STR         shift and go to state 76
    CTE_NUM         shift and go to state 77
    OPEN_PTH        shift and go to state 79
    ID              shift and go to state 80
    FALSE           shift and go to state 81
    TRUE            shift and go to state 82

    func_call_param                shift and go to state 92
    expression                     shift and go to state 93
    exp                            shift and go to state 69
    termino                        shift and go to state 70
    factor                         shift and go to state 71
    var_cte                        shift and go to state 72
    open_pth                       shift and go to state 73
    func_call                      shift and go to state 74
    cte_bool                       shift and go to state 75
    variable                       shift and go to state 78

state 64

    (96) pen_func -> PEN_DOWN OPEN_PTH . CLOSE_PTH
    CLOSE_PTH       shift and go to state 94


state 65

    (97) pen_func -> PEN_UP OPEN_PTH . CLOSE_PTH
    CLOSE_PTH       shift and go to state 95


state 66

    (91) move_func -> move_type OPEN_PTH . func_call_param CLOSE_PTH
    (74) func_call_param -> . expression multiple_fc_param
    (43) expression -> . exp
    (44) expression -> . exp rel_op e4 exp
    (46) exp -> . termino q1
    (47) exp -> . termino term_op e3 termino q1
    (52) termino -> . factor q2
    (53) termino -> . factor fact_op e2 factor q2
    (59) factor -> . var_cte e1
    (60) factor -> . expression
    (61) factor -> . open_pth expression close_pth
    (36) var_cte -> . func_call
    (37) var_cte -> . cte_bool
    (38) var_cte -> . CTE_STR
    (39) var_cte -> . CTE_NUM
    (40) var_cte -> . variable
    (63) open_pth -> . OPEN_PTH
    (73) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (41) cte_bool -> . FALSE
    (42) cte_bool -> . TRUE
    (78) variable -> . ID array
    CTE_STR         shift and go to state 76
    CTE_NUM         shift and go to state 77
    OPEN_PTH        shift and go to state 79
    ID              shift and go to state 80
    FALSE           shift and go to state 81
    TRUE            shift and go to state 82

    func_call_param                shift and go to state 96
    expression                     shift and go to state 93
    exp                            shift and go to state 69
    termino                        shift and go to state 70
    factor                         shift and go to state 71
    var_cte                        shift and go to state 72
    open_pth                       shift and go to state 73
    func_call                      shift and go to state 74
    cte_bool                       shift and go to state 75
    variable                       shift and go to state 78

state 67

    (89) while_stmnt -> WHILE con_expression . stmnt END
    (20) stmnt -> . empty
    (21) stmnt -> . var_declaration_func stmnt
    (22) stmnt -> . pen_func stmnt
    (23) stmnt -> . move_func stmnt
    (24) stmnt -> . while_stmnt stmnt
    (25) stmnt -> . if_stmnt stmnt
    (26) stmnt -> . write stmnt
    (27) stmnt -> . read stmnt
    (28) stmnt -> . func_call stmnt
    (29) stmnt -> . var_assignation stmnt
    (99) empty -> .
    (30) var_declaration_func -> . var_type ID multiple_vars
    (96) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (97) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (91) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (89) while_stmnt -> . WHILE con_expression stmnt END
    (86) if_stmnt -> . IF con_expression stmnt else_stmnt
    (85) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (77) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (73) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (31) var_assignation -> . id e5 assign e6 expression q3
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (92) move_type -> . CENTER
    (93) move_type -> . FORWARD
    (94) move_type -> . RIGHT
    (95) move_type -> . LEFT
    (34) id -> . ID
    END             reduce using rule 99 (empty -> .)
    PEN_DOWN        shift and go to state 38
    PEN_UP          shift and go to state 39
    WHILE           shift and go to state 41
    IF              shift and go to state 42
    WRITE           shift and go to state 43
    READ            shift and go to state 44
    ID              shift and go to state 37
    BOOL            shift and go to state 8
    WORD            shift and go to state 9
    NUMBER          shift and go to state 10
    CENTER          shift and go to state 46
    FORWARD         shift and go to state 47
    RIGHT           shift and go to state 48
    LEFT            shift and go to state 49

    stmnt                          shift and go to state 97
    empty                          shift and go to state 26
    var_declaration_func           shift and go to state 27
    pen_func                       shift and go to state 28
    move_func                      shift and go to state 29
    while_stmnt                    shift and go to state 30
    if_stmnt                       shift and go to state 31
    write                          shift and go to state 32
    read                           shift and go to state 33
    func_call                      shift and go to state 34
    var_assignation                shift and go to state 35
    var_type                       shift and go to state 36
    move_type                      shift and go to state 40
    id                             shift and go to state 45

state 68

    (90) con_expression -> expression . log_op expression
    (60) factor -> expression .
    (65) log_op -> . OR
    (66) log_op -> . AND
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    DIV             reduce using rule 60 (factor -> expression .)
    MULT            reduce using rule 60 (factor -> expression .)
    SUB             reduce using rule 60 (factor -> expression .)
    SUM             reduce using rule 60 (factor -> expression .)
    EQUAL_TO        reduce using rule 60 (factor -> expression .)
    MORE_OR_EQ_THAN reduce using rule 60 (factor -> expression .)
    LESS_OR_EQ_THAN reduce using rule 60 (factor -> expression .)
    DIFFERENT_TO    reduce using rule 60 (factor -> expression .)
    MORE_THAN       reduce using rule 60 (factor -> expression .)
    LESS_THAN       reduce using rule 60 (factor -> expression .)
    OR              shift and go to state 99
    AND             shift and go to state 100

    log_op                         shift and go to state 98

state 69

    (43) expression -> exp .
    (44) expression -> exp . rel_op e4 exp
    (67) rel_op -> . EQUAL_TO
    (68) rel_op -> . MORE_OR_EQ_THAN
    (69) rel_op -> . LESS_OR_EQ_THAN
    (70) rel_op -> . DIFFERENT_TO
    (71) rel_op -> . MORE_THAN
    (72) rel_op -> . LESS_THAN
  ! shift/reduce conflict for EQUAL_TO resolved as shift
  ! shift/reduce conflict for MORE_OR_EQ_THAN resolved as shift
  ! shift/reduce conflict for LESS_OR_EQ_THAN resolved as shift
  ! shift/reduce conflict for DIFFERENT_TO resolved as shift
  ! shift/reduce conflict for MORE_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
    OR              reduce using rule 43 (expression -> exp .)
    AND             reduce using rule 43 (expression -> exp .)
    DIV             reduce using rule 43 (expression -> exp .)
    MULT            reduce using rule 43 (expression -> exp .)
    SUB             reduce using rule 43 (expression -> exp .)
    SUM             reduce using rule 43 (expression -> exp .)
    COMMA           reduce using rule 43 (expression -> exp .)
    CLOSE_PTH       reduce using rule 43 (expression -> exp .)
    PEN_DOWN        reduce using rule 43 (expression -> exp .)
    PEN_UP          reduce using rule 43 (expression -> exp .)
    WHILE           reduce using rule 43 (expression -> exp .)
    IF              reduce using rule 43 (expression -> exp .)
    WRITE           reduce using rule 43 (expression -> exp .)
    READ            reduce using rule 43 (expression -> exp .)
    ID              reduce using rule 43 (expression -> exp .)
    BOOL            reduce using rule 43 (expression -> exp .)
    WORD            reduce using rule 43 (expression -> exp .)
    NUMBER          reduce using rule 43 (expression -> exp .)
    CENTER          reduce using rule 43 (expression -> exp .)
    FORWARD         reduce using rule 43 (expression -> exp .)
    RIGHT           reduce using rule 43 (expression -> exp .)
    LEFT            reduce using rule 43 (expression -> exp .)
    END             reduce using rule 43 (expression -> exp .)
    ELSE            reduce using rule 43 (expression -> exp .)
    CLOSE_SQR       reduce using rule 43 (expression -> exp .)
    EQUAL_TO        shift and go to state 102
    MORE_OR_EQ_THAN shift and go to state 103
    LESS_OR_EQ_THAN shift and go to state 104
    DIFFERENT_TO    shift and go to state 105
    MORE_THAN       shift and go to state 106
    LESS_THAN       shift and go to state 107

    rel_op                         shift and go to state 101

state 70

    (46) exp -> termino . q1
    (47) exp -> termino . term_op e3 termino q1
    (54) q1 -> .
    (50) term_op -> . SUB
    (51) term_op -> . SUM
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for SUM resolved as shift
    OR              reduce using rule 54 (q1 -> .)
    AND             reduce using rule 54 (q1 -> .)
    DIV             reduce using rule 54 (q1 -> .)
    MULT            reduce using rule 54 (q1 -> .)
    EQUAL_TO        reduce using rule 54 (q1 -> .)
    MORE_OR_EQ_THAN reduce using rule 54 (q1 -> .)
    LESS_OR_EQ_THAN reduce using rule 54 (q1 -> .)
    DIFFERENT_TO    reduce using rule 54 (q1 -> .)
    MORE_THAN       reduce using rule 54 (q1 -> .)
    LESS_THAN       reduce using rule 54 (q1 -> .)
    COMMA           reduce using rule 54 (q1 -> .)
    CLOSE_PTH       reduce using rule 54 (q1 -> .)
    PEN_DOWN        reduce using rule 54 (q1 -> .)
    PEN_UP          reduce using rule 54 (q1 -> .)
    WHILE           reduce using rule 54 (q1 -> .)
    IF              reduce using rule 54 (q1 -> .)
    WRITE           reduce using rule 54 (q1 -> .)
    READ            reduce using rule 54 (q1 -> .)
    ID              reduce using rule 54 (q1 -> .)
    BOOL            reduce using rule 54 (q1 -> .)
    WORD            reduce using rule 54 (q1 -> .)
    NUMBER          reduce using rule 54 (q1 -> .)
    CENTER          reduce using rule 54 (q1 -> .)
    FORWARD         reduce using rule 54 (q1 -> .)
    RIGHT           reduce using rule 54 (q1 -> .)
    LEFT            reduce using rule 54 (q1 -> .)
    END             reduce using rule 54 (q1 -> .)
    ELSE            reduce using rule 54 (q1 -> .)
    CLOSE_SQR       reduce using rule 54 (q1 -> .)
    SUB             shift and go to state 110
    SUM             shift and go to state 111

    q1                             shift and go to state 108
    term_op                        shift and go to state 109

state 71

    (52) termino -> factor . q2
    (53) termino -> factor . fact_op e2 factor q2
    (49) q2 -> .
    (57) fact_op -> . DIV
    (58) fact_op -> . MULT
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
    OR              reduce using rule 49 (q2 -> .)
    AND             reduce using rule 49 (q2 -> .)
    SUB             reduce using rule 49 (q2 -> .)
    SUM             reduce using rule 49 (q2 -> .)
    EQUAL_TO        reduce using rule 49 (q2 -> .)
    MORE_OR_EQ_THAN reduce using rule 49 (q2 -> .)
    LESS_OR_EQ_THAN reduce using rule 49 (q2 -> .)
    DIFFERENT_TO    reduce using rule 49 (q2 -> .)
    MORE_THAN       reduce using rule 49 (q2 -> .)
    LESS_THAN       reduce using rule 49 (q2 -> .)
    COMMA           reduce using rule 49 (q2 -> .)
    CLOSE_PTH       reduce using rule 49 (q2 -> .)
    PEN_DOWN        reduce using rule 49 (q2 -> .)
    PEN_UP          reduce using rule 49 (q2 -> .)
    WHILE           reduce using rule 49 (q2 -> .)
    IF              reduce using rule 49 (q2 -> .)
    WRITE           reduce using rule 49 (q2 -> .)
    READ            reduce using rule 49 (q2 -> .)
    ID              reduce using rule 49 (q2 -> .)
    BOOL            reduce using rule 49 (q2 -> .)
    WORD            reduce using rule 49 (q2 -> .)
    NUMBER          reduce using rule 49 (q2 -> .)
    CENTER          reduce using rule 49 (q2 -> .)
    FORWARD         reduce using rule 49 (q2 -> .)
    RIGHT           reduce using rule 49 (q2 -> .)
    LEFT            reduce using rule 49 (q2 -> .)
    END             reduce using rule 49 (q2 -> .)
    ELSE            reduce using rule 49 (q2 -> .)
    CLOSE_SQR       reduce using rule 49 (q2 -> .)
    DIV             shift and go to state 114
    MULT            shift and go to state 115

    q2                             shift and go to state 112
    fact_op                        shift and go to state 113

state 72

    (59) factor -> var_cte . e1
    (62) e1 -> .
    OR              reduce using rule 62 (e1 -> .)
    AND             reduce using rule 62 (e1 -> .)
    DIV             reduce using rule 62 (e1 -> .)
    MULT            reduce using rule 62 (e1 -> .)
    SUB             reduce using rule 62 (e1 -> .)
    SUM             reduce using rule 62 (e1 -> .)
    EQUAL_TO        reduce using rule 62 (e1 -> .)
    MORE_OR_EQ_THAN reduce using rule 62 (e1 -> .)
    LESS_OR_EQ_THAN reduce using rule 62 (e1 -> .)
    DIFFERENT_TO    reduce using rule 62 (e1 -> .)
    MORE_THAN       reduce using rule 62 (e1 -> .)
    LESS_THAN       reduce using rule 62 (e1 -> .)
    COMMA           reduce using rule 62 (e1 -> .)
    CLOSE_PTH       reduce using rule 62 (e1 -> .)
    PEN_DOWN        reduce using rule 62 (e1 -> .)
    PEN_UP          reduce using rule 62 (e1 -> .)
    WHILE           reduce using rule 62 (e1 -> .)
    IF              reduce using rule 62 (e1 -> .)
    WRITE           reduce using rule 62 (e1 -> .)
    READ            reduce using rule 62 (e1 -> .)
    ID              reduce using rule 62 (e1 -> .)
    BOOL            reduce using rule 62 (e1 -> .)
    WORD            reduce using rule 62 (e1 -> .)
    NUMBER          reduce using rule 62 (e1 -> .)
    CENTER          reduce using rule 62 (e1 -> .)
    FORWARD         reduce using rule 62 (e1 -> .)
    RIGHT           reduce using rule 62 (e1 -> .)
    LEFT            reduce using rule 62 (e1 -> .)
    END             reduce using rule 62 (e1 -> .)
    ELSE            reduce using rule 62 (e1 -> .)
    CLOSE_SQR       reduce using rule 62 (e1 -> .)

    e1                             shift and go to state 116

state 73

    (61) factor -> open_pth . expression close_pth
    (43) expression -> . exp
    (44) expression -> . exp rel_op e4 exp
    (46) exp -> . termino q1
    (47) exp -> . termino term_op e3 termino q1
    (52) termino -> . factor q2
    (53) termino -> . factor fact_op e2 factor q2
    (59) factor -> . var_cte e1
    (60) factor -> . expression
    (61) factor -> . open_pth expression close_pth
    (36) var_cte -> . func_call
    (37) var_cte -> . cte_bool
    (38) var_cte -> . CTE_STR
    (39) var_cte -> . CTE_NUM
    (40) var_cte -> . variable
    (63) open_pth -> . OPEN_PTH
    (73) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (41) cte_bool -> . FALSE
    (42) cte_bool -> . TRUE
    (78) variable -> . ID array
    CTE_STR         shift and go to state 76
    CTE_NUM         shift and go to state 77
    OPEN_PTH        shift and go to state 79
    ID              shift and go to state 80
    FALSE           shift and go to state 81
    TRUE            shift and go to state 82

    open_pth                       shift and go to state 73
    expression                     shift and go to state 117
    exp                            shift and go to state 69
    termino                        shift and go to state 70
    factor                         shift and go to state 71
    var_cte                        shift and go to state 72
    func_call                      shift and go to state 74
    cte_bool                       shift and go to state 75
    variable                       shift and go to state 78

state 74

    (36) var_cte -> func_call .
    OR              reduce using rule 36 (var_cte -> func_call .)
    AND             reduce using rule 36 (var_cte -> func_call .)
    DIV             reduce using rule 36 (var_cte -> func_call .)
    MULT            reduce using rule 36 (var_cte -> func_call .)
    SUB             reduce using rule 36 (var_cte -> func_call .)
    SUM             reduce using rule 36 (var_cte -> func_call .)
    EQUAL_TO        reduce using rule 36 (var_cte -> func_call .)
    MORE_OR_EQ_THAN reduce using rule 36 (var_cte -> func_call .)
    LESS_OR_EQ_THAN reduce using rule 36 (var_cte -> func_call .)
    DIFFERENT_TO    reduce using rule 36 (var_cte -> func_call .)
    MORE_THAN       reduce using rule 36 (var_cte -> func_call .)
    LESS_THAN       reduce using rule 36 (var_cte -> func_call .)
    COMMA           reduce using rule 36 (var_cte -> func_call .)
    CLOSE_PTH       reduce using rule 36 (var_cte -> func_call .)
    PEN_DOWN        reduce using rule 36 (var_cte -> func_call .)
    PEN_UP          reduce using rule 36 (var_cte -> func_call .)
    WHILE           reduce using rule 36 (var_cte -> func_call .)
    IF              reduce using rule 36 (var_cte -> func_call .)
    WRITE           reduce using rule 36 (var_cte -> func_call .)
    READ            reduce using rule 36 (var_cte -> func_call .)
    ID              reduce using rule 36 (var_cte -> func_call .)
    BOOL            reduce using rule 36 (var_cte -> func_call .)
    WORD            reduce using rule 36 (var_cte -> func_call .)
    NUMBER          reduce using rule 36 (var_cte -> func_call .)
    CENTER          reduce using rule 36 (var_cte -> func_call .)
    FORWARD         reduce using rule 36 (var_cte -> func_call .)
    RIGHT           reduce using rule 36 (var_cte -> func_call .)
    LEFT            reduce using rule 36 (var_cte -> func_call .)
    END             reduce using rule 36 (var_cte -> func_call .)
    ELSE            reduce using rule 36 (var_cte -> func_call .)
    CLOSE_SQR       reduce using rule 36 (var_cte -> func_call .)


state 75

    (37) var_cte -> cte_bool .
    OR              reduce using rule 37 (var_cte -> cte_bool .)
    AND             reduce using rule 37 (var_cte -> cte_bool .)
    DIV             reduce using rule 37 (var_cte -> cte_bool .)
    MULT            reduce using rule 37 (var_cte -> cte_bool .)
    SUB             reduce using rule 37 (var_cte -> cte_bool .)
    SUM             reduce using rule 37 (var_cte -> cte_bool .)
    EQUAL_TO        reduce using rule 37 (var_cte -> cte_bool .)
    MORE_OR_EQ_THAN reduce using rule 37 (var_cte -> cte_bool .)
    LESS_OR_EQ_THAN reduce using rule 37 (var_cte -> cte_bool .)
    DIFFERENT_TO    reduce using rule 37 (var_cte -> cte_bool .)
    MORE_THAN       reduce using rule 37 (var_cte -> cte_bool .)
    LESS_THAN       reduce using rule 37 (var_cte -> cte_bool .)
    COMMA           reduce using rule 37 (var_cte -> cte_bool .)
    CLOSE_PTH       reduce using rule 37 (var_cte -> cte_bool .)
    PEN_DOWN        reduce using rule 37 (var_cte -> cte_bool .)
    PEN_UP          reduce using rule 37 (var_cte -> cte_bool .)
    WHILE           reduce using rule 37 (var_cte -> cte_bool .)
    IF              reduce using rule 37 (var_cte -> cte_bool .)
    WRITE           reduce using rule 37 (var_cte -> cte_bool .)
    READ            reduce using rule 37 (var_cte -> cte_bool .)
    ID              reduce using rule 37 (var_cte -> cte_bool .)
    BOOL            reduce using rule 37 (var_cte -> cte_bool .)
    WORD            reduce using rule 37 (var_cte -> cte_bool .)
    NUMBER          reduce using rule 37 (var_cte -> cte_bool .)
    CENTER          reduce using rule 37 (var_cte -> cte_bool .)
    FORWARD         reduce using rule 37 (var_cte -> cte_bool .)
    RIGHT           reduce using rule 37 (var_cte -> cte_bool .)
    LEFT            reduce using rule 37 (var_cte -> cte_bool .)
    END             reduce using rule 37 (var_cte -> cte_bool .)
    ELSE            reduce using rule 37 (var_cte -> cte_bool .)
    CLOSE_SQR       reduce using rule 37 (var_cte -> cte_bool .)


state 76

    (38) var_cte -> CTE_STR .
    OR              reduce using rule 38 (var_cte -> CTE_STR .)
    AND             reduce using rule 38 (var_cte -> CTE_STR .)
    DIV             reduce using rule 38 (var_cte -> CTE_STR .)
    MULT            reduce using rule 38 (var_cte -> CTE_STR .)
    SUB             reduce using rule 38 (var_cte -> CTE_STR .)
    SUM             reduce using rule 38 (var_cte -> CTE_STR .)
    EQUAL_TO        reduce using rule 38 (var_cte -> CTE_STR .)
    MORE_OR_EQ_THAN reduce using rule 38 (var_cte -> CTE_STR .)
    LESS_OR_EQ_THAN reduce using rule 38 (var_cte -> CTE_STR .)
    DIFFERENT_TO    reduce using rule 38 (var_cte -> CTE_STR .)
    MORE_THAN       reduce using rule 38 (var_cte -> CTE_STR .)
    LESS_THAN       reduce using rule 38 (var_cte -> CTE_STR .)
    COMMA           reduce using rule 38 (var_cte -> CTE_STR .)
    CLOSE_PTH       reduce using rule 38 (var_cte -> CTE_STR .)
    PEN_DOWN        reduce using rule 38 (var_cte -> CTE_STR .)
    PEN_UP          reduce using rule 38 (var_cte -> CTE_STR .)
    WHILE           reduce using rule 38 (var_cte -> CTE_STR .)
    IF              reduce using rule 38 (var_cte -> CTE_STR .)
    WRITE           reduce using rule 38 (var_cte -> CTE_STR .)
    READ            reduce using rule 38 (var_cte -> CTE_STR .)
    ID              reduce using rule 38 (var_cte -> CTE_STR .)
    BOOL            reduce using rule 38 (var_cte -> CTE_STR .)
    WORD            reduce using rule 38 (var_cte -> CTE_STR .)
    NUMBER          reduce using rule 38 (var_cte -> CTE_STR .)
    CENTER          reduce using rule 38 (var_cte -> CTE_STR .)
    FORWARD         reduce using rule 38 (var_cte -> CTE_STR .)
    RIGHT           reduce using rule 38 (var_cte -> CTE_STR .)
    LEFT            reduce using rule 38 (var_cte -> CTE_STR .)
    END             reduce using rule 38 (var_cte -> CTE_STR .)
    ELSE            reduce using rule 38 (var_cte -> CTE_STR .)
    CLOSE_SQR       reduce using rule 38 (var_cte -> CTE_STR .)


state 77

    (39) var_cte -> CTE_NUM .
    OR              reduce using rule 39 (var_cte -> CTE_NUM .)
    AND             reduce using rule 39 (var_cte -> CTE_NUM .)
    DIV             reduce using rule 39 (var_cte -> CTE_NUM .)
    MULT            reduce using rule 39 (var_cte -> CTE_NUM .)
    SUB             reduce using rule 39 (var_cte -> CTE_NUM .)
    SUM             reduce using rule 39 (var_cte -> CTE_NUM .)
    EQUAL_TO        reduce using rule 39 (var_cte -> CTE_NUM .)
    MORE_OR_EQ_THAN reduce using rule 39 (var_cte -> CTE_NUM .)
    LESS_OR_EQ_THAN reduce using rule 39 (var_cte -> CTE_NUM .)
    DIFFERENT_TO    reduce using rule 39 (var_cte -> CTE_NUM .)
    MORE_THAN       reduce using rule 39 (var_cte -> CTE_NUM .)
    LESS_THAN       reduce using rule 39 (var_cte -> CTE_NUM .)
    COMMA           reduce using rule 39 (var_cte -> CTE_NUM .)
    CLOSE_PTH       reduce using rule 39 (var_cte -> CTE_NUM .)
    PEN_DOWN        reduce using rule 39 (var_cte -> CTE_NUM .)
    PEN_UP          reduce using rule 39 (var_cte -> CTE_NUM .)
    WHILE           reduce using rule 39 (var_cte -> CTE_NUM .)
    IF              reduce using rule 39 (var_cte -> CTE_NUM .)
    WRITE           reduce using rule 39 (var_cte -> CTE_NUM .)
    READ            reduce using rule 39 (var_cte -> CTE_NUM .)
    ID              reduce using rule 39 (var_cte -> CTE_NUM .)
    BOOL            reduce using rule 39 (var_cte -> CTE_NUM .)
    WORD            reduce using rule 39 (var_cte -> CTE_NUM .)
    NUMBER          reduce using rule 39 (var_cte -> CTE_NUM .)
    CENTER          reduce using rule 39 (var_cte -> CTE_NUM .)
    FORWARD         reduce using rule 39 (var_cte -> CTE_NUM .)
    RIGHT           reduce using rule 39 (var_cte -> CTE_NUM .)
    LEFT            reduce using rule 39 (var_cte -> CTE_NUM .)
    END             reduce using rule 39 (var_cte -> CTE_NUM .)
    ELSE            reduce using rule 39 (var_cte -> CTE_NUM .)
    CLOSE_SQR       reduce using rule 39 (var_cte -> CTE_NUM .)


state 78

    (40) var_cte -> variable .
    OR              reduce using rule 40 (var_cte -> variable .)
    AND             reduce using rule 40 (var_cte -> variable .)
    DIV             reduce using rule 40 (var_cte -> variable .)
    MULT            reduce using rule 40 (var_cte -> variable .)
    SUB             reduce using rule 40 (var_cte -> variable .)
    SUM             reduce using rule 40 (var_cte -> variable .)
    EQUAL_TO        reduce using rule 40 (var_cte -> variable .)
    MORE_OR_EQ_THAN reduce using rule 40 (var_cte -> variable .)
    LESS_OR_EQ_THAN reduce using rule 40 (var_cte -> variable .)
    DIFFERENT_TO    reduce using rule 40 (var_cte -> variable .)
    MORE_THAN       reduce using rule 40 (var_cte -> variable .)
    LESS_THAN       reduce using rule 40 (var_cte -> variable .)
    COMMA           reduce using rule 40 (var_cte -> variable .)
    CLOSE_PTH       reduce using rule 40 (var_cte -> variable .)
    PEN_DOWN        reduce using rule 40 (var_cte -> variable .)
    PEN_UP          reduce using rule 40 (var_cte -> variable .)
    WHILE           reduce using rule 40 (var_cte -> variable .)
    IF              reduce using rule 40 (var_cte -> variable .)
    WRITE           reduce using rule 40 (var_cte -> variable .)
    READ            reduce using rule 40 (var_cte -> variable .)
    ID              reduce using rule 40 (var_cte -> variable .)
    BOOL            reduce using rule 40 (var_cte -> variable .)
    WORD            reduce using rule 40 (var_cte -> variable .)
    NUMBER          reduce using rule 40 (var_cte -> variable .)
    CENTER          reduce using rule 40 (var_cte -> variable .)
    FORWARD         reduce using rule 40 (var_cte -> variable .)
    RIGHT           reduce using rule 40 (var_cte -> variable .)
    LEFT            reduce using rule 40 (var_cte -> variable .)
    END             reduce using rule 40 (var_cte -> variable .)
    ELSE            reduce using rule 40 (var_cte -> variable .)
    CLOSE_SQR       reduce using rule 40 (var_cte -> variable .)


state 79

    (63) open_pth -> OPEN_PTH .
    CTE_STR         reduce using rule 63 (open_pth -> OPEN_PTH .)
    CTE_NUM         reduce using rule 63 (open_pth -> OPEN_PTH .)
    OPEN_PTH        reduce using rule 63 (open_pth -> OPEN_PTH .)
    ID              reduce using rule 63 (open_pth -> OPEN_PTH .)
    FALSE           reduce using rule 63 (open_pth -> OPEN_PTH .)
    TRUE            reduce using rule 63 (open_pth -> OPEN_PTH .)


state 80

    (73) func_call -> ID . OPEN_PTH func_call_param CLOSE_PTH
    (78) variable -> ID . array
    (79) array -> . empty
    (80) array -> . OPEN_SQR expression CLOSE_SQR matrix
    (99) empty -> .
    OPEN_PTH        shift and go to state 63
    OPEN_SQR        shift and go to state 120
    OR              reduce using rule 99 (empty -> .)
    AND             reduce using rule 99 (empty -> .)
    DIV             reduce using rule 99 (empty -> .)
    MULT            reduce using rule 99 (empty -> .)
    SUB             reduce using rule 99 (empty -> .)
    SUM             reduce using rule 99 (empty -> .)
    EQUAL_TO        reduce using rule 99 (empty -> .)
    MORE_OR_EQ_THAN reduce using rule 99 (empty -> .)
    LESS_OR_EQ_THAN reduce using rule 99 (empty -> .)
    DIFFERENT_TO    reduce using rule 99 (empty -> .)
    MORE_THAN       reduce using rule 99 (empty -> .)
    LESS_THAN       reduce using rule 99 (empty -> .)
    COMMA           reduce using rule 99 (empty -> .)
    CLOSE_PTH       reduce using rule 99 (empty -> .)
    PEN_DOWN        reduce using rule 99 (empty -> .)
    PEN_UP          reduce using rule 99 (empty -> .)
    WHILE           reduce using rule 99 (empty -> .)
    IF              reduce using rule 99 (empty -> .)
    WRITE           reduce using rule 99 (empty -> .)
    READ            reduce using rule 99 (empty -> .)
    ID              reduce using rule 99 (empty -> .)
    BOOL            reduce using rule 99 (empty -> .)
    WORD            reduce using rule 99 (empty -> .)
    NUMBER          reduce using rule 99 (empty -> .)
    CENTER          reduce using rule 99 (empty -> .)
    FORWARD         reduce using rule 99 (empty -> .)
    RIGHT           reduce using rule 99 (empty -> .)
    LEFT            reduce using rule 99 (empty -> .)
    END             reduce using rule 99 (empty -> .)
    ELSE            reduce using rule 99 (empty -> .)
    CLOSE_SQR       reduce using rule 99 (empty -> .)

    array                          shift and go to state 118
    empty                          shift and go to state 119

state 81

    (41) cte_bool -> FALSE .
    OR              reduce using rule 41 (cte_bool -> FALSE .)
    AND             reduce using rule 41 (cte_bool -> FALSE .)
    DIV             reduce using rule 41 (cte_bool -> FALSE .)
    MULT            reduce using rule 41 (cte_bool -> FALSE .)
    SUB             reduce using rule 41 (cte_bool -> FALSE .)
    SUM             reduce using rule 41 (cte_bool -> FALSE .)
    EQUAL_TO        reduce using rule 41 (cte_bool -> FALSE .)
    MORE_OR_EQ_THAN reduce using rule 41 (cte_bool -> FALSE .)
    LESS_OR_EQ_THAN reduce using rule 41 (cte_bool -> FALSE .)
    DIFFERENT_TO    reduce using rule 41 (cte_bool -> FALSE .)
    MORE_THAN       reduce using rule 41 (cte_bool -> FALSE .)
    LESS_THAN       reduce using rule 41 (cte_bool -> FALSE .)
    COMMA           reduce using rule 41 (cte_bool -> FALSE .)
    CLOSE_PTH       reduce using rule 41 (cte_bool -> FALSE .)
    PEN_DOWN        reduce using rule 41 (cte_bool -> FALSE .)
    PEN_UP          reduce using rule 41 (cte_bool -> FALSE .)
    WHILE           reduce using rule 41 (cte_bool -> FALSE .)
    IF              reduce using rule 41 (cte_bool -> FALSE .)
    WRITE           reduce using rule 41 (cte_bool -> FALSE .)
    READ            reduce using rule 41 (cte_bool -> FALSE .)
    ID              reduce using rule 41 (cte_bool -> FALSE .)
    BOOL            reduce using rule 41 (cte_bool -> FALSE .)
    WORD            reduce using rule 41 (cte_bool -> FALSE .)
    NUMBER          reduce using rule 41 (cte_bool -> FALSE .)
    CENTER          reduce using rule 41 (cte_bool -> FALSE .)
    FORWARD         reduce using rule 41 (cte_bool -> FALSE .)
    RIGHT           reduce using rule 41 (cte_bool -> FALSE .)
    LEFT            reduce using rule 41 (cte_bool -> FALSE .)
    END             reduce using rule 41 (cte_bool -> FALSE .)
    ELSE            reduce using rule 41 (cte_bool -> FALSE .)
    CLOSE_SQR       reduce using rule 41 (cte_bool -> FALSE .)


state 82

    (42) cte_bool -> TRUE .
    OR              reduce using rule 42 (cte_bool -> TRUE .)
    AND             reduce using rule 42 (cte_bool -> TRUE .)
    DIV             reduce using rule 42 (cte_bool -> TRUE .)
    MULT            reduce using rule 42 (cte_bool -> TRUE .)
    SUB             reduce using rule 42 (cte_bool -> TRUE .)
    SUM             reduce using rule 42 (cte_bool -> TRUE .)
    EQUAL_TO        reduce using rule 42 (cte_bool -> TRUE .)
    MORE_OR_EQ_THAN reduce using rule 42 (cte_bool -> TRUE .)
    LESS_OR_EQ_THAN reduce using rule 42 (cte_bool -> TRUE .)
    DIFFERENT_TO    reduce using rule 42 (cte_bool -> TRUE .)
    MORE_THAN       reduce using rule 42 (cte_bool -> TRUE .)
    LESS_THAN       reduce using rule 42 (cte_bool -> TRUE .)
    COMMA           reduce using rule 42 (cte_bool -> TRUE .)
    CLOSE_PTH       reduce using rule 42 (cte_bool -> TRUE .)
    PEN_DOWN        reduce using rule 42 (cte_bool -> TRUE .)
    PEN_UP          reduce using rule 42 (cte_bool -> TRUE .)
    WHILE           reduce using rule 42 (cte_bool -> TRUE .)
    IF              reduce using rule 42 (cte_bool -> TRUE .)
    WRITE           reduce using rule 42 (cte_bool -> TRUE .)
    READ            reduce using rule 42 (cte_bool -> TRUE .)
    ID              reduce using rule 42 (cte_bool -> TRUE .)
    BOOL            reduce using rule 42 (cte_bool -> TRUE .)
    WORD            reduce using rule 42 (cte_bool -> TRUE .)
    NUMBER          reduce using rule 42 (cte_bool -> TRUE .)
    CENTER          reduce using rule 42 (cte_bool -> TRUE .)
    FORWARD         reduce using rule 42 (cte_bool -> TRUE .)
    RIGHT           reduce using rule 42 (cte_bool -> TRUE .)
    LEFT            reduce using rule 42 (cte_bool -> TRUE .)
    END             reduce using rule 42 (cte_bool -> TRUE .)
    ELSE            reduce using rule 42 (cte_bool -> TRUE .)
    CLOSE_SQR       reduce using rule 42 (cte_bool -> TRUE .)


state 83

    (86) if_stmnt -> IF con_expression . stmnt else_stmnt
    (20) stmnt -> . empty
    (21) stmnt -> . var_declaration_func stmnt
    (22) stmnt -> . pen_func stmnt
    (23) stmnt -> . move_func stmnt
    (24) stmnt -> . while_stmnt stmnt
    (25) stmnt -> . if_stmnt stmnt
    (26) stmnt -> . write stmnt
    (27) stmnt -> . read stmnt
    (28) stmnt -> . func_call stmnt
    (29) stmnt -> . var_assignation stmnt
    (99) empty -> .
    (30) var_declaration_func -> . var_type ID multiple_vars
    (96) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (97) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (91) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (89) while_stmnt -> . WHILE con_expression stmnt END
    (86) if_stmnt -> . IF con_expression stmnt else_stmnt
    (85) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (77) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (73) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (31) var_assignation -> . id e5 assign e6 expression q3
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (92) move_type -> . CENTER
    (93) move_type -> . FORWARD
    (94) move_type -> . RIGHT
    (95) move_type -> . LEFT
    (34) id -> . ID
    END             reduce using rule 99 (empty -> .)
    ELSE            reduce using rule 99 (empty -> .)
    PEN_DOWN        shift and go to state 38
    PEN_UP          shift and go to state 39
    WHILE           shift and go to state 41
    IF              shift and go to state 42
    WRITE           shift and go to state 43
    READ            shift and go to state 44
    ID              shift and go to state 37
    BOOL            shift and go to state 8
    WORD            shift and go to state 9
    NUMBER          shift and go to state 10
    CENTER          shift and go to state 46
    FORWARD         shift and go to state 47
    RIGHT           shift and go to state 48
    LEFT            shift and go to state 49

    stmnt                          shift and go to state 121
    empty                          shift and go to state 26
    var_declaration_func           shift and go to state 27
    pen_func                       shift and go to state 28
    move_func                      shift and go to state 29
    while_stmnt                    shift and go to state 30
    if_stmnt                       shift and go to state 31
    write                          shift and go to state 32
    read                           shift and go to state 33
    func_call                      shift and go to state 34
    var_assignation                shift and go to state 35
    var_type                       shift and go to state 36
    move_type                      shift and go to state 40
    id                             shift and go to state 45

state 84

    (85) write -> WRITE OPEN_PTH . expression CLOSE_PTH
    (43) expression -> . exp
    (44) expression -> . exp rel_op e4 exp
    (46) exp -> . termino q1
    (47) exp -> . termino term_op e3 termino q1
    (52) termino -> . factor q2
    (53) termino -> . factor fact_op e2 factor q2
    (59) factor -> . var_cte e1
    (60) factor -> . expression
    (61) factor -> . open_pth expression close_pth
    (36) var_cte -> . func_call
    (37) var_cte -> . cte_bool
    (38) var_cte -> . CTE_STR
    (39) var_cte -> . CTE_NUM
    (40) var_cte -> . variable
    (63) open_pth -> . OPEN_PTH
    (73) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (41) cte_bool -> . FALSE
    (42) cte_bool -> . TRUE
    (78) variable -> . ID array
    CTE_STR         shift and go to state 76
    CTE_NUM         shift and go to state 77
    OPEN_PTH        shift and go to state 79
    ID              shift and go to state 80
    FALSE           shift and go to state 81
    TRUE            shift and go to state 82

    expression                     shift and go to state 122
    exp                            shift and go to state 69
    termino                        shift and go to state 70
    factor                         shift and go to state 71
    var_cte                        shift and go to state 72
    open_pth                       shift and go to state 73
    func_call                      shift and go to state 74
    cte_bool                       shift and go to state 75
    variable                       shift and go to state 78

state 85

    (77) read -> READ OPEN_PTH . variable multiple_vars CLOSE_PTH
    (78) variable -> . ID array
    ID              shift and go to state 124

    variable                       shift and go to state 123

state 86

    (31) var_assignation -> id e5 . assign e6 expression q3
    (35) assign -> . ASSIGN
    ASSIGN          shift and go to state 126

    assign                         shift and go to state 125

state 87

    (11) func_declaration -> func_type FUNC ID OPEN_PTH . parameter CLOSE_PTH stmnt END
    (16) parameter -> . empty
    (17) parameter -> . var_type ID multiple_parameters
    (99) empty -> .
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    CLOSE_PTH       reduce using rule 99 (empty -> .)
    BOOL            shift and go to state 8
    WORD            shift and go to state 9
    NUMBER          shift and go to state 10

    parameter                      shift and go to state 127
    empty                          shift and go to state 128
    var_type                       shift and go to state 129

state 88

    (6) multiple_var -> COMMA ID multiple_var .
    BOOL            reduce using rule 6 (multiple_var -> COMMA ID multiple_var .)
    WORD            reduce using rule 6 (multiple_var -> COMMA ID multiple_var .)
    NUMBER          reduce using rule 6 (multiple_var -> COMMA ID multiple_var .)
    VOID            reduce using rule 6 (multiple_var -> COMMA ID multiple_var .)
    MAIN            reduce using rule 6 (multiple_var -> COMMA ID multiple_var .)


state 89

    (30) var_declaration_func -> var_type ID multiple_vars .
    PEN_DOWN        reduce using rule 30 (var_declaration_func -> var_type ID multiple_vars .)
    PEN_UP          reduce using rule 30 (var_declaration_func -> var_type ID multiple_vars .)
    WHILE           reduce using rule 30 (var_declaration_func -> var_type ID multiple_vars .)
    IF              reduce using rule 30 (var_declaration_func -> var_type ID multiple_vars .)
    WRITE           reduce using rule 30 (var_declaration_func -> var_type ID multiple_vars .)
    READ            reduce using rule 30 (var_declaration_func -> var_type ID multiple_vars .)
    ID              reduce using rule 30 (var_declaration_func -> var_type ID multiple_vars .)
    BOOL            reduce using rule 30 (var_declaration_func -> var_type ID multiple_vars .)
    WORD            reduce using rule 30 (var_declaration_func -> var_type ID multiple_vars .)
    NUMBER          reduce using rule 30 (var_declaration_func -> var_type ID multiple_vars .)
    CENTER          reduce using rule 30 (var_declaration_func -> var_type ID multiple_vars .)
    FORWARD         reduce using rule 30 (var_declaration_func -> var_type ID multiple_vars .)
    RIGHT           reduce using rule 30 (var_declaration_func -> var_type ID multiple_vars .)
    LEFT            reduce using rule 30 (var_declaration_func -> var_type ID multiple_vars .)
    END             reduce using rule 30 (var_declaration_func -> var_type ID multiple_vars .)
    ELSE            reduce using rule 30 (var_declaration_func -> var_type ID multiple_vars .)


state 90

    (83) multiple_vars -> empty .
    PEN_DOWN        reduce using rule 83 (multiple_vars -> empty .)
    PEN_UP          reduce using rule 83 (multiple_vars -> empty .)
    WHILE           reduce using rule 83 (multiple_vars -> empty .)
    IF              reduce using rule 83 (multiple_vars -> empty .)
    WRITE           reduce using rule 83 (multiple_vars -> empty .)
    READ            reduce using rule 83 (multiple_vars -> empty .)
    ID              reduce using rule 83 (multiple_vars -> empty .)
    BOOL            reduce using rule 83 (multiple_vars -> empty .)
    WORD            reduce using rule 83 (multiple_vars -> empty .)
    NUMBER          reduce using rule 83 (multiple_vars -> empty .)
    CENTER          reduce using rule 83 (multiple_vars -> empty .)
    FORWARD         reduce using rule 83 (multiple_vars -> empty .)
    RIGHT           reduce using rule 83 (multiple_vars -> empty .)
    LEFT            reduce using rule 83 (multiple_vars -> empty .)
    END             reduce using rule 83 (multiple_vars -> empty .)
    ELSE            reduce using rule 83 (multiple_vars -> empty .)
    CLOSE_PTH       reduce using rule 83 (multiple_vars -> empty .)


state 91

    (84) multiple_vars -> COMMA . variable
    (78) variable -> . ID array
    ID              shift and go to state 124

    variable                       shift and go to state 130

state 92

    (73) func_call -> ID OPEN_PTH func_call_param . CLOSE_PTH
    CLOSE_PTH       shift and go to state 131


state 93

    (74) func_call_param -> expression . multiple_fc_param
    (60) factor -> expression .
    (75) multiple_fc_param -> . empty
    (76) multiple_fc_param -> . COMMA func_call_param
    (99) empty -> .
  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for CLOSE_PTH resolved using rule 60 (factor -> expression .)
    CLOSE_PTH       reduce using rule 60 (factor -> expression .)
    DIV             reduce using rule 60 (factor -> expression .)
    MULT            reduce using rule 60 (factor -> expression .)
    SUB             reduce using rule 60 (factor -> expression .)
    SUM             reduce using rule 60 (factor -> expression .)
    EQUAL_TO        reduce using rule 60 (factor -> expression .)
    MORE_OR_EQ_THAN reduce using rule 60 (factor -> expression .)
    LESS_OR_EQ_THAN reduce using rule 60 (factor -> expression .)
    DIFFERENT_TO    reduce using rule 60 (factor -> expression .)
    MORE_THAN       reduce using rule 60 (factor -> expression .)
    LESS_THAN       reduce using rule 60 (factor -> expression .)
    COMMA           shift and go to state 134

    multiple_fc_param              shift and go to state 132
    empty                          shift and go to state 133

state 94

    (96) pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .
    PEN_DOWN        reduce using rule 96 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    PEN_UP          reduce using rule 96 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    WHILE           reduce using rule 96 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    IF              reduce using rule 96 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    WRITE           reduce using rule 96 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    READ            reduce using rule 96 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    ID              reduce using rule 96 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    BOOL            reduce using rule 96 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    WORD            reduce using rule 96 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    NUMBER          reduce using rule 96 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    CENTER          reduce using rule 96 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    FORWARD         reduce using rule 96 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    RIGHT           reduce using rule 96 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    LEFT            reduce using rule 96 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    END             reduce using rule 96 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    ELSE            reduce using rule 96 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)


state 95

    (97) pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .
    PEN_DOWN        reduce using rule 97 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    PEN_UP          reduce using rule 97 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    WHILE           reduce using rule 97 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    IF              reduce using rule 97 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    WRITE           reduce using rule 97 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    READ            reduce using rule 97 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    ID              reduce using rule 97 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    BOOL            reduce using rule 97 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    WORD            reduce using rule 97 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    NUMBER          reduce using rule 97 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    CENTER          reduce using rule 97 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    FORWARD         reduce using rule 97 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    RIGHT           reduce using rule 97 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    LEFT            reduce using rule 97 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    END             reduce using rule 97 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    ELSE            reduce using rule 97 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)


state 96

    (91) move_func -> move_type OPEN_PTH func_call_param . CLOSE_PTH
    CLOSE_PTH       shift and go to state 135


state 97

    (89) while_stmnt -> WHILE con_expression stmnt . END
    END             shift and go to state 136


state 98

    (90) con_expression -> expression log_op . expression
    (43) expression -> . exp
    (44) expression -> . exp rel_op e4 exp
    (46) exp -> . termino q1
    (47) exp -> . termino term_op e3 termino q1
    (52) termino -> . factor q2
    (53) termino -> . factor fact_op e2 factor q2
    (59) factor -> . var_cte e1
    (60) factor -> . expression
    (61) factor -> . open_pth expression close_pth
    (36) var_cte -> . func_call
    (37) var_cte -> . cte_bool
    (38) var_cte -> . CTE_STR
    (39) var_cte -> . CTE_NUM
    (40) var_cte -> . variable
    (63) open_pth -> . OPEN_PTH
    (73) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (41) cte_bool -> . FALSE
    (42) cte_bool -> . TRUE
    (78) variable -> . ID array
    CTE_STR         shift and go to state 76
    CTE_NUM         shift and go to state 77
    OPEN_PTH        shift and go to state 79
    ID              shift and go to state 80
    FALSE           shift and go to state 81
    TRUE            shift and go to state 82

    expression                     shift and go to state 137
    exp                            shift and go to state 69
    termino                        shift and go to state 70
    factor                         shift and go to state 71
    var_cte                        shift and go to state 72
    open_pth                       shift and go to state 73
    func_call                      shift and go to state 74
    cte_bool                       shift and go to state 75
    variable                       shift and go to state 78

state 99

    (65) log_op -> OR .
    CTE_STR         reduce using rule 65 (log_op -> OR .)
    CTE_NUM         reduce using rule 65 (log_op -> OR .)
    OPEN_PTH        reduce using rule 65 (log_op -> OR .)
    ID              reduce using rule 65 (log_op -> OR .)
    FALSE           reduce using rule 65 (log_op -> OR .)
    TRUE            reduce using rule 65 (log_op -> OR .)


state 100

    (66) log_op -> AND .
    CTE_STR         reduce using rule 66 (log_op -> AND .)
    CTE_NUM         reduce using rule 66 (log_op -> AND .)
    OPEN_PTH        reduce using rule 66 (log_op -> AND .)
    ID              reduce using rule 66 (log_op -> AND .)
    FALSE           reduce using rule 66 (log_op -> AND .)
    TRUE            reduce using rule 66 (log_op -> AND .)


state 101

    (44) expression -> exp rel_op . e4 exp
    (45) e4 -> .
    CTE_STR         reduce using rule 45 (e4 -> .)
    CTE_NUM         reduce using rule 45 (e4 -> .)
    OPEN_PTH        reduce using rule 45 (e4 -> .)
    ID              reduce using rule 45 (e4 -> .)
    FALSE           reduce using rule 45 (e4 -> .)
    TRUE            reduce using rule 45 (e4 -> .)

    e4                             shift and go to state 138

state 102

    (67) rel_op -> EQUAL_TO .
    CTE_STR         reduce using rule 67 (rel_op -> EQUAL_TO .)
    CTE_NUM         reduce using rule 67 (rel_op -> EQUAL_TO .)
    OPEN_PTH        reduce using rule 67 (rel_op -> EQUAL_TO .)
    ID              reduce using rule 67 (rel_op -> EQUAL_TO .)
    FALSE           reduce using rule 67 (rel_op -> EQUAL_TO .)
    TRUE            reduce using rule 67 (rel_op -> EQUAL_TO .)


state 103

    (68) rel_op -> MORE_OR_EQ_THAN .
    CTE_STR         reduce using rule 68 (rel_op -> MORE_OR_EQ_THAN .)
    CTE_NUM         reduce using rule 68 (rel_op -> MORE_OR_EQ_THAN .)
    OPEN_PTH        reduce using rule 68 (rel_op -> MORE_OR_EQ_THAN .)
    ID              reduce using rule 68 (rel_op -> MORE_OR_EQ_THAN .)
    FALSE           reduce using rule 68 (rel_op -> MORE_OR_EQ_THAN .)
    TRUE            reduce using rule 68 (rel_op -> MORE_OR_EQ_THAN .)


state 104

    (69) rel_op -> LESS_OR_EQ_THAN .
    CTE_STR         reduce using rule 69 (rel_op -> LESS_OR_EQ_THAN .)
    CTE_NUM         reduce using rule 69 (rel_op -> LESS_OR_EQ_THAN .)
    OPEN_PTH        reduce using rule 69 (rel_op -> LESS_OR_EQ_THAN .)
    ID              reduce using rule 69 (rel_op -> LESS_OR_EQ_THAN .)
    FALSE           reduce using rule 69 (rel_op -> LESS_OR_EQ_THAN .)
    TRUE            reduce using rule 69 (rel_op -> LESS_OR_EQ_THAN .)


state 105

    (70) rel_op -> DIFFERENT_TO .
    CTE_STR         reduce using rule 70 (rel_op -> DIFFERENT_TO .)
    CTE_NUM         reduce using rule 70 (rel_op -> DIFFERENT_TO .)
    OPEN_PTH        reduce using rule 70 (rel_op -> DIFFERENT_TO .)
    ID              reduce using rule 70 (rel_op -> DIFFERENT_TO .)
    FALSE           reduce using rule 70 (rel_op -> DIFFERENT_TO .)
    TRUE            reduce using rule 70 (rel_op -> DIFFERENT_TO .)


state 106

    (71) rel_op -> MORE_THAN .
    CTE_STR         reduce using rule 71 (rel_op -> MORE_THAN .)
    CTE_NUM         reduce using rule 71 (rel_op -> MORE_THAN .)
    OPEN_PTH        reduce using rule 71 (rel_op -> MORE_THAN .)
    ID              reduce using rule 71 (rel_op -> MORE_THAN .)
    FALSE           reduce using rule 71 (rel_op -> MORE_THAN .)
    TRUE            reduce using rule 71 (rel_op -> MORE_THAN .)


state 107

    (72) rel_op -> LESS_THAN .
    CTE_STR         reduce using rule 72 (rel_op -> LESS_THAN .)
    CTE_NUM         reduce using rule 72 (rel_op -> LESS_THAN .)
    OPEN_PTH        reduce using rule 72 (rel_op -> LESS_THAN .)
    ID              reduce using rule 72 (rel_op -> LESS_THAN .)
    FALSE           reduce using rule 72 (rel_op -> LESS_THAN .)
    TRUE            reduce using rule 72 (rel_op -> LESS_THAN .)


state 108

    (46) exp -> termino q1 .
    OR              reduce using rule 46 (exp -> termino q1 .)
    AND             reduce using rule 46 (exp -> termino q1 .)
    DIV             reduce using rule 46 (exp -> termino q1 .)
    MULT            reduce using rule 46 (exp -> termino q1 .)
    SUB             reduce using rule 46 (exp -> termino q1 .)
    SUM             reduce using rule 46 (exp -> termino q1 .)
    EQUAL_TO        reduce using rule 46 (exp -> termino q1 .)
    MORE_OR_EQ_THAN reduce using rule 46 (exp -> termino q1 .)
    LESS_OR_EQ_THAN reduce using rule 46 (exp -> termino q1 .)
    DIFFERENT_TO    reduce using rule 46 (exp -> termino q1 .)
    MORE_THAN       reduce using rule 46 (exp -> termino q1 .)
    LESS_THAN       reduce using rule 46 (exp -> termino q1 .)
    COMMA           reduce using rule 46 (exp -> termino q1 .)
    CLOSE_PTH       reduce using rule 46 (exp -> termino q1 .)
    PEN_DOWN        reduce using rule 46 (exp -> termino q1 .)
    PEN_UP          reduce using rule 46 (exp -> termino q1 .)
    WHILE           reduce using rule 46 (exp -> termino q1 .)
    IF              reduce using rule 46 (exp -> termino q1 .)
    WRITE           reduce using rule 46 (exp -> termino q1 .)
    READ            reduce using rule 46 (exp -> termino q1 .)
    ID              reduce using rule 46 (exp -> termino q1 .)
    BOOL            reduce using rule 46 (exp -> termino q1 .)
    WORD            reduce using rule 46 (exp -> termino q1 .)
    NUMBER          reduce using rule 46 (exp -> termino q1 .)
    CENTER          reduce using rule 46 (exp -> termino q1 .)
    FORWARD         reduce using rule 46 (exp -> termino q1 .)
    RIGHT           reduce using rule 46 (exp -> termino q1 .)
    LEFT            reduce using rule 46 (exp -> termino q1 .)
    END             reduce using rule 46 (exp -> termino q1 .)
    ELSE            reduce using rule 46 (exp -> termino q1 .)
    CLOSE_SQR       reduce using rule 46 (exp -> termino q1 .)


state 109

    (47) exp -> termino term_op . e3 termino q1
    (48) e3 -> .
    CTE_STR         reduce using rule 48 (e3 -> .)
    CTE_NUM         reduce using rule 48 (e3 -> .)
    OPEN_PTH        reduce using rule 48 (e3 -> .)
    ID              reduce using rule 48 (e3 -> .)
    FALSE           reduce using rule 48 (e3 -> .)
    TRUE            reduce using rule 48 (e3 -> .)

    e3                             shift and go to state 139

state 110

    (50) term_op -> SUB .
    CTE_STR         reduce using rule 50 (term_op -> SUB .)
    CTE_NUM         reduce using rule 50 (term_op -> SUB .)
    OPEN_PTH        reduce using rule 50 (term_op -> SUB .)
    ID              reduce using rule 50 (term_op -> SUB .)
    FALSE           reduce using rule 50 (term_op -> SUB .)
    TRUE            reduce using rule 50 (term_op -> SUB .)


state 111

    (51) term_op -> SUM .
    CTE_STR         reduce using rule 51 (term_op -> SUM .)
    CTE_NUM         reduce using rule 51 (term_op -> SUM .)
    OPEN_PTH        reduce using rule 51 (term_op -> SUM .)
    ID              reduce using rule 51 (term_op -> SUM .)
    FALSE           reduce using rule 51 (term_op -> SUM .)
    TRUE            reduce using rule 51 (term_op -> SUM .)


state 112

    (52) termino -> factor q2 .
    OR              reduce using rule 52 (termino -> factor q2 .)
    AND             reduce using rule 52 (termino -> factor q2 .)
    DIV             reduce using rule 52 (termino -> factor q2 .)
    MULT            reduce using rule 52 (termino -> factor q2 .)
    SUB             reduce using rule 52 (termino -> factor q2 .)
    SUM             reduce using rule 52 (termino -> factor q2 .)
    EQUAL_TO        reduce using rule 52 (termino -> factor q2 .)
    MORE_OR_EQ_THAN reduce using rule 52 (termino -> factor q2 .)
    LESS_OR_EQ_THAN reduce using rule 52 (termino -> factor q2 .)
    DIFFERENT_TO    reduce using rule 52 (termino -> factor q2 .)
    MORE_THAN       reduce using rule 52 (termino -> factor q2 .)
    LESS_THAN       reduce using rule 52 (termino -> factor q2 .)
    COMMA           reduce using rule 52 (termino -> factor q2 .)
    CLOSE_PTH       reduce using rule 52 (termino -> factor q2 .)
    PEN_DOWN        reduce using rule 52 (termino -> factor q2 .)
    PEN_UP          reduce using rule 52 (termino -> factor q2 .)
    WHILE           reduce using rule 52 (termino -> factor q2 .)
    IF              reduce using rule 52 (termino -> factor q2 .)
    WRITE           reduce using rule 52 (termino -> factor q2 .)
    READ            reduce using rule 52 (termino -> factor q2 .)
    ID              reduce using rule 52 (termino -> factor q2 .)
    BOOL            reduce using rule 52 (termino -> factor q2 .)
    WORD            reduce using rule 52 (termino -> factor q2 .)
    NUMBER          reduce using rule 52 (termino -> factor q2 .)
    CENTER          reduce using rule 52 (termino -> factor q2 .)
    FORWARD         reduce using rule 52 (termino -> factor q2 .)
    RIGHT           reduce using rule 52 (termino -> factor q2 .)
    LEFT            reduce using rule 52 (termino -> factor q2 .)
    END             reduce using rule 52 (termino -> factor q2 .)
    ELSE            reduce using rule 52 (termino -> factor q2 .)
    CLOSE_SQR       reduce using rule 52 (termino -> factor q2 .)


state 113

    (53) termino -> factor fact_op . e2 factor q2
    (56) e2 -> .
    CTE_STR         reduce using rule 56 (e2 -> .)
    CTE_NUM         reduce using rule 56 (e2 -> .)
    OPEN_PTH        reduce using rule 56 (e2 -> .)
    ID              reduce using rule 56 (e2 -> .)
    FALSE           reduce using rule 56 (e2 -> .)
    TRUE            reduce using rule 56 (e2 -> .)

    e2                             shift and go to state 140

state 114

    (57) fact_op -> DIV .
    CTE_STR         reduce using rule 57 (fact_op -> DIV .)
    CTE_NUM         reduce using rule 57 (fact_op -> DIV .)
    OPEN_PTH        reduce using rule 57 (fact_op -> DIV .)
    ID              reduce using rule 57 (fact_op -> DIV .)
    FALSE           reduce using rule 57 (fact_op -> DIV .)
    TRUE            reduce using rule 57 (fact_op -> DIV .)


state 115

    (58) fact_op -> MULT .
    CTE_STR         reduce using rule 58 (fact_op -> MULT .)
    CTE_NUM         reduce using rule 58 (fact_op -> MULT .)
    OPEN_PTH        reduce using rule 58 (fact_op -> MULT .)
    ID              reduce using rule 58 (fact_op -> MULT .)
    FALSE           reduce using rule 58 (fact_op -> MULT .)
    TRUE            reduce using rule 58 (fact_op -> MULT .)


state 116

    (59) factor -> var_cte e1 .
    OR              reduce using rule 59 (factor -> var_cte e1 .)
    AND             reduce using rule 59 (factor -> var_cte e1 .)
    DIV             reduce using rule 59 (factor -> var_cte e1 .)
    MULT            reduce using rule 59 (factor -> var_cte e1 .)
    SUB             reduce using rule 59 (factor -> var_cte e1 .)
    SUM             reduce using rule 59 (factor -> var_cte e1 .)
    EQUAL_TO        reduce using rule 59 (factor -> var_cte e1 .)
    MORE_OR_EQ_THAN reduce using rule 59 (factor -> var_cte e1 .)
    LESS_OR_EQ_THAN reduce using rule 59 (factor -> var_cte e1 .)
    DIFFERENT_TO    reduce using rule 59 (factor -> var_cte e1 .)
    MORE_THAN       reduce using rule 59 (factor -> var_cte e1 .)
    LESS_THAN       reduce using rule 59 (factor -> var_cte e1 .)
    COMMA           reduce using rule 59 (factor -> var_cte e1 .)
    CLOSE_PTH       reduce using rule 59 (factor -> var_cte e1 .)
    PEN_DOWN        reduce using rule 59 (factor -> var_cte e1 .)
    PEN_UP          reduce using rule 59 (factor -> var_cte e1 .)
    WHILE           reduce using rule 59 (factor -> var_cte e1 .)
    IF              reduce using rule 59 (factor -> var_cte e1 .)
    WRITE           reduce using rule 59 (factor -> var_cte e1 .)
    READ            reduce using rule 59 (factor -> var_cte e1 .)
    ID              reduce using rule 59 (factor -> var_cte e1 .)
    BOOL            reduce using rule 59 (factor -> var_cte e1 .)
    WORD            reduce using rule 59 (factor -> var_cte e1 .)
    NUMBER          reduce using rule 59 (factor -> var_cte e1 .)
    CENTER          reduce using rule 59 (factor -> var_cte e1 .)
    FORWARD         reduce using rule 59 (factor -> var_cte e1 .)
    RIGHT           reduce using rule 59 (factor -> var_cte e1 .)
    LEFT            reduce using rule 59 (factor -> var_cte e1 .)
    END             reduce using rule 59 (factor -> var_cte e1 .)
    ELSE            reduce using rule 59 (factor -> var_cte e1 .)
    CLOSE_SQR       reduce using rule 59 (factor -> var_cte e1 .)


state 117

    (61) factor -> open_pth expression . close_pth
    (60) factor -> expression .
    (64) close_pth -> . CLOSE_PTH
  ! shift/reduce conflict for CLOSE_PTH resolved as shift
    EQUAL_TO        reduce using rule 60 (factor -> expression .)
    MORE_OR_EQ_THAN reduce using rule 60 (factor -> expression .)
    LESS_OR_EQ_THAN reduce using rule 60 (factor -> expression .)
    DIFFERENT_TO    reduce using rule 60 (factor -> expression .)
    MORE_THAN       reduce using rule 60 (factor -> expression .)
    LESS_THAN       reduce using rule 60 (factor -> expression .)
    DIV             reduce using rule 60 (factor -> expression .)
    MULT            reduce using rule 60 (factor -> expression .)
    SUB             reduce using rule 60 (factor -> expression .)
    SUM             reduce using rule 60 (factor -> expression .)
    CLOSE_PTH       shift and go to state 142

    close_pth                      shift and go to state 141

state 118

    (78) variable -> ID array .
    OR              reduce using rule 78 (variable -> ID array .)
    AND             reduce using rule 78 (variable -> ID array .)
    DIV             reduce using rule 78 (variable -> ID array .)
    MULT            reduce using rule 78 (variable -> ID array .)
    SUB             reduce using rule 78 (variable -> ID array .)
    SUM             reduce using rule 78 (variable -> ID array .)
    EQUAL_TO        reduce using rule 78 (variable -> ID array .)
    MORE_OR_EQ_THAN reduce using rule 78 (variable -> ID array .)
    LESS_OR_EQ_THAN reduce using rule 78 (variable -> ID array .)
    DIFFERENT_TO    reduce using rule 78 (variable -> ID array .)
    MORE_THAN       reduce using rule 78 (variable -> ID array .)
    LESS_THAN       reduce using rule 78 (variable -> ID array .)
    COMMA           reduce using rule 78 (variable -> ID array .)
    CLOSE_PTH       reduce using rule 78 (variable -> ID array .)
    PEN_DOWN        reduce using rule 78 (variable -> ID array .)
    PEN_UP          reduce using rule 78 (variable -> ID array .)
    WHILE           reduce using rule 78 (variable -> ID array .)
    IF              reduce using rule 78 (variable -> ID array .)
    WRITE           reduce using rule 78 (variable -> ID array .)
    READ            reduce using rule 78 (variable -> ID array .)
    ID              reduce using rule 78 (variable -> ID array .)
    BOOL            reduce using rule 78 (variable -> ID array .)
    WORD            reduce using rule 78 (variable -> ID array .)
    NUMBER          reduce using rule 78 (variable -> ID array .)
    CENTER          reduce using rule 78 (variable -> ID array .)
    FORWARD         reduce using rule 78 (variable -> ID array .)
    RIGHT           reduce using rule 78 (variable -> ID array .)
    LEFT            reduce using rule 78 (variable -> ID array .)
    END             reduce using rule 78 (variable -> ID array .)
    ELSE            reduce using rule 78 (variable -> ID array .)
    CLOSE_SQR       reduce using rule 78 (variable -> ID array .)


state 119

    (79) array -> empty .
    OR              reduce using rule 79 (array -> empty .)
    AND             reduce using rule 79 (array -> empty .)
    DIV             reduce using rule 79 (array -> empty .)
    MULT            reduce using rule 79 (array -> empty .)
    SUB             reduce using rule 79 (array -> empty .)
    SUM             reduce using rule 79 (array -> empty .)
    EQUAL_TO        reduce using rule 79 (array -> empty .)
    MORE_OR_EQ_THAN reduce using rule 79 (array -> empty .)
    LESS_OR_EQ_THAN reduce using rule 79 (array -> empty .)
    DIFFERENT_TO    reduce using rule 79 (array -> empty .)
    MORE_THAN       reduce using rule 79 (array -> empty .)
    LESS_THAN       reduce using rule 79 (array -> empty .)
    COMMA           reduce using rule 79 (array -> empty .)
    CLOSE_PTH       reduce using rule 79 (array -> empty .)
    PEN_DOWN        reduce using rule 79 (array -> empty .)
    PEN_UP          reduce using rule 79 (array -> empty .)
    WHILE           reduce using rule 79 (array -> empty .)
    IF              reduce using rule 79 (array -> empty .)
    WRITE           reduce using rule 79 (array -> empty .)
    READ            reduce using rule 79 (array -> empty .)
    ID              reduce using rule 79 (array -> empty .)
    BOOL            reduce using rule 79 (array -> empty .)
    WORD            reduce using rule 79 (array -> empty .)
    NUMBER          reduce using rule 79 (array -> empty .)
    CENTER          reduce using rule 79 (array -> empty .)
    FORWARD         reduce using rule 79 (array -> empty .)
    RIGHT           reduce using rule 79 (array -> empty .)
    LEFT            reduce using rule 79 (array -> empty .)
    END             reduce using rule 79 (array -> empty .)
    ELSE            reduce using rule 79 (array -> empty .)
    CLOSE_SQR       reduce using rule 79 (array -> empty .)


state 120

    (80) array -> OPEN_SQR . expression CLOSE_SQR matrix
    (43) expression -> . exp
    (44) expression -> . exp rel_op e4 exp
    (46) exp -> . termino q1
    (47) exp -> . termino term_op e3 termino q1
    (52) termino -> . factor q2
    (53) termino -> . factor fact_op e2 factor q2
    (59) factor -> . var_cte e1
    (60) factor -> . expression
    (61) factor -> . open_pth expression close_pth
    (36) var_cte -> . func_call
    (37) var_cte -> . cte_bool
    (38) var_cte -> . CTE_STR
    (39) var_cte -> . CTE_NUM
    (40) var_cte -> . variable
    (63) open_pth -> . OPEN_PTH
    (73) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (41) cte_bool -> . FALSE
    (42) cte_bool -> . TRUE
    (78) variable -> . ID array
    CTE_STR         shift and go to state 76
    CTE_NUM         shift and go to state 77
    OPEN_PTH        shift and go to state 79
    ID              shift and go to state 80
    FALSE           shift and go to state 81
    TRUE            shift and go to state 82

    expression                     shift and go to state 143
    exp                            shift and go to state 69
    termino                        shift and go to state 70
    factor                         shift and go to state 71
    var_cte                        shift and go to state 72
    open_pth                       shift and go to state 73
    func_call                      shift and go to state 74
    cte_bool                       shift and go to state 75
    variable                       shift and go to state 78

state 121

    (86) if_stmnt -> IF con_expression stmnt . else_stmnt
    (87) else_stmnt -> . END
    (88) else_stmnt -> . ELSE stmnt END
    END             shift and go to state 145
    ELSE            shift and go to state 146

    else_stmnt                     shift and go to state 144

state 122

    (85) write -> WRITE OPEN_PTH expression . CLOSE_PTH
    (60) factor -> expression .
  ! shift/reduce conflict for CLOSE_PTH resolved as shift
    CLOSE_PTH       shift and go to state 147
    EQUAL_TO        reduce using rule 60 (factor -> expression .)
    MORE_OR_EQ_THAN reduce using rule 60 (factor -> expression .)
    LESS_OR_EQ_THAN reduce using rule 60 (factor -> expression .)
    DIFFERENT_TO    reduce using rule 60 (factor -> expression .)
    MORE_THAN       reduce using rule 60 (factor -> expression .)
    LESS_THAN       reduce using rule 60 (factor -> expression .)
    DIV             reduce using rule 60 (factor -> expression .)
    MULT            reduce using rule 60 (factor -> expression .)
    SUB             reduce using rule 60 (factor -> expression .)
    SUM             reduce using rule 60 (factor -> expression .)


state 123

    (77) read -> READ OPEN_PTH variable . multiple_vars CLOSE_PTH
    (83) multiple_vars -> . empty
    (84) multiple_vars -> . COMMA variable
    (99) empty -> .
    COMMA           shift and go to state 91
    CLOSE_PTH       reduce using rule 99 (empty -> .)

    multiple_vars                  shift and go to state 148
    empty                          shift and go to state 90

state 124

    (78) variable -> ID . array
    (79) array -> . empty
    (80) array -> . OPEN_SQR expression CLOSE_SQR matrix
    (99) empty -> .
    OPEN_SQR        shift and go to state 120
    COMMA           reduce using rule 99 (empty -> .)
    CLOSE_PTH       reduce using rule 99 (empty -> .)
    PEN_DOWN        reduce using rule 99 (empty -> .)
    PEN_UP          reduce using rule 99 (empty -> .)
    WHILE           reduce using rule 99 (empty -> .)
    IF              reduce using rule 99 (empty -> .)
    WRITE           reduce using rule 99 (empty -> .)
    READ            reduce using rule 99 (empty -> .)
    ID              reduce using rule 99 (empty -> .)
    BOOL            reduce using rule 99 (empty -> .)
    WORD            reduce using rule 99 (empty -> .)
    NUMBER          reduce using rule 99 (empty -> .)
    CENTER          reduce using rule 99 (empty -> .)
    FORWARD         reduce using rule 99 (empty -> .)
    RIGHT           reduce using rule 99 (empty -> .)
    LEFT            reduce using rule 99 (empty -> .)
    END             reduce using rule 99 (empty -> .)
    ELSE            reduce using rule 99 (empty -> .)

    array                          shift and go to state 118
    empty                          shift and go to state 119

state 125

    (31) var_assignation -> id e5 assign . e6 expression q3
    (33) e6 -> .
    CTE_STR         reduce using rule 33 (e6 -> .)
    CTE_NUM         reduce using rule 33 (e6 -> .)
    OPEN_PTH        reduce using rule 33 (e6 -> .)
    ID              reduce using rule 33 (e6 -> .)
    FALSE           reduce using rule 33 (e6 -> .)
    TRUE            reduce using rule 33 (e6 -> .)

    e6                             shift and go to state 149

state 126

    (35) assign -> ASSIGN .
    CTE_STR         reduce using rule 35 (assign -> ASSIGN .)
    CTE_NUM         reduce using rule 35 (assign -> ASSIGN .)
    OPEN_PTH        reduce using rule 35 (assign -> ASSIGN .)
    ID              reduce using rule 35 (assign -> ASSIGN .)
    FALSE           reduce using rule 35 (assign -> ASSIGN .)
    TRUE            reduce using rule 35 (assign -> ASSIGN .)


state 127

    (11) func_declaration -> func_type FUNC ID OPEN_PTH parameter . CLOSE_PTH stmnt END
    CLOSE_PTH       shift and go to state 150


state 128

    (16) parameter -> empty .
    CLOSE_PTH       reduce using rule 16 (parameter -> empty .)


state 129

    (17) parameter -> var_type . ID multiple_parameters
    ID              shift and go to state 151


state 130

    (84) multiple_vars -> COMMA variable .
    PEN_DOWN        reduce using rule 84 (multiple_vars -> COMMA variable .)
    PEN_UP          reduce using rule 84 (multiple_vars -> COMMA variable .)
    WHILE           reduce using rule 84 (multiple_vars -> COMMA variable .)
    IF              reduce using rule 84 (multiple_vars -> COMMA variable .)
    WRITE           reduce using rule 84 (multiple_vars -> COMMA variable .)
    READ            reduce using rule 84 (multiple_vars -> COMMA variable .)
    ID              reduce using rule 84 (multiple_vars -> COMMA variable .)
    BOOL            reduce using rule 84 (multiple_vars -> COMMA variable .)
    WORD            reduce using rule 84 (multiple_vars -> COMMA variable .)
    NUMBER          reduce using rule 84 (multiple_vars -> COMMA variable .)
    CENTER          reduce using rule 84 (multiple_vars -> COMMA variable .)
    FORWARD         reduce using rule 84 (multiple_vars -> COMMA variable .)
    RIGHT           reduce using rule 84 (multiple_vars -> COMMA variable .)
    LEFT            reduce using rule 84 (multiple_vars -> COMMA variable .)
    END             reduce using rule 84 (multiple_vars -> COMMA variable .)
    ELSE            reduce using rule 84 (multiple_vars -> COMMA variable .)
    CLOSE_PTH       reduce using rule 84 (multiple_vars -> COMMA variable .)


state 131

    (73) func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .
    PEN_DOWN        reduce using rule 73 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    PEN_UP          reduce using rule 73 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    WHILE           reduce using rule 73 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    IF              reduce using rule 73 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    WRITE           reduce using rule 73 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    READ            reduce using rule 73 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    ID              reduce using rule 73 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    BOOL            reduce using rule 73 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    WORD            reduce using rule 73 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    NUMBER          reduce using rule 73 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    CENTER          reduce using rule 73 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    FORWARD         reduce using rule 73 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    RIGHT           reduce using rule 73 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    LEFT            reduce using rule 73 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    END             reduce using rule 73 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    ELSE            reduce using rule 73 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    OR              reduce using rule 73 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    AND             reduce using rule 73 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    DIV             reduce using rule 73 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    MULT            reduce using rule 73 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    SUB             reduce using rule 73 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    SUM             reduce using rule 73 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    EQUAL_TO        reduce using rule 73 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    MORE_OR_EQ_THAN reduce using rule 73 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    LESS_OR_EQ_THAN reduce using rule 73 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    DIFFERENT_TO    reduce using rule 73 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    MORE_THAN       reduce using rule 73 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    LESS_THAN       reduce using rule 73 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    COMMA           reduce using rule 73 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    CLOSE_PTH       reduce using rule 73 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    CLOSE_SQR       reduce using rule 73 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)


state 132

    (74) func_call_param -> expression multiple_fc_param .
    CLOSE_PTH       reduce using rule 74 (func_call_param -> expression multiple_fc_param .)


state 133

    (75) multiple_fc_param -> empty .
    CLOSE_PTH       reduce using rule 75 (multiple_fc_param -> empty .)


state 134

    (76) multiple_fc_param -> COMMA . func_call_param
    (74) func_call_param -> . expression multiple_fc_param
    (43) expression -> . exp
    (44) expression -> . exp rel_op e4 exp
    (46) exp -> . termino q1
    (47) exp -> . termino term_op e3 termino q1
    (52) termino -> . factor q2
    (53) termino -> . factor fact_op e2 factor q2
    (59) factor -> . var_cte e1
    (60) factor -> . expression
    (61) factor -> . open_pth expression close_pth
    (36) var_cte -> . func_call
    (37) var_cte -> . cte_bool
    (38) var_cte -> . CTE_STR
    (39) var_cte -> . CTE_NUM
    (40) var_cte -> . variable
    (63) open_pth -> . OPEN_PTH
    (73) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (41) cte_bool -> . FALSE
    (42) cte_bool -> . TRUE
    (78) variable -> . ID array
    CTE_STR         shift and go to state 76
    CTE_NUM         shift and go to state 77
    OPEN_PTH        shift and go to state 79
    ID              shift and go to state 80
    FALSE           shift and go to state 81
    TRUE            shift and go to state 82

    func_call_param                shift and go to state 152
    expression                     shift and go to state 93
    exp                            shift and go to state 69
    termino                        shift and go to state 70
    factor                         shift and go to state 71
    var_cte                        shift and go to state 72
    open_pth                       shift and go to state 73
    func_call                      shift and go to state 74
    cte_bool                       shift and go to state 75
    variable                       shift and go to state 78

state 135

    (91) move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .
    PEN_DOWN        reduce using rule 91 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    PEN_UP          reduce using rule 91 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    WHILE           reduce using rule 91 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    IF              reduce using rule 91 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    WRITE           reduce using rule 91 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    READ            reduce using rule 91 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    ID              reduce using rule 91 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    BOOL            reduce using rule 91 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    WORD            reduce using rule 91 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    NUMBER          reduce using rule 91 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    CENTER          reduce using rule 91 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    FORWARD         reduce using rule 91 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    RIGHT           reduce using rule 91 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    LEFT            reduce using rule 91 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    END             reduce using rule 91 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    ELSE            reduce using rule 91 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)


state 136

    (89) while_stmnt -> WHILE con_expression stmnt END .
    PEN_DOWN        reduce using rule 89 (while_stmnt -> WHILE con_expression stmnt END .)
    PEN_UP          reduce using rule 89 (while_stmnt -> WHILE con_expression stmnt END .)
    WHILE           reduce using rule 89 (while_stmnt -> WHILE con_expression stmnt END .)
    IF              reduce using rule 89 (while_stmnt -> WHILE con_expression stmnt END .)
    WRITE           reduce using rule 89 (while_stmnt -> WHILE con_expression stmnt END .)
    READ            reduce using rule 89 (while_stmnt -> WHILE con_expression stmnt END .)
    ID              reduce using rule 89 (while_stmnt -> WHILE con_expression stmnt END .)
    BOOL            reduce using rule 89 (while_stmnt -> WHILE con_expression stmnt END .)
    WORD            reduce using rule 89 (while_stmnt -> WHILE con_expression stmnt END .)
    NUMBER          reduce using rule 89 (while_stmnt -> WHILE con_expression stmnt END .)
    CENTER          reduce using rule 89 (while_stmnt -> WHILE con_expression stmnt END .)
    FORWARD         reduce using rule 89 (while_stmnt -> WHILE con_expression stmnt END .)
    RIGHT           reduce using rule 89 (while_stmnt -> WHILE con_expression stmnt END .)
    LEFT            reduce using rule 89 (while_stmnt -> WHILE con_expression stmnt END .)
    END             reduce using rule 89 (while_stmnt -> WHILE con_expression stmnt END .)
    ELSE            reduce using rule 89 (while_stmnt -> WHILE con_expression stmnt END .)


state 137

    (90) con_expression -> expression log_op expression .
    (60) factor -> expression .
  ! reduce/reduce conflict for PEN_DOWN resolved using rule 60 (factor -> expression .)
  ! reduce/reduce conflict for PEN_UP resolved using rule 60 (factor -> expression .)
  ! reduce/reduce conflict for WHILE resolved using rule 60 (factor -> expression .)
  ! reduce/reduce conflict for IF resolved using rule 60 (factor -> expression .)
  ! reduce/reduce conflict for WRITE resolved using rule 60 (factor -> expression .)
  ! reduce/reduce conflict for READ resolved using rule 60 (factor -> expression .)
  ! reduce/reduce conflict for ID resolved using rule 60 (factor -> expression .)
  ! reduce/reduce conflict for BOOL resolved using rule 60 (factor -> expression .)
  ! reduce/reduce conflict for WORD resolved using rule 60 (factor -> expression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 60 (factor -> expression .)
  ! reduce/reduce conflict for CENTER resolved using rule 60 (factor -> expression .)
  ! reduce/reduce conflict for FORWARD resolved using rule 60 (factor -> expression .)
  ! reduce/reduce conflict for RIGHT resolved using rule 60 (factor -> expression .)
  ! reduce/reduce conflict for LEFT resolved using rule 60 (factor -> expression .)
  ! reduce/reduce conflict for END resolved using rule 60 (factor -> expression .)
  ! reduce/reduce conflict for ELSE resolved using rule 60 (factor -> expression .)
    EQUAL_TO        reduce using rule 60 (factor -> expression .)
    MORE_OR_EQ_THAN reduce using rule 60 (factor -> expression .)
    LESS_OR_EQ_THAN reduce using rule 60 (factor -> expression .)
    DIFFERENT_TO    reduce using rule 60 (factor -> expression .)
    MORE_THAN       reduce using rule 60 (factor -> expression .)
    LESS_THAN       reduce using rule 60 (factor -> expression .)
    PEN_DOWN        reduce using rule 60 (factor -> expression .)
    PEN_UP          reduce using rule 60 (factor -> expression .)
    WHILE           reduce using rule 60 (factor -> expression .)
    IF              reduce using rule 60 (factor -> expression .)
    WRITE           reduce using rule 60 (factor -> expression .)
    READ            reduce using rule 60 (factor -> expression .)
    ID              reduce using rule 60 (factor -> expression .)
    BOOL            reduce using rule 60 (factor -> expression .)
    WORD            reduce using rule 60 (factor -> expression .)
    NUMBER          reduce using rule 60 (factor -> expression .)
    CENTER          reduce using rule 60 (factor -> expression .)
    FORWARD         reduce using rule 60 (factor -> expression .)
    RIGHT           reduce using rule 60 (factor -> expression .)
    LEFT            reduce using rule 60 (factor -> expression .)
    END             reduce using rule 60 (factor -> expression .)
    ELSE            reduce using rule 60 (factor -> expression .)
    DIV             reduce using rule 60 (factor -> expression .)
    MULT            reduce using rule 60 (factor -> expression .)
    SUB             reduce using rule 60 (factor -> expression .)
    SUM             reduce using rule 60 (factor -> expression .)


state 138

    (44) expression -> exp rel_op e4 . exp
    (46) exp -> . termino q1
    (47) exp -> . termino term_op e3 termino q1
    (52) termino -> . factor q2
    (53) termino -> . factor fact_op e2 factor q2
    (59) factor -> . var_cte e1
    (60) factor -> . expression
    (61) factor -> . open_pth expression close_pth
    (36) var_cte -> . func_call
    (37) var_cte -> . cte_bool
    (38) var_cte -> . CTE_STR
    (39) var_cte -> . CTE_NUM
    (40) var_cte -> . variable
    (43) expression -> . exp
    (44) expression -> . exp rel_op e4 exp
    (63) open_pth -> . OPEN_PTH
    (73) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (41) cte_bool -> . FALSE
    (42) cte_bool -> . TRUE
    (78) variable -> . ID array
    CTE_STR         shift and go to state 76
    CTE_NUM         shift and go to state 77
    OPEN_PTH        shift and go to state 79
    ID              shift and go to state 80
    FALSE           shift and go to state 81
    TRUE            shift and go to state 82

    exp                            shift and go to state 153
    termino                        shift and go to state 70
    factor                         shift and go to state 71
    var_cte                        shift and go to state 72
    expression                     shift and go to state 154
    open_pth                       shift and go to state 73
    func_call                      shift and go to state 74
    cte_bool                       shift and go to state 75
    variable                       shift and go to state 78

state 139

    (47) exp -> termino term_op e3 . termino q1
    (52) termino -> . factor q2
    (53) termino -> . factor fact_op e2 factor q2
    (59) factor -> . var_cte e1
    (60) factor -> . expression
    (61) factor -> . open_pth expression close_pth
    (36) var_cte -> . func_call
    (37) var_cte -> . cte_bool
    (38) var_cte -> . CTE_STR
    (39) var_cte -> . CTE_NUM
    (40) var_cte -> . variable
    (43) expression -> . exp
    (44) expression -> . exp rel_op e4 exp
    (63) open_pth -> . OPEN_PTH
    (73) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (41) cte_bool -> . FALSE
    (42) cte_bool -> . TRUE
    (78) variable -> . ID array
    (46) exp -> . termino q1
    (47) exp -> . termino term_op e3 termino q1
    CTE_STR         shift and go to state 76
    CTE_NUM         shift and go to state 77
    OPEN_PTH        shift and go to state 79
    ID              shift and go to state 80
    FALSE           shift and go to state 81
    TRUE            shift and go to state 82

    termino                        shift and go to state 155
    factor                         shift and go to state 71
    var_cte                        shift and go to state 72
    expression                     shift and go to state 154
    open_pth                       shift and go to state 73
    func_call                      shift and go to state 74
    cte_bool                       shift and go to state 75
    variable                       shift and go to state 78
    exp                            shift and go to state 69

state 140

    (53) termino -> factor fact_op e2 . factor q2
    (59) factor -> . var_cte e1
    (60) factor -> . expression
    (61) factor -> . open_pth expression close_pth
    (36) var_cte -> . func_call
    (37) var_cte -> . cte_bool
    (38) var_cte -> . CTE_STR
    (39) var_cte -> . CTE_NUM
    (40) var_cte -> . variable
    (43) expression -> . exp
    (44) expression -> . exp rel_op e4 exp
    (63) open_pth -> . OPEN_PTH
    (73) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (41) cte_bool -> . FALSE
    (42) cte_bool -> . TRUE
    (78) variable -> . ID array
    (46) exp -> . termino q1
    (47) exp -> . termino term_op e3 termino q1
    (52) termino -> . factor q2
    (53) termino -> . factor fact_op e2 factor q2
    CTE_STR         shift and go to state 76
    CTE_NUM         shift and go to state 77
    OPEN_PTH        shift and go to state 79
    ID              shift and go to state 80
    FALSE           shift and go to state 81
    TRUE            shift and go to state 82

    factor                         shift and go to state 156
    var_cte                        shift and go to state 72
    expression                     shift and go to state 154
    open_pth                       shift and go to state 73
    func_call                      shift and go to state 74
    cte_bool                       shift and go to state 75
    variable                       shift and go to state 78
    exp                            shift and go to state 69
    termino                        shift and go to state 70

state 141

    (61) factor -> open_pth expression close_pth .
    OR              reduce using rule 61 (factor -> open_pth expression close_pth .)
    AND             reduce using rule 61 (factor -> open_pth expression close_pth .)
    DIV             reduce using rule 61 (factor -> open_pth expression close_pth .)
    MULT            reduce using rule 61 (factor -> open_pth expression close_pth .)
    SUB             reduce using rule 61 (factor -> open_pth expression close_pth .)
    SUM             reduce using rule 61 (factor -> open_pth expression close_pth .)
    EQUAL_TO        reduce using rule 61 (factor -> open_pth expression close_pth .)
    MORE_OR_EQ_THAN reduce using rule 61 (factor -> open_pth expression close_pth .)
    LESS_OR_EQ_THAN reduce using rule 61 (factor -> open_pth expression close_pth .)
    DIFFERENT_TO    reduce using rule 61 (factor -> open_pth expression close_pth .)
    MORE_THAN       reduce using rule 61 (factor -> open_pth expression close_pth .)
    LESS_THAN       reduce using rule 61 (factor -> open_pth expression close_pth .)
    COMMA           reduce using rule 61 (factor -> open_pth expression close_pth .)
    CLOSE_PTH       reduce using rule 61 (factor -> open_pth expression close_pth .)
    PEN_DOWN        reduce using rule 61 (factor -> open_pth expression close_pth .)
    PEN_UP          reduce using rule 61 (factor -> open_pth expression close_pth .)
    WHILE           reduce using rule 61 (factor -> open_pth expression close_pth .)
    IF              reduce using rule 61 (factor -> open_pth expression close_pth .)
    WRITE           reduce using rule 61 (factor -> open_pth expression close_pth .)
    READ            reduce using rule 61 (factor -> open_pth expression close_pth .)
    ID              reduce using rule 61 (factor -> open_pth expression close_pth .)
    BOOL            reduce using rule 61 (factor -> open_pth expression close_pth .)
    WORD            reduce using rule 61 (factor -> open_pth expression close_pth .)
    NUMBER          reduce using rule 61 (factor -> open_pth expression close_pth .)
    CENTER          reduce using rule 61 (factor -> open_pth expression close_pth .)
    FORWARD         reduce using rule 61 (factor -> open_pth expression close_pth .)
    RIGHT           reduce using rule 61 (factor -> open_pth expression close_pth .)
    LEFT            reduce using rule 61 (factor -> open_pth expression close_pth .)
    END             reduce using rule 61 (factor -> open_pth expression close_pth .)
    ELSE            reduce using rule 61 (factor -> open_pth expression close_pth .)
    CLOSE_SQR       reduce using rule 61 (factor -> open_pth expression close_pth .)


state 142

    (64) close_pth -> CLOSE_PTH .
    OR              reduce using rule 64 (close_pth -> CLOSE_PTH .)
    AND             reduce using rule 64 (close_pth -> CLOSE_PTH .)
    DIV             reduce using rule 64 (close_pth -> CLOSE_PTH .)
    MULT            reduce using rule 64 (close_pth -> CLOSE_PTH .)
    SUB             reduce using rule 64 (close_pth -> CLOSE_PTH .)
    SUM             reduce using rule 64 (close_pth -> CLOSE_PTH .)
    EQUAL_TO        reduce using rule 64 (close_pth -> CLOSE_PTH .)
    MORE_OR_EQ_THAN reduce using rule 64 (close_pth -> CLOSE_PTH .)
    LESS_OR_EQ_THAN reduce using rule 64 (close_pth -> CLOSE_PTH .)
    DIFFERENT_TO    reduce using rule 64 (close_pth -> CLOSE_PTH .)
    MORE_THAN       reduce using rule 64 (close_pth -> CLOSE_PTH .)
    LESS_THAN       reduce using rule 64 (close_pth -> CLOSE_PTH .)
    COMMA           reduce using rule 64 (close_pth -> CLOSE_PTH .)
    CLOSE_PTH       reduce using rule 64 (close_pth -> CLOSE_PTH .)
    PEN_DOWN        reduce using rule 64 (close_pth -> CLOSE_PTH .)
    PEN_UP          reduce using rule 64 (close_pth -> CLOSE_PTH .)
    WHILE           reduce using rule 64 (close_pth -> CLOSE_PTH .)
    IF              reduce using rule 64 (close_pth -> CLOSE_PTH .)
    WRITE           reduce using rule 64 (close_pth -> CLOSE_PTH .)
    READ            reduce using rule 64 (close_pth -> CLOSE_PTH .)
    ID              reduce using rule 64 (close_pth -> CLOSE_PTH .)
    BOOL            reduce using rule 64 (close_pth -> CLOSE_PTH .)
    WORD            reduce using rule 64 (close_pth -> CLOSE_PTH .)
    NUMBER          reduce using rule 64 (close_pth -> CLOSE_PTH .)
    CENTER          reduce using rule 64 (close_pth -> CLOSE_PTH .)
    FORWARD         reduce using rule 64 (close_pth -> CLOSE_PTH .)
    RIGHT           reduce using rule 64 (close_pth -> CLOSE_PTH .)
    LEFT            reduce using rule 64 (close_pth -> CLOSE_PTH .)
    END             reduce using rule 64 (close_pth -> CLOSE_PTH .)
    ELSE            reduce using rule 64 (close_pth -> CLOSE_PTH .)
    CLOSE_SQR       reduce using rule 64 (close_pth -> CLOSE_PTH .)


state 143

    (80) array -> OPEN_SQR expression . CLOSE_SQR matrix
    (60) factor -> expression .
  ! shift/reduce conflict for CLOSE_SQR resolved as shift
    CLOSE_SQR       shift and go to state 157
    EQUAL_TO        reduce using rule 60 (factor -> expression .)
    MORE_OR_EQ_THAN reduce using rule 60 (factor -> expression .)
    LESS_OR_EQ_THAN reduce using rule 60 (factor -> expression .)
    DIFFERENT_TO    reduce using rule 60 (factor -> expression .)
    MORE_THAN       reduce using rule 60 (factor -> expression .)
    LESS_THAN       reduce using rule 60 (factor -> expression .)
    DIV             reduce using rule 60 (factor -> expression .)
    MULT            reduce using rule 60 (factor -> expression .)
    SUB             reduce using rule 60 (factor -> expression .)
    SUM             reduce using rule 60 (factor -> expression .)


state 144

    (86) if_stmnt -> IF con_expression stmnt else_stmnt .
    PEN_DOWN        reduce using rule 86 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    PEN_UP          reduce using rule 86 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    WHILE           reduce using rule 86 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    IF              reduce using rule 86 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    WRITE           reduce using rule 86 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    READ            reduce using rule 86 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    ID              reduce using rule 86 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    BOOL            reduce using rule 86 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    WORD            reduce using rule 86 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    NUMBER          reduce using rule 86 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    CENTER          reduce using rule 86 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    FORWARD         reduce using rule 86 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    RIGHT           reduce using rule 86 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    LEFT            reduce using rule 86 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    END             reduce using rule 86 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    ELSE            reduce using rule 86 (if_stmnt -> IF con_expression stmnt else_stmnt .)


state 145

    (87) else_stmnt -> END .
    PEN_DOWN        reduce using rule 87 (else_stmnt -> END .)
    PEN_UP          reduce using rule 87 (else_stmnt -> END .)
    WHILE           reduce using rule 87 (else_stmnt -> END .)
    IF              reduce using rule 87 (else_stmnt -> END .)
    WRITE           reduce using rule 87 (else_stmnt -> END .)
    READ            reduce using rule 87 (else_stmnt -> END .)
    ID              reduce using rule 87 (else_stmnt -> END .)
    BOOL            reduce using rule 87 (else_stmnt -> END .)
    WORD            reduce using rule 87 (else_stmnt -> END .)
    NUMBER          reduce using rule 87 (else_stmnt -> END .)
    CENTER          reduce using rule 87 (else_stmnt -> END .)
    FORWARD         reduce using rule 87 (else_stmnt -> END .)
    RIGHT           reduce using rule 87 (else_stmnt -> END .)
    LEFT            reduce using rule 87 (else_stmnt -> END .)
    END             reduce using rule 87 (else_stmnt -> END .)
    ELSE            reduce using rule 87 (else_stmnt -> END .)


state 146

    (88) else_stmnt -> ELSE . stmnt END
    (20) stmnt -> . empty
    (21) stmnt -> . var_declaration_func stmnt
    (22) stmnt -> . pen_func stmnt
    (23) stmnt -> . move_func stmnt
    (24) stmnt -> . while_stmnt stmnt
    (25) stmnt -> . if_stmnt stmnt
    (26) stmnt -> . write stmnt
    (27) stmnt -> . read stmnt
    (28) stmnt -> . func_call stmnt
    (29) stmnt -> . var_assignation stmnt
    (99) empty -> .
    (30) var_declaration_func -> . var_type ID multiple_vars
    (96) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (97) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (91) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (89) while_stmnt -> . WHILE con_expression stmnt END
    (86) if_stmnt -> . IF con_expression stmnt else_stmnt
    (85) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (77) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (73) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (31) var_assignation -> . id e5 assign e6 expression q3
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (92) move_type -> . CENTER
    (93) move_type -> . FORWARD
    (94) move_type -> . RIGHT
    (95) move_type -> . LEFT
    (34) id -> . ID
    END             reduce using rule 99 (empty -> .)
    PEN_DOWN        shift and go to state 38
    PEN_UP          shift and go to state 39
    WHILE           shift and go to state 41
    IF              shift and go to state 42
    WRITE           shift and go to state 43
    READ            shift and go to state 44
    ID              shift and go to state 37
    BOOL            shift and go to state 8
    WORD            shift and go to state 9
    NUMBER          shift and go to state 10
    CENTER          shift and go to state 46
    FORWARD         shift and go to state 47
    RIGHT           shift and go to state 48
    LEFT            shift and go to state 49

    stmnt                          shift and go to state 158
    empty                          shift and go to state 26
    var_declaration_func           shift and go to state 27
    pen_func                       shift and go to state 28
    move_func                      shift and go to state 29
    while_stmnt                    shift and go to state 30
    if_stmnt                       shift and go to state 31
    write                          shift and go to state 32
    read                           shift and go to state 33
    func_call                      shift and go to state 34
    var_assignation                shift and go to state 35
    var_type                       shift and go to state 36
    move_type                      shift and go to state 40
    id                             shift and go to state 45

state 147

    (85) write -> WRITE OPEN_PTH expression CLOSE_PTH .
    PEN_DOWN        reduce using rule 85 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    PEN_UP          reduce using rule 85 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    WHILE           reduce using rule 85 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    IF              reduce using rule 85 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    WRITE           reduce using rule 85 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    READ            reduce using rule 85 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    ID              reduce using rule 85 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    BOOL            reduce using rule 85 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    WORD            reduce using rule 85 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    NUMBER          reduce using rule 85 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    CENTER          reduce using rule 85 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    FORWARD         reduce using rule 85 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    RIGHT           reduce using rule 85 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    LEFT            reduce using rule 85 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    END             reduce using rule 85 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    ELSE            reduce using rule 85 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)


state 148

    (77) read -> READ OPEN_PTH variable multiple_vars . CLOSE_PTH
    CLOSE_PTH       shift and go to state 159


state 149

    (31) var_assignation -> id e5 assign e6 . expression q3
    (43) expression -> . exp
    (44) expression -> . exp rel_op e4 exp
    (46) exp -> . termino q1
    (47) exp -> . termino term_op e3 termino q1
    (52) termino -> . factor q2
    (53) termino -> . factor fact_op e2 factor q2
    (59) factor -> . var_cte e1
    (60) factor -> . expression
    (61) factor -> . open_pth expression close_pth
    (36) var_cte -> . func_call
    (37) var_cte -> . cte_bool
    (38) var_cte -> . CTE_STR
    (39) var_cte -> . CTE_NUM
    (40) var_cte -> . variable
    (63) open_pth -> . OPEN_PTH
    (73) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (41) cte_bool -> . FALSE
    (42) cte_bool -> . TRUE
    (78) variable -> . ID array
    CTE_STR         shift and go to state 76
    CTE_NUM         shift and go to state 77
    OPEN_PTH        shift and go to state 79
    ID              shift and go to state 80
    FALSE           shift and go to state 81
    TRUE            shift and go to state 82

    expression                     shift and go to state 160
    exp                            shift and go to state 69
    termino                        shift and go to state 70
    factor                         shift and go to state 71
    var_cte                        shift and go to state 72
    open_pth                       shift and go to state 73
    func_call                      shift and go to state 74
    cte_bool                       shift and go to state 75
    variable                       shift and go to state 78

state 150

    (11) func_declaration -> func_type FUNC ID OPEN_PTH parameter CLOSE_PTH . stmnt END
    (20) stmnt -> . empty
    (21) stmnt -> . var_declaration_func stmnt
    (22) stmnt -> . pen_func stmnt
    (23) stmnt -> . move_func stmnt
    (24) stmnt -> . while_stmnt stmnt
    (25) stmnt -> . if_stmnt stmnt
    (26) stmnt -> . write stmnt
    (27) stmnt -> . read stmnt
    (28) stmnt -> . func_call stmnt
    (29) stmnt -> . var_assignation stmnt
    (99) empty -> .
    (30) var_declaration_func -> . var_type ID multiple_vars
    (96) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (97) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (91) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (89) while_stmnt -> . WHILE con_expression stmnt END
    (86) if_stmnt -> . IF con_expression stmnt else_stmnt
    (85) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (77) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (73) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (31) var_assignation -> . id e5 assign e6 expression q3
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (92) move_type -> . CENTER
    (93) move_type -> . FORWARD
    (94) move_type -> . RIGHT
    (95) move_type -> . LEFT
    (34) id -> . ID
    END             reduce using rule 99 (empty -> .)
    PEN_DOWN        shift and go to state 38
    PEN_UP          shift and go to state 39
    WHILE           shift and go to state 41
    IF              shift and go to state 42
    WRITE           shift and go to state 43
    READ            shift and go to state 44
    ID              shift and go to state 37
    BOOL            shift and go to state 8
    WORD            shift and go to state 9
    NUMBER          shift and go to state 10
    CENTER          shift and go to state 46
    FORWARD         shift and go to state 47
    RIGHT           shift and go to state 48
    LEFT            shift and go to state 49

    stmnt                          shift and go to state 161
    empty                          shift and go to state 26
    var_declaration_func           shift and go to state 27
    pen_func                       shift and go to state 28
    move_func                      shift and go to state 29
    while_stmnt                    shift and go to state 30
    if_stmnt                       shift and go to state 31
    write                          shift and go to state 32
    read                           shift and go to state 33
    func_call                      shift and go to state 34
    var_assignation                shift and go to state 35
    var_type                       shift and go to state 36
    move_type                      shift and go to state 40
    id                             shift and go to state 45

state 151

    (17) parameter -> var_type ID . multiple_parameters
    (18) multiple_parameters -> . empty
    (19) multiple_parameters -> . COMMA parameter
    (99) empty -> .
    COMMA           shift and go to state 164
    CLOSE_PTH       reduce using rule 99 (empty -> .)

    multiple_parameters            shift and go to state 162
    empty                          shift and go to state 163

state 152

    (76) multiple_fc_param -> COMMA func_call_param .
    CLOSE_PTH       reduce using rule 76 (multiple_fc_param -> COMMA func_call_param .)


state 153

    (44) expression -> exp rel_op e4 exp .
    (43) expression -> exp .
    (44) expression -> exp . rel_op e4 exp
    (67) rel_op -> . EQUAL_TO
    (68) rel_op -> . MORE_OR_EQ_THAN
    (69) rel_op -> . LESS_OR_EQ_THAN
    (70) rel_op -> . DIFFERENT_TO
    (71) rel_op -> . MORE_THAN
    (72) rel_op -> . LESS_THAN
  ! reduce/reduce conflict for EQUAL_TO resolved using rule 44 (expression -> exp rel_op e4 exp .)
  ! reduce/reduce conflict for MORE_OR_EQ_THAN resolved using rule 44 (expression -> exp rel_op e4 exp .)
  ! reduce/reduce conflict for LESS_OR_EQ_THAN resolved using rule 44 (expression -> exp rel_op e4 exp .)
  ! reduce/reduce conflict for DIFFERENT_TO resolved using rule 44 (expression -> exp rel_op e4 exp .)
  ! reduce/reduce conflict for MORE_THAN resolved using rule 44 (expression -> exp rel_op e4 exp .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 44 (expression -> exp rel_op e4 exp .)
  ! reduce/reduce conflict for OR resolved using rule 44 (expression -> exp rel_op e4 exp .)
  ! reduce/reduce conflict for AND resolved using rule 44 (expression -> exp rel_op e4 exp .)
  ! reduce/reduce conflict for DIV resolved using rule 44 (expression -> exp rel_op e4 exp .)
  ! reduce/reduce conflict for MULT resolved using rule 44 (expression -> exp rel_op e4 exp .)
  ! reduce/reduce conflict for SUB resolved using rule 44 (expression -> exp rel_op e4 exp .)
  ! reduce/reduce conflict for SUM resolved using rule 44 (expression -> exp rel_op e4 exp .)
  ! reduce/reduce conflict for COMMA resolved using rule 44 (expression -> exp rel_op e4 exp .)
  ! reduce/reduce conflict for CLOSE_PTH resolved using rule 44 (expression -> exp rel_op e4 exp .)
  ! reduce/reduce conflict for PEN_DOWN resolved using rule 44 (expression -> exp rel_op e4 exp .)
  ! reduce/reduce conflict for PEN_UP resolved using rule 44 (expression -> exp rel_op e4 exp .)
  ! reduce/reduce conflict for WHILE resolved using rule 44 (expression -> exp rel_op e4 exp .)
  ! reduce/reduce conflict for IF resolved using rule 44 (expression -> exp rel_op e4 exp .)
  ! reduce/reduce conflict for WRITE resolved using rule 44 (expression -> exp rel_op e4 exp .)
  ! reduce/reduce conflict for READ resolved using rule 44 (expression -> exp rel_op e4 exp .)
  ! reduce/reduce conflict for ID resolved using rule 44 (expression -> exp rel_op e4 exp .)
  ! reduce/reduce conflict for BOOL resolved using rule 44 (expression -> exp rel_op e4 exp .)
  ! reduce/reduce conflict for WORD resolved using rule 44 (expression -> exp rel_op e4 exp .)
  ! reduce/reduce conflict for NUMBER resolved using rule 44 (expression -> exp rel_op e4 exp .)
  ! reduce/reduce conflict for CENTER resolved using rule 44 (expression -> exp rel_op e4 exp .)
  ! reduce/reduce conflict for FORWARD resolved using rule 44 (expression -> exp rel_op e4 exp .)
  ! reduce/reduce conflict for RIGHT resolved using rule 44 (expression -> exp rel_op e4 exp .)
  ! reduce/reduce conflict for LEFT resolved using rule 44 (expression -> exp rel_op e4 exp .)
  ! reduce/reduce conflict for END resolved using rule 44 (expression -> exp rel_op e4 exp .)
  ! reduce/reduce conflict for ELSE resolved using rule 44 (expression -> exp rel_op e4 exp .)
  ! reduce/reduce conflict for CLOSE_SQR resolved using rule 44 (expression -> exp rel_op e4 exp .)
  ! shift/reduce conflict for EQUAL_TO resolved as shift
  ! shift/reduce conflict for MORE_OR_EQ_THAN resolved as shift
  ! shift/reduce conflict for LESS_OR_EQ_THAN resolved as shift
  ! shift/reduce conflict for DIFFERENT_TO resolved as shift
  ! shift/reduce conflict for MORE_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
    OR              reduce using rule 44 (expression -> exp rel_op e4 exp .)
    AND             reduce using rule 44 (expression -> exp rel_op e4 exp .)
    DIV             reduce using rule 44 (expression -> exp rel_op e4 exp .)
    MULT            reduce using rule 44 (expression -> exp rel_op e4 exp .)
    SUB             reduce using rule 44 (expression -> exp rel_op e4 exp .)
    SUM             reduce using rule 44 (expression -> exp rel_op e4 exp .)
    COMMA           reduce using rule 44 (expression -> exp rel_op e4 exp .)
    CLOSE_PTH       reduce using rule 44 (expression -> exp rel_op e4 exp .)
    PEN_DOWN        reduce using rule 44 (expression -> exp rel_op e4 exp .)
    PEN_UP          reduce using rule 44 (expression -> exp rel_op e4 exp .)
    WHILE           reduce using rule 44 (expression -> exp rel_op e4 exp .)
    IF              reduce using rule 44 (expression -> exp rel_op e4 exp .)
    WRITE           reduce using rule 44 (expression -> exp rel_op e4 exp .)
    READ            reduce using rule 44 (expression -> exp rel_op e4 exp .)
    ID              reduce using rule 44 (expression -> exp rel_op e4 exp .)
    BOOL            reduce using rule 44 (expression -> exp rel_op e4 exp .)
    WORD            reduce using rule 44 (expression -> exp rel_op e4 exp .)
    NUMBER          reduce using rule 44 (expression -> exp rel_op e4 exp .)
    CENTER          reduce using rule 44 (expression -> exp rel_op e4 exp .)
    FORWARD         reduce using rule 44 (expression -> exp rel_op e4 exp .)
    RIGHT           reduce using rule 44 (expression -> exp rel_op e4 exp .)
    LEFT            reduce using rule 44 (expression -> exp rel_op e4 exp .)
    END             reduce using rule 44 (expression -> exp rel_op e4 exp .)
    ELSE            reduce using rule 44 (expression -> exp rel_op e4 exp .)
    CLOSE_SQR       reduce using rule 44 (expression -> exp rel_op e4 exp .)
    EQUAL_TO        shift and go to state 102
    MORE_OR_EQ_THAN shift and go to state 103
    LESS_OR_EQ_THAN shift and go to state 104
    DIFFERENT_TO    shift and go to state 105
    MORE_THAN       shift and go to state 106
    LESS_THAN       shift and go to state 107

    rel_op                         shift and go to state 101

state 154

    (60) factor -> expression .
    EQUAL_TO        reduce using rule 60 (factor -> expression .)
    MORE_OR_EQ_THAN reduce using rule 60 (factor -> expression .)
    LESS_OR_EQ_THAN reduce using rule 60 (factor -> expression .)
    DIFFERENT_TO    reduce using rule 60 (factor -> expression .)
    MORE_THAN       reduce using rule 60 (factor -> expression .)
    LESS_THAN       reduce using rule 60 (factor -> expression .)
    OR              reduce using rule 60 (factor -> expression .)
    AND             reduce using rule 60 (factor -> expression .)
    DIV             reduce using rule 60 (factor -> expression .)
    MULT            reduce using rule 60 (factor -> expression .)
    SUB             reduce using rule 60 (factor -> expression .)
    SUM             reduce using rule 60 (factor -> expression .)
    COMMA           reduce using rule 60 (factor -> expression .)
    CLOSE_PTH       reduce using rule 60 (factor -> expression .)
    PEN_DOWN        reduce using rule 60 (factor -> expression .)
    PEN_UP          reduce using rule 60 (factor -> expression .)
    WHILE           reduce using rule 60 (factor -> expression .)
    IF              reduce using rule 60 (factor -> expression .)
    WRITE           reduce using rule 60 (factor -> expression .)
    READ            reduce using rule 60 (factor -> expression .)
    ID              reduce using rule 60 (factor -> expression .)
    BOOL            reduce using rule 60 (factor -> expression .)
    WORD            reduce using rule 60 (factor -> expression .)
    NUMBER          reduce using rule 60 (factor -> expression .)
    CENTER          reduce using rule 60 (factor -> expression .)
    FORWARD         reduce using rule 60 (factor -> expression .)
    RIGHT           reduce using rule 60 (factor -> expression .)
    LEFT            reduce using rule 60 (factor -> expression .)
    END             reduce using rule 60 (factor -> expression .)
    ELSE            reduce using rule 60 (factor -> expression .)
    CLOSE_SQR       reduce using rule 60 (factor -> expression .)


state 155

    (47) exp -> termino term_op e3 termino . q1
    (46) exp -> termino . q1
    (47) exp -> termino . term_op e3 termino q1
    (54) q1 -> .
    (50) term_op -> . SUB
    (51) term_op -> . SUM
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for SUM resolved as shift
    OR              reduce using rule 54 (q1 -> .)
    AND             reduce using rule 54 (q1 -> .)
    DIV             reduce using rule 54 (q1 -> .)
    MULT            reduce using rule 54 (q1 -> .)
    EQUAL_TO        reduce using rule 54 (q1 -> .)
    MORE_OR_EQ_THAN reduce using rule 54 (q1 -> .)
    LESS_OR_EQ_THAN reduce using rule 54 (q1 -> .)
    DIFFERENT_TO    reduce using rule 54 (q1 -> .)
    MORE_THAN       reduce using rule 54 (q1 -> .)
    LESS_THAN       reduce using rule 54 (q1 -> .)
    COMMA           reduce using rule 54 (q1 -> .)
    CLOSE_PTH       reduce using rule 54 (q1 -> .)
    PEN_DOWN        reduce using rule 54 (q1 -> .)
    PEN_UP          reduce using rule 54 (q1 -> .)
    WHILE           reduce using rule 54 (q1 -> .)
    IF              reduce using rule 54 (q1 -> .)
    WRITE           reduce using rule 54 (q1 -> .)
    READ            reduce using rule 54 (q1 -> .)
    ID              reduce using rule 54 (q1 -> .)
    BOOL            reduce using rule 54 (q1 -> .)
    WORD            reduce using rule 54 (q1 -> .)
    NUMBER          reduce using rule 54 (q1 -> .)
    CENTER          reduce using rule 54 (q1 -> .)
    FORWARD         reduce using rule 54 (q1 -> .)
    RIGHT           reduce using rule 54 (q1 -> .)
    LEFT            reduce using rule 54 (q1 -> .)
    END             reduce using rule 54 (q1 -> .)
    ELSE            reduce using rule 54 (q1 -> .)
    CLOSE_SQR       reduce using rule 54 (q1 -> .)
    SUB             shift and go to state 110
    SUM             shift and go to state 111

    term_op                        shift and go to state 109
    q1                             shift and go to state 165

state 156

    (53) termino -> factor fact_op e2 factor . q2
    (52) termino -> factor . q2
    (53) termino -> factor . fact_op e2 factor q2
    (49) q2 -> .
    (57) fact_op -> . DIV
    (58) fact_op -> . MULT
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
    OR              reduce using rule 49 (q2 -> .)
    AND             reduce using rule 49 (q2 -> .)
    SUB             reduce using rule 49 (q2 -> .)
    SUM             reduce using rule 49 (q2 -> .)
    EQUAL_TO        reduce using rule 49 (q2 -> .)
    MORE_OR_EQ_THAN reduce using rule 49 (q2 -> .)
    LESS_OR_EQ_THAN reduce using rule 49 (q2 -> .)
    DIFFERENT_TO    reduce using rule 49 (q2 -> .)
    MORE_THAN       reduce using rule 49 (q2 -> .)
    LESS_THAN       reduce using rule 49 (q2 -> .)
    COMMA           reduce using rule 49 (q2 -> .)
    CLOSE_PTH       reduce using rule 49 (q2 -> .)
    PEN_DOWN        reduce using rule 49 (q2 -> .)
    PEN_UP          reduce using rule 49 (q2 -> .)
    WHILE           reduce using rule 49 (q2 -> .)
    IF              reduce using rule 49 (q2 -> .)
    WRITE           reduce using rule 49 (q2 -> .)
    READ            reduce using rule 49 (q2 -> .)
    ID              reduce using rule 49 (q2 -> .)
    BOOL            reduce using rule 49 (q2 -> .)
    WORD            reduce using rule 49 (q2 -> .)
    NUMBER          reduce using rule 49 (q2 -> .)
    CENTER          reduce using rule 49 (q2 -> .)
    FORWARD         reduce using rule 49 (q2 -> .)
    RIGHT           reduce using rule 49 (q2 -> .)
    LEFT            reduce using rule 49 (q2 -> .)
    END             reduce using rule 49 (q2 -> .)
    ELSE            reduce using rule 49 (q2 -> .)
    CLOSE_SQR       reduce using rule 49 (q2 -> .)
    DIV             shift and go to state 114
    MULT            shift and go to state 115

    fact_op                        shift and go to state 113
    q2                             shift and go to state 166

state 157

    (80) array -> OPEN_SQR expression CLOSE_SQR . matrix
    (81) matrix -> . empty
    (82) matrix -> . OPEN_SQR expression CLOSE_SQR
    (99) empty -> .
    OPEN_SQR        shift and go to state 167
    OR              reduce using rule 99 (empty -> .)
    AND             reduce using rule 99 (empty -> .)
    DIV             reduce using rule 99 (empty -> .)
    MULT            reduce using rule 99 (empty -> .)
    SUB             reduce using rule 99 (empty -> .)
    SUM             reduce using rule 99 (empty -> .)
    EQUAL_TO        reduce using rule 99 (empty -> .)
    MORE_OR_EQ_THAN reduce using rule 99 (empty -> .)
    LESS_OR_EQ_THAN reduce using rule 99 (empty -> .)
    DIFFERENT_TO    reduce using rule 99 (empty -> .)
    MORE_THAN       reduce using rule 99 (empty -> .)
    LESS_THAN       reduce using rule 99 (empty -> .)
    COMMA           reduce using rule 99 (empty -> .)
    CLOSE_PTH       reduce using rule 99 (empty -> .)
    PEN_DOWN        reduce using rule 99 (empty -> .)
    PEN_UP          reduce using rule 99 (empty -> .)
    WHILE           reduce using rule 99 (empty -> .)
    IF              reduce using rule 99 (empty -> .)
    WRITE           reduce using rule 99 (empty -> .)
    READ            reduce using rule 99 (empty -> .)
    ID              reduce using rule 99 (empty -> .)
    BOOL            reduce using rule 99 (empty -> .)
    WORD            reduce using rule 99 (empty -> .)
    NUMBER          reduce using rule 99 (empty -> .)
    CENTER          reduce using rule 99 (empty -> .)
    FORWARD         reduce using rule 99 (empty -> .)
    RIGHT           reduce using rule 99 (empty -> .)
    LEFT            reduce using rule 99 (empty -> .)
    END             reduce using rule 99 (empty -> .)
    ELSE            reduce using rule 99 (empty -> .)
    CLOSE_SQR       reduce using rule 99 (empty -> .)

    matrix                         shift and go to state 168
    empty                          shift and go to state 169

state 158

    (88) else_stmnt -> ELSE stmnt . END
    END             shift and go to state 170


state 159

    (77) read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .
    PEN_DOWN        reduce using rule 77 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    PEN_UP          reduce using rule 77 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    WHILE           reduce using rule 77 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    IF              reduce using rule 77 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    WRITE           reduce using rule 77 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    READ            reduce using rule 77 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    ID              reduce using rule 77 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    BOOL            reduce using rule 77 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    WORD            reduce using rule 77 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    NUMBER          reduce using rule 77 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    CENTER          reduce using rule 77 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    FORWARD         reduce using rule 77 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    RIGHT           reduce using rule 77 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    LEFT            reduce using rule 77 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    END             reduce using rule 77 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    ELSE            reduce using rule 77 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)


state 160

    (31) var_assignation -> id e5 assign e6 expression . q3
    (60) factor -> expression .
    (55) q3 -> .
  ! reduce/reduce conflict for PEN_DOWN resolved using rule 55 (q3 -> .)
  ! reduce/reduce conflict for PEN_UP resolved using rule 55 (q3 -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 55 (q3 -> .)
  ! reduce/reduce conflict for IF resolved using rule 55 (q3 -> .)
  ! reduce/reduce conflict for WRITE resolved using rule 55 (q3 -> .)
  ! reduce/reduce conflict for READ resolved using rule 55 (q3 -> .)
  ! reduce/reduce conflict for ID resolved using rule 55 (q3 -> .)
  ! reduce/reduce conflict for BOOL resolved using rule 55 (q3 -> .)
  ! reduce/reduce conflict for WORD resolved using rule 55 (q3 -> .)
  ! reduce/reduce conflict for NUMBER resolved using rule 55 (q3 -> .)
  ! reduce/reduce conflict for CENTER resolved using rule 55 (q3 -> .)
  ! reduce/reduce conflict for FORWARD resolved using rule 55 (q3 -> .)
  ! reduce/reduce conflict for RIGHT resolved using rule 55 (q3 -> .)
  ! reduce/reduce conflict for LEFT resolved using rule 55 (q3 -> .)
  ! reduce/reduce conflict for END resolved using rule 55 (q3 -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 55 (q3 -> .)
    SUB             reduce using rule 60 (factor -> expression .)
    SUM             reduce using rule 60 (factor -> expression .)
    EQUAL_TO        reduce using rule 60 (factor -> expression .)
    MORE_OR_EQ_THAN reduce using rule 60 (factor -> expression .)
    LESS_OR_EQ_THAN reduce using rule 60 (factor -> expression .)
    DIFFERENT_TO    reduce using rule 60 (factor -> expression .)
    MORE_THAN       reduce using rule 60 (factor -> expression .)
    LESS_THAN       reduce using rule 60 (factor -> expression .)
    DIV             reduce using rule 60 (factor -> expression .)
    MULT            reduce using rule 60 (factor -> expression .)
    PEN_DOWN        reduce using rule 55 (q3 -> .)
    PEN_UP          reduce using rule 55 (q3 -> .)
    WHILE           reduce using rule 55 (q3 -> .)
    IF              reduce using rule 55 (q3 -> .)
    WRITE           reduce using rule 55 (q3 -> .)
    READ            reduce using rule 55 (q3 -> .)
    ID              reduce using rule 55 (q3 -> .)
    BOOL            reduce using rule 55 (q3 -> .)
    WORD            reduce using rule 55 (q3 -> .)
    NUMBER          reduce using rule 55 (q3 -> .)
    CENTER          reduce using rule 55 (q3 -> .)
    FORWARD         reduce using rule 55 (q3 -> .)
    RIGHT           reduce using rule 55 (q3 -> .)
    LEFT            reduce using rule 55 (q3 -> .)
    END             reduce using rule 55 (q3 -> .)
    ELSE            reduce using rule 55 (q3 -> .)

    q3                             shift and go to state 171

state 161

    (11) func_declaration -> func_type FUNC ID OPEN_PTH parameter CLOSE_PTH stmnt . END
    END             shift and go to state 172


state 162

    (17) parameter -> var_type ID multiple_parameters .
    CLOSE_PTH       reduce using rule 17 (parameter -> var_type ID multiple_parameters .)


state 163

    (18) multiple_parameters -> empty .
    CLOSE_PTH       reduce using rule 18 (multiple_parameters -> empty .)


state 164

    (19) multiple_parameters -> COMMA . parameter
    (16) parameter -> . empty
    (17) parameter -> . var_type ID multiple_parameters
    (99) empty -> .
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    CLOSE_PTH       reduce using rule 99 (empty -> .)
    BOOL            shift and go to state 8
    WORD            shift and go to state 9
    NUMBER          shift and go to state 10

    parameter                      shift and go to state 173
    empty                          shift and go to state 128
    var_type                       shift and go to state 129

state 165

    (47) exp -> termino term_op e3 termino q1 .
    (46) exp -> termino q1 .
  ! reduce/reduce conflict for EQUAL_TO resolved using rule 47 (exp -> termino term_op e3 termino q1 .)
  ! reduce/reduce conflict for MORE_OR_EQ_THAN resolved using rule 47 (exp -> termino term_op e3 termino q1 .)
  ! reduce/reduce conflict for LESS_OR_EQ_THAN resolved using rule 47 (exp -> termino term_op e3 termino q1 .)
  ! reduce/reduce conflict for DIFFERENT_TO resolved using rule 47 (exp -> termino term_op e3 termino q1 .)
  ! reduce/reduce conflict for MORE_THAN resolved using rule 47 (exp -> termino term_op e3 termino q1 .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 47 (exp -> termino term_op e3 termino q1 .)
  ! reduce/reduce conflict for OR resolved using rule 47 (exp -> termino term_op e3 termino q1 .)
  ! reduce/reduce conflict for AND resolved using rule 47 (exp -> termino term_op e3 termino q1 .)
  ! reduce/reduce conflict for DIV resolved using rule 47 (exp -> termino term_op e3 termino q1 .)
  ! reduce/reduce conflict for MULT resolved using rule 47 (exp -> termino term_op e3 termino q1 .)
  ! reduce/reduce conflict for SUB resolved using rule 47 (exp -> termino term_op e3 termino q1 .)
  ! reduce/reduce conflict for SUM resolved using rule 47 (exp -> termino term_op e3 termino q1 .)
  ! reduce/reduce conflict for COMMA resolved using rule 47 (exp -> termino term_op e3 termino q1 .)
  ! reduce/reduce conflict for CLOSE_PTH resolved using rule 47 (exp -> termino term_op e3 termino q1 .)
  ! reduce/reduce conflict for PEN_DOWN resolved using rule 47 (exp -> termino term_op e3 termino q1 .)
  ! reduce/reduce conflict for PEN_UP resolved using rule 47 (exp -> termino term_op e3 termino q1 .)
  ! reduce/reduce conflict for WHILE resolved using rule 47 (exp -> termino term_op e3 termino q1 .)
  ! reduce/reduce conflict for IF resolved using rule 47 (exp -> termino term_op e3 termino q1 .)
  ! reduce/reduce conflict for WRITE resolved using rule 47 (exp -> termino term_op e3 termino q1 .)
  ! reduce/reduce conflict for READ resolved using rule 47 (exp -> termino term_op e3 termino q1 .)
  ! reduce/reduce conflict for ID resolved using rule 47 (exp -> termino term_op e3 termino q1 .)
  ! reduce/reduce conflict for BOOL resolved using rule 47 (exp -> termino term_op e3 termino q1 .)
  ! reduce/reduce conflict for WORD resolved using rule 47 (exp -> termino term_op e3 termino q1 .)
  ! reduce/reduce conflict for NUMBER resolved using rule 47 (exp -> termino term_op e3 termino q1 .)
  ! reduce/reduce conflict for CENTER resolved using rule 47 (exp -> termino term_op e3 termino q1 .)
  ! reduce/reduce conflict for FORWARD resolved using rule 47 (exp -> termino term_op e3 termino q1 .)
  ! reduce/reduce conflict for RIGHT resolved using rule 47 (exp -> termino term_op e3 termino q1 .)
  ! reduce/reduce conflict for LEFT resolved using rule 47 (exp -> termino term_op e3 termino q1 .)
  ! reduce/reduce conflict for END resolved using rule 47 (exp -> termino term_op e3 termino q1 .)
  ! reduce/reduce conflict for ELSE resolved using rule 47 (exp -> termino term_op e3 termino q1 .)
  ! reduce/reduce conflict for CLOSE_SQR resolved using rule 47 (exp -> termino term_op e3 termino q1 .)
    OR              reduce using rule 47 (exp -> termino term_op e3 termino q1 .)
    AND             reduce using rule 47 (exp -> termino term_op e3 termino q1 .)
    DIV             reduce using rule 47 (exp -> termino term_op e3 termino q1 .)
    MULT            reduce using rule 47 (exp -> termino term_op e3 termino q1 .)
    SUB             reduce using rule 47 (exp -> termino term_op e3 termino q1 .)
    SUM             reduce using rule 47 (exp -> termino term_op e3 termino q1 .)
    EQUAL_TO        reduce using rule 47 (exp -> termino term_op e3 termino q1 .)
    MORE_OR_EQ_THAN reduce using rule 47 (exp -> termino term_op e3 termino q1 .)
    LESS_OR_EQ_THAN reduce using rule 47 (exp -> termino term_op e3 termino q1 .)
    DIFFERENT_TO    reduce using rule 47 (exp -> termino term_op e3 termino q1 .)
    MORE_THAN       reduce using rule 47 (exp -> termino term_op e3 termino q1 .)
    LESS_THAN       reduce using rule 47 (exp -> termino term_op e3 termino q1 .)
    COMMA           reduce using rule 47 (exp -> termino term_op e3 termino q1 .)
    CLOSE_PTH       reduce using rule 47 (exp -> termino term_op e3 termino q1 .)
    PEN_DOWN        reduce using rule 47 (exp -> termino term_op e3 termino q1 .)
    PEN_UP          reduce using rule 47 (exp -> termino term_op e3 termino q1 .)
    WHILE           reduce using rule 47 (exp -> termino term_op e3 termino q1 .)
    IF              reduce using rule 47 (exp -> termino term_op e3 termino q1 .)
    WRITE           reduce using rule 47 (exp -> termino term_op e3 termino q1 .)
    READ            reduce using rule 47 (exp -> termino term_op e3 termino q1 .)
    ID              reduce using rule 47 (exp -> termino term_op e3 termino q1 .)
    BOOL            reduce using rule 47 (exp -> termino term_op e3 termino q1 .)
    WORD            reduce using rule 47 (exp -> termino term_op e3 termino q1 .)
    NUMBER          reduce using rule 47 (exp -> termino term_op e3 termino q1 .)
    CENTER          reduce using rule 47 (exp -> termino term_op e3 termino q1 .)
    FORWARD         reduce using rule 47 (exp -> termino term_op e3 termino q1 .)
    RIGHT           reduce using rule 47 (exp -> termino term_op e3 termino q1 .)
    LEFT            reduce using rule 47 (exp -> termino term_op e3 termino q1 .)
    END             reduce using rule 47 (exp -> termino term_op e3 termino q1 .)
    ELSE            reduce using rule 47 (exp -> termino term_op e3 termino q1 .)
    CLOSE_SQR       reduce using rule 47 (exp -> termino term_op e3 termino q1 .)


state 166

    (53) termino -> factor fact_op e2 factor q2 .
    (52) termino -> factor q2 .
  ! reduce/reduce conflict for EQUAL_TO resolved using rule 53 (termino -> factor fact_op e2 factor q2 .)
  ! reduce/reduce conflict for MORE_OR_EQ_THAN resolved using rule 53 (termino -> factor fact_op e2 factor q2 .)
  ! reduce/reduce conflict for LESS_OR_EQ_THAN resolved using rule 53 (termino -> factor fact_op e2 factor q2 .)
  ! reduce/reduce conflict for DIFFERENT_TO resolved using rule 53 (termino -> factor fact_op e2 factor q2 .)
  ! reduce/reduce conflict for MORE_THAN resolved using rule 53 (termino -> factor fact_op e2 factor q2 .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 53 (termino -> factor fact_op e2 factor q2 .)
  ! reduce/reduce conflict for OR resolved using rule 53 (termino -> factor fact_op e2 factor q2 .)
  ! reduce/reduce conflict for AND resolved using rule 53 (termino -> factor fact_op e2 factor q2 .)
  ! reduce/reduce conflict for DIV resolved using rule 53 (termino -> factor fact_op e2 factor q2 .)
  ! reduce/reduce conflict for MULT resolved using rule 53 (termino -> factor fact_op e2 factor q2 .)
  ! reduce/reduce conflict for SUB resolved using rule 53 (termino -> factor fact_op e2 factor q2 .)
  ! reduce/reduce conflict for SUM resolved using rule 53 (termino -> factor fact_op e2 factor q2 .)
  ! reduce/reduce conflict for COMMA resolved using rule 53 (termino -> factor fact_op e2 factor q2 .)
  ! reduce/reduce conflict for CLOSE_PTH resolved using rule 53 (termino -> factor fact_op e2 factor q2 .)
  ! reduce/reduce conflict for PEN_DOWN resolved using rule 53 (termino -> factor fact_op e2 factor q2 .)
  ! reduce/reduce conflict for PEN_UP resolved using rule 53 (termino -> factor fact_op e2 factor q2 .)
  ! reduce/reduce conflict for WHILE resolved using rule 53 (termino -> factor fact_op e2 factor q2 .)
  ! reduce/reduce conflict for IF resolved using rule 53 (termino -> factor fact_op e2 factor q2 .)
  ! reduce/reduce conflict for WRITE resolved using rule 53 (termino -> factor fact_op e2 factor q2 .)
  ! reduce/reduce conflict for READ resolved using rule 53 (termino -> factor fact_op e2 factor q2 .)
  ! reduce/reduce conflict for ID resolved using rule 53 (termino -> factor fact_op e2 factor q2 .)
  ! reduce/reduce conflict for BOOL resolved using rule 53 (termino -> factor fact_op e2 factor q2 .)
  ! reduce/reduce conflict for WORD resolved using rule 53 (termino -> factor fact_op e2 factor q2 .)
  ! reduce/reduce conflict for NUMBER resolved using rule 53 (termino -> factor fact_op e2 factor q2 .)
  ! reduce/reduce conflict for CENTER resolved using rule 53 (termino -> factor fact_op e2 factor q2 .)
  ! reduce/reduce conflict for FORWARD resolved using rule 53 (termino -> factor fact_op e2 factor q2 .)
  ! reduce/reduce conflict for RIGHT resolved using rule 53 (termino -> factor fact_op e2 factor q2 .)
  ! reduce/reduce conflict for LEFT resolved using rule 53 (termino -> factor fact_op e2 factor q2 .)
  ! reduce/reduce conflict for END resolved using rule 53 (termino -> factor fact_op e2 factor q2 .)
  ! reduce/reduce conflict for ELSE resolved using rule 53 (termino -> factor fact_op e2 factor q2 .)
  ! reduce/reduce conflict for CLOSE_SQR resolved using rule 53 (termino -> factor fact_op e2 factor q2 .)
    OR              reduce using rule 53 (termino -> factor fact_op e2 factor q2 .)
    AND             reduce using rule 53 (termino -> factor fact_op e2 factor q2 .)
    DIV             reduce using rule 53 (termino -> factor fact_op e2 factor q2 .)
    MULT            reduce using rule 53 (termino -> factor fact_op e2 factor q2 .)
    SUB             reduce using rule 53 (termino -> factor fact_op e2 factor q2 .)
    SUM             reduce using rule 53 (termino -> factor fact_op e2 factor q2 .)
    EQUAL_TO        reduce using rule 53 (termino -> factor fact_op e2 factor q2 .)
    MORE_OR_EQ_THAN reduce using rule 53 (termino -> factor fact_op e2 factor q2 .)
    LESS_OR_EQ_THAN reduce using rule 53 (termino -> factor fact_op e2 factor q2 .)
    DIFFERENT_TO    reduce using rule 53 (termino -> factor fact_op e2 factor q2 .)
    MORE_THAN       reduce using rule 53 (termino -> factor fact_op e2 factor q2 .)
    LESS_THAN       reduce using rule 53 (termino -> factor fact_op e2 factor q2 .)
    COMMA           reduce using rule 53 (termino -> factor fact_op e2 factor q2 .)
    CLOSE_PTH       reduce using rule 53 (termino -> factor fact_op e2 factor q2 .)
    PEN_DOWN        reduce using rule 53 (termino -> factor fact_op e2 factor q2 .)
    PEN_UP          reduce using rule 53 (termino -> factor fact_op e2 factor q2 .)
    WHILE           reduce using rule 53 (termino -> factor fact_op e2 factor q2 .)
    IF              reduce using rule 53 (termino -> factor fact_op e2 factor q2 .)
    WRITE           reduce using rule 53 (termino -> factor fact_op e2 factor q2 .)
    READ            reduce using rule 53 (termino -> factor fact_op e2 factor q2 .)
    ID              reduce using rule 53 (termino -> factor fact_op e2 factor q2 .)
    BOOL            reduce using rule 53 (termino -> factor fact_op e2 factor q2 .)
    WORD            reduce using rule 53 (termino -> factor fact_op e2 factor q2 .)
    NUMBER          reduce using rule 53 (termino -> factor fact_op e2 factor q2 .)
    CENTER          reduce using rule 53 (termino -> factor fact_op e2 factor q2 .)
    FORWARD         reduce using rule 53 (termino -> factor fact_op e2 factor q2 .)
    RIGHT           reduce using rule 53 (termino -> factor fact_op e2 factor q2 .)
    LEFT            reduce using rule 53 (termino -> factor fact_op e2 factor q2 .)
    END             reduce using rule 53 (termino -> factor fact_op e2 factor q2 .)
    ELSE            reduce using rule 53 (termino -> factor fact_op e2 factor q2 .)
    CLOSE_SQR       reduce using rule 53 (termino -> factor fact_op e2 factor q2 .)


state 167

    (82) matrix -> OPEN_SQR . expression CLOSE_SQR
    (43) expression -> . exp
    (44) expression -> . exp rel_op e4 exp
    (46) exp -> . termino q1
    (47) exp -> . termino term_op e3 termino q1
    (52) termino -> . factor q2
    (53) termino -> . factor fact_op e2 factor q2
    (59) factor -> . var_cte e1
    (60) factor -> . expression
    (61) factor -> . open_pth expression close_pth
    (36) var_cte -> . func_call
    (37) var_cte -> . cte_bool
    (38) var_cte -> . CTE_STR
    (39) var_cte -> . CTE_NUM
    (40) var_cte -> . variable
    (63) open_pth -> . OPEN_PTH
    (73) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (41) cte_bool -> . FALSE
    (42) cte_bool -> . TRUE
    (78) variable -> . ID array
    CTE_STR         shift and go to state 76
    CTE_NUM         shift and go to state 77
    OPEN_PTH        shift and go to state 79
    ID              shift and go to state 80
    FALSE           shift and go to state 81
    TRUE            shift and go to state 82

    expression                     shift and go to state 174
    exp                            shift and go to state 69
    termino                        shift and go to state 70
    factor                         shift and go to state 71
    var_cte                        shift and go to state 72
    open_pth                       shift and go to state 73
    func_call                      shift and go to state 74
    cte_bool                       shift and go to state 75
    variable                       shift and go to state 78

state 168

    (80) array -> OPEN_SQR expression CLOSE_SQR matrix .
    OR              reduce using rule 80 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    AND             reduce using rule 80 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    DIV             reduce using rule 80 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    MULT            reduce using rule 80 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    SUB             reduce using rule 80 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    SUM             reduce using rule 80 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    EQUAL_TO        reduce using rule 80 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    MORE_OR_EQ_THAN reduce using rule 80 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    LESS_OR_EQ_THAN reduce using rule 80 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    DIFFERENT_TO    reduce using rule 80 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    MORE_THAN       reduce using rule 80 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    LESS_THAN       reduce using rule 80 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    COMMA           reduce using rule 80 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    CLOSE_PTH       reduce using rule 80 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    PEN_DOWN        reduce using rule 80 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    PEN_UP          reduce using rule 80 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    WHILE           reduce using rule 80 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    IF              reduce using rule 80 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    WRITE           reduce using rule 80 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    READ            reduce using rule 80 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    ID              reduce using rule 80 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    BOOL            reduce using rule 80 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    WORD            reduce using rule 80 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    NUMBER          reduce using rule 80 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    CENTER          reduce using rule 80 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    FORWARD         reduce using rule 80 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    RIGHT           reduce using rule 80 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    LEFT            reduce using rule 80 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    END             reduce using rule 80 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    ELSE            reduce using rule 80 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    CLOSE_SQR       reduce using rule 80 (array -> OPEN_SQR expression CLOSE_SQR matrix .)


state 169

    (81) matrix -> empty .
    OR              reduce using rule 81 (matrix -> empty .)
    AND             reduce using rule 81 (matrix -> empty .)
    DIV             reduce using rule 81 (matrix -> empty .)
    MULT            reduce using rule 81 (matrix -> empty .)
    SUB             reduce using rule 81 (matrix -> empty .)
    SUM             reduce using rule 81 (matrix -> empty .)
    EQUAL_TO        reduce using rule 81 (matrix -> empty .)
    MORE_OR_EQ_THAN reduce using rule 81 (matrix -> empty .)
    LESS_OR_EQ_THAN reduce using rule 81 (matrix -> empty .)
    DIFFERENT_TO    reduce using rule 81 (matrix -> empty .)
    MORE_THAN       reduce using rule 81 (matrix -> empty .)
    LESS_THAN       reduce using rule 81 (matrix -> empty .)
    COMMA           reduce using rule 81 (matrix -> empty .)
    CLOSE_PTH       reduce using rule 81 (matrix -> empty .)
    PEN_DOWN        reduce using rule 81 (matrix -> empty .)
    PEN_UP          reduce using rule 81 (matrix -> empty .)
    WHILE           reduce using rule 81 (matrix -> empty .)
    IF              reduce using rule 81 (matrix -> empty .)
    WRITE           reduce using rule 81 (matrix -> empty .)
    READ            reduce using rule 81 (matrix -> empty .)
    ID              reduce using rule 81 (matrix -> empty .)
    BOOL            reduce using rule 81 (matrix -> empty .)
    WORD            reduce using rule 81 (matrix -> empty .)
    NUMBER          reduce using rule 81 (matrix -> empty .)
    CENTER          reduce using rule 81 (matrix -> empty .)
    FORWARD         reduce using rule 81 (matrix -> empty .)
    RIGHT           reduce using rule 81 (matrix -> empty .)
    LEFT            reduce using rule 81 (matrix -> empty .)
    END             reduce using rule 81 (matrix -> empty .)
    ELSE            reduce using rule 81 (matrix -> empty .)
    CLOSE_SQR       reduce using rule 81 (matrix -> empty .)


state 170

    (88) else_stmnt -> ELSE stmnt END .
    PEN_DOWN        reduce using rule 88 (else_stmnt -> ELSE stmnt END .)
    PEN_UP          reduce using rule 88 (else_stmnt -> ELSE stmnt END .)
    WHILE           reduce using rule 88 (else_stmnt -> ELSE stmnt END .)
    IF              reduce using rule 88 (else_stmnt -> ELSE stmnt END .)
    WRITE           reduce using rule 88 (else_stmnt -> ELSE stmnt END .)
    READ            reduce using rule 88 (else_stmnt -> ELSE stmnt END .)
    ID              reduce using rule 88 (else_stmnt -> ELSE stmnt END .)
    BOOL            reduce using rule 88 (else_stmnt -> ELSE stmnt END .)
    WORD            reduce using rule 88 (else_stmnt -> ELSE stmnt END .)
    NUMBER          reduce using rule 88 (else_stmnt -> ELSE stmnt END .)
    CENTER          reduce using rule 88 (else_stmnt -> ELSE stmnt END .)
    FORWARD         reduce using rule 88 (else_stmnt -> ELSE stmnt END .)
    RIGHT           reduce using rule 88 (else_stmnt -> ELSE stmnt END .)
    LEFT            reduce using rule 88 (else_stmnt -> ELSE stmnt END .)
    END             reduce using rule 88 (else_stmnt -> ELSE stmnt END .)
    ELSE            reduce using rule 88 (else_stmnt -> ELSE stmnt END .)


state 171

    (31) var_assignation -> id e5 assign e6 expression q3 .
    PEN_DOWN        reduce using rule 31 (var_assignation -> id e5 assign e6 expression q3 .)
    PEN_UP          reduce using rule 31 (var_assignation -> id e5 assign e6 expression q3 .)
    WHILE           reduce using rule 31 (var_assignation -> id e5 assign e6 expression q3 .)
    IF              reduce using rule 31 (var_assignation -> id e5 assign e6 expression q3 .)
    WRITE           reduce using rule 31 (var_assignation -> id e5 assign e6 expression q3 .)
    READ            reduce using rule 31 (var_assignation -> id e5 assign e6 expression q3 .)
    ID              reduce using rule 31 (var_assignation -> id e5 assign e6 expression q3 .)
    BOOL            reduce using rule 31 (var_assignation -> id e5 assign e6 expression q3 .)
    WORD            reduce using rule 31 (var_assignation -> id e5 assign e6 expression q3 .)
    NUMBER          reduce using rule 31 (var_assignation -> id e5 assign e6 expression q3 .)
    CENTER          reduce using rule 31 (var_assignation -> id e5 assign e6 expression q3 .)
    FORWARD         reduce using rule 31 (var_assignation -> id e5 assign e6 expression q3 .)
    RIGHT           reduce using rule 31 (var_assignation -> id e5 assign e6 expression q3 .)
    LEFT            reduce using rule 31 (var_assignation -> id e5 assign e6 expression q3 .)
    END             reduce using rule 31 (var_assignation -> id e5 assign e6 expression q3 .)
    ELSE            reduce using rule 31 (var_assignation -> id e5 assign e6 expression q3 .)


state 172

    (11) func_declaration -> func_type FUNC ID OPEN_PTH parameter CLOSE_PTH stmnt END .
    MAIN            reduce using rule 11 (func_declaration -> func_type FUNC ID OPEN_PTH parameter CLOSE_PTH stmnt END .)


state 173

    (19) multiple_parameters -> COMMA parameter .
    CLOSE_PTH       reduce using rule 19 (multiple_parameters -> COMMA parameter .)


state 174

    (82) matrix -> OPEN_SQR expression . CLOSE_SQR
    (60) factor -> expression .
  ! shift/reduce conflict for CLOSE_SQR resolved as shift
    CLOSE_SQR       shift and go to state 175
    SUB             reduce using rule 60 (factor -> expression .)
    SUM             reduce using rule 60 (factor -> expression .)
    EQUAL_TO        reduce using rule 60 (factor -> expression .)
    MORE_OR_EQ_THAN reduce using rule 60 (factor -> expression .)
    LESS_OR_EQ_THAN reduce using rule 60 (factor -> expression .)
    DIFFERENT_TO    reduce using rule 60 (factor -> expression .)
    MORE_THAN       reduce using rule 60 (factor -> expression .)
    LESS_THAN       reduce using rule 60 (factor -> expression .)
    DIV             reduce using rule 60 (factor -> expression .)
    MULT            reduce using rule 60 (factor -> expression .)


state 175

    (82) matrix -> OPEN_SQR expression CLOSE_SQR .
    OR              reduce using rule 82 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    AND             reduce using rule 82 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    DIV             reduce using rule 82 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    MULT            reduce using rule 82 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    SUB             reduce using rule 82 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    SUM             reduce using rule 82 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    EQUAL_TO        reduce using rule 82 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    MORE_OR_EQ_THAN reduce using rule 82 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    LESS_OR_EQ_THAN reduce using rule 82 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    DIFFERENT_TO    reduce using rule 82 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    MORE_THAN       reduce using rule 82 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    LESS_THAN       reduce using rule 82 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    COMMA           reduce using rule 82 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    CLOSE_PTH       reduce using rule 82 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    PEN_DOWN        reduce using rule 82 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    PEN_UP          reduce using rule 82 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    WHILE           reduce using rule 82 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    IF              reduce using rule 82 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    WRITE           reduce using rule 82 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    READ            reduce using rule 82 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    ID              reduce using rule 82 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    BOOL            reduce using rule 82 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    WORD            reduce using rule 82 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    NUMBER          reduce using rule 82 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    CENTER          reduce using rule 82 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    FORWARD         reduce using rule 82 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    RIGHT           reduce using rule 82 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    LEFT            reduce using rule 82 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    END             reduce using rule 82 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    ELSE            reduce using rule 82 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    CLOSE_SQR       reduce using rule 82 (matrix -> OPEN_SQR expression CLOSE_SQR .)


Conflicts:

shift/reduce conflict for BOOL in state 3 resolved as shift
shift/reduce conflict for WORD in state 3 resolved as shift
shift/reduce conflict for NUMBER in state 3 resolved as shift
shift/reduce conflict for OR in state 68 resolved as shift
shift/reduce conflict for AND in state 68 resolved as shift
shift/reduce conflict for EQUAL_TO in state 69 resolved as shift
shift/reduce conflict for MORE_OR_EQ_THAN in state 69 resolved as shift
shift/reduce conflict for LESS_OR_EQ_THAN in state 69 resolved as shift
shift/reduce conflict for DIFFERENT_TO in state 69 resolved as shift
shift/reduce conflict for MORE_THAN in state 69 resolved as shift
shift/reduce conflict for LESS_THAN in state 69 resolved as shift
shift/reduce conflict for SUB in state 70 resolved as shift
shift/reduce conflict for SUM in state 70 resolved as shift
shift/reduce conflict for DIV in state 71 resolved as shift
shift/reduce conflict for MULT in state 71 resolved as shift
shift/reduce conflict for COMMA in state 93 resolved as shift
shift/reduce conflict for CLOSE_PTH in state 117 resolved as shift
shift/reduce conflict for CLOSE_PTH in state 122 resolved as shift
shift/reduce conflict for CLOSE_SQR in state 143 resolved as shift
shift/reduce conflict for EQUAL_TO in state 153 resolved as shift
shift/reduce conflict for MORE_OR_EQ_THAN in state 153 resolved as shift
shift/reduce conflict for LESS_OR_EQ_THAN in state 153 resolved as shift
shift/reduce conflict for DIFFERENT_TO in state 153 resolved as shift
shift/reduce conflict for MORE_THAN in state 153 resolved as shift
shift/reduce conflict for LESS_THAN in state 153 resolved as shift
shift/reduce conflict for SUB in state 155 resolved as shift
shift/reduce conflict for SUM in state 155 resolved as shift
shift/reduce conflict for DIV in state 156 resolved as shift
shift/reduce conflict for MULT in state 156 resolved as shift
shift/reduce conflict for CLOSE_SQR in state 174 resolved as shift
reduce/reduce conflict in state 93 resolved using rule factor -> expression
rejected rule (empty -> <empty>) in state 93
reduce/reduce conflict in state 137 resolved using rule factor -> expression
rejected rule (con_expression -> expression log_op expression) in state 137
reduce/reduce conflict in state 153 resolved using rule expression -> exp rel_op e4 exp
rejected rule (expression -> exp) in state 153
reduce/reduce conflict in state 160 resolved using rule q3 -> <empty>
rejected rule (factor -> expression) in state 160
reduce/reduce conflict in state 165 resolved using rule exp -> termino term_op e3 termino q1
rejected rule (exp -> termino q1) in state 165
reduce/reduce conflict in state 166 resolved using rule termino -> factor fact_op e2 factor q2
rejected rule (termino -> factor q2) in state 166
Rule (con_expression -> expression log_op expression) is never reduced