Grammar:

Rule 0     S' -> program
Rule 1     program -> DRAWING ID declaration
Rule 2     declaration -> var_declaration func_declaration main
Rule 3     var_declaration -> empty
Rule 4     var_declaration -> var_type ID multiple_var
Rule 5     multiple_var -> empty
Rule 6     multiple_var -> COMMA ID multiple_var
Rule 7     var_type -> BOOL
Rule 8     var_type -> WORD
Rule 9     var_type -> NUMBER
Rule 10    func_declaration -> empty
Rule 11    func_declaration -> FUNC func_type ID fd1 OPEN_PTH parameter CLOSE_PTH stmnt END
Rule 12    fd1 -> <empty>
Rule 13    func_type -> BOOL
Rule 14    func_type -> WORD
Rule 15    func_type -> NUMBER
Rule 16    func_type -> VOID
Rule 17    parameter -> empty
Rule 18    parameter -> var_type ID multiple_parameters
Rule 19    multiple_parameters -> empty
Rule 20    multiple_parameters -> COMMA parameter
Rule 21    stmnt -> empty
Rule 22    stmnt -> var_declaration_func stmnt
Rule 23    stmnt -> pen_func stmnt
Rule 24    stmnt -> move_func stmnt
Rule 25    stmnt -> while_stmnt stmnt
Rule 26    stmnt -> if_stmnt stmnt
Rule 27    stmnt -> write stmnt
Rule 28    stmnt -> read stmnt
Rule 29    stmnt -> func_call stmnt
Rule 30    stmnt -> var_assignation stmnt
Rule 31    var_declaration_func -> var_type ID multiple_vars
Rule 32    var_assignation -> ID e5 assign e6 expression q3
Rule 33    e5 -> <empty>
Rule 34    e6 -> <empty>
Rule 35    assign -> ASSIGN
Rule 36    var_cte -> func_call
Rule 37    var_cte -> cte_bool
Rule 38    var_cte -> CTE_STR
Rule 39    var_cte -> CTE_NUM
Rule 40    var_cte -> variable
Rule 41    cte_bool -> FALSE
Rule 42    cte_bool -> TRUE
Rule 43    expression -> exp q4
Rule 44    expression -> exp rel_op exp q4
Rule 45    q4 -> <empty>
Rule 46    e4 -> <empty>
Rule 47    exp -> termino q1
Rule 48    exp -> termino term_op e3 termino q1
Rule 49    e3 -> <empty>
Rule 50    q2 -> <empty>
Rule 51    term_op -> SUB
Rule 52    term_op -> SUM
Rule 53    termino -> factor q2
Rule 54    termino -> factor fact_op e2 expression q2
Rule 55    q1 -> <empty>
Rule 56    q3 -> <empty>
Rule 57    e2 -> <empty>
Rule 58    fact_op -> DIV
Rule 59    fact_op -> MULT
Rule 60    factor -> var_cte e1
Rule 61    factor -> open_pth expression close_pth
Rule 62    e1 -> <empty>
Rule 63    open_pth -> OPEN_PTH
Rule 64    close_pth -> CLOSE_PTH
Rule 65    log_op -> OR
Rule 66    log_op -> AND
Rule 67    rel_op -> EQUAL_TO
Rule 68    rel_op -> MORE_OR_EQ_THAN
Rule 69    rel_op -> LESS_OR_EQ_THAN
Rule 70    rel_op -> DIFFERENT_TO
Rule 71    rel_op -> MORE_THAN
Rule 72    rel_op -> LESS_THAN
Rule 73    func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
Rule 74    func1 -> <empty>
Rule 75    func_call_param -> expression func2 multiple_fc_param
Rule 76    func2 -> <empty>
Rule 77    func3 -> <empty>
Rule 78    multiple_fc_param -> empty
Rule 79    multiple_fc_param -> COMMA func_call_param
Rule 80    read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH
Rule 81    variable -> ID array
Rule 82    array -> empty
Rule 83    array -> OPEN_SQR expression CLOSE_SQR matrix
Rule 84    matrix -> empty
Rule 85    matrix -> OPEN_SQR expression CLOSE_SQR
Rule 86    multiple_vars -> empty
Rule 87    multiple_vars -> COMMA variable
Rule 88    write -> WRITE OPEN_PTH expression CLOSE_PTH
Rule 89    if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt
Rule 90    if1 -> <empty>
Rule 91    if2 -> <empty>
Rule 92    else_stmnt -> END
Rule 93    else_stmnt -> ELSE stmnt END
Rule 94    while_stmnt -> WHILE con_expression stmnt END
Rule 95    con_expression -> expression q5
Rule 96    con_expression -> expression q5 log_op e7 expression q5
Rule 97    e7 -> <empty>
Rule 98    q5 -> <empty>
Rule 99    move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH
Rule 100   move_type -> CENTER
Rule 101   move_type -> FORWARD
Rule 102   move_type -> RIGHT
Rule 103   move_type -> LEFT
Rule 104   pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH
Rule 105   pen_func -> PEN_UP OPEN_PTH CLOSE_PTH
Rule 106   main -> MAIN stmnt END
Rule 107   empty -> <empty>

Terminals, with rules where they appear:

AND                  : 66
ASSIGN               : 35
BOOL                 : 7 13
CENTER               : 100
CLOSE_PTH            : 11 64 73 80 88 99 104 105
CLOSE_SQR            : 83 85
COMMA                : 6 20 79 87
CTE_NUM              : 39
CTE_STR              : 38
DIFFERENT_TO         : 70
DIV                  : 58
DRAWING              : 1
ELSE                 : 93
END                  : 11 92 93 94 106
EQUAL_TO             : 67
FALSE                : 41
FORWARD              : 101
FUNC                 : 11
ID                   : 1 4 6 11 18 31 32 73 81
IF                   : 89
LEFT                 : 103
LESS_OR_EQ_THAN      : 69
LESS_THAN            : 72
MAIN                 : 106
MORE_OR_EQ_THAN      : 68
MORE_THAN            : 71
MULT                 : 59
NUMBER               : 9 15
OPEN_PTH             : 11 63 73 80 88 99 104 105
OPEN_SQR             : 83 85
OR                   : 65
PEN_DOWN             : 104
PEN_UP               : 105
READ                 : 80
RIGHT                : 102
SUB                  : 51
SUM                  : 52
TRUE                 : 42
VOID                 : 16
WHILE                : 94
WORD                 : 8 14
WRITE                : 88
error                : 

Nonterminals, with rules where they appear:

array                : 81
assign               : 32
close_pth            : 61
con_expression       : 89 94
cte_bool             : 37
declaration          : 1
e1                   : 60
e2                   : 54
e3                   : 48
e4                   : 
e5                   : 32
e6                   : 32
e7                   : 96
else_stmnt           : 89
empty                : 3 5 10 17 19 21 78 82 84 86
exp                  : 43 44 44
expression           : 32 54 61 75 83 85 88 95 96 96
fact_op              : 54
factor               : 53 54
fd1                  : 11
func1                : 73
func2                : 75
func3                : 73
func_call            : 29 36
func_call_param      : 73 79 99
func_declaration     : 2
func_type            : 11
if1                  : 89
if2                  : 89
if_stmnt             : 26
log_op               : 96
main                 : 2
matrix               : 83
move_func            : 24
move_type            : 99
multiple_fc_param    : 75
multiple_parameters  : 18
multiple_var         : 4 6
multiple_vars        : 31 80
open_pth             : 61
parameter            : 11 20
pen_func             : 23
program              : 0
q1                   : 47 48
q2                   : 53 54
q3                   : 32
q4                   : 43 44
q5                   : 95 96 96
read                 : 28
rel_op               : 44
stmnt                : 11 22 23 24 25 26 27 28 29 30 89 93 94 106
term_op              : 48
termino              : 47 48 48
var_assignation      : 30
var_cte              : 60
var_declaration      : 2
var_declaration_func : 22
var_type             : 4 18 31
variable             : 40 80 87
while_stmnt          : 25
write                : 27


state 0

    (0) S' -> . program
    (1) program -> . DRAWING ID declaration
    DRAWING         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .


state 2

    (1) program -> DRAWING . ID declaration
    ID              shift and go to state 3


state 3

    (1) program -> DRAWING ID . declaration
    (2) declaration -> . var_declaration func_declaration main
    (3) var_declaration -> . empty
    (4) var_declaration -> . var_type ID multiple_var
    (107) empty -> .
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    FUNC            reduce using rule 107 (empty -> .)
    MAIN            reduce using rule 107 (empty -> .)
    BOOL            shift and go to state 8
    WORD            shift and go to state 9
    NUMBER          shift and go to state 10

    declaration                    shift and go to state 4
    var_declaration                shift and go to state 5
    empty                          shift and go to state 6
    var_type                       shift and go to state 7

state 4

    (1) program -> DRAWING ID declaration .
    $end            reduce using rule 1 (program -> DRAWING ID declaration .)


state 5

    (2) declaration -> var_declaration . func_declaration main
    (10) func_declaration -> . empty
    (11) func_declaration -> . FUNC func_type ID fd1 OPEN_PTH parameter CLOSE_PTH stmnt END
    (107) empty -> .
    FUNC            shift and go to state 13
    MAIN            reduce using rule 107 (empty -> .)

    func_declaration               shift and go to state 11
    empty                          shift and go to state 12

state 6

    (3) var_declaration -> empty .
    FUNC            reduce using rule 3 (var_declaration -> empty .)
    MAIN            reduce using rule 3 (var_declaration -> empty .)


state 7

    (4) var_declaration -> var_type . ID multiple_var
    ID              shift and go to state 14


state 8

    (7) var_type -> BOOL .
    ID              reduce using rule 7 (var_type -> BOOL .)


state 9

    (8) var_type -> WORD .
    ID              reduce using rule 8 (var_type -> WORD .)


state 10

    (9) var_type -> NUMBER .
    ID              reduce using rule 9 (var_type -> NUMBER .)


state 11

    (2) declaration -> var_declaration func_declaration . main
    (106) main -> . MAIN stmnt END
    MAIN            shift and go to state 16

    main                           shift and go to state 15

state 12

    (10) func_declaration -> empty .
    MAIN            reduce using rule 10 (func_declaration -> empty .)


state 13

    (11) func_declaration -> FUNC . func_type ID fd1 OPEN_PTH parameter CLOSE_PTH stmnt END
    (13) func_type -> . BOOL
    (14) func_type -> . WORD
    (15) func_type -> . NUMBER
    (16) func_type -> . VOID
    BOOL            shift and go to state 18
    WORD            shift and go to state 19
    NUMBER          shift and go to state 20
    VOID            shift and go to state 21

    func_type                      shift and go to state 17

state 14

    (4) var_declaration -> var_type ID . multiple_var
    (5) multiple_var -> . empty
    (6) multiple_var -> . COMMA ID multiple_var
    (107) empty -> .
    COMMA           shift and go to state 24
    FUNC            reduce using rule 107 (empty -> .)
    MAIN            reduce using rule 107 (empty -> .)

    multiple_var                   shift and go to state 22
    empty                          shift and go to state 23

state 15

    (2) declaration -> var_declaration func_declaration main .
    $end            reduce using rule 2 (declaration -> var_declaration func_declaration main .)


state 16

    (106) main -> MAIN . stmnt END
    (21) stmnt -> . empty
    (22) stmnt -> . var_declaration_func stmnt
    (23) stmnt -> . pen_func stmnt
    (24) stmnt -> . move_func stmnt
    (25) stmnt -> . while_stmnt stmnt
    (26) stmnt -> . if_stmnt stmnt
    (27) stmnt -> . write stmnt
    (28) stmnt -> . read stmnt
    (29) stmnt -> . func_call stmnt
    (30) stmnt -> . var_assignation stmnt
    (107) empty -> .
    (31) var_declaration_func -> . var_type ID multiple_vars
    (104) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (105) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (99) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (94) while_stmnt -> . WHILE con_expression stmnt END
    (89) if_stmnt -> . IF con_expression if1 stmnt if2 else_stmnt
    (88) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (80) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (73) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (32) var_assignation -> . ID e5 assign e6 expression q3
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (100) move_type -> . CENTER
    (101) move_type -> . FORWARD
    (102) move_type -> . RIGHT
    (103) move_type -> . LEFT
    END             reduce using rule 107 (empty -> .)
    PEN_DOWN        shift and go to state 38
    PEN_UP          shift and go to state 39
    WHILE           shift and go to state 41
    IF              shift and go to state 42
    WRITE           shift and go to state 43
    READ            shift and go to state 44
    ID              shift and go to state 37
    BOOL            shift and go to state 8
    WORD            shift and go to state 9
    NUMBER          shift and go to state 10
    CENTER          shift and go to state 45
    FORWARD         shift and go to state 46
    RIGHT           shift and go to state 47
    LEFT            shift and go to state 48

    stmnt                          shift and go to state 25
    empty                          shift and go to state 26
    var_declaration_func           shift and go to state 27
    pen_func                       shift and go to state 28
    move_func                      shift and go to state 29
    while_stmnt                    shift and go to state 30
    if_stmnt                       shift and go to state 31
    write                          shift and go to state 32
    read                           shift and go to state 33
    func_call                      shift and go to state 34
    var_assignation                shift and go to state 35
    var_type                       shift and go to state 36
    move_type                      shift and go to state 40

state 17

    (11) func_declaration -> FUNC func_type . ID fd1 OPEN_PTH parameter CLOSE_PTH stmnt END
    ID              shift and go to state 49


state 18

    (13) func_type -> BOOL .
    ID              reduce using rule 13 (func_type -> BOOL .)


state 19

    (14) func_type -> WORD .
    ID              reduce using rule 14 (func_type -> WORD .)


state 20

    (15) func_type -> NUMBER .
    ID              reduce using rule 15 (func_type -> NUMBER .)


state 21

    (16) func_type -> VOID .
    ID              reduce using rule 16 (func_type -> VOID .)


state 22

    (4) var_declaration -> var_type ID multiple_var .
    FUNC            reduce using rule 4 (var_declaration -> var_type ID multiple_var .)
    MAIN            reduce using rule 4 (var_declaration -> var_type ID multiple_var .)


state 23

    (5) multiple_var -> empty .
    FUNC            reduce using rule 5 (multiple_var -> empty .)
    MAIN            reduce using rule 5 (multiple_var -> empty .)


state 24

    (6) multiple_var -> COMMA . ID multiple_var
    ID              shift and go to state 50


state 25

    (106) main -> MAIN stmnt . END
    END             shift and go to state 51


state 26

    (21) stmnt -> empty .
    END             reduce using rule 21 (stmnt -> empty .)
    ELSE            reduce using rule 21 (stmnt -> empty .)


state 27

    (22) stmnt -> var_declaration_func . stmnt
    (21) stmnt -> . empty
    (22) stmnt -> . var_declaration_func stmnt
    (23) stmnt -> . pen_func stmnt
    (24) stmnt -> . move_func stmnt
    (25) stmnt -> . while_stmnt stmnt
    (26) stmnt -> . if_stmnt stmnt
    (27) stmnt -> . write stmnt
    (28) stmnt -> . read stmnt
    (29) stmnt -> . func_call stmnt
    (30) stmnt -> . var_assignation stmnt
    (107) empty -> .
    (31) var_declaration_func -> . var_type ID multiple_vars
    (104) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (105) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (99) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (94) while_stmnt -> . WHILE con_expression stmnt END
    (89) if_stmnt -> . IF con_expression if1 stmnt if2 else_stmnt
    (88) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (80) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (73) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (32) var_assignation -> . ID e5 assign e6 expression q3
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (100) move_type -> . CENTER
    (101) move_type -> . FORWARD
    (102) move_type -> . RIGHT
    (103) move_type -> . LEFT
    END             reduce using rule 107 (empty -> .)
    ELSE            reduce using rule 107 (empty -> .)
    PEN_DOWN        shift and go to state 38
    PEN_UP          shift and go to state 39
    WHILE           shift and go to state 41
    IF              shift and go to state 42
    WRITE           shift and go to state 43
    READ            shift and go to state 44
    ID              shift and go to state 37
    BOOL            shift and go to state 8
    WORD            shift and go to state 9
    NUMBER          shift and go to state 10
    CENTER          shift and go to state 45
    FORWARD         shift and go to state 46
    RIGHT           shift and go to state 47
    LEFT            shift and go to state 48

    var_declaration_func           shift and go to state 27
    stmnt                          shift and go to state 52
    empty                          shift and go to state 26
    pen_func                       shift and go to state 28
    move_func                      shift and go to state 29
    while_stmnt                    shift and go to state 30
    if_stmnt                       shift and go to state 31
    write                          shift and go to state 32
    read                           shift and go to state 33
    func_call                      shift and go to state 34
    var_assignation                shift and go to state 35
    var_type                       shift and go to state 36
    move_type                      shift and go to state 40

state 28

    (23) stmnt -> pen_func . stmnt
    (21) stmnt -> . empty
    (22) stmnt -> . var_declaration_func stmnt
    (23) stmnt -> . pen_func stmnt
    (24) stmnt -> . move_func stmnt
    (25) stmnt -> . while_stmnt stmnt
    (26) stmnt -> . if_stmnt stmnt
    (27) stmnt -> . write stmnt
    (28) stmnt -> . read stmnt
    (29) stmnt -> . func_call stmnt
    (30) stmnt -> . var_assignation stmnt
    (107) empty -> .
    (31) var_declaration_func -> . var_type ID multiple_vars
    (104) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (105) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (99) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (94) while_stmnt -> . WHILE con_expression stmnt END
    (89) if_stmnt -> . IF con_expression if1 stmnt if2 else_stmnt
    (88) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (80) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (73) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (32) var_assignation -> . ID e5 assign e6 expression q3
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (100) move_type -> . CENTER
    (101) move_type -> . FORWARD
    (102) move_type -> . RIGHT
    (103) move_type -> . LEFT
    END             reduce using rule 107 (empty -> .)
    ELSE            reduce using rule 107 (empty -> .)
    PEN_DOWN        shift and go to state 38
    PEN_UP          shift and go to state 39
    WHILE           shift and go to state 41
    IF              shift and go to state 42
    WRITE           shift and go to state 43
    READ            shift and go to state 44
    ID              shift and go to state 37
    BOOL            shift and go to state 8
    WORD            shift and go to state 9
    NUMBER          shift and go to state 10
    CENTER          shift and go to state 45
    FORWARD         shift and go to state 46
    RIGHT           shift and go to state 47
    LEFT            shift and go to state 48

    pen_func                       shift and go to state 28
    stmnt                          shift and go to state 53
    empty                          shift and go to state 26
    var_declaration_func           shift and go to state 27
    move_func                      shift and go to state 29
    while_stmnt                    shift and go to state 30
    if_stmnt                       shift and go to state 31
    write                          shift and go to state 32
    read                           shift and go to state 33
    func_call                      shift and go to state 34
    var_assignation                shift and go to state 35
    var_type                       shift and go to state 36
    move_type                      shift and go to state 40

state 29

    (24) stmnt -> move_func . stmnt
    (21) stmnt -> . empty
    (22) stmnt -> . var_declaration_func stmnt
    (23) stmnt -> . pen_func stmnt
    (24) stmnt -> . move_func stmnt
    (25) stmnt -> . while_stmnt stmnt
    (26) stmnt -> . if_stmnt stmnt
    (27) stmnt -> . write stmnt
    (28) stmnt -> . read stmnt
    (29) stmnt -> . func_call stmnt
    (30) stmnt -> . var_assignation stmnt
    (107) empty -> .
    (31) var_declaration_func -> . var_type ID multiple_vars
    (104) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (105) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (99) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (94) while_stmnt -> . WHILE con_expression stmnt END
    (89) if_stmnt -> . IF con_expression if1 stmnt if2 else_stmnt
    (88) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (80) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (73) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (32) var_assignation -> . ID e5 assign e6 expression q3
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (100) move_type -> . CENTER
    (101) move_type -> . FORWARD
    (102) move_type -> . RIGHT
    (103) move_type -> . LEFT
    END             reduce using rule 107 (empty -> .)
    ELSE            reduce using rule 107 (empty -> .)
    PEN_DOWN        shift and go to state 38
    PEN_UP          shift and go to state 39
    WHILE           shift and go to state 41
    IF              shift and go to state 42
    WRITE           shift and go to state 43
    READ            shift and go to state 44
    ID              shift and go to state 37
    BOOL            shift and go to state 8
    WORD            shift and go to state 9
    NUMBER          shift and go to state 10
    CENTER          shift and go to state 45
    FORWARD         shift and go to state 46
    RIGHT           shift and go to state 47
    LEFT            shift and go to state 48

    move_func                      shift and go to state 29
    stmnt                          shift and go to state 54
    empty                          shift and go to state 26
    var_declaration_func           shift and go to state 27
    pen_func                       shift and go to state 28
    while_stmnt                    shift and go to state 30
    if_stmnt                       shift and go to state 31
    write                          shift and go to state 32
    read                           shift and go to state 33
    func_call                      shift and go to state 34
    var_assignation                shift and go to state 35
    var_type                       shift and go to state 36
    move_type                      shift and go to state 40

state 30

    (25) stmnt -> while_stmnt . stmnt
    (21) stmnt -> . empty
    (22) stmnt -> . var_declaration_func stmnt
    (23) stmnt -> . pen_func stmnt
    (24) stmnt -> . move_func stmnt
    (25) stmnt -> . while_stmnt stmnt
    (26) stmnt -> . if_stmnt stmnt
    (27) stmnt -> . write stmnt
    (28) stmnt -> . read stmnt
    (29) stmnt -> . func_call stmnt
    (30) stmnt -> . var_assignation stmnt
    (107) empty -> .
    (31) var_declaration_func -> . var_type ID multiple_vars
    (104) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (105) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (99) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (94) while_stmnt -> . WHILE con_expression stmnt END
    (89) if_stmnt -> . IF con_expression if1 stmnt if2 else_stmnt
    (88) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (80) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (73) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (32) var_assignation -> . ID e5 assign e6 expression q3
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (100) move_type -> . CENTER
    (101) move_type -> . FORWARD
    (102) move_type -> . RIGHT
    (103) move_type -> . LEFT
    END             reduce using rule 107 (empty -> .)
    ELSE            reduce using rule 107 (empty -> .)
    PEN_DOWN        shift and go to state 38
    PEN_UP          shift and go to state 39
    WHILE           shift and go to state 41
    IF              shift and go to state 42
    WRITE           shift and go to state 43
    READ            shift and go to state 44
    ID              shift and go to state 37
    BOOL            shift and go to state 8
    WORD            shift and go to state 9
    NUMBER          shift and go to state 10
    CENTER          shift and go to state 45
    FORWARD         shift and go to state 46
    RIGHT           shift and go to state 47
    LEFT            shift and go to state 48

    while_stmnt                    shift and go to state 30
    stmnt                          shift and go to state 55
    empty                          shift and go to state 26
    var_declaration_func           shift and go to state 27
    pen_func                       shift and go to state 28
    move_func                      shift and go to state 29
    if_stmnt                       shift and go to state 31
    write                          shift and go to state 32
    read                           shift and go to state 33
    func_call                      shift and go to state 34
    var_assignation                shift and go to state 35
    var_type                       shift and go to state 36
    move_type                      shift and go to state 40

state 31

    (26) stmnt -> if_stmnt . stmnt
    (21) stmnt -> . empty
    (22) stmnt -> . var_declaration_func stmnt
    (23) stmnt -> . pen_func stmnt
    (24) stmnt -> . move_func stmnt
    (25) stmnt -> . while_stmnt stmnt
    (26) stmnt -> . if_stmnt stmnt
    (27) stmnt -> . write stmnt
    (28) stmnt -> . read stmnt
    (29) stmnt -> . func_call stmnt
    (30) stmnt -> . var_assignation stmnt
    (107) empty -> .
    (31) var_declaration_func -> . var_type ID multiple_vars
    (104) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (105) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (99) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (94) while_stmnt -> . WHILE con_expression stmnt END
    (89) if_stmnt -> . IF con_expression if1 stmnt if2 else_stmnt
    (88) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (80) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (73) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (32) var_assignation -> . ID e5 assign e6 expression q3
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (100) move_type -> . CENTER
    (101) move_type -> . FORWARD
    (102) move_type -> . RIGHT
    (103) move_type -> . LEFT
    END             reduce using rule 107 (empty -> .)
    ELSE            reduce using rule 107 (empty -> .)
    PEN_DOWN        shift and go to state 38
    PEN_UP          shift and go to state 39
    WHILE           shift and go to state 41
    IF              shift and go to state 42
    WRITE           shift and go to state 43
    READ            shift and go to state 44
    ID              shift and go to state 37
    BOOL            shift and go to state 8
    WORD            shift and go to state 9
    NUMBER          shift and go to state 10
    CENTER          shift and go to state 45
    FORWARD         shift and go to state 46
    RIGHT           shift and go to state 47
    LEFT            shift and go to state 48

    if_stmnt                       shift and go to state 31
    stmnt                          shift and go to state 56
    empty                          shift and go to state 26
    var_declaration_func           shift and go to state 27
    pen_func                       shift and go to state 28
    move_func                      shift and go to state 29
    while_stmnt                    shift and go to state 30
    write                          shift and go to state 32
    read                           shift and go to state 33
    func_call                      shift and go to state 34
    var_assignation                shift and go to state 35
    var_type                       shift and go to state 36
    move_type                      shift and go to state 40

state 32

    (27) stmnt -> write . stmnt
    (21) stmnt -> . empty
    (22) stmnt -> . var_declaration_func stmnt
    (23) stmnt -> . pen_func stmnt
    (24) stmnt -> . move_func stmnt
    (25) stmnt -> . while_stmnt stmnt
    (26) stmnt -> . if_stmnt stmnt
    (27) stmnt -> . write stmnt
    (28) stmnt -> . read stmnt
    (29) stmnt -> . func_call stmnt
    (30) stmnt -> . var_assignation stmnt
    (107) empty -> .
    (31) var_declaration_func -> . var_type ID multiple_vars
    (104) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (105) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (99) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (94) while_stmnt -> . WHILE con_expression stmnt END
    (89) if_stmnt -> . IF con_expression if1 stmnt if2 else_stmnt
    (88) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (80) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (73) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (32) var_assignation -> . ID e5 assign e6 expression q3
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (100) move_type -> . CENTER
    (101) move_type -> . FORWARD
    (102) move_type -> . RIGHT
    (103) move_type -> . LEFT
    END             reduce using rule 107 (empty -> .)
    ELSE            reduce using rule 107 (empty -> .)
    PEN_DOWN        shift and go to state 38
    PEN_UP          shift and go to state 39
    WHILE           shift and go to state 41
    IF              shift and go to state 42
    WRITE           shift and go to state 43
    READ            shift and go to state 44
    ID              shift and go to state 37
    BOOL            shift and go to state 8
    WORD            shift and go to state 9
    NUMBER          shift and go to state 10
    CENTER          shift and go to state 45
    FORWARD         shift and go to state 46
    RIGHT           shift and go to state 47
    LEFT            shift and go to state 48

    write                          shift and go to state 32
    stmnt                          shift and go to state 57
    empty                          shift and go to state 26
    var_declaration_func           shift and go to state 27
    pen_func                       shift and go to state 28
    move_func                      shift and go to state 29
    while_stmnt                    shift and go to state 30
    if_stmnt                       shift and go to state 31
    read                           shift and go to state 33
    func_call                      shift and go to state 34
    var_assignation                shift and go to state 35
    var_type                       shift and go to state 36
    move_type                      shift and go to state 40

state 33

    (28) stmnt -> read . stmnt
    (21) stmnt -> . empty
    (22) stmnt -> . var_declaration_func stmnt
    (23) stmnt -> . pen_func stmnt
    (24) stmnt -> . move_func stmnt
    (25) stmnt -> . while_stmnt stmnt
    (26) stmnt -> . if_stmnt stmnt
    (27) stmnt -> . write stmnt
    (28) stmnt -> . read stmnt
    (29) stmnt -> . func_call stmnt
    (30) stmnt -> . var_assignation stmnt
    (107) empty -> .
    (31) var_declaration_func -> . var_type ID multiple_vars
    (104) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (105) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (99) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (94) while_stmnt -> . WHILE con_expression stmnt END
    (89) if_stmnt -> . IF con_expression if1 stmnt if2 else_stmnt
    (88) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (80) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (73) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (32) var_assignation -> . ID e5 assign e6 expression q3
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (100) move_type -> . CENTER
    (101) move_type -> . FORWARD
    (102) move_type -> . RIGHT
    (103) move_type -> . LEFT
    END             reduce using rule 107 (empty -> .)
    ELSE            reduce using rule 107 (empty -> .)
    PEN_DOWN        shift and go to state 38
    PEN_UP          shift and go to state 39
    WHILE           shift and go to state 41
    IF              shift and go to state 42
    WRITE           shift and go to state 43
    READ            shift and go to state 44
    ID              shift and go to state 37
    BOOL            shift and go to state 8
    WORD            shift and go to state 9
    NUMBER          shift and go to state 10
    CENTER          shift and go to state 45
    FORWARD         shift and go to state 46
    RIGHT           shift and go to state 47
    LEFT            shift and go to state 48

    read                           shift and go to state 33
    stmnt                          shift and go to state 58
    empty                          shift and go to state 26
    var_declaration_func           shift and go to state 27
    pen_func                       shift and go to state 28
    move_func                      shift and go to state 29
    while_stmnt                    shift and go to state 30
    if_stmnt                       shift and go to state 31
    write                          shift and go to state 32
    func_call                      shift and go to state 34
    var_assignation                shift and go to state 35
    var_type                       shift and go to state 36
    move_type                      shift and go to state 40

state 34

    (29) stmnt -> func_call . stmnt
    (21) stmnt -> . empty
    (22) stmnt -> . var_declaration_func stmnt
    (23) stmnt -> . pen_func stmnt
    (24) stmnt -> . move_func stmnt
    (25) stmnt -> . while_stmnt stmnt
    (26) stmnt -> . if_stmnt stmnt
    (27) stmnt -> . write stmnt
    (28) stmnt -> . read stmnt
    (29) stmnt -> . func_call stmnt
    (30) stmnt -> . var_assignation stmnt
    (107) empty -> .
    (31) var_declaration_func -> . var_type ID multiple_vars
    (104) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (105) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (99) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (94) while_stmnt -> . WHILE con_expression stmnt END
    (89) if_stmnt -> . IF con_expression if1 stmnt if2 else_stmnt
    (88) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (80) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (73) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (32) var_assignation -> . ID e5 assign e6 expression q3
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (100) move_type -> . CENTER
    (101) move_type -> . FORWARD
    (102) move_type -> . RIGHT
    (103) move_type -> . LEFT
    END             reduce using rule 107 (empty -> .)
    ELSE            reduce using rule 107 (empty -> .)
    PEN_DOWN        shift and go to state 38
    PEN_UP          shift and go to state 39
    WHILE           shift and go to state 41
    IF              shift and go to state 42
    WRITE           shift and go to state 43
    READ            shift and go to state 44
    ID              shift and go to state 37
    BOOL            shift and go to state 8
    WORD            shift and go to state 9
    NUMBER          shift and go to state 10
    CENTER          shift and go to state 45
    FORWARD         shift and go to state 46
    RIGHT           shift and go to state 47
    LEFT            shift and go to state 48

    func_call                      shift and go to state 34
    stmnt                          shift and go to state 59
    empty                          shift and go to state 26
    var_declaration_func           shift and go to state 27
    pen_func                       shift and go to state 28
    move_func                      shift and go to state 29
    while_stmnt                    shift and go to state 30
    if_stmnt                       shift and go to state 31
    write                          shift and go to state 32
    read                           shift and go to state 33
    var_assignation                shift and go to state 35
    var_type                       shift and go to state 36
    move_type                      shift and go to state 40

state 35

    (30) stmnt -> var_assignation . stmnt
    (21) stmnt -> . empty
    (22) stmnt -> . var_declaration_func stmnt
    (23) stmnt -> . pen_func stmnt
    (24) stmnt -> . move_func stmnt
    (25) stmnt -> . while_stmnt stmnt
    (26) stmnt -> . if_stmnt stmnt
    (27) stmnt -> . write stmnt
    (28) stmnt -> . read stmnt
    (29) stmnt -> . func_call stmnt
    (30) stmnt -> . var_assignation stmnt
    (107) empty -> .
    (31) var_declaration_func -> . var_type ID multiple_vars
    (104) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (105) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (99) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (94) while_stmnt -> . WHILE con_expression stmnt END
    (89) if_stmnt -> . IF con_expression if1 stmnt if2 else_stmnt
    (88) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (80) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (73) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (32) var_assignation -> . ID e5 assign e6 expression q3
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (100) move_type -> . CENTER
    (101) move_type -> . FORWARD
    (102) move_type -> . RIGHT
    (103) move_type -> . LEFT
    END             reduce using rule 107 (empty -> .)
    ELSE            reduce using rule 107 (empty -> .)
    PEN_DOWN        shift and go to state 38
    PEN_UP          shift and go to state 39
    WHILE           shift and go to state 41
    IF              shift and go to state 42
    WRITE           shift and go to state 43
    READ            shift and go to state 44
    ID              shift and go to state 37
    BOOL            shift and go to state 8
    WORD            shift and go to state 9
    NUMBER          shift and go to state 10
    CENTER          shift and go to state 45
    FORWARD         shift and go to state 46
    RIGHT           shift and go to state 47
    LEFT            shift and go to state 48

    var_assignation                shift and go to state 35
    stmnt                          shift and go to state 60
    empty                          shift and go to state 26
    var_declaration_func           shift and go to state 27
    pen_func                       shift and go to state 28
    move_func                      shift and go to state 29
    while_stmnt                    shift and go to state 30
    if_stmnt                       shift and go to state 31
    write                          shift and go to state 32
    read                           shift and go to state 33
    func_call                      shift and go to state 34
    var_type                       shift and go to state 36
    move_type                      shift and go to state 40

state 36

    (31) var_declaration_func -> var_type . ID multiple_vars
    ID              shift and go to state 61


state 37

    (73) func_call -> ID . OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (32) var_assignation -> ID . e5 assign e6 expression q3
    (33) e5 -> .
    OPEN_PTH        shift and go to state 62
    ASSIGN          reduce using rule 33 (e5 -> .)

    e5                             shift and go to state 63

state 38

    (104) pen_func -> PEN_DOWN . OPEN_PTH CLOSE_PTH
    OPEN_PTH        shift and go to state 64


state 39

    (105) pen_func -> PEN_UP . OPEN_PTH CLOSE_PTH
    OPEN_PTH        shift and go to state 65


state 40

    (99) move_func -> move_type . OPEN_PTH func_call_param CLOSE_PTH
    OPEN_PTH        shift and go to state 66


state 41

    (94) while_stmnt -> WHILE . con_expression stmnt END
    (95) con_expression -> . expression q5
    (96) con_expression -> . expression q5 log_op e7 expression q5
    (43) expression -> . exp q4
    (44) expression -> . exp rel_op exp q4
    (47) exp -> . termino q1
    (48) exp -> . termino term_op e3 termino q1
    (53) termino -> . factor q2
    (54) termino -> . factor fact_op e2 expression q2
    (60) factor -> . var_cte e1
    (61) factor -> . open_pth expression close_pth
    (36) var_cte -> . func_call
    (37) var_cte -> . cte_bool
    (38) var_cte -> . CTE_STR
    (39) var_cte -> . CTE_NUM
    (40) var_cte -> . variable
    (63) open_pth -> . OPEN_PTH
    (73) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (41) cte_bool -> . FALSE
    (42) cte_bool -> . TRUE
    (81) variable -> . ID array
    CTE_STR         shift and go to state 76
    CTE_NUM         shift and go to state 77
    OPEN_PTH        shift and go to state 79
    ID              shift and go to state 80
    FALSE           shift and go to state 81
    TRUE            shift and go to state 82

    con_expression                 shift and go to state 67
    expression                     shift and go to state 68
    exp                            shift and go to state 69
    termino                        shift and go to state 70
    factor                         shift and go to state 71
    var_cte                        shift and go to state 72
    open_pth                       shift and go to state 73
    func_call                      shift and go to state 74
    cte_bool                       shift and go to state 75
    variable                       shift and go to state 78

state 42

    (89) if_stmnt -> IF . con_expression if1 stmnt if2 else_stmnt
    (95) con_expression -> . expression q5
    (96) con_expression -> . expression q5 log_op e7 expression q5
    (43) expression -> . exp q4
    (44) expression -> . exp rel_op exp q4
    (47) exp -> . termino q1
    (48) exp -> . termino term_op e3 termino q1
    (53) termino -> . factor q2
    (54) termino -> . factor fact_op e2 expression q2
    (60) factor -> . var_cte e1
    (61) factor -> . open_pth expression close_pth
    (36) var_cte -> . func_call
    (37) var_cte -> . cte_bool
    (38) var_cte -> . CTE_STR
    (39) var_cte -> . CTE_NUM
    (40) var_cte -> . variable
    (63) open_pth -> . OPEN_PTH
    (73) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (41) cte_bool -> . FALSE
    (42) cte_bool -> . TRUE
    (81) variable -> . ID array
    CTE_STR         shift and go to state 76
    CTE_NUM         shift and go to state 77
    OPEN_PTH        shift and go to state 79
    ID              shift and go to state 80
    FALSE           shift and go to state 81
    TRUE            shift and go to state 82

    con_expression                 shift and go to state 83
    expression                     shift and go to state 68
    exp                            shift and go to state 69
    termino                        shift and go to state 70
    factor                         shift and go to state 71
    var_cte                        shift and go to state 72
    open_pth                       shift and go to state 73
    func_call                      shift and go to state 74
    cte_bool                       shift and go to state 75
    variable                       shift and go to state 78

state 43

    (88) write -> WRITE . OPEN_PTH expression CLOSE_PTH
    OPEN_PTH        shift and go to state 84


state 44

    (80) read -> READ . OPEN_PTH variable multiple_vars CLOSE_PTH
    OPEN_PTH        shift and go to state 85


state 45

    (100) move_type -> CENTER .
    OPEN_PTH        reduce using rule 100 (move_type -> CENTER .)


state 46

    (101) move_type -> FORWARD .
    OPEN_PTH        reduce using rule 101 (move_type -> FORWARD .)


state 47

    (102) move_type -> RIGHT .
    OPEN_PTH        reduce using rule 102 (move_type -> RIGHT .)


state 48

    (103) move_type -> LEFT .
    OPEN_PTH        reduce using rule 103 (move_type -> LEFT .)


state 49

    (11) func_declaration -> FUNC func_type ID . fd1 OPEN_PTH parameter CLOSE_PTH stmnt END
    (12) fd1 -> .
    OPEN_PTH        reduce using rule 12 (fd1 -> .)

    fd1                            shift and go to state 86

state 50

    (6) multiple_var -> COMMA ID . multiple_var
    (5) multiple_var -> . empty
    (6) multiple_var -> . COMMA ID multiple_var
    (107) empty -> .
    COMMA           shift and go to state 24
    FUNC            reduce using rule 107 (empty -> .)
    MAIN            reduce using rule 107 (empty -> .)

    multiple_var                   shift and go to state 87
    empty                          shift and go to state 23

state 51

    (106) main -> MAIN stmnt END .
    $end            reduce using rule 106 (main -> MAIN stmnt END .)


state 52

    (22) stmnt -> var_declaration_func stmnt .
    END             reduce using rule 22 (stmnt -> var_declaration_func stmnt .)
    ELSE            reduce using rule 22 (stmnt -> var_declaration_func stmnt .)


state 53

    (23) stmnt -> pen_func stmnt .
    END             reduce using rule 23 (stmnt -> pen_func stmnt .)
    ELSE            reduce using rule 23 (stmnt -> pen_func stmnt .)


state 54

    (24) stmnt -> move_func stmnt .
    END             reduce using rule 24 (stmnt -> move_func stmnt .)
    ELSE            reduce using rule 24 (stmnt -> move_func stmnt .)


state 55

    (25) stmnt -> while_stmnt stmnt .
    END             reduce using rule 25 (stmnt -> while_stmnt stmnt .)
    ELSE            reduce using rule 25 (stmnt -> while_stmnt stmnt .)


state 56

    (26) stmnt -> if_stmnt stmnt .
    END             reduce using rule 26 (stmnt -> if_stmnt stmnt .)
    ELSE            reduce using rule 26 (stmnt -> if_stmnt stmnt .)


state 57

    (27) stmnt -> write stmnt .
    END             reduce using rule 27 (stmnt -> write stmnt .)
    ELSE            reduce using rule 27 (stmnt -> write stmnt .)


state 58

    (28) stmnt -> read stmnt .
    END             reduce using rule 28 (stmnt -> read stmnt .)
    ELSE            reduce using rule 28 (stmnt -> read stmnt .)


state 59

    (29) stmnt -> func_call stmnt .
    END             reduce using rule 29 (stmnt -> func_call stmnt .)
    ELSE            reduce using rule 29 (stmnt -> func_call stmnt .)


state 60

    (30) stmnt -> var_assignation stmnt .
    END             reduce using rule 30 (stmnt -> var_assignation stmnt .)
    ELSE            reduce using rule 30 (stmnt -> var_assignation stmnt .)


state 61

    (31) var_declaration_func -> var_type ID . multiple_vars
    (86) multiple_vars -> . empty
    (87) multiple_vars -> . COMMA variable
    (107) empty -> .
    COMMA           shift and go to state 90
    PEN_DOWN        reduce using rule 107 (empty -> .)
    PEN_UP          reduce using rule 107 (empty -> .)
    WHILE           reduce using rule 107 (empty -> .)
    IF              reduce using rule 107 (empty -> .)
    WRITE           reduce using rule 107 (empty -> .)
    READ            reduce using rule 107 (empty -> .)
    ID              reduce using rule 107 (empty -> .)
    BOOL            reduce using rule 107 (empty -> .)
    WORD            reduce using rule 107 (empty -> .)
    NUMBER          reduce using rule 107 (empty -> .)
    CENTER          reduce using rule 107 (empty -> .)
    FORWARD         reduce using rule 107 (empty -> .)
    RIGHT           reduce using rule 107 (empty -> .)
    LEFT            reduce using rule 107 (empty -> .)
    END             reduce using rule 107 (empty -> .)
    ELSE            reduce using rule 107 (empty -> .)

    multiple_vars                  shift and go to state 88
    empty                          shift and go to state 89

state 62

    (73) func_call -> ID OPEN_PTH . func1 func_call_param CLOSE_PTH func3
    (74) func1 -> .
    CTE_STR         reduce using rule 74 (func1 -> .)
    CTE_NUM         reduce using rule 74 (func1 -> .)
    OPEN_PTH        reduce using rule 74 (func1 -> .)
    ID              reduce using rule 74 (func1 -> .)
    FALSE           reduce using rule 74 (func1 -> .)
    TRUE            reduce using rule 74 (func1 -> .)

    func1                          shift and go to state 91

state 63

    (32) var_assignation -> ID e5 . assign e6 expression q3
    (35) assign -> . ASSIGN
    ASSIGN          shift and go to state 93

    assign                         shift and go to state 92

state 64

    (104) pen_func -> PEN_DOWN OPEN_PTH . CLOSE_PTH
    CLOSE_PTH       shift and go to state 94


state 65

    (105) pen_func -> PEN_UP OPEN_PTH . CLOSE_PTH
    CLOSE_PTH       shift and go to state 95


state 66

    (99) move_func -> move_type OPEN_PTH . func_call_param CLOSE_PTH
    (75) func_call_param -> . expression func2 multiple_fc_param
    (43) expression -> . exp q4
    (44) expression -> . exp rel_op exp q4
    (47) exp -> . termino q1
    (48) exp -> . termino term_op e3 termino q1
    (53) termino -> . factor q2
    (54) termino -> . factor fact_op e2 expression q2
    (60) factor -> . var_cte e1
    (61) factor -> . open_pth expression close_pth
    (36) var_cte -> . func_call
    (37) var_cte -> . cte_bool
    (38) var_cte -> . CTE_STR
    (39) var_cte -> . CTE_NUM
    (40) var_cte -> . variable
    (63) open_pth -> . OPEN_PTH
    (73) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (41) cte_bool -> . FALSE
    (42) cte_bool -> . TRUE
    (81) variable -> . ID array
    CTE_STR         shift and go to state 76
    CTE_NUM         shift and go to state 77
    OPEN_PTH        shift and go to state 79
    ID              shift and go to state 80
    FALSE           shift and go to state 81
    TRUE            shift and go to state 82

    func_call_param                shift and go to state 96
    expression                     shift and go to state 97
    exp                            shift and go to state 69
    termino                        shift and go to state 70
    factor                         shift and go to state 71
    var_cte                        shift and go to state 72
    open_pth                       shift and go to state 73
    func_call                      shift and go to state 74
    cte_bool                       shift and go to state 75
    variable                       shift and go to state 78

state 67

    (94) while_stmnt -> WHILE con_expression . stmnt END
    (21) stmnt -> . empty
    (22) stmnt -> . var_declaration_func stmnt
    (23) stmnt -> . pen_func stmnt
    (24) stmnt -> . move_func stmnt
    (25) stmnt -> . while_stmnt stmnt
    (26) stmnt -> . if_stmnt stmnt
    (27) stmnt -> . write stmnt
    (28) stmnt -> . read stmnt
    (29) stmnt -> . func_call stmnt
    (30) stmnt -> . var_assignation stmnt
    (107) empty -> .
    (31) var_declaration_func -> . var_type ID multiple_vars
    (104) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (105) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (99) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (94) while_stmnt -> . WHILE con_expression stmnt END
    (89) if_stmnt -> . IF con_expression if1 stmnt if2 else_stmnt
    (88) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (80) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (73) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (32) var_assignation -> . ID e5 assign e6 expression q3
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (100) move_type -> . CENTER
    (101) move_type -> . FORWARD
    (102) move_type -> . RIGHT
    (103) move_type -> . LEFT
    END             reduce using rule 107 (empty -> .)
    PEN_DOWN        shift and go to state 38
    PEN_UP          shift and go to state 39
    WHILE           shift and go to state 41
    IF              shift and go to state 42
    WRITE           shift and go to state 43
    READ            shift and go to state 44
    ID              shift and go to state 37
    BOOL            shift and go to state 8
    WORD            shift and go to state 9
    NUMBER          shift and go to state 10
    CENTER          shift and go to state 45
    FORWARD         shift and go to state 46
    RIGHT           shift and go to state 47
    LEFT            shift and go to state 48

    stmnt                          shift and go to state 98
    empty                          shift and go to state 26
    var_declaration_func           shift and go to state 27
    pen_func                       shift and go to state 28
    move_func                      shift and go to state 29
    while_stmnt                    shift and go to state 30
    if_stmnt                       shift and go to state 31
    write                          shift and go to state 32
    read                           shift and go to state 33
    func_call                      shift and go to state 34
    var_assignation                shift and go to state 35
    var_type                       shift and go to state 36
    move_type                      shift and go to state 40

state 68

    (95) con_expression -> expression . q5
    (96) con_expression -> expression . q5 log_op e7 expression q5
    (98) q5 -> .
    OR              reduce using rule 98 (q5 -> .)
    AND             reduce using rule 98 (q5 -> .)
    PEN_DOWN        reduce using rule 98 (q5 -> .)
    PEN_UP          reduce using rule 98 (q5 -> .)
    WHILE           reduce using rule 98 (q5 -> .)
    IF              reduce using rule 98 (q5 -> .)
    WRITE           reduce using rule 98 (q5 -> .)
    READ            reduce using rule 98 (q5 -> .)
    ID              reduce using rule 98 (q5 -> .)
    BOOL            reduce using rule 98 (q5 -> .)
    WORD            reduce using rule 98 (q5 -> .)
    NUMBER          reduce using rule 98 (q5 -> .)
    CENTER          reduce using rule 98 (q5 -> .)
    FORWARD         reduce using rule 98 (q5 -> .)
    RIGHT           reduce using rule 98 (q5 -> .)
    LEFT            reduce using rule 98 (q5 -> .)
    END             reduce using rule 98 (q5 -> .)
    ELSE            reduce using rule 98 (q5 -> .)

    q5                             shift and go to state 99

state 69

    (43) expression -> exp . q4
    (44) expression -> exp . rel_op exp q4
    (45) q4 -> .
    (67) rel_op -> . EQUAL_TO
    (68) rel_op -> . MORE_OR_EQ_THAN
    (69) rel_op -> . LESS_OR_EQ_THAN
    (70) rel_op -> . DIFFERENT_TO
    (71) rel_op -> . MORE_THAN
    (72) rel_op -> . LESS_THAN
  ! shift/reduce conflict for EQUAL_TO resolved as shift
  ! shift/reduce conflict for MORE_OR_EQ_THAN resolved as shift
  ! shift/reduce conflict for LESS_OR_EQ_THAN resolved as shift
  ! shift/reduce conflict for DIFFERENT_TO resolved as shift
  ! shift/reduce conflict for MORE_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
    OR              reduce using rule 45 (q4 -> .)
    AND             reduce using rule 45 (q4 -> .)
    PEN_DOWN        reduce using rule 45 (q4 -> .)
    PEN_UP          reduce using rule 45 (q4 -> .)
    WHILE           reduce using rule 45 (q4 -> .)
    IF              reduce using rule 45 (q4 -> .)
    WRITE           reduce using rule 45 (q4 -> .)
    READ            reduce using rule 45 (q4 -> .)
    ID              reduce using rule 45 (q4 -> .)
    BOOL            reduce using rule 45 (q4 -> .)
    WORD            reduce using rule 45 (q4 -> .)
    NUMBER          reduce using rule 45 (q4 -> .)
    CENTER          reduce using rule 45 (q4 -> .)
    FORWARD         reduce using rule 45 (q4 -> .)
    RIGHT           reduce using rule 45 (q4 -> .)
    LEFT            reduce using rule 45 (q4 -> .)
    END             reduce using rule 45 (q4 -> .)
    ELSE            reduce using rule 45 (q4 -> .)
    COMMA           reduce using rule 45 (q4 -> .)
    CLOSE_PTH       reduce using rule 45 (q4 -> .)
    CLOSE_SQR       reduce using rule 45 (q4 -> .)
    SUB             reduce using rule 45 (q4 -> .)
    SUM             reduce using rule 45 (q4 -> .)
    EQUAL_TO        shift and go to state 102
    MORE_OR_EQ_THAN shift and go to state 103
    LESS_OR_EQ_THAN shift and go to state 104
    DIFFERENT_TO    shift and go to state 105
    MORE_THAN       shift and go to state 106
    LESS_THAN       shift and go to state 107

    q4                             shift and go to state 100
    rel_op                         shift and go to state 101

state 70

    (47) exp -> termino . q1
    (48) exp -> termino . term_op e3 termino q1
    (55) q1 -> .
    (51) term_op -> . SUB
    (52) term_op -> . SUM
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for SUM resolved as shift
    EQUAL_TO        reduce using rule 55 (q1 -> .)
    MORE_OR_EQ_THAN reduce using rule 55 (q1 -> .)
    LESS_OR_EQ_THAN reduce using rule 55 (q1 -> .)
    DIFFERENT_TO    reduce using rule 55 (q1 -> .)
    MORE_THAN       reduce using rule 55 (q1 -> .)
    LESS_THAN       reduce using rule 55 (q1 -> .)
    OR              reduce using rule 55 (q1 -> .)
    AND             reduce using rule 55 (q1 -> .)
    PEN_DOWN        reduce using rule 55 (q1 -> .)
    PEN_UP          reduce using rule 55 (q1 -> .)
    WHILE           reduce using rule 55 (q1 -> .)
    IF              reduce using rule 55 (q1 -> .)
    WRITE           reduce using rule 55 (q1 -> .)
    READ            reduce using rule 55 (q1 -> .)
    ID              reduce using rule 55 (q1 -> .)
    BOOL            reduce using rule 55 (q1 -> .)
    WORD            reduce using rule 55 (q1 -> .)
    NUMBER          reduce using rule 55 (q1 -> .)
    CENTER          reduce using rule 55 (q1 -> .)
    FORWARD         reduce using rule 55 (q1 -> .)
    RIGHT           reduce using rule 55 (q1 -> .)
    LEFT            reduce using rule 55 (q1 -> .)
    END             reduce using rule 55 (q1 -> .)
    ELSE            reduce using rule 55 (q1 -> .)
    COMMA           reduce using rule 55 (q1 -> .)
    CLOSE_PTH       reduce using rule 55 (q1 -> .)
    CLOSE_SQR       reduce using rule 55 (q1 -> .)
    SUB             shift and go to state 110
    SUM             shift and go to state 111

    q1                             shift and go to state 108
    term_op                        shift and go to state 109

state 71

    (53) termino -> factor . q2
    (54) termino -> factor . fact_op e2 expression q2
    (50) q2 -> .
    (58) fact_op -> . DIV
    (59) fact_op -> . MULT
    SUB             reduce using rule 50 (q2 -> .)
    SUM             reduce using rule 50 (q2 -> .)
    EQUAL_TO        reduce using rule 50 (q2 -> .)
    MORE_OR_EQ_THAN reduce using rule 50 (q2 -> .)
    LESS_OR_EQ_THAN reduce using rule 50 (q2 -> .)
    DIFFERENT_TO    reduce using rule 50 (q2 -> .)
    MORE_THAN       reduce using rule 50 (q2 -> .)
    LESS_THAN       reduce using rule 50 (q2 -> .)
    OR              reduce using rule 50 (q2 -> .)
    AND             reduce using rule 50 (q2 -> .)
    PEN_DOWN        reduce using rule 50 (q2 -> .)
    PEN_UP          reduce using rule 50 (q2 -> .)
    WHILE           reduce using rule 50 (q2 -> .)
    IF              reduce using rule 50 (q2 -> .)
    WRITE           reduce using rule 50 (q2 -> .)
    READ            reduce using rule 50 (q2 -> .)
    ID              reduce using rule 50 (q2 -> .)
    BOOL            reduce using rule 50 (q2 -> .)
    WORD            reduce using rule 50 (q2 -> .)
    NUMBER          reduce using rule 50 (q2 -> .)
    CENTER          reduce using rule 50 (q2 -> .)
    FORWARD         reduce using rule 50 (q2 -> .)
    RIGHT           reduce using rule 50 (q2 -> .)
    LEFT            reduce using rule 50 (q2 -> .)
    END             reduce using rule 50 (q2 -> .)
    ELSE            reduce using rule 50 (q2 -> .)
    COMMA           reduce using rule 50 (q2 -> .)
    CLOSE_PTH       reduce using rule 50 (q2 -> .)
    CLOSE_SQR       reduce using rule 50 (q2 -> .)
    DIV             shift and go to state 114
    MULT            shift and go to state 115

    q2                             shift and go to state 112
    fact_op                        shift and go to state 113

state 72

    (60) factor -> var_cte . e1
    (62) e1 -> .
    DIV             reduce using rule 62 (e1 -> .)
    MULT            reduce using rule 62 (e1 -> .)
    SUB             reduce using rule 62 (e1 -> .)
    SUM             reduce using rule 62 (e1 -> .)
    EQUAL_TO        reduce using rule 62 (e1 -> .)
    MORE_OR_EQ_THAN reduce using rule 62 (e1 -> .)
    LESS_OR_EQ_THAN reduce using rule 62 (e1 -> .)
    DIFFERENT_TO    reduce using rule 62 (e1 -> .)
    MORE_THAN       reduce using rule 62 (e1 -> .)
    LESS_THAN       reduce using rule 62 (e1 -> .)
    OR              reduce using rule 62 (e1 -> .)
    AND             reduce using rule 62 (e1 -> .)
    PEN_DOWN        reduce using rule 62 (e1 -> .)
    PEN_UP          reduce using rule 62 (e1 -> .)
    WHILE           reduce using rule 62 (e1 -> .)
    IF              reduce using rule 62 (e1 -> .)
    WRITE           reduce using rule 62 (e1 -> .)
    READ            reduce using rule 62 (e1 -> .)
    ID              reduce using rule 62 (e1 -> .)
    BOOL            reduce using rule 62 (e1 -> .)
    WORD            reduce using rule 62 (e1 -> .)
    NUMBER          reduce using rule 62 (e1 -> .)
    CENTER          reduce using rule 62 (e1 -> .)
    FORWARD         reduce using rule 62 (e1 -> .)
    RIGHT           reduce using rule 62 (e1 -> .)
    LEFT            reduce using rule 62 (e1 -> .)
    END             reduce using rule 62 (e1 -> .)
    ELSE            reduce using rule 62 (e1 -> .)
    COMMA           reduce using rule 62 (e1 -> .)
    CLOSE_PTH       reduce using rule 62 (e1 -> .)
    CLOSE_SQR       reduce using rule 62 (e1 -> .)

    e1                             shift and go to state 116

state 73

    (61) factor -> open_pth . expression close_pth
    (43) expression -> . exp q4
    (44) expression -> . exp rel_op exp q4
    (47) exp -> . termino q1
    (48) exp -> . termino term_op e3 termino q1
    (53) termino -> . factor q2
    (54) termino -> . factor fact_op e2 expression q2
    (60) factor -> . var_cte e1
    (61) factor -> . open_pth expression close_pth
    (36) var_cte -> . func_call
    (37) var_cte -> . cte_bool
    (38) var_cte -> . CTE_STR
    (39) var_cte -> . CTE_NUM
    (40) var_cte -> . variable
    (63) open_pth -> . OPEN_PTH
    (73) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (41) cte_bool -> . FALSE
    (42) cte_bool -> . TRUE
    (81) variable -> . ID array
    CTE_STR         shift and go to state 76
    CTE_NUM         shift and go to state 77
    OPEN_PTH        shift and go to state 79
    ID              shift and go to state 80
    FALSE           shift and go to state 81
    TRUE            shift and go to state 82

    open_pth                       shift and go to state 73
    expression                     shift and go to state 117
    exp                            shift and go to state 69
    termino                        shift and go to state 70
    factor                         shift and go to state 71
    var_cte                        shift and go to state 72
    func_call                      shift and go to state 74
    cte_bool                       shift and go to state 75
    variable                       shift and go to state 78

state 74

    (36) var_cte -> func_call .
    DIV             reduce using rule 36 (var_cte -> func_call .)
    MULT            reduce using rule 36 (var_cte -> func_call .)
    SUB             reduce using rule 36 (var_cte -> func_call .)
    SUM             reduce using rule 36 (var_cte -> func_call .)
    EQUAL_TO        reduce using rule 36 (var_cte -> func_call .)
    MORE_OR_EQ_THAN reduce using rule 36 (var_cte -> func_call .)
    LESS_OR_EQ_THAN reduce using rule 36 (var_cte -> func_call .)
    DIFFERENT_TO    reduce using rule 36 (var_cte -> func_call .)
    MORE_THAN       reduce using rule 36 (var_cte -> func_call .)
    LESS_THAN       reduce using rule 36 (var_cte -> func_call .)
    OR              reduce using rule 36 (var_cte -> func_call .)
    AND             reduce using rule 36 (var_cte -> func_call .)
    PEN_DOWN        reduce using rule 36 (var_cte -> func_call .)
    PEN_UP          reduce using rule 36 (var_cte -> func_call .)
    WHILE           reduce using rule 36 (var_cte -> func_call .)
    IF              reduce using rule 36 (var_cte -> func_call .)
    WRITE           reduce using rule 36 (var_cte -> func_call .)
    READ            reduce using rule 36 (var_cte -> func_call .)
    ID              reduce using rule 36 (var_cte -> func_call .)
    BOOL            reduce using rule 36 (var_cte -> func_call .)
    WORD            reduce using rule 36 (var_cte -> func_call .)
    NUMBER          reduce using rule 36 (var_cte -> func_call .)
    CENTER          reduce using rule 36 (var_cte -> func_call .)
    FORWARD         reduce using rule 36 (var_cte -> func_call .)
    RIGHT           reduce using rule 36 (var_cte -> func_call .)
    LEFT            reduce using rule 36 (var_cte -> func_call .)
    END             reduce using rule 36 (var_cte -> func_call .)
    ELSE            reduce using rule 36 (var_cte -> func_call .)
    COMMA           reduce using rule 36 (var_cte -> func_call .)
    CLOSE_PTH       reduce using rule 36 (var_cte -> func_call .)
    CLOSE_SQR       reduce using rule 36 (var_cte -> func_call .)


state 75

    (37) var_cte -> cte_bool .
    DIV             reduce using rule 37 (var_cte -> cte_bool .)
    MULT            reduce using rule 37 (var_cte -> cte_bool .)
    SUB             reduce using rule 37 (var_cte -> cte_bool .)
    SUM             reduce using rule 37 (var_cte -> cte_bool .)
    EQUAL_TO        reduce using rule 37 (var_cte -> cte_bool .)
    MORE_OR_EQ_THAN reduce using rule 37 (var_cte -> cte_bool .)
    LESS_OR_EQ_THAN reduce using rule 37 (var_cte -> cte_bool .)
    DIFFERENT_TO    reduce using rule 37 (var_cte -> cte_bool .)
    MORE_THAN       reduce using rule 37 (var_cte -> cte_bool .)
    LESS_THAN       reduce using rule 37 (var_cte -> cte_bool .)
    OR              reduce using rule 37 (var_cte -> cte_bool .)
    AND             reduce using rule 37 (var_cte -> cte_bool .)
    PEN_DOWN        reduce using rule 37 (var_cte -> cte_bool .)
    PEN_UP          reduce using rule 37 (var_cte -> cte_bool .)
    WHILE           reduce using rule 37 (var_cte -> cte_bool .)
    IF              reduce using rule 37 (var_cte -> cte_bool .)
    WRITE           reduce using rule 37 (var_cte -> cte_bool .)
    READ            reduce using rule 37 (var_cte -> cte_bool .)
    ID              reduce using rule 37 (var_cte -> cte_bool .)
    BOOL            reduce using rule 37 (var_cte -> cte_bool .)
    WORD            reduce using rule 37 (var_cte -> cte_bool .)
    NUMBER          reduce using rule 37 (var_cte -> cte_bool .)
    CENTER          reduce using rule 37 (var_cte -> cte_bool .)
    FORWARD         reduce using rule 37 (var_cte -> cte_bool .)
    RIGHT           reduce using rule 37 (var_cte -> cte_bool .)
    LEFT            reduce using rule 37 (var_cte -> cte_bool .)
    END             reduce using rule 37 (var_cte -> cte_bool .)
    ELSE            reduce using rule 37 (var_cte -> cte_bool .)
    COMMA           reduce using rule 37 (var_cte -> cte_bool .)
    CLOSE_PTH       reduce using rule 37 (var_cte -> cte_bool .)
    CLOSE_SQR       reduce using rule 37 (var_cte -> cte_bool .)


state 76

    (38) var_cte -> CTE_STR .
    DIV             reduce using rule 38 (var_cte -> CTE_STR .)
    MULT            reduce using rule 38 (var_cte -> CTE_STR .)
    SUB             reduce using rule 38 (var_cte -> CTE_STR .)
    SUM             reduce using rule 38 (var_cte -> CTE_STR .)
    EQUAL_TO        reduce using rule 38 (var_cte -> CTE_STR .)
    MORE_OR_EQ_THAN reduce using rule 38 (var_cte -> CTE_STR .)
    LESS_OR_EQ_THAN reduce using rule 38 (var_cte -> CTE_STR .)
    DIFFERENT_TO    reduce using rule 38 (var_cte -> CTE_STR .)
    MORE_THAN       reduce using rule 38 (var_cte -> CTE_STR .)
    LESS_THAN       reduce using rule 38 (var_cte -> CTE_STR .)
    OR              reduce using rule 38 (var_cte -> CTE_STR .)
    AND             reduce using rule 38 (var_cte -> CTE_STR .)
    PEN_DOWN        reduce using rule 38 (var_cte -> CTE_STR .)
    PEN_UP          reduce using rule 38 (var_cte -> CTE_STR .)
    WHILE           reduce using rule 38 (var_cte -> CTE_STR .)
    IF              reduce using rule 38 (var_cte -> CTE_STR .)
    WRITE           reduce using rule 38 (var_cte -> CTE_STR .)
    READ            reduce using rule 38 (var_cte -> CTE_STR .)
    ID              reduce using rule 38 (var_cte -> CTE_STR .)
    BOOL            reduce using rule 38 (var_cte -> CTE_STR .)
    WORD            reduce using rule 38 (var_cte -> CTE_STR .)
    NUMBER          reduce using rule 38 (var_cte -> CTE_STR .)
    CENTER          reduce using rule 38 (var_cte -> CTE_STR .)
    FORWARD         reduce using rule 38 (var_cte -> CTE_STR .)
    RIGHT           reduce using rule 38 (var_cte -> CTE_STR .)
    LEFT            reduce using rule 38 (var_cte -> CTE_STR .)
    END             reduce using rule 38 (var_cte -> CTE_STR .)
    ELSE            reduce using rule 38 (var_cte -> CTE_STR .)
    COMMA           reduce using rule 38 (var_cte -> CTE_STR .)
    CLOSE_PTH       reduce using rule 38 (var_cte -> CTE_STR .)
    CLOSE_SQR       reduce using rule 38 (var_cte -> CTE_STR .)


state 77

    (39) var_cte -> CTE_NUM .
    DIV             reduce using rule 39 (var_cte -> CTE_NUM .)
    MULT            reduce using rule 39 (var_cte -> CTE_NUM .)
    SUB             reduce using rule 39 (var_cte -> CTE_NUM .)
    SUM             reduce using rule 39 (var_cte -> CTE_NUM .)
    EQUAL_TO        reduce using rule 39 (var_cte -> CTE_NUM .)
    MORE_OR_EQ_THAN reduce using rule 39 (var_cte -> CTE_NUM .)
    LESS_OR_EQ_THAN reduce using rule 39 (var_cte -> CTE_NUM .)
    DIFFERENT_TO    reduce using rule 39 (var_cte -> CTE_NUM .)
    MORE_THAN       reduce using rule 39 (var_cte -> CTE_NUM .)
    LESS_THAN       reduce using rule 39 (var_cte -> CTE_NUM .)
    OR              reduce using rule 39 (var_cte -> CTE_NUM .)
    AND             reduce using rule 39 (var_cte -> CTE_NUM .)
    PEN_DOWN        reduce using rule 39 (var_cte -> CTE_NUM .)
    PEN_UP          reduce using rule 39 (var_cte -> CTE_NUM .)
    WHILE           reduce using rule 39 (var_cte -> CTE_NUM .)
    IF              reduce using rule 39 (var_cte -> CTE_NUM .)
    WRITE           reduce using rule 39 (var_cte -> CTE_NUM .)
    READ            reduce using rule 39 (var_cte -> CTE_NUM .)
    ID              reduce using rule 39 (var_cte -> CTE_NUM .)
    BOOL            reduce using rule 39 (var_cte -> CTE_NUM .)
    WORD            reduce using rule 39 (var_cte -> CTE_NUM .)
    NUMBER          reduce using rule 39 (var_cte -> CTE_NUM .)
    CENTER          reduce using rule 39 (var_cte -> CTE_NUM .)
    FORWARD         reduce using rule 39 (var_cte -> CTE_NUM .)
    RIGHT           reduce using rule 39 (var_cte -> CTE_NUM .)
    LEFT            reduce using rule 39 (var_cte -> CTE_NUM .)
    END             reduce using rule 39 (var_cte -> CTE_NUM .)
    ELSE            reduce using rule 39 (var_cte -> CTE_NUM .)
    COMMA           reduce using rule 39 (var_cte -> CTE_NUM .)
    CLOSE_PTH       reduce using rule 39 (var_cte -> CTE_NUM .)
    CLOSE_SQR       reduce using rule 39 (var_cte -> CTE_NUM .)


state 78

    (40) var_cte -> variable .
    DIV             reduce using rule 40 (var_cte -> variable .)
    MULT            reduce using rule 40 (var_cte -> variable .)
    SUB             reduce using rule 40 (var_cte -> variable .)
    SUM             reduce using rule 40 (var_cte -> variable .)
    EQUAL_TO        reduce using rule 40 (var_cte -> variable .)
    MORE_OR_EQ_THAN reduce using rule 40 (var_cte -> variable .)
    LESS_OR_EQ_THAN reduce using rule 40 (var_cte -> variable .)
    DIFFERENT_TO    reduce using rule 40 (var_cte -> variable .)
    MORE_THAN       reduce using rule 40 (var_cte -> variable .)
    LESS_THAN       reduce using rule 40 (var_cte -> variable .)
    OR              reduce using rule 40 (var_cte -> variable .)
    AND             reduce using rule 40 (var_cte -> variable .)
    PEN_DOWN        reduce using rule 40 (var_cte -> variable .)
    PEN_UP          reduce using rule 40 (var_cte -> variable .)
    WHILE           reduce using rule 40 (var_cte -> variable .)
    IF              reduce using rule 40 (var_cte -> variable .)
    WRITE           reduce using rule 40 (var_cte -> variable .)
    READ            reduce using rule 40 (var_cte -> variable .)
    ID              reduce using rule 40 (var_cte -> variable .)
    BOOL            reduce using rule 40 (var_cte -> variable .)
    WORD            reduce using rule 40 (var_cte -> variable .)
    NUMBER          reduce using rule 40 (var_cte -> variable .)
    CENTER          reduce using rule 40 (var_cte -> variable .)
    FORWARD         reduce using rule 40 (var_cte -> variable .)
    RIGHT           reduce using rule 40 (var_cte -> variable .)
    LEFT            reduce using rule 40 (var_cte -> variable .)
    END             reduce using rule 40 (var_cte -> variable .)
    ELSE            reduce using rule 40 (var_cte -> variable .)
    COMMA           reduce using rule 40 (var_cte -> variable .)
    CLOSE_PTH       reduce using rule 40 (var_cte -> variable .)
    CLOSE_SQR       reduce using rule 40 (var_cte -> variable .)


state 79

    (63) open_pth -> OPEN_PTH .
    CTE_STR         reduce using rule 63 (open_pth -> OPEN_PTH .)
    CTE_NUM         reduce using rule 63 (open_pth -> OPEN_PTH .)
    OPEN_PTH        reduce using rule 63 (open_pth -> OPEN_PTH .)
    ID              reduce using rule 63 (open_pth -> OPEN_PTH .)
    FALSE           reduce using rule 63 (open_pth -> OPEN_PTH .)
    TRUE            reduce using rule 63 (open_pth -> OPEN_PTH .)


state 80

    (73) func_call -> ID . OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (81) variable -> ID . array
    (82) array -> . empty
    (83) array -> . OPEN_SQR expression CLOSE_SQR matrix
    (107) empty -> .
    OPEN_PTH        shift and go to state 62
    OPEN_SQR        shift and go to state 120
    DIV             reduce using rule 107 (empty -> .)
    MULT            reduce using rule 107 (empty -> .)
    SUB             reduce using rule 107 (empty -> .)
    SUM             reduce using rule 107 (empty -> .)
    EQUAL_TO        reduce using rule 107 (empty -> .)
    MORE_OR_EQ_THAN reduce using rule 107 (empty -> .)
    LESS_OR_EQ_THAN reduce using rule 107 (empty -> .)
    DIFFERENT_TO    reduce using rule 107 (empty -> .)
    MORE_THAN       reduce using rule 107 (empty -> .)
    LESS_THAN       reduce using rule 107 (empty -> .)
    OR              reduce using rule 107 (empty -> .)
    AND             reduce using rule 107 (empty -> .)
    PEN_DOWN        reduce using rule 107 (empty -> .)
    PEN_UP          reduce using rule 107 (empty -> .)
    WHILE           reduce using rule 107 (empty -> .)
    IF              reduce using rule 107 (empty -> .)
    WRITE           reduce using rule 107 (empty -> .)
    READ            reduce using rule 107 (empty -> .)
    ID              reduce using rule 107 (empty -> .)
    BOOL            reduce using rule 107 (empty -> .)
    WORD            reduce using rule 107 (empty -> .)
    NUMBER          reduce using rule 107 (empty -> .)
    CENTER          reduce using rule 107 (empty -> .)
    FORWARD         reduce using rule 107 (empty -> .)
    RIGHT           reduce using rule 107 (empty -> .)
    LEFT            reduce using rule 107 (empty -> .)
    END             reduce using rule 107 (empty -> .)
    ELSE            reduce using rule 107 (empty -> .)
    COMMA           reduce using rule 107 (empty -> .)
    CLOSE_PTH       reduce using rule 107 (empty -> .)
    CLOSE_SQR       reduce using rule 107 (empty -> .)

    array                          shift and go to state 118
    empty                          shift and go to state 119

state 81

    (41) cte_bool -> FALSE .
    DIV             reduce using rule 41 (cte_bool -> FALSE .)
    MULT            reduce using rule 41 (cte_bool -> FALSE .)
    SUB             reduce using rule 41 (cte_bool -> FALSE .)
    SUM             reduce using rule 41 (cte_bool -> FALSE .)
    EQUAL_TO        reduce using rule 41 (cte_bool -> FALSE .)
    MORE_OR_EQ_THAN reduce using rule 41 (cte_bool -> FALSE .)
    LESS_OR_EQ_THAN reduce using rule 41 (cte_bool -> FALSE .)
    DIFFERENT_TO    reduce using rule 41 (cte_bool -> FALSE .)
    MORE_THAN       reduce using rule 41 (cte_bool -> FALSE .)
    LESS_THAN       reduce using rule 41 (cte_bool -> FALSE .)
    OR              reduce using rule 41 (cte_bool -> FALSE .)
    AND             reduce using rule 41 (cte_bool -> FALSE .)
    PEN_DOWN        reduce using rule 41 (cte_bool -> FALSE .)
    PEN_UP          reduce using rule 41 (cte_bool -> FALSE .)
    WHILE           reduce using rule 41 (cte_bool -> FALSE .)
    IF              reduce using rule 41 (cte_bool -> FALSE .)
    WRITE           reduce using rule 41 (cte_bool -> FALSE .)
    READ            reduce using rule 41 (cte_bool -> FALSE .)
    ID              reduce using rule 41 (cte_bool -> FALSE .)
    BOOL            reduce using rule 41 (cte_bool -> FALSE .)
    WORD            reduce using rule 41 (cte_bool -> FALSE .)
    NUMBER          reduce using rule 41 (cte_bool -> FALSE .)
    CENTER          reduce using rule 41 (cte_bool -> FALSE .)
    FORWARD         reduce using rule 41 (cte_bool -> FALSE .)
    RIGHT           reduce using rule 41 (cte_bool -> FALSE .)
    LEFT            reduce using rule 41 (cte_bool -> FALSE .)
    END             reduce using rule 41 (cte_bool -> FALSE .)
    ELSE            reduce using rule 41 (cte_bool -> FALSE .)
    COMMA           reduce using rule 41 (cte_bool -> FALSE .)
    CLOSE_PTH       reduce using rule 41 (cte_bool -> FALSE .)
    CLOSE_SQR       reduce using rule 41 (cte_bool -> FALSE .)


state 82

    (42) cte_bool -> TRUE .
    DIV             reduce using rule 42 (cte_bool -> TRUE .)
    MULT            reduce using rule 42 (cte_bool -> TRUE .)
    SUB             reduce using rule 42 (cte_bool -> TRUE .)
    SUM             reduce using rule 42 (cte_bool -> TRUE .)
    EQUAL_TO        reduce using rule 42 (cte_bool -> TRUE .)
    MORE_OR_EQ_THAN reduce using rule 42 (cte_bool -> TRUE .)
    LESS_OR_EQ_THAN reduce using rule 42 (cte_bool -> TRUE .)
    DIFFERENT_TO    reduce using rule 42 (cte_bool -> TRUE .)
    MORE_THAN       reduce using rule 42 (cte_bool -> TRUE .)
    LESS_THAN       reduce using rule 42 (cte_bool -> TRUE .)
    OR              reduce using rule 42 (cte_bool -> TRUE .)
    AND             reduce using rule 42 (cte_bool -> TRUE .)
    PEN_DOWN        reduce using rule 42 (cte_bool -> TRUE .)
    PEN_UP          reduce using rule 42 (cte_bool -> TRUE .)
    WHILE           reduce using rule 42 (cte_bool -> TRUE .)
    IF              reduce using rule 42 (cte_bool -> TRUE .)
    WRITE           reduce using rule 42 (cte_bool -> TRUE .)
    READ            reduce using rule 42 (cte_bool -> TRUE .)
    ID              reduce using rule 42 (cte_bool -> TRUE .)
    BOOL            reduce using rule 42 (cte_bool -> TRUE .)
    WORD            reduce using rule 42 (cte_bool -> TRUE .)
    NUMBER          reduce using rule 42 (cte_bool -> TRUE .)
    CENTER          reduce using rule 42 (cte_bool -> TRUE .)
    FORWARD         reduce using rule 42 (cte_bool -> TRUE .)
    RIGHT           reduce using rule 42 (cte_bool -> TRUE .)
    LEFT            reduce using rule 42 (cte_bool -> TRUE .)
    END             reduce using rule 42 (cte_bool -> TRUE .)
    ELSE            reduce using rule 42 (cte_bool -> TRUE .)
    COMMA           reduce using rule 42 (cte_bool -> TRUE .)
    CLOSE_PTH       reduce using rule 42 (cte_bool -> TRUE .)
    CLOSE_SQR       reduce using rule 42 (cte_bool -> TRUE .)


state 83

    (89) if_stmnt -> IF con_expression . if1 stmnt if2 else_stmnt
    (90) if1 -> .
    PEN_DOWN        reduce using rule 90 (if1 -> .)
    PEN_UP          reduce using rule 90 (if1 -> .)
    WHILE           reduce using rule 90 (if1 -> .)
    IF              reduce using rule 90 (if1 -> .)
    WRITE           reduce using rule 90 (if1 -> .)
    READ            reduce using rule 90 (if1 -> .)
    ID              reduce using rule 90 (if1 -> .)
    BOOL            reduce using rule 90 (if1 -> .)
    WORD            reduce using rule 90 (if1 -> .)
    NUMBER          reduce using rule 90 (if1 -> .)
    CENTER          reduce using rule 90 (if1 -> .)
    FORWARD         reduce using rule 90 (if1 -> .)
    RIGHT           reduce using rule 90 (if1 -> .)
    LEFT            reduce using rule 90 (if1 -> .)
    END             reduce using rule 90 (if1 -> .)
    ELSE            reduce using rule 90 (if1 -> .)

    if1                            shift and go to state 121

state 84

    (88) write -> WRITE OPEN_PTH . expression CLOSE_PTH
    (43) expression -> . exp q4
    (44) expression -> . exp rel_op exp q4
    (47) exp -> . termino q1
    (48) exp -> . termino term_op e3 termino q1
    (53) termino -> . factor q2
    (54) termino -> . factor fact_op e2 expression q2
    (60) factor -> . var_cte e1
    (61) factor -> . open_pth expression close_pth
    (36) var_cte -> . func_call
    (37) var_cte -> . cte_bool
    (38) var_cte -> . CTE_STR
    (39) var_cte -> . CTE_NUM
    (40) var_cte -> . variable
    (63) open_pth -> . OPEN_PTH
    (73) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (41) cte_bool -> . FALSE
    (42) cte_bool -> . TRUE
    (81) variable -> . ID array
    CTE_STR         shift and go to state 76
    CTE_NUM         shift and go to state 77
    OPEN_PTH        shift and go to state 79
    ID              shift and go to state 80
    FALSE           shift and go to state 81
    TRUE            shift and go to state 82

    expression                     shift and go to state 122
    exp                            shift and go to state 69
    termino                        shift and go to state 70
    factor                         shift and go to state 71
    var_cte                        shift and go to state 72
    open_pth                       shift and go to state 73
    func_call                      shift and go to state 74
    cte_bool                       shift and go to state 75
    variable                       shift and go to state 78

state 85

    (80) read -> READ OPEN_PTH . variable multiple_vars CLOSE_PTH
    (81) variable -> . ID array
    ID              shift and go to state 124

    variable                       shift and go to state 123

state 86

    (11) func_declaration -> FUNC func_type ID fd1 . OPEN_PTH parameter CLOSE_PTH stmnt END
    OPEN_PTH        shift and go to state 125


state 87

    (6) multiple_var -> COMMA ID multiple_var .
    FUNC            reduce using rule 6 (multiple_var -> COMMA ID multiple_var .)
    MAIN            reduce using rule 6 (multiple_var -> COMMA ID multiple_var .)


state 88

    (31) var_declaration_func -> var_type ID multiple_vars .
    PEN_DOWN        reduce using rule 31 (var_declaration_func -> var_type ID multiple_vars .)
    PEN_UP          reduce using rule 31 (var_declaration_func -> var_type ID multiple_vars .)
    WHILE           reduce using rule 31 (var_declaration_func -> var_type ID multiple_vars .)
    IF              reduce using rule 31 (var_declaration_func -> var_type ID multiple_vars .)
    WRITE           reduce using rule 31 (var_declaration_func -> var_type ID multiple_vars .)
    READ            reduce using rule 31 (var_declaration_func -> var_type ID multiple_vars .)
    ID              reduce using rule 31 (var_declaration_func -> var_type ID multiple_vars .)
    BOOL            reduce using rule 31 (var_declaration_func -> var_type ID multiple_vars .)
    WORD            reduce using rule 31 (var_declaration_func -> var_type ID multiple_vars .)
    NUMBER          reduce using rule 31 (var_declaration_func -> var_type ID multiple_vars .)
    CENTER          reduce using rule 31 (var_declaration_func -> var_type ID multiple_vars .)
    FORWARD         reduce using rule 31 (var_declaration_func -> var_type ID multiple_vars .)
    RIGHT           reduce using rule 31 (var_declaration_func -> var_type ID multiple_vars .)
    LEFT            reduce using rule 31 (var_declaration_func -> var_type ID multiple_vars .)
    END             reduce using rule 31 (var_declaration_func -> var_type ID multiple_vars .)
    ELSE            reduce using rule 31 (var_declaration_func -> var_type ID multiple_vars .)


state 89

    (86) multiple_vars -> empty .
    PEN_DOWN        reduce using rule 86 (multiple_vars -> empty .)
    PEN_UP          reduce using rule 86 (multiple_vars -> empty .)
    WHILE           reduce using rule 86 (multiple_vars -> empty .)
    IF              reduce using rule 86 (multiple_vars -> empty .)
    WRITE           reduce using rule 86 (multiple_vars -> empty .)
    READ            reduce using rule 86 (multiple_vars -> empty .)
    ID              reduce using rule 86 (multiple_vars -> empty .)
    BOOL            reduce using rule 86 (multiple_vars -> empty .)
    WORD            reduce using rule 86 (multiple_vars -> empty .)
    NUMBER          reduce using rule 86 (multiple_vars -> empty .)
    CENTER          reduce using rule 86 (multiple_vars -> empty .)
    FORWARD         reduce using rule 86 (multiple_vars -> empty .)
    RIGHT           reduce using rule 86 (multiple_vars -> empty .)
    LEFT            reduce using rule 86 (multiple_vars -> empty .)
    END             reduce using rule 86 (multiple_vars -> empty .)
    ELSE            reduce using rule 86 (multiple_vars -> empty .)
    CLOSE_PTH       reduce using rule 86 (multiple_vars -> empty .)


state 90

    (87) multiple_vars -> COMMA . variable
    (81) variable -> . ID array
    ID              shift and go to state 124

    variable                       shift and go to state 126

state 91

    (73) func_call -> ID OPEN_PTH func1 . func_call_param CLOSE_PTH func3
    (75) func_call_param -> . expression func2 multiple_fc_param
    (43) expression -> . exp q4
    (44) expression -> . exp rel_op exp q4
    (47) exp -> . termino q1
    (48) exp -> . termino term_op e3 termino q1
    (53) termino -> . factor q2
    (54) termino -> . factor fact_op e2 expression q2
    (60) factor -> . var_cte e1
    (61) factor -> . open_pth expression close_pth
    (36) var_cte -> . func_call
    (37) var_cte -> . cte_bool
    (38) var_cte -> . CTE_STR
    (39) var_cte -> . CTE_NUM
    (40) var_cte -> . variable
    (63) open_pth -> . OPEN_PTH
    (73) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (41) cte_bool -> . FALSE
    (42) cte_bool -> . TRUE
    (81) variable -> . ID array
    CTE_STR         shift and go to state 76
    CTE_NUM         shift and go to state 77
    OPEN_PTH        shift and go to state 79
    ID              shift and go to state 80
    FALSE           shift and go to state 81
    TRUE            shift and go to state 82

    func_call_param                shift and go to state 127
    expression                     shift and go to state 97
    exp                            shift and go to state 69
    termino                        shift and go to state 70
    factor                         shift and go to state 71
    var_cte                        shift and go to state 72
    open_pth                       shift and go to state 73
    func_call                      shift and go to state 74
    cte_bool                       shift and go to state 75
    variable                       shift and go to state 78

state 92

    (32) var_assignation -> ID e5 assign . e6 expression q3
    (34) e6 -> .
    CTE_STR         reduce using rule 34 (e6 -> .)
    CTE_NUM         reduce using rule 34 (e6 -> .)
    OPEN_PTH        reduce using rule 34 (e6 -> .)
    ID              reduce using rule 34 (e6 -> .)
    FALSE           reduce using rule 34 (e6 -> .)
    TRUE            reduce using rule 34 (e6 -> .)

    e6                             shift and go to state 128

state 93

    (35) assign -> ASSIGN .
    CTE_STR         reduce using rule 35 (assign -> ASSIGN .)
    CTE_NUM         reduce using rule 35 (assign -> ASSIGN .)
    OPEN_PTH        reduce using rule 35 (assign -> ASSIGN .)
    ID              reduce using rule 35 (assign -> ASSIGN .)
    FALSE           reduce using rule 35 (assign -> ASSIGN .)
    TRUE            reduce using rule 35 (assign -> ASSIGN .)


state 94

    (104) pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .
    PEN_DOWN        reduce using rule 104 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    PEN_UP          reduce using rule 104 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    WHILE           reduce using rule 104 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    IF              reduce using rule 104 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    WRITE           reduce using rule 104 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    READ            reduce using rule 104 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    ID              reduce using rule 104 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    BOOL            reduce using rule 104 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    WORD            reduce using rule 104 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    NUMBER          reduce using rule 104 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    CENTER          reduce using rule 104 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    FORWARD         reduce using rule 104 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    RIGHT           reduce using rule 104 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    LEFT            reduce using rule 104 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    END             reduce using rule 104 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    ELSE            reduce using rule 104 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)


state 95

    (105) pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .
    PEN_DOWN        reduce using rule 105 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    PEN_UP          reduce using rule 105 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    WHILE           reduce using rule 105 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    IF              reduce using rule 105 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    WRITE           reduce using rule 105 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    READ            reduce using rule 105 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    ID              reduce using rule 105 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    BOOL            reduce using rule 105 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    WORD            reduce using rule 105 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    NUMBER          reduce using rule 105 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    CENTER          reduce using rule 105 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    FORWARD         reduce using rule 105 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    RIGHT           reduce using rule 105 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    LEFT            reduce using rule 105 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    END             reduce using rule 105 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    ELSE            reduce using rule 105 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)


state 96

    (99) move_func -> move_type OPEN_PTH func_call_param . CLOSE_PTH
    CLOSE_PTH       shift and go to state 129


state 97

    (75) func_call_param -> expression . func2 multiple_fc_param
    (76) func2 -> .
    COMMA           reduce using rule 76 (func2 -> .)
    CLOSE_PTH       reduce using rule 76 (func2 -> .)

    func2                          shift and go to state 130

state 98

    (94) while_stmnt -> WHILE con_expression stmnt . END
    END             shift and go to state 131


state 99

    (95) con_expression -> expression q5 .
    (96) con_expression -> expression q5 . log_op e7 expression q5
    (65) log_op -> . OR
    (66) log_op -> . AND
    PEN_DOWN        reduce using rule 95 (con_expression -> expression q5 .)
    PEN_UP          reduce using rule 95 (con_expression -> expression q5 .)
    WHILE           reduce using rule 95 (con_expression -> expression q5 .)
    IF              reduce using rule 95 (con_expression -> expression q5 .)
    WRITE           reduce using rule 95 (con_expression -> expression q5 .)
    READ            reduce using rule 95 (con_expression -> expression q5 .)
    ID              reduce using rule 95 (con_expression -> expression q5 .)
    BOOL            reduce using rule 95 (con_expression -> expression q5 .)
    WORD            reduce using rule 95 (con_expression -> expression q5 .)
    NUMBER          reduce using rule 95 (con_expression -> expression q5 .)
    CENTER          reduce using rule 95 (con_expression -> expression q5 .)
    FORWARD         reduce using rule 95 (con_expression -> expression q5 .)
    RIGHT           reduce using rule 95 (con_expression -> expression q5 .)
    LEFT            reduce using rule 95 (con_expression -> expression q5 .)
    END             reduce using rule 95 (con_expression -> expression q5 .)
    ELSE            reduce using rule 95 (con_expression -> expression q5 .)
    OR              shift and go to state 133
    AND             shift and go to state 134

    log_op                         shift and go to state 132

state 100

    (43) expression -> exp q4 .
    OR              reduce using rule 43 (expression -> exp q4 .)
    AND             reduce using rule 43 (expression -> exp q4 .)
    PEN_DOWN        reduce using rule 43 (expression -> exp q4 .)
    PEN_UP          reduce using rule 43 (expression -> exp q4 .)
    WHILE           reduce using rule 43 (expression -> exp q4 .)
    IF              reduce using rule 43 (expression -> exp q4 .)
    WRITE           reduce using rule 43 (expression -> exp q4 .)
    READ            reduce using rule 43 (expression -> exp q4 .)
    ID              reduce using rule 43 (expression -> exp q4 .)
    BOOL            reduce using rule 43 (expression -> exp q4 .)
    WORD            reduce using rule 43 (expression -> exp q4 .)
    NUMBER          reduce using rule 43 (expression -> exp q4 .)
    CENTER          reduce using rule 43 (expression -> exp q4 .)
    FORWARD         reduce using rule 43 (expression -> exp q4 .)
    RIGHT           reduce using rule 43 (expression -> exp q4 .)
    LEFT            reduce using rule 43 (expression -> exp q4 .)
    END             reduce using rule 43 (expression -> exp q4 .)
    ELSE            reduce using rule 43 (expression -> exp q4 .)
    COMMA           reduce using rule 43 (expression -> exp q4 .)
    CLOSE_PTH       reduce using rule 43 (expression -> exp q4 .)
    CLOSE_SQR       reduce using rule 43 (expression -> exp q4 .)
    SUB             reduce using rule 43 (expression -> exp q4 .)
    SUM             reduce using rule 43 (expression -> exp q4 .)
    EQUAL_TO        reduce using rule 43 (expression -> exp q4 .)
    MORE_OR_EQ_THAN reduce using rule 43 (expression -> exp q4 .)
    LESS_OR_EQ_THAN reduce using rule 43 (expression -> exp q4 .)
    DIFFERENT_TO    reduce using rule 43 (expression -> exp q4 .)
    MORE_THAN       reduce using rule 43 (expression -> exp q4 .)
    LESS_THAN       reduce using rule 43 (expression -> exp q4 .)


state 101

    (44) expression -> exp rel_op . exp q4
    (47) exp -> . termino q1
    (48) exp -> . termino term_op e3 termino q1
    (53) termino -> . factor q2
    (54) termino -> . factor fact_op e2 expression q2
    (60) factor -> . var_cte e1
    (61) factor -> . open_pth expression close_pth
    (36) var_cte -> . func_call
    (37) var_cte -> . cte_bool
    (38) var_cte -> . CTE_STR
    (39) var_cte -> . CTE_NUM
    (40) var_cte -> . variable
    (63) open_pth -> . OPEN_PTH
    (73) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (41) cte_bool -> . FALSE
    (42) cte_bool -> . TRUE
    (81) variable -> . ID array
    CTE_STR         shift and go to state 76
    CTE_NUM         shift and go to state 77
    OPEN_PTH        shift and go to state 79
    ID              shift and go to state 80
    FALSE           shift and go to state 81
    TRUE            shift and go to state 82

    exp                            shift and go to state 135
    termino                        shift and go to state 70
    factor                         shift and go to state 71
    var_cte                        shift and go to state 72
    open_pth                       shift and go to state 73
    func_call                      shift and go to state 74
    cte_bool                       shift and go to state 75
    variable                       shift and go to state 78

state 102

    (67) rel_op -> EQUAL_TO .
    CTE_STR         reduce using rule 67 (rel_op -> EQUAL_TO .)
    CTE_NUM         reduce using rule 67 (rel_op -> EQUAL_TO .)
    OPEN_PTH        reduce using rule 67 (rel_op -> EQUAL_TO .)
    ID              reduce using rule 67 (rel_op -> EQUAL_TO .)
    FALSE           reduce using rule 67 (rel_op -> EQUAL_TO .)
    TRUE            reduce using rule 67 (rel_op -> EQUAL_TO .)


state 103

    (68) rel_op -> MORE_OR_EQ_THAN .
    CTE_STR         reduce using rule 68 (rel_op -> MORE_OR_EQ_THAN .)
    CTE_NUM         reduce using rule 68 (rel_op -> MORE_OR_EQ_THAN .)
    OPEN_PTH        reduce using rule 68 (rel_op -> MORE_OR_EQ_THAN .)
    ID              reduce using rule 68 (rel_op -> MORE_OR_EQ_THAN .)
    FALSE           reduce using rule 68 (rel_op -> MORE_OR_EQ_THAN .)
    TRUE            reduce using rule 68 (rel_op -> MORE_OR_EQ_THAN .)


state 104

    (69) rel_op -> LESS_OR_EQ_THAN .
    CTE_STR         reduce using rule 69 (rel_op -> LESS_OR_EQ_THAN .)
    CTE_NUM         reduce using rule 69 (rel_op -> LESS_OR_EQ_THAN .)
    OPEN_PTH        reduce using rule 69 (rel_op -> LESS_OR_EQ_THAN .)
    ID              reduce using rule 69 (rel_op -> LESS_OR_EQ_THAN .)
    FALSE           reduce using rule 69 (rel_op -> LESS_OR_EQ_THAN .)
    TRUE            reduce using rule 69 (rel_op -> LESS_OR_EQ_THAN .)


state 105

    (70) rel_op -> DIFFERENT_TO .
    CTE_STR         reduce using rule 70 (rel_op -> DIFFERENT_TO .)
    CTE_NUM         reduce using rule 70 (rel_op -> DIFFERENT_TO .)
    OPEN_PTH        reduce using rule 70 (rel_op -> DIFFERENT_TO .)
    ID              reduce using rule 70 (rel_op -> DIFFERENT_TO .)
    FALSE           reduce using rule 70 (rel_op -> DIFFERENT_TO .)
    TRUE            reduce using rule 70 (rel_op -> DIFFERENT_TO .)


state 106

    (71) rel_op -> MORE_THAN .
    CTE_STR         reduce using rule 71 (rel_op -> MORE_THAN .)
    CTE_NUM         reduce using rule 71 (rel_op -> MORE_THAN .)
    OPEN_PTH        reduce using rule 71 (rel_op -> MORE_THAN .)
    ID              reduce using rule 71 (rel_op -> MORE_THAN .)
    FALSE           reduce using rule 71 (rel_op -> MORE_THAN .)
    TRUE            reduce using rule 71 (rel_op -> MORE_THAN .)


state 107

    (72) rel_op -> LESS_THAN .
    CTE_STR         reduce using rule 72 (rel_op -> LESS_THAN .)
    CTE_NUM         reduce using rule 72 (rel_op -> LESS_THAN .)
    OPEN_PTH        reduce using rule 72 (rel_op -> LESS_THAN .)
    ID              reduce using rule 72 (rel_op -> LESS_THAN .)
    FALSE           reduce using rule 72 (rel_op -> LESS_THAN .)
    TRUE            reduce using rule 72 (rel_op -> LESS_THAN .)


state 108

    (47) exp -> termino q1 .
    EQUAL_TO        reduce using rule 47 (exp -> termino q1 .)
    MORE_OR_EQ_THAN reduce using rule 47 (exp -> termino q1 .)
    LESS_OR_EQ_THAN reduce using rule 47 (exp -> termino q1 .)
    DIFFERENT_TO    reduce using rule 47 (exp -> termino q1 .)
    MORE_THAN       reduce using rule 47 (exp -> termino q1 .)
    LESS_THAN       reduce using rule 47 (exp -> termino q1 .)
    OR              reduce using rule 47 (exp -> termino q1 .)
    AND             reduce using rule 47 (exp -> termino q1 .)
    PEN_DOWN        reduce using rule 47 (exp -> termino q1 .)
    PEN_UP          reduce using rule 47 (exp -> termino q1 .)
    WHILE           reduce using rule 47 (exp -> termino q1 .)
    IF              reduce using rule 47 (exp -> termino q1 .)
    WRITE           reduce using rule 47 (exp -> termino q1 .)
    READ            reduce using rule 47 (exp -> termino q1 .)
    ID              reduce using rule 47 (exp -> termino q1 .)
    BOOL            reduce using rule 47 (exp -> termino q1 .)
    WORD            reduce using rule 47 (exp -> termino q1 .)
    NUMBER          reduce using rule 47 (exp -> termino q1 .)
    CENTER          reduce using rule 47 (exp -> termino q1 .)
    FORWARD         reduce using rule 47 (exp -> termino q1 .)
    RIGHT           reduce using rule 47 (exp -> termino q1 .)
    LEFT            reduce using rule 47 (exp -> termino q1 .)
    END             reduce using rule 47 (exp -> termino q1 .)
    ELSE            reduce using rule 47 (exp -> termino q1 .)
    COMMA           reduce using rule 47 (exp -> termino q1 .)
    CLOSE_PTH       reduce using rule 47 (exp -> termino q1 .)
    SUB             reduce using rule 47 (exp -> termino q1 .)
    SUM             reduce using rule 47 (exp -> termino q1 .)
    CLOSE_SQR       reduce using rule 47 (exp -> termino q1 .)


state 109

    (48) exp -> termino term_op . e3 termino q1
    (49) e3 -> .
    CTE_STR         reduce using rule 49 (e3 -> .)
    CTE_NUM         reduce using rule 49 (e3 -> .)
    OPEN_PTH        reduce using rule 49 (e3 -> .)
    ID              reduce using rule 49 (e3 -> .)
    FALSE           reduce using rule 49 (e3 -> .)
    TRUE            reduce using rule 49 (e3 -> .)

    e3                             shift and go to state 136

state 110

    (51) term_op -> SUB .
    CTE_STR         reduce using rule 51 (term_op -> SUB .)
    CTE_NUM         reduce using rule 51 (term_op -> SUB .)
    OPEN_PTH        reduce using rule 51 (term_op -> SUB .)
    ID              reduce using rule 51 (term_op -> SUB .)
    FALSE           reduce using rule 51 (term_op -> SUB .)
    TRUE            reduce using rule 51 (term_op -> SUB .)


state 111

    (52) term_op -> SUM .
    CTE_STR         reduce using rule 52 (term_op -> SUM .)
    CTE_NUM         reduce using rule 52 (term_op -> SUM .)
    OPEN_PTH        reduce using rule 52 (term_op -> SUM .)
    ID              reduce using rule 52 (term_op -> SUM .)
    FALSE           reduce using rule 52 (term_op -> SUM .)
    TRUE            reduce using rule 52 (term_op -> SUM .)


state 112

    (53) termino -> factor q2 .
    SUB             reduce using rule 53 (termino -> factor q2 .)
    SUM             reduce using rule 53 (termino -> factor q2 .)
    EQUAL_TO        reduce using rule 53 (termino -> factor q2 .)
    MORE_OR_EQ_THAN reduce using rule 53 (termino -> factor q2 .)
    LESS_OR_EQ_THAN reduce using rule 53 (termino -> factor q2 .)
    DIFFERENT_TO    reduce using rule 53 (termino -> factor q2 .)
    MORE_THAN       reduce using rule 53 (termino -> factor q2 .)
    LESS_THAN       reduce using rule 53 (termino -> factor q2 .)
    OR              reduce using rule 53 (termino -> factor q2 .)
    AND             reduce using rule 53 (termino -> factor q2 .)
    PEN_DOWN        reduce using rule 53 (termino -> factor q2 .)
    PEN_UP          reduce using rule 53 (termino -> factor q2 .)
    WHILE           reduce using rule 53 (termino -> factor q2 .)
    IF              reduce using rule 53 (termino -> factor q2 .)
    WRITE           reduce using rule 53 (termino -> factor q2 .)
    READ            reduce using rule 53 (termino -> factor q2 .)
    ID              reduce using rule 53 (termino -> factor q2 .)
    BOOL            reduce using rule 53 (termino -> factor q2 .)
    WORD            reduce using rule 53 (termino -> factor q2 .)
    NUMBER          reduce using rule 53 (termino -> factor q2 .)
    CENTER          reduce using rule 53 (termino -> factor q2 .)
    FORWARD         reduce using rule 53 (termino -> factor q2 .)
    RIGHT           reduce using rule 53 (termino -> factor q2 .)
    LEFT            reduce using rule 53 (termino -> factor q2 .)
    END             reduce using rule 53 (termino -> factor q2 .)
    ELSE            reduce using rule 53 (termino -> factor q2 .)
    COMMA           reduce using rule 53 (termino -> factor q2 .)
    CLOSE_PTH       reduce using rule 53 (termino -> factor q2 .)
    CLOSE_SQR       reduce using rule 53 (termino -> factor q2 .)


state 113

    (54) termino -> factor fact_op . e2 expression q2
    (57) e2 -> .
    CTE_STR         reduce using rule 57 (e2 -> .)
    CTE_NUM         reduce using rule 57 (e2 -> .)
    OPEN_PTH        reduce using rule 57 (e2 -> .)
    ID              reduce using rule 57 (e2 -> .)
    FALSE           reduce using rule 57 (e2 -> .)
    TRUE            reduce using rule 57 (e2 -> .)

    e2                             shift and go to state 137

state 114

    (58) fact_op -> DIV .
    CTE_STR         reduce using rule 58 (fact_op -> DIV .)
    CTE_NUM         reduce using rule 58 (fact_op -> DIV .)
    OPEN_PTH        reduce using rule 58 (fact_op -> DIV .)
    ID              reduce using rule 58 (fact_op -> DIV .)
    FALSE           reduce using rule 58 (fact_op -> DIV .)
    TRUE            reduce using rule 58 (fact_op -> DIV .)


state 115

    (59) fact_op -> MULT .
    CTE_STR         reduce using rule 59 (fact_op -> MULT .)
    CTE_NUM         reduce using rule 59 (fact_op -> MULT .)
    OPEN_PTH        reduce using rule 59 (fact_op -> MULT .)
    ID              reduce using rule 59 (fact_op -> MULT .)
    FALSE           reduce using rule 59 (fact_op -> MULT .)
    TRUE            reduce using rule 59 (fact_op -> MULT .)


state 116

    (60) factor -> var_cte e1 .
    DIV             reduce using rule 60 (factor -> var_cte e1 .)
    MULT            reduce using rule 60 (factor -> var_cte e1 .)
    SUB             reduce using rule 60 (factor -> var_cte e1 .)
    SUM             reduce using rule 60 (factor -> var_cte e1 .)
    EQUAL_TO        reduce using rule 60 (factor -> var_cte e1 .)
    MORE_OR_EQ_THAN reduce using rule 60 (factor -> var_cte e1 .)
    LESS_OR_EQ_THAN reduce using rule 60 (factor -> var_cte e1 .)
    DIFFERENT_TO    reduce using rule 60 (factor -> var_cte e1 .)
    MORE_THAN       reduce using rule 60 (factor -> var_cte e1 .)
    LESS_THAN       reduce using rule 60 (factor -> var_cte e1 .)
    OR              reduce using rule 60 (factor -> var_cte e1 .)
    AND             reduce using rule 60 (factor -> var_cte e1 .)
    PEN_DOWN        reduce using rule 60 (factor -> var_cte e1 .)
    PEN_UP          reduce using rule 60 (factor -> var_cte e1 .)
    WHILE           reduce using rule 60 (factor -> var_cte e1 .)
    IF              reduce using rule 60 (factor -> var_cte e1 .)
    WRITE           reduce using rule 60 (factor -> var_cte e1 .)
    READ            reduce using rule 60 (factor -> var_cte e1 .)
    ID              reduce using rule 60 (factor -> var_cte e1 .)
    BOOL            reduce using rule 60 (factor -> var_cte e1 .)
    WORD            reduce using rule 60 (factor -> var_cte e1 .)
    NUMBER          reduce using rule 60 (factor -> var_cte e1 .)
    CENTER          reduce using rule 60 (factor -> var_cte e1 .)
    FORWARD         reduce using rule 60 (factor -> var_cte e1 .)
    RIGHT           reduce using rule 60 (factor -> var_cte e1 .)
    LEFT            reduce using rule 60 (factor -> var_cte e1 .)
    END             reduce using rule 60 (factor -> var_cte e1 .)
    ELSE            reduce using rule 60 (factor -> var_cte e1 .)
    COMMA           reduce using rule 60 (factor -> var_cte e1 .)
    CLOSE_PTH       reduce using rule 60 (factor -> var_cte e1 .)
    CLOSE_SQR       reduce using rule 60 (factor -> var_cte e1 .)


state 117

    (61) factor -> open_pth expression . close_pth
    (64) close_pth -> . CLOSE_PTH
    CLOSE_PTH       shift and go to state 139

    close_pth                      shift and go to state 138

state 118

    (81) variable -> ID array .
    DIV             reduce using rule 81 (variable -> ID array .)
    MULT            reduce using rule 81 (variable -> ID array .)
    SUB             reduce using rule 81 (variable -> ID array .)
    SUM             reduce using rule 81 (variable -> ID array .)
    EQUAL_TO        reduce using rule 81 (variable -> ID array .)
    MORE_OR_EQ_THAN reduce using rule 81 (variable -> ID array .)
    LESS_OR_EQ_THAN reduce using rule 81 (variable -> ID array .)
    DIFFERENT_TO    reduce using rule 81 (variable -> ID array .)
    MORE_THAN       reduce using rule 81 (variable -> ID array .)
    LESS_THAN       reduce using rule 81 (variable -> ID array .)
    OR              reduce using rule 81 (variable -> ID array .)
    AND             reduce using rule 81 (variable -> ID array .)
    PEN_DOWN        reduce using rule 81 (variable -> ID array .)
    PEN_UP          reduce using rule 81 (variable -> ID array .)
    WHILE           reduce using rule 81 (variable -> ID array .)
    IF              reduce using rule 81 (variable -> ID array .)
    WRITE           reduce using rule 81 (variable -> ID array .)
    READ            reduce using rule 81 (variable -> ID array .)
    ID              reduce using rule 81 (variable -> ID array .)
    BOOL            reduce using rule 81 (variable -> ID array .)
    WORD            reduce using rule 81 (variable -> ID array .)
    NUMBER          reduce using rule 81 (variable -> ID array .)
    CENTER          reduce using rule 81 (variable -> ID array .)
    FORWARD         reduce using rule 81 (variable -> ID array .)
    RIGHT           reduce using rule 81 (variable -> ID array .)
    LEFT            reduce using rule 81 (variable -> ID array .)
    END             reduce using rule 81 (variable -> ID array .)
    ELSE            reduce using rule 81 (variable -> ID array .)
    COMMA           reduce using rule 81 (variable -> ID array .)
    CLOSE_PTH       reduce using rule 81 (variable -> ID array .)
    CLOSE_SQR       reduce using rule 81 (variable -> ID array .)


state 119

    (82) array -> empty .
    DIV             reduce using rule 82 (array -> empty .)
    MULT            reduce using rule 82 (array -> empty .)
    SUB             reduce using rule 82 (array -> empty .)
    SUM             reduce using rule 82 (array -> empty .)
    EQUAL_TO        reduce using rule 82 (array -> empty .)
    MORE_OR_EQ_THAN reduce using rule 82 (array -> empty .)
    LESS_OR_EQ_THAN reduce using rule 82 (array -> empty .)
    DIFFERENT_TO    reduce using rule 82 (array -> empty .)
    MORE_THAN       reduce using rule 82 (array -> empty .)
    LESS_THAN       reduce using rule 82 (array -> empty .)
    OR              reduce using rule 82 (array -> empty .)
    AND             reduce using rule 82 (array -> empty .)
    PEN_DOWN        reduce using rule 82 (array -> empty .)
    PEN_UP          reduce using rule 82 (array -> empty .)
    WHILE           reduce using rule 82 (array -> empty .)
    IF              reduce using rule 82 (array -> empty .)
    WRITE           reduce using rule 82 (array -> empty .)
    READ            reduce using rule 82 (array -> empty .)
    ID              reduce using rule 82 (array -> empty .)
    BOOL            reduce using rule 82 (array -> empty .)
    WORD            reduce using rule 82 (array -> empty .)
    NUMBER          reduce using rule 82 (array -> empty .)
    CENTER          reduce using rule 82 (array -> empty .)
    FORWARD         reduce using rule 82 (array -> empty .)
    RIGHT           reduce using rule 82 (array -> empty .)
    LEFT            reduce using rule 82 (array -> empty .)
    END             reduce using rule 82 (array -> empty .)
    ELSE            reduce using rule 82 (array -> empty .)
    COMMA           reduce using rule 82 (array -> empty .)
    CLOSE_PTH       reduce using rule 82 (array -> empty .)
    CLOSE_SQR       reduce using rule 82 (array -> empty .)


state 120

    (83) array -> OPEN_SQR . expression CLOSE_SQR matrix
    (43) expression -> . exp q4
    (44) expression -> . exp rel_op exp q4
    (47) exp -> . termino q1
    (48) exp -> . termino term_op e3 termino q1
    (53) termino -> . factor q2
    (54) termino -> . factor fact_op e2 expression q2
    (60) factor -> . var_cte e1
    (61) factor -> . open_pth expression close_pth
    (36) var_cte -> . func_call
    (37) var_cte -> . cte_bool
    (38) var_cte -> . CTE_STR
    (39) var_cte -> . CTE_NUM
    (40) var_cte -> . variable
    (63) open_pth -> . OPEN_PTH
    (73) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (41) cte_bool -> . FALSE
    (42) cte_bool -> . TRUE
    (81) variable -> . ID array
    CTE_STR         shift and go to state 76
    CTE_NUM         shift and go to state 77
    OPEN_PTH        shift and go to state 79
    ID              shift and go to state 80
    FALSE           shift and go to state 81
    TRUE            shift and go to state 82

    expression                     shift and go to state 140
    exp                            shift and go to state 69
    termino                        shift and go to state 70
    factor                         shift and go to state 71
    var_cte                        shift and go to state 72
    open_pth                       shift and go to state 73
    func_call                      shift and go to state 74
    cte_bool                       shift and go to state 75
    variable                       shift and go to state 78

state 121

    (89) if_stmnt -> IF con_expression if1 . stmnt if2 else_stmnt
    (21) stmnt -> . empty
    (22) stmnt -> . var_declaration_func stmnt
    (23) stmnt -> . pen_func stmnt
    (24) stmnt -> . move_func stmnt
    (25) stmnt -> . while_stmnt stmnt
    (26) stmnt -> . if_stmnt stmnt
    (27) stmnt -> . write stmnt
    (28) stmnt -> . read stmnt
    (29) stmnt -> . func_call stmnt
    (30) stmnt -> . var_assignation stmnt
    (107) empty -> .
    (31) var_declaration_func -> . var_type ID multiple_vars
    (104) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (105) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (99) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (94) while_stmnt -> . WHILE con_expression stmnt END
    (89) if_stmnt -> . IF con_expression if1 stmnt if2 else_stmnt
    (88) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (80) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (73) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (32) var_assignation -> . ID e5 assign e6 expression q3
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (100) move_type -> . CENTER
    (101) move_type -> . FORWARD
    (102) move_type -> . RIGHT
    (103) move_type -> . LEFT
    END             reduce using rule 107 (empty -> .)
    ELSE            reduce using rule 107 (empty -> .)
    PEN_DOWN        shift and go to state 38
    PEN_UP          shift and go to state 39
    WHILE           shift and go to state 41
    IF              shift and go to state 42
    WRITE           shift and go to state 43
    READ            shift and go to state 44
    ID              shift and go to state 37
    BOOL            shift and go to state 8
    WORD            shift and go to state 9
    NUMBER          shift and go to state 10
    CENTER          shift and go to state 45
    FORWARD         shift and go to state 46
    RIGHT           shift and go to state 47
    LEFT            shift and go to state 48

    stmnt                          shift and go to state 141
    empty                          shift and go to state 26
    var_declaration_func           shift and go to state 27
    pen_func                       shift and go to state 28
    move_func                      shift and go to state 29
    while_stmnt                    shift and go to state 30
    if_stmnt                       shift and go to state 31
    write                          shift and go to state 32
    read                           shift and go to state 33
    func_call                      shift and go to state 34
    var_assignation                shift and go to state 35
    var_type                       shift and go to state 36
    move_type                      shift and go to state 40

state 122

    (88) write -> WRITE OPEN_PTH expression . CLOSE_PTH
    CLOSE_PTH       shift and go to state 142


state 123

    (80) read -> READ OPEN_PTH variable . multiple_vars CLOSE_PTH
    (86) multiple_vars -> . empty
    (87) multiple_vars -> . COMMA variable
    (107) empty -> .
    COMMA           shift and go to state 90
    CLOSE_PTH       reduce using rule 107 (empty -> .)

    multiple_vars                  shift and go to state 143
    empty                          shift and go to state 89

state 124

    (81) variable -> ID . array
    (82) array -> . empty
    (83) array -> . OPEN_SQR expression CLOSE_SQR matrix
    (107) empty -> .
    OPEN_SQR        shift and go to state 120
    COMMA           reduce using rule 107 (empty -> .)
    CLOSE_PTH       reduce using rule 107 (empty -> .)
    PEN_DOWN        reduce using rule 107 (empty -> .)
    PEN_UP          reduce using rule 107 (empty -> .)
    WHILE           reduce using rule 107 (empty -> .)
    IF              reduce using rule 107 (empty -> .)
    WRITE           reduce using rule 107 (empty -> .)
    READ            reduce using rule 107 (empty -> .)
    ID              reduce using rule 107 (empty -> .)
    BOOL            reduce using rule 107 (empty -> .)
    WORD            reduce using rule 107 (empty -> .)
    NUMBER          reduce using rule 107 (empty -> .)
    CENTER          reduce using rule 107 (empty -> .)
    FORWARD         reduce using rule 107 (empty -> .)
    RIGHT           reduce using rule 107 (empty -> .)
    LEFT            reduce using rule 107 (empty -> .)
    END             reduce using rule 107 (empty -> .)
    ELSE            reduce using rule 107 (empty -> .)

    array                          shift and go to state 118
    empty                          shift and go to state 119

state 125

    (11) func_declaration -> FUNC func_type ID fd1 OPEN_PTH . parameter CLOSE_PTH stmnt END
    (17) parameter -> . empty
    (18) parameter -> . var_type ID multiple_parameters
    (107) empty -> .
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    CLOSE_PTH       reduce using rule 107 (empty -> .)
    BOOL            shift and go to state 8
    WORD            shift and go to state 9
    NUMBER          shift and go to state 10

    parameter                      shift and go to state 144
    empty                          shift and go to state 145
    var_type                       shift and go to state 146

state 126

    (87) multiple_vars -> COMMA variable .
    PEN_DOWN        reduce using rule 87 (multiple_vars -> COMMA variable .)
    PEN_UP          reduce using rule 87 (multiple_vars -> COMMA variable .)
    WHILE           reduce using rule 87 (multiple_vars -> COMMA variable .)
    IF              reduce using rule 87 (multiple_vars -> COMMA variable .)
    WRITE           reduce using rule 87 (multiple_vars -> COMMA variable .)
    READ            reduce using rule 87 (multiple_vars -> COMMA variable .)
    ID              reduce using rule 87 (multiple_vars -> COMMA variable .)
    BOOL            reduce using rule 87 (multiple_vars -> COMMA variable .)
    WORD            reduce using rule 87 (multiple_vars -> COMMA variable .)
    NUMBER          reduce using rule 87 (multiple_vars -> COMMA variable .)
    CENTER          reduce using rule 87 (multiple_vars -> COMMA variable .)
    FORWARD         reduce using rule 87 (multiple_vars -> COMMA variable .)
    RIGHT           reduce using rule 87 (multiple_vars -> COMMA variable .)
    LEFT            reduce using rule 87 (multiple_vars -> COMMA variable .)
    END             reduce using rule 87 (multiple_vars -> COMMA variable .)
    ELSE            reduce using rule 87 (multiple_vars -> COMMA variable .)
    CLOSE_PTH       reduce using rule 87 (multiple_vars -> COMMA variable .)


state 127

    (73) func_call -> ID OPEN_PTH func1 func_call_param . CLOSE_PTH func3
    CLOSE_PTH       shift and go to state 147


state 128

    (32) var_assignation -> ID e5 assign e6 . expression q3
    (43) expression -> . exp q4
    (44) expression -> . exp rel_op exp q4
    (47) exp -> . termino q1
    (48) exp -> . termino term_op e3 termino q1
    (53) termino -> . factor q2
    (54) termino -> . factor fact_op e2 expression q2
    (60) factor -> . var_cte e1
    (61) factor -> . open_pth expression close_pth
    (36) var_cte -> . func_call
    (37) var_cte -> . cte_bool
    (38) var_cte -> . CTE_STR
    (39) var_cte -> . CTE_NUM
    (40) var_cte -> . variable
    (63) open_pth -> . OPEN_PTH
    (73) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (41) cte_bool -> . FALSE
    (42) cte_bool -> . TRUE
    (81) variable -> . ID array
    CTE_STR         shift and go to state 76
    CTE_NUM         shift and go to state 77
    OPEN_PTH        shift and go to state 79
    ID              shift and go to state 80
    FALSE           shift and go to state 81
    TRUE            shift and go to state 82

    expression                     shift and go to state 148
    exp                            shift and go to state 69
    termino                        shift and go to state 70
    factor                         shift and go to state 71
    var_cte                        shift and go to state 72
    open_pth                       shift and go to state 73
    func_call                      shift and go to state 74
    cte_bool                       shift and go to state 75
    variable                       shift and go to state 78

state 129

    (99) move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .
    PEN_DOWN        reduce using rule 99 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    PEN_UP          reduce using rule 99 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    WHILE           reduce using rule 99 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    IF              reduce using rule 99 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    WRITE           reduce using rule 99 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    READ            reduce using rule 99 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    ID              reduce using rule 99 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    BOOL            reduce using rule 99 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    WORD            reduce using rule 99 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    NUMBER          reduce using rule 99 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    CENTER          reduce using rule 99 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    FORWARD         reduce using rule 99 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    RIGHT           reduce using rule 99 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    LEFT            reduce using rule 99 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    END             reduce using rule 99 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    ELSE            reduce using rule 99 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)


state 130

    (75) func_call_param -> expression func2 . multiple_fc_param
    (78) multiple_fc_param -> . empty
    (79) multiple_fc_param -> . COMMA func_call_param
    (107) empty -> .
    COMMA           shift and go to state 151
    CLOSE_PTH       reduce using rule 107 (empty -> .)

    multiple_fc_param              shift and go to state 149
    empty                          shift and go to state 150

state 131

    (94) while_stmnt -> WHILE con_expression stmnt END .
    PEN_DOWN        reduce using rule 94 (while_stmnt -> WHILE con_expression stmnt END .)
    PEN_UP          reduce using rule 94 (while_stmnt -> WHILE con_expression stmnt END .)
    WHILE           reduce using rule 94 (while_stmnt -> WHILE con_expression stmnt END .)
    IF              reduce using rule 94 (while_stmnt -> WHILE con_expression stmnt END .)
    WRITE           reduce using rule 94 (while_stmnt -> WHILE con_expression stmnt END .)
    READ            reduce using rule 94 (while_stmnt -> WHILE con_expression stmnt END .)
    ID              reduce using rule 94 (while_stmnt -> WHILE con_expression stmnt END .)
    BOOL            reduce using rule 94 (while_stmnt -> WHILE con_expression stmnt END .)
    WORD            reduce using rule 94 (while_stmnt -> WHILE con_expression stmnt END .)
    NUMBER          reduce using rule 94 (while_stmnt -> WHILE con_expression stmnt END .)
    CENTER          reduce using rule 94 (while_stmnt -> WHILE con_expression stmnt END .)
    FORWARD         reduce using rule 94 (while_stmnt -> WHILE con_expression stmnt END .)
    RIGHT           reduce using rule 94 (while_stmnt -> WHILE con_expression stmnt END .)
    LEFT            reduce using rule 94 (while_stmnt -> WHILE con_expression stmnt END .)
    END             reduce using rule 94 (while_stmnt -> WHILE con_expression stmnt END .)
    ELSE            reduce using rule 94 (while_stmnt -> WHILE con_expression stmnt END .)


state 132

    (96) con_expression -> expression q5 log_op . e7 expression q5
    (97) e7 -> .
    CTE_STR         reduce using rule 97 (e7 -> .)
    CTE_NUM         reduce using rule 97 (e7 -> .)
    OPEN_PTH        reduce using rule 97 (e7 -> .)
    ID              reduce using rule 97 (e7 -> .)
    FALSE           reduce using rule 97 (e7 -> .)
    TRUE            reduce using rule 97 (e7 -> .)

    e7                             shift and go to state 152

state 133

    (65) log_op -> OR .
    CTE_STR         reduce using rule 65 (log_op -> OR .)
    CTE_NUM         reduce using rule 65 (log_op -> OR .)
    OPEN_PTH        reduce using rule 65 (log_op -> OR .)
    ID              reduce using rule 65 (log_op -> OR .)
    FALSE           reduce using rule 65 (log_op -> OR .)
    TRUE            reduce using rule 65 (log_op -> OR .)


state 134

    (66) log_op -> AND .
    CTE_STR         reduce using rule 66 (log_op -> AND .)
    CTE_NUM         reduce using rule 66 (log_op -> AND .)
    OPEN_PTH        reduce using rule 66 (log_op -> AND .)
    ID              reduce using rule 66 (log_op -> AND .)
    FALSE           reduce using rule 66 (log_op -> AND .)
    TRUE            reduce using rule 66 (log_op -> AND .)


state 135

    (44) expression -> exp rel_op exp . q4
    (45) q4 -> .
    OR              reduce using rule 45 (q4 -> .)
    AND             reduce using rule 45 (q4 -> .)
    PEN_DOWN        reduce using rule 45 (q4 -> .)
    PEN_UP          reduce using rule 45 (q4 -> .)
    WHILE           reduce using rule 45 (q4 -> .)
    IF              reduce using rule 45 (q4 -> .)
    WRITE           reduce using rule 45 (q4 -> .)
    READ            reduce using rule 45 (q4 -> .)
    ID              reduce using rule 45 (q4 -> .)
    BOOL            reduce using rule 45 (q4 -> .)
    WORD            reduce using rule 45 (q4 -> .)
    NUMBER          reduce using rule 45 (q4 -> .)
    CENTER          reduce using rule 45 (q4 -> .)
    FORWARD         reduce using rule 45 (q4 -> .)
    RIGHT           reduce using rule 45 (q4 -> .)
    LEFT            reduce using rule 45 (q4 -> .)
    END             reduce using rule 45 (q4 -> .)
    ELSE            reduce using rule 45 (q4 -> .)
    COMMA           reduce using rule 45 (q4 -> .)
    CLOSE_PTH       reduce using rule 45 (q4 -> .)
    CLOSE_SQR       reduce using rule 45 (q4 -> .)
    SUB             reduce using rule 45 (q4 -> .)
    SUM             reduce using rule 45 (q4 -> .)
    EQUAL_TO        reduce using rule 45 (q4 -> .)
    MORE_OR_EQ_THAN reduce using rule 45 (q4 -> .)
    LESS_OR_EQ_THAN reduce using rule 45 (q4 -> .)
    DIFFERENT_TO    reduce using rule 45 (q4 -> .)
    MORE_THAN       reduce using rule 45 (q4 -> .)
    LESS_THAN       reduce using rule 45 (q4 -> .)

    q4                             shift and go to state 153

state 136

    (48) exp -> termino term_op e3 . termino q1
    (53) termino -> . factor q2
    (54) termino -> . factor fact_op e2 expression q2
    (60) factor -> . var_cte e1
    (61) factor -> . open_pth expression close_pth
    (36) var_cte -> . func_call
    (37) var_cte -> . cte_bool
    (38) var_cte -> . CTE_STR
    (39) var_cte -> . CTE_NUM
    (40) var_cte -> . variable
    (63) open_pth -> . OPEN_PTH
    (73) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (41) cte_bool -> . FALSE
    (42) cte_bool -> . TRUE
    (81) variable -> . ID array
    CTE_STR         shift and go to state 76
    CTE_NUM         shift and go to state 77
    OPEN_PTH        shift and go to state 79
    ID              shift and go to state 80
    FALSE           shift and go to state 81
    TRUE            shift and go to state 82

    termino                        shift and go to state 154
    factor                         shift and go to state 71
    var_cte                        shift and go to state 72
    open_pth                       shift and go to state 73
    func_call                      shift and go to state 74
    cte_bool                       shift and go to state 75
    variable                       shift and go to state 78

state 137

    (54) termino -> factor fact_op e2 . expression q2
    (43) expression -> . exp q4
    (44) expression -> . exp rel_op exp q4
    (47) exp -> . termino q1
    (48) exp -> . termino term_op e3 termino q1
    (53) termino -> . factor q2
    (54) termino -> . factor fact_op e2 expression q2
    (60) factor -> . var_cte e1
    (61) factor -> . open_pth expression close_pth
    (36) var_cte -> . func_call
    (37) var_cte -> . cte_bool
    (38) var_cte -> . CTE_STR
    (39) var_cte -> . CTE_NUM
    (40) var_cte -> . variable
    (63) open_pth -> . OPEN_PTH
    (73) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (41) cte_bool -> . FALSE
    (42) cte_bool -> . TRUE
    (81) variable -> . ID array
    CTE_STR         shift and go to state 76
    CTE_NUM         shift and go to state 77
    OPEN_PTH        shift and go to state 79
    ID              shift and go to state 80
    FALSE           shift and go to state 81
    TRUE            shift and go to state 82

    factor                         shift and go to state 71
    expression                     shift and go to state 155
    exp                            shift and go to state 69
    termino                        shift and go to state 70
    var_cte                        shift and go to state 72
    open_pth                       shift and go to state 73
    func_call                      shift and go to state 74
    cte_bool                       shift and go to state 75
    variable                       shift and go to state 78

state 138

    (61) factor -> open_pth expression close_pth .
    DIV             reduce using rule 61 (factor -> open_pth expression close_pth .)
    MULT            reduce using rule 61 (factor -> open_pth expression close_pth .)
    SUB             reduce using rule 61 (factor -> open_pth expression close_pth .)
    SUM             reduce using rule 61 (factor -> open_pth expression close_pth .)
    EQUAL_TO        reduce using rule 61 (factor -> open_pth expression close_pth .)
    MORE_OR_EQ_THAN reduce using rule 61 (factor -> open_pth expression close_pth .)
    LESS_OR_EQ_THAN reduce using rule 61 (factor -> open_pth expression close_pth .)
    DIFFERENT_TO    reduce using rule 61 (factor -> open_pth expression close_pth .)
    MORE_THAN       reduce using rule 61 (factor -> open_pth expression close_pth .)
    LESS_THAN       reduce using rule 61 (factor -> open_pth expression close_pth .)
    OR              reduce using rule 61 (factor -> open_pth expression close_pth .)
    AND             reduce using rule 61 (factor -> open_pth expression close_pth .)
    PEN_DOWN        reduce using rule 61 (factor -> open_pth expression close_pth .)
    PEN_UP          reduce using rule 61 (factor -> open_pth expression close_pth .)
    WHILE           reduce using rule 61 (factor -> open_pth expression close_pth .)
    IF              reduce using rule 61 (factor -> open_pth expression close_pth .)
    WRITE           reduce using rule 61 (factor -> open_pth expression close_pth .)
    READ            reduce using rule 61 (factor -> open_pth expression close_pth .)
    ID              reduce using rule 61 (factor -> open_pth expression close_pth .)
    BOOL            reduce using rule 61 (factor -> open_pth expression close_pth .)
    WORD            reduce using rule 61 (factor -> open_pth expression close_pth .)
    NUMBER          reduce using rule 61 (factor -> open_pth expression close_pth .)
    CENTER          reduce using rule 61 (factor -> open_pth expression close_pth .)
    FORWARD         reduce using rule 61 (factor -> open_pth expression close_pth .)
    RIGHT           reduce using rule 61 (factor -> open_pth expression close_pth .)
    LEFT            reduce using rule 61 (factor -> open_pth expression close_pth .)
    END             reduce using rule 61 (factor -> open_pth expression close_pth .)
    ELSE            reduce using rule 61 (factor -> open_pth expression close_pth .)
    COMMA           reduce using rule 61 (factor -> open_pth expression close_pth .)
    CLOSE_PTH       reduce using rule 61 (factor -> open_pth expression close_pth .)
    CLOSE_SQR       reduce using rule 61 (factor -> open_pth expression close_pth .)


state 139

    (64) close_pth -> CLOSE_PTH .
    DIV             reduce using rule 64 (close_pth -> CLOSE_PTH .)
    MULT            reduce using rule 64 (close_pth -> CLOSE_PTH .)
    SUB             reduce using rule 64 (close_pth -> CLOSE_PTH .)
    SUM             reduce using rule 64 (close_pth -> CLOSE_PTH .)
    EQUAL_TO        reduce using rule 64 (close_pth -> CLOSE_PTH .)
    MORE_OR_EQ_THAN reduce using rule 64 (close_pth -> CLOSE_PTH .)
    LESS_OR_EQ_THAN reduce using rule 64 (close_pth -> CLOSE_PTH .)
    DIFFERENT_TO    reduce using rule 64 (close_pth -> CLOSE_PTH .)
    MORE_THAN       reduce using rule 64 (close_pth -> CLOSE_PTH .)
    LESS_THAN       reduce using rule 64 (close_pth -> CLOSE_PTH .)
    OR              reduce using rule 64 (close_pth -> CLOSE_PTH .)
    AND             reduce using rule 64 (close_pth -> CLOSE_PTH .)
    PEN_DOWN        reduce using rule 64 (close_pth -> CLOSE_PTH .)
    PEN_UP          reduce using rule 64 (close_pth -> CLOSE_PTH .)
    WHILE           reduce using rule 64 (close_pth -> CLOSE_PTH .)
    IF              reduce using rule 64 (close_pth -> CLOSE_PTH .)
    WRITE           reduce using rule 64 (close_pth -> CLOSE_PTH .)
    READ            reduce using rule 64 (close_pth -> CLOSE_PTH .)
    ID              reduce using rule 64 (close_pth -> CLOSE_PTH .)
    BOOL            reduce using rule 64 (close_pth -> CLOSE_PTH .)
    WORD            reduce using rule 64 (close_pth -> CLOSE_PTH .)
    NUMBER          reduce using rule 64 (close_pth -> CLOSE_PTH .)
    CENTER          reduce using rule 64 (close_pth -> CLOSE_PTH .)
    FORWARD         reduce using rule 64 (close_pth -> CLOSE_PTH .)
    RIGHT           reduce using rule 64 (close_pth -> CLOSE_PTH .)
    LEFT            reduce using rule 64 (close_pth -> CLOSE_PTH .)
    END             reduce using rule 64 (close_pth -> CLOSE_PTH .)
    ELSE            reduce using rule 64 (close_pth -> CLOSE_PTH .)
    COMMA           reduce using rule 64 (close_pth -> CLOSE_PTH .)
    CLOSE_PTH       reduce using rule 64 (close_pth -> CLOSE_PTH .)
    CLOSE_SQR       reduce using rule 64 (close_pth -> CLOSE_PTH .)


state 140

    (83) array -> OPEN_SQR expression . CLOSE_SQR matrix
    CLOSE_SQR       shift and go to state 156


state 141

    (89) if_stmnt -> IF con_expression if1 stmnt . if2 else_stmnt
    (91) if2 -> .
    END             reduce using rule 91 (if2 -> .)
    ELSE            reduce using rule 91 (if2 -> .)

    if2                            shift and go to state 157

state 142

    (88) write -> WRITE OPEN_PTH expression CLOSE_PTH .
    PEN_DOWN        reduce using rule 88 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    PEN_UP          reduce using rule 88 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    WHILE           reduce using rule 88 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    IF              reduce using rule 88 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    WRITE           reduce using rule 88 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    READ            reduce using rule 88 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    ID              reduce using rule 88 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    BOOL            reduce using rule 88 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    WORD            reduce using rule 88 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    NUMBER          reduce using rule 88 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    CENTER          reduce using rule 88 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    FORWARD         reduce using rule 88 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    RIGHT           reduce using rule 88 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    LEFT            reduce using rule 88 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    END             reduce using rule 88 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    ELSE            reduce using rule 88 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)


state 143

    (80) read -> READ OPEN_PTH variable multiple_vars . CLOSE_PTH
    CLOSE_PTH       shift and go to state 158


state 144

    (11) func_declaration -> FUNC func_type ID fd1 OPEN_PTH parameter . CLOSE_PTH stmnt END
    CLOSE_PTH       shift and go to state 159


state 145

    (17) parameter -> empty .
    CLOSE_PTH       reduce using rule 17 (parameter -> empty .)


state 146

    (18) parameter -> var_type . ID multiple_parameters
    ID              shift and go to state 160


state 147

    (73) func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH . func3
    (77) func3 -> .
    PEN_DOWN        reduce using rule 77 (func3 -> .)
    PEN_UP          reduce using rule 77 (func3 -> .)
    WHILE           reduce using rule 77 (func3 -> .)
    IF              reduce using rule 77 (func3 -> .)
    WRITE           reduce using rule 77 (func3 -> .)
    READ            reduce using rule 77 (func3 -> .)
    ID              reduce using rule 77 (func3 -> .)
    BOOL            reduce using rule 77 (func3 -> .)
    WORD            reduce using rule 77 (func3 -> .)
    NUMBER          reduce using rule 77 (func3 -> .)
    CENTER          reduce using rule 77 (func3 -> .)
    FORWARD         reduce using rule 77 (func3 -> .)
    RIGHT           reduce using rule 77 (func3 -> .)
    LEFT            reduce using rule 77 (func3 -> .)
    END             reduce using rule 77 (func3 -> .)
    ELSE            reduce using rule 77 (func3 -> .)
    DIV             reduce using rule 77 (func3 -> .)
    MULT            reduce using rule 77 (func3 -> .)
    SUB             reduce using rule 77 (func3 -> .)
    SUM             reduce using rule 77 (func3 -> .)
    EQUAL_TO        reduce using rule 77 (func3 -> .)
    MORE_OR_EQ_THAN reduce using rule 77 (func3 -> .)
    LESS_OR_EQ_THAN reduce using rule 77 (func3 -> .)
    DIFFERENT_TO    reduce using rule 77 (func3 -> .)
    MORE_THAN       reduce using rule 77 (func3 -> .)
    LESS_THAN       reduce using rule 77 (func3 -> .)
    OR              reduce using rule 77 (func3 -> .)
    AND             reduce using rule 77 (func3 -> .)
    COMMA           reduce using rule 77 (func3 -> .)
    CLOSE_PTH       reduce using rule 77 (func3 -> .)
    CLOSE_SQR       reduce using rule 77 (func3 -> .)

    func3                          shift and go to state 161

state 148

    (32) var_assignation -> ID e5 assign e6 expression . q3
    (56) q3 -> .
    PEN_DOWN        reduce using rule 56 (q3 -> .)
    PEN_UP          reduce using rule 56 (q3 -> .)
    WHILE           reduce using rule 56 (q3 -> .)
    IF              reduce using rule 56 (q3 -> .)
    WRITE           reduce using rule 56 (q3 -> .)
    READ            reduce using rule 56 (q3 -> .)
    ID              reduce using rule 56 (q3 -> .)
    BOOL            reduce using rule 56 (q3 -> .)
    WORD            reduce using rule 56 (q3 -> .)
    NUMBER          reduce using rule 56 (q3 -> .)
    CENTER          reduce using rule 56 (q3 -> .)
    FORWARD         reduce using rule 56 (q3 -> .)
    RIGHT           reduce using rule 56 (q3 -> .)
    LEFT            reduce using rule 56 (q3 -> .)
    END             reduce using rule 56 (q3 -> .)
    ELSE            reduce using rule 56 (q3 -> .)

    q3                             shift and go to state 162

state 149

    (75) func_call_param -> expression func2 multiple_fc_param .
    CLOSE_PTH       reduce using rule 75 (func_call_param -> expression func2 multiple_fc_param .)


state 150

    (78) multiple_fc_param -> empty .
    CLOSE_PTH       reduce using rule 78 (multiple_fc_param -> empty .)


state 151

    (79) multiple_fc_param -> COMMA . func_call_param
    (75) func_call_param -> . expression func2 multiple_fc_param
    (43) expression -> . exp q4
    (44) expression -> . exp rel_op exp q4
    (47) exp -> . termino q1
    (48) exp -> . termino term_op e3 termino q1
    (53) termino -> . factor q2
    (54) termino -> . factor fact_op e2 expression q2
    (60) factor -> . var_cte e1
    (61) factor -> . open_pth expression close_pth
    (36) var_cte -> . func_call
    (37) var_cte -> . cte_bool
    (38) var_cte -> . CTE_STR
    (39) var_cte -> . CTE_NUM
    (40) var_cte -> . variable
    (63) open_pth -> . OPEN_PTH
    (73) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (41) cte_bool -> . FALSE
    (42) cte_bool -> . TRUE
    (81) variable -> . ID array
    CTE_STR         shift and go to state 76
    CTE_NUM         shift and go to state 77
    OPEN_PTH        shift and go to state 79
    ID              shift and go to state 80
    FALSE           shift and go to state 81
    TRUE            shift and go to state 82

    func_call_param                shift and go to state 163
    expression                     shift and go to state 97
    exp                            shift and go to state 69
    termino                        shift and go to state 70
    factor                         shift and go to state 71
    var_cte                        shift and go to state 72
    open_pth                       shift and go to state 73
    func_call                      shift and go to state 74
    cte_bool                       shift and go to state 75
    variable                       shift and go to state 78

state 152

    (96) con_expression -> expression q5 log_op e7 . expression q5
    (43) expression -> . exp q4
    (44) expression -> . exp rel_op exp q4
    (47) exp -> . termino q1
    (48) exp -> . termino term_op e3 termino q1
    (53) termino -> . factor q2
    (54) termino -> . factor fact_op e2 expression q2
    (60) factor -> . var_cte e1
    (61) factor -> . open_pth expression close_pth
    (36) var_cte -> . func_call
    (37) var_cte -> . cte_bool
    (38) var_cte -> . CTE_STR
    (39) var_cte -> . CTE_NUM
    (40) var_cte -> . variable
    (63) open_pth -> . OPEN_PTH
    (73) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (41) cte_bool -> . FALSE
    (42) cte_bool -> . TRUE
    (81) variable -> . ID array
    CTE_STR         shift and go to state 76
    CTE_NUM         shift and go to state 77
    OPEN_PTH        shift and go to state 79
    ID              shift and go to state 80
    FALSE           shift and go to state 81
    TRUE            shift and go to state 82

    expression                     shift and go to state 164
    exp                            shift and go to state 69
    termino                        shift and go to state 70
    factor                         shift and go to state 71
    var_cte                        shift and go to state 72
    open_pth                       shift and go to state 73
    func_call                      shift and go to state 74
    cte_bool                       shift and go to state 75
    variable                       shift and go to state 78

state 153

    (44) expression -> exp rel_op exp q4 .
    OR              reduce using rule 44 (expression -> exp rel_op exp q4 .)
    AND             reduce using rule 44 (expression -> exp rel_op exp q4 .)
    PEN_DOWN        reduce using rule 44 (expression -> exp rel_op exp q4 .)
    PEN_UP          reduce using rule 44 (expression -> exp rel_op exp q4 .)
    WHILE           reduce using rule 44 (expression -> exp rel_op exp q4 .)
    IF              reduce using rule 44 (expression -> exp rel_op exp q4 .)
    WRITE           reduce using rule 44 (expression -> exp rel_op exp q4 .)
    READ            reduce using rule 44 (expression -> exp rel_op exp q4 .)
    ID              reduce using rule 44 (expression -> exp rel_op exp q4 .)
    BOOL            reduce using rule 44 (expression -> exp rel_op exp q4 .)
    WORD            reduce using rule 44 (expression -> exp rel_op exp q4 .)
    NUMBER          reduce using rule 44 (expression -> exp rel_op exp q4 .)
    CENTER          reduce using rule 44 (expression -> exp rel_op exp q4 .)
    FORWARD         reduce using rule 44 (expression -> exp rel_op exp q4 .)
    RIGHT           reduce using rule 44 (expression -> exp rel_op exp q4 .)
    LEFT            reduce using rule 44 (expression -> exp rel_op exp q4 .)
    END             reduce using rule 44 (expression -> exp rel_op exp q4 .)
    ELSE            reduce using rule 44 (expression -> exp rel_op exp q4 .)
    COMMA           reduce using rule 44 (expression -> exp rel_op exp q4 .)
    CLOSE_PTH       reduce using rule 44 (expression -> exp rel_op exp q4 .)
    CLOSE_SQR       reduce using rule 44 (expression -> exp rel_op exp q4 .)
    SUB             reduce using rule 44 (expression -> exp rel_op exp q4 .)
    SUM             reduce using rule 44 (expression -> exp rel_op exp q4 .)
    EQUAL_TO        reduce using rule 44 (expression -> exp rel_op exp q4 .)
    MORE_OR_EQ_THAN reduce using rule 44 (expression -> exp rel_op exp q4 .)
    LESS_OR_EQ_THAN reduce using rule 44 (expression -> exp rel_op exp q4 .)
    DIFFERENT_TO    reduce using rule 44 (expression -> exp rel_op exp q4 .)
    MORE_THAN       reduce using rule 44 (expression -> exp rel_op exp q4 .)
    LESS_THAN       reduce using rule 44 (expression -> exp rel_op exp q4 .)


state 154

    (48) exp -> termino term_op e3 termino . q1
    (55) q1 -> .
    EQUAL_TO        reduce using rule 55 (q1 -> .)
    MORE_OR_EQ_THAN reduce using rule 55 (q1 -> .)
    LESS_OR_EQ_THAN reduce using rule 55 (q1 -> .)
    DIFFERENT_TO    reduce using rule 55 (q1 -> .)
    MORE_THAN       reduce using rule 55 (q1 -> .)
    LESS_THAN       reduce using rule 55 (q1 -> .)
    OR              reduce using rule 55 (q1 -> .)
    AND             reduce using rule 55 (q1 -> .)
    PEN_DOWN        reduce using rule 55 (q1 -> .)
    PEN_UP          reduce using rule 55 (q1 -> .)
    WHILE           reduce using rule 55 (q1 -> .)
    IF              reduce using rule 55 (q1 -> .)
    WRITE           reduce using rule 55 (q1 -> .)
    READ            reduce using rule 55 (q1 -> .)
    ID              reduce using rule 55 (q1 -> .)
    BOOL            reduce using rule 55 (q1 -> .)
    WORD            reduce using rule 55 (q1 -> .)
    NUMBER          reduce using rule 55 (q1 -> .)
    CENTER          reduce using rule 55 (q1 -> .)
    FORWARD         reduce using rule 55 (q1 -> .)
    RIGHT           reduce using rule 55 (q1 -> .)
    LEFT            reduce using rule 55 (q1 -> .)
    END             reduce using rule 55 (q1 -> .)
    ELSE            reduce using rule 55 (q1 -> .)
    COMMA           reduce using rule 55 (q1 -> .)
    CLOSE_PTH       reduce using rule 55 (q1 -> .)
    SUB             reduce using rule 55 (q1 -> .)
    SUM             reduce using rule 55 (q1 -> .)
    CLOSE_SQR       reduce using rule 55 (q1 -> .)

    q1                             shift and go to state 165

state 155

    (54) termino -> factor fact_op e2 expression . q2
    (50) q2 -> .
    SUB             reduce using rule 50 (q2 -> .)
    SUM             reduce using rule 50 (q2 -> .)
    EQUAL_TO        reduce using rule 50 (q2 -> .)
    MORE_OR_EQ_THAN reduce using rule 50 (q2 -> .)
    LESS_OR_EQ_THAN reduce using rule 50 (q2 -> .)
    DIFFERENT_TO    reduce using rule 50 (q2 -> .)
    MORE_THAN       reduce using rule 50 (q2 -> .)
    LESS_THAN       reduce using rule 50 (q2 -> .)
    OR              reduce using rule 50 (q2 -> .)
    AND             reduce using rule 50 (q2 -> .)
    PEN_DOWN        reduce using rule 50 (q2 -> .)
    PEN_UP          reduce using rule 50 (q2 -> .)
    WHILE           reduce using rule 50 (q2 -> .)
    IF              reduce using rule 50 (q2 -> .)
    WRITE           reduce using rule 50 (q2 -> .)
    READ            reduce using rule 50 (q2 -> .)
    ID              reduce using rule 50 (q2 -> .)
    BOOL            reduce using rule 50 (q2 -> .)
    WORD            reduce using rule 50 (q2 -> .)
    NUMBER          reduce using rule 50 (q2 -> .)
    CENTER          reduce using rule 50 (q2 -> .)
    FORWARD         reduce using rule 50 (q2 -> .)
    RIGHT           reduce using rule 50 (q2 -> .)
    LEFT            reduce using rule 50 (q2 -> .)
    END             reduce using rule 50 (q2 -> .)
    ELSE            reduce using rule 50 (q2 -> .)
    COMMA           reduce using rule 50 (q2 -> .)
    CLOSE_PTH       reduce using rule 50 (q2 -> .)
    CLOSE_SQR       reduce using rule 50 (q2 -> .)

    q2                             shift and go to state 166

state 156

    (83) array -> OPEN_SQR expression CLOSE_SQR . matrix
    (84) matrix -> . empty
    (85) matrix -> . OPEN_SQR expression CLOSE_SQR
    (107) empty -> .
    OPEN_SQR        shift and go to state 167
    DIV             reduce using rule 107 (empty -> .)
    MULT            reduce using rule 107 (empty -> .)
    SUB             reduce using rule 107 (empty -> .)
    SUM             reduce using rule 107 (empty -> .)
    EQUAL_TO        reduce using rule 107 (empty -> .)
    MORE_OR_EQ_THAN reduce using rule 107 (empty -> .)
    LESS_OR_EQ_THAN reduce using rule 107 (empty -> .)
    DIFFERENT_TO    reduce using rule 107 (empty -> .)
    MORE_THAN       reduce using rule 107 (empty -> .)
    LESS_THAN       reduce using rule 107 (empty -> .)
    OR              reduce using rule 107 (empty -> .)
    AND             reduce using rule 107 (empty -> .)
    PEN_DOWN        reduce using rule 107 (empty -> .)
    PEN_UP          reduce using rule 107 (empty -> .)
    WHILE           reduce using rule 107 (empty -> .)
    IF              reduce using rule 107 (empty -> .)
    WRITE           reduce using rule 107 (empty -> .)
    READ            reduce using rule 107 (empty -> .)
    ID              reduce using rule 107 (empty -> .)
    BOOL            reduce using rule 107 (empty -> .)
    WORD            reduce using rule 107 (empty -> .)
    NUMBER          reduce using rule 107 (empty -> .)
    CENTER          reduce using rule 107 (empty -> .)
    FORWARD         reduce using rule 107 (empty -> .)
    RIGHT           reduce using rule 107 (empty -> .)
    LEFT            reduce using rule 107 (empty -> .)
    END             reduce using rule 107 (empty -> .)
    ELSE            reduce using rule 107 (empty -> .)
    COMMA           reduce using rule 107 (empty -> .)
    CLOSE_PTH       reduce using rule 107 (empty -> .)
    CLOSE_SQR       reduce using rule 107 (empty -> .)

    matrix                         shift and go to state 168
    empty                          shift and go to state 169

state 157

    (89) if_stmnt -> IF con_expression if1 stmnt if2 . else_stmnt
    (92) else_stmnt -> . END
    (93) else_stmnt -> . ELSE stmnt END
    END             shift and go to state 171
    ELSE            shift and go to state 172

    else_stmnt                     shift and go to state 170

state 158

    (80) read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .
    PEN_DOWN        reduce using rule 80 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    PEN_UP          reduce using rule 80 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    WHILE           reduce using rule 80 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    IF              reduce using rule 80 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    WRITE           reduce using rule 80 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    READ            reduce using rule 80 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    ID              reduce using rule 80 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    BOOL            reduce using rule 80 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    WORD            reduce using rule 80 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    NUMBER          reduce using rule 80 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    CENTER          reduce using rule 80 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    FORWARD         reduce using rule 80 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    RIGHT           reduce using rule 80 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    LEFT            reduce using rule 80 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    END             reduce using rule 80 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    ELSE            reduce using rule 80 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)


state 159

    (11) func_declaration -> FUNC func_type ID fd1 OPEN_PTH parameter CLOSE_PTH . stmnt END
    (21) stmnt -> . empty
    (22) stmnt -> . var_declaration_func stmnt
    (23) stmnt -> . pen_func stmnt
    (24) stmnt -> . move_func stmnt
    (25) stmnt -> . while_stmnt stmnt
    (26) stmnt -> . if_stmnt stmnt
    (27) stmnt -> . write stmnt
    (28) stmnt -> . read stmnt
    (29) stmnt -> . func_call stmnt
    (30) stmnt -> . var_assignation stmnt
    (107) empty -> .
    (31) var_declaration_func -> . var_type ID multiple_vars
    (104) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (105) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (99) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (94) while_stmnt -> . WHILE con_expression stmnt END
    (89) if_stmnt -> . IF con_expression if1 stmnt if2 else_stmnt
    (88) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (80) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (73) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (32) var_assignation -> . ID e5 assign e6 expression q3
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (100) move_type -> . CENTER
    (101) move_type -> . FORWARD
    (102) move_type -> . RIGHT
    (103) move_type -> . LEFT
    END             reduce using rule 107 (empty -> .)
    PEN_DOWN        shift and go to state 38
    PEN_UP          shift and go to state 39
    WHILE           shift and go to state 41
    IF              shift and go to state 42
    WRITE           shift and go to state 43
    READ            shift and go to state 44
    ID              shift and go to state 37
    BOOL            shift and go to state 8
    WORD            shift and go to state 9
    NUMBER          shift and go to state 10
    CENTER          shift and go to state 45
    FORWARD         shift and go to state 46
    RIGHT           shift and go to state 47
    LEFT            shift and go to state 48

    stmnt                          shift and go to state 173
    empty                          shift and go to state 26
    var_declaration_func           shift and go to state 27
    pen_func                       shift and go to state 28
    move_func                      shift and go to state 29
    while_stmnt                    shift and go to state 30
    if_stmnt                       shift and go to state 31
    write                          shift and go to state 32
    read                           shift and go to state 33
    func_call                      shift and go to state 34
    var_assignation                shift and go to state 35
    var_type                       shift and go to state 36
    move_type                      shift and go to state 40

state 160

    (18) parameter -> var_type ID . multiple_parameters
    (19) multiple_parameters -> . empty
    (20) multiple_parameters -> . COMMA parameter
    (107) empty -> .
    COMMA           shift and go to state 176
    CLOSE_PTH       reduce using rule 107 (empty -> .)

    multiple_parameters            shift and go to state 174
    empty                          shift and go to state 175

state 161

    (73) func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .
    PEN_DOWN        reduce using rule 73 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    PEN_UP          reduce using rule 73 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    WHILE           reduce using rule 73 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    IF              reduce using rule 73 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    WRITE           reduce using rule 73 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    READ            reduce using rule 73 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    ID              reduce using rule 73 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    BOOL            reduce using rule 73 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    WORD            reduce using rule 73 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    NUMBER          reduce using rule 73 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    CENTER          reduce using rule 73 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    FORWARD         reduce using rule 73 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    RIGHT           reduce using rule 73 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    LEFT            reduce using rule 73 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    END             reduce using rule 73 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    ELSE            reduce using rule 73 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    DIV             reduce using rule 73 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    MULT            reduce using rule 73 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    SUB             reduce using rule 73 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    SUM             reduce using rule 73 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    EQUAL_TO        reduce using rule 73 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    MORE_OR_EQ_THAN reduce using rule 73 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    LESS_OR_EQ_THAN reduce using rule 73 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    DIFFERENT_TO    reduce using rule 73 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    MORE_THAN       reduce using rule 73 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    LESS_THAN       reduce using rule 73 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    OR              reduce using rule 73 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    AND             reduce using rule 73 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    COMMA           reduce using rule 73 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    CLOSE_PTH       reduce using rule 73 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    CLOSE_SQR       reduce using rule 73 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)


state 162

    (32) var_assignation -> ID e5 assign e6 expression q3 .
    PEN_DOWN        reduce using rule 32 (var_assignation -> ID e5 assign e6 expression q3 .)
    PEN_UP          reduce using rule 32 (var_assignation -> ID e5 assign e6 expression q3 .)
    WHILE           reduce using rule 32 (var_assignation -> ID e5 assign e6 expression q3 .)
    IF              reduce using rule 32 (var_assignation -> ID e5 assign e6 expression q3 .)
    WRITE           reduce using rule 32 (var_assignation -> ID e5 assign e6 expression q3 .)
    READ            reduce using rule 32 (var_assignation -> ID e5 assign e6 expression q3 .)
    ID              reduce using rule 32 (var_assignation -> ID e5 assign e6 expression q3 .)
    BOOL            reduce using rule 32 (var_assignation -> ID e5 assign e6 expression q3 .)
    WORD            reduce using rule 32 (var_assignation -> ID e5 assign e6 expression q3 .)
    NUMBER          reduce using rule 32 (var_assignation -> ID e5 assign e6 expression q3 .)
    CENTER          reduce using rule 32 (var_assignation -> ID e5 assign e6 expression q3 .)
    FORWARD         reduce using rule 32 (var_assignation -> ID e5 assign e6 expression q3 .)
    RIGHT           reduce using rule 32 (var_assignation -> ID e5 assign e6 expression q3 .)
    LEFT            reduce using rule 32 (var_assignation -> ID e5 assign e6 expression q3 .)
    END             reduce using rule 32 (var_assignation -> ID e5 assign e6 expression q3 .)
    ELSE            reduce using rule 32 (var_assignation -> ID e5 assign e6 expression q3 .)


state 163

    (79) multiple_fc_param -> COMMA func_call_param .
    CLOSE_PTH       reduce using rule 79 (multiple_fc_param -> COMMA func_call_param .)


state 164

    (96) con_expression -> expression q5 log_op e7 expression . q5
    (98) q5 -> .
    PEN_DOWN        reduce using rule 98 (q5 -> .)
    PEN_UP          reduce using rule 98 (q5 -> .)
    WHILE           reduce using rule 98 (q5 -> .)
    IF              reduce using rule 98 (q5 -> .)
    WRITE           reduce using rule 98 (q5 -> .)
    READ            reduce using rule 98 (q5 -> .)
    ID              reduce using rule 98 (q5 -> .)
    BOOL            reduce using rule 98 (q5 -> .)
    WORD            reduce using rule 98 (q5 -> .)
    NUMBER          reduce using rule 98 (q5 -> .)
    CENTER          reduce using rule 98 (q5 -> .)
    FORWARD         reduce using rule 98 (q5 -> .)
    RIGHT           reduce using rule 98 (q5 -> .)
    LEFT            reduce using rule 98 (q5 -> .)
    END             reduce using rule 98 (q5 -> .)
    ELSE            reduce using rule 98 (q5 -> .)

    q5                             shift and go to state 177

state 165

    (48) exp -> termino term_op e3 termino q1 .
    EQUAL_TO        reduce using rule 48 (exp -> termino term_op e3 termino q1 .)
    MORE_OR_EQ_THAN reduce using rule 48 (exp -> termino term_op e3 termino q1 .)
    LESS_OR_EQ_THAN reduce using rule 48 (exp -> termino term_op e3 termino q1 .)
    DIFFERENT_TO    reduce using rule 48 (exp -> termino term_op e3 termino q1 .)
    MORE_THAN       reduce using rule 48 (exp -> termino term_op e3 termino q1 .)
    LESS_THAN       reduce using rule 48 (exp -> termino term_op e3 termino q1 .)
    OR              reduce using rule 48 (exp -> termino term_op e3 termino q1 .)
    AND             reduce using rule 48 (exp -> termino term_op e3 termino q1 .)
    PEN_DOWN        reduce using rule 48 (exp -> termino term_op e3 termino q1 .)
    PEN_UP          reduce using rule 48 (exp -> termino term_op e3 termino q1 .)
    WHILE           reduce using rule 48 (exp -> termino term_op e3 termino q1 .)
    IF              reduce using rule 48 (exp -> termino term_op e3 termino q1 .)
    WRITE           reduce using rule 48 (exp -> termino term_op e3 termino q1 .)
    READ            reduce using rule 48 (exp -> termino term_op e3 termino q1 .)
    ID              reduce using rule 48 (exp -> termino term_op e3 termino q1 .)
    BOOL            reduce using rule 48 (exp -> termino term_op e3 termino q1 .)
    WORD            reduce using rule 48 (exp -> termino term_op e3 termino q1 .)
    NUMBER          reduce using rule 48 (exp -> termino term_op e3 termino q1 .)
    CENTER          reduce using rule 48 (exp -> termino term_op e3 termino q1 .)
    FORWARD         reduce using rule 48 (exp -> termino term_op e3 termino q1 .)
    RIGHT           reduce using rule 48 (exp -> termino term_op e3 termino q1 .)
    LEFT            reduce using rule 48 (exp -> termino term_op e3 termino q1 .)
    END             reduce using rule 48 (exp -> termino term_op e3 termino q1 .)
    ELSE            reduce using rule 48 (exp -> termino term_op e3 termino q1 .)
    COMMA           reduce using rule 48 (exp -> termino term_op e3 termino q1 .)
    CLOSE_PTH       reduce using rule 48 (exp -> termino term_op e3 termino q1 .)
    SUB             reduce using rule 48 (exp -> termino term_op e3 termino q1 .)
    SUM             reduce using rule 48 (exp -> termino term_op e3 termino q1 .)
    CLOSE_SQR       reduce using rule 48 (exp -> termino term_op e3 termino q1 .)


state 166

    (54) termino -> factor fact_op e2 expression q2 .
    SUB             reduce using rule 54 (termino -> factor fact_op e2 expression q2 .)
    SUM             reduce using rule 54 (termino -> factor fact_op e2 expression q2 .)
    EQUAL_TO        reduce using rule 54 (termino -> factor fact_op e2 expression q2 .)
    MORE_OR_EQ_THAN reduce using rule 54 (termino -> factor fact_op e2 expression q2 .)
    LESS_OR_EQ_THAN reduce using rule 54 (termino -> factor fact_op e2 expression q2 .)
    DIFFERENT_TO    reduce using rule 54 (termino -> factor fact_op e2 expression q2 .)
    MORE_THAN       reduce using rule 54 (termino -> factor fact_op e2 expression q2 .)
    LESS_THAN       reduce using rule 54 (termino -> factor fact_op e2 expression q2 .)
    OR              reduce using rule 54 (termino -> factor fact_op e2 expression q2 .)
    AND             reduce using rule 54 (termino -> factor fact_op e2 expression q2 .)
    PEN_DOWN        reduce using rule 54 (termino -> factor fact_op e2 expression q2 .)
    PEN_UP          reduce using rule 54 (termino -> factor fact_op e2 expression q2 .)
    WHILE           reduce using rule 54 (termino -> factor fact_op e2 expression q2 .)
    IF              reduce using rule 54 (termino -> factor fact_op e2 expression q2 .)
    WRITE           reduce using rule 54 (termino -> factor fact_op e2 expression q2 .)
    READ            reduce using rule 54 (termino -> factor fact_op e2 expression q2 .)
    ID              reduce using rule 54 (termino -> factor fact_op e2 expression q2 .)
    BOOL            reduce using rule 54 (termino -> factor fact_op e2 expression q2 .)
    WORD            reduce using rule 54 (termino -> factor fact_op e2 expression q2 .)
    NUMBER          reduce using rule 54 (termino -> factor fact_op e2 expression q2 .)
    CENTER          reduce using rule 54 (termino -> factor fact_op e2 expression q2 .)
    FORWARD         reduce using rule 54 (termino -> factor fact_op e2 expression q2 .)
    RIGHT           reduce using rule 54 (termino -> factor fact_op e2 expression q2 .)
    LEFT            reduce using rule 54 (termino -> factor fact_op e2 expression q2 .)
    END             reduce using rule 54 (termino -> factor fact_op e2 expression q2 .)
    ELSE            reduce using rule 54 (termino -> factor fact_op e2 expression q2 .)
    COMMA           reduce using rule 54 (termino -> factor fact_op e2 expression q2 .)
    CLOSE_PTH       reduce using rule 54 (termino -> factor fact_op e2 expression q2 .)
    CLOSE_SQR       reduce using rule 54 (termino -> factor fact_op e2 expression q2 .)


state 167

    (85) matrix -> OPEN_SQR . expression CLOSE_SQR
    (43) expression -> . exp q4
    (44) expression -> . exp rel_op exp q4
    (47) exp -> . termino q1
    (48) exp -> . termino term_op e3 termino q1
    (53) termino -> . factor q2
    (54) termino -> . factor fact_op e2 expression q2
    (60) factor -> . var_cte e1
    (61) factor -> . open_pth expression close_pth
    (36) var_cte -> . func_call
    (37) var_cte -> . cte_bool
    (38) var_cte -> . CTE_STR
    (39) var_cte -> . CTE_NUM
    (40) var_cte -> . variable
    (63) open_pth -> . OPEN_PTH
    (73) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (41) cte_bool -> . FALSE
    (42) cte_bool -> . TRUE
    (81) variable -> . ID array
    CTE_STR         shift and go to state 76
    CTE_NUM         shift and go to state 77
    OPEN_PTH        shift and go to state 79
    ID              shift and go to state 80
    FALSE           shift and go to state 81
    TRUE            shift and go to state 82

    expression                     shift and go to state 178
    exp                            shift and go to state 69
    termino                        shift and go to state 70
    factor                         shift and go to state 71
    var_cte                        shift and go to state 72
    open_pth                       shift and go to state 73
    func_call                      shift and go to state 74
    cte_bool                       shift and go to state 75
    variable                       shift and go to state 78

state 168

    (83) array -> OPEN_SQR expression CLOSE_SQR matrix .
    DIV             reduce using rule 83 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    MULT            reduce using rule 83 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    SUB             reduce using rule 83 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    SUM             reduce using rule 83 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    EQUAL_TO        reduce using rule 83 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    MORE_OR_EQ_THAN reduce using rule 83 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    LESS_OR_EQ_THAN reduce using rule 83 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    DIFFERENT_TO    reduce using rule 83 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    MORE_THAN       reduce using rule 83 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    LESS_THAN       reduce using rule 83 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    OR              reduce using rule 83 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    AND             reduce using rule 83 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    PEN_DOWN        reduce using rule 83 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    PEN_UP          reduce using rule 83 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    WHILE           reduce using rule 83 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    IF              reduce using rule 83 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    WRITE           reduce using rule 83 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    READ            reduce using rule 83 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    ID              reduce using rule 83 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    BOOL            reduce using rule 83 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    WORD            reduce using rule 83 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    NUMBER          reduce using rule 83 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    CENTER          reduce using rule 83 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    FORWARD         reduce using rule 83 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    RIGHT           reduce using rule 83 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    LEFT            reduce using rule 83 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    END             reduce using rule 83 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    ELSE            reduce using rule 83 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    COMMA           reduce using rule 83 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    CLOSE_PTH       reduce using rule 83 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    CLOSE_SQR       reduce using rule 83 (array -> OPEN_SQR expression CLOSE_SQR matrix .)


state 169

    (84) matrix -> empty .
    DIV             reduce using rule 84 (matrix -> empty .)
    MULT            reduce using rule 84 (matrix -> empty .)
    SUB             reduce using rule 84 (matrix -> empty .)
    SUM             reduce using rule 84 (matrix -> empty .)
    EQUAL_TO        reduce using rule 84 (matrix -> empty .)
    MORE_OR_EQ_THAN reduce using rule 84 (matrix -> empty .)
    LESS_OR_EQ_THAN reduce using rule 84 (matrix -> empty .)
    DIFFERENT_TO    reduce using rule 84 (matrix -> empty .)
    MORE_THAN       reduce using rule 84 (matrix -> empty .)
    LESS_THAN       reduce using rule 84 (matrix -> empty .)
    OR              reduce using rule 84 (matrix -> empty .)
    AND             reduce using rule 84 (matrix -> empty .)
    PEN_DOWN        reduce using rule 84 (matrix -> empty .)
    PEN_UP          reduce using rule 84 (matrix -> empty .)
    WHILE           reduce using rule 84 (matrix -> empty .)
    IF              reduce using rule 84 (matrix -> empty .)
    WRITE           reduce using rule 84 (matrix -> empty .)
    READ            reduce using rule 84 (matrix -> empty .)
    ID              reduce using rule 84 (matrix -> empty .)
    BOOL            reduce using rule 84 (matrix -> empty .)
    WORD            reduce using rule 84 (matrix -> empty .)
    NUMBER          reduce using rule 84 (matrix -> empty .)
    CENTER          reduce using rule 84 (matrix -> empty .)
    FORWARD         reduce using rule 84 (matrix -> empty .)
    RIGHT           reduce using rule 84 (matrix -> empty .)
    LEFT            reduce using rule 84 (matrix -> empty .)
    END             reduce using rule 84 (matrix -> empty .)
    ELSE            reduce using rule 84 (matrix -> empty .)
    COMMA           reduce using rule 84 (matrix -> empty .)
    CLOSE_PTH       reduce using rule 84 (matrix -> empty .)
    CLOSE_SQR       reduce using rule 84 (matrix -> empty .)


state 170

    (89) if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .
    PEN_DOWN        reduce using rule 89 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)
    PEN_UP          reduce using rule 89 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)
    WHILE           reduce using rule 89 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)
    IF              reduce using rule 89 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)
    WRITE           reduce using rule 89 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)
    READ            reduce using rule 89 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)
    ID              reduce using rule 89 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)
    BOOL            reduce using rule 89 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)
    WORD            reduce using rule 89 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)
    NUMBER          reduce using rule 89 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)
    CENTER          reduce using rule 89 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)
    FORWARD         reduce using rule 89 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)
    RIGHT           reduce using rule 89 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)
    LEFT            reduce using rule 89 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)
    END             reduce using rule 89 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)
    ELSE            reduce using rule 89 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)


state 171

    (92) else_stmnt -> END .
    PEN_DOWN        reduce using rule 92 (else_stmnt -> END .)
    PEN_UP          reduce using rule 92 (else_stmnt -> END .)
    WHILE           reduce using rule 92 (else_stmnt -> END .)
    IF              reduce using rule 92 (else_stmnt -> END .)
    WRITE           reduce using rule 92 (else_stmnt -> END .)
    READ            reduce using rule 92 (else_stmnt -> END .)
    ID              reduce using rule 92 (else_stmnt -> END .)
    BOOL            reduce using rule 92 (else_stmnt -> END .)
    WORD            reduce using rule 92 (else_stmnt -> END .)
    NUMBER          reduce using rule 92 (else_stmnt -> END .)
    CENTER          reduce using rule 92 (else_stmnt -> END .)
    FORWARD         reduce using rule 92 (else_stmnt -> END .)
    RIGHT           reduce using rule 92 (else_stmnt -> END .)
    LEFT            reduce using rule 92 (else_stmnt -> END .)
    END             reduce using rule 92 (else_stmnt -> END .)
    ELSE            reduce using rule 92 (else_stmnt -> END .)


state 172

    (93) else_stmnt -> ELSE . stmnt END
    (21) stmnt -> . empty
    (22) stmnt -> . var_declaration_func stmnt
    (23) stmnt -> . pen_func stmnt
    (24) stmnt -> . move_func stmnt
    (25) stmnt -> . while_stmnt stmnt
    (26) stmnt -> . if_stmnt stmnt
    (27) stmnt -> . write stmnt
    (28) stmnt -> . read stmnt
    (29) stmnt -> . func_call stmnt
    (30) stmnt -> . var_assignation stmnt
    (107) empty -> .
    (31) var_declaration_func -> . var_type ID multiple_vars
    (104) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (105) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (99) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (94) while_stmnt -> . WHILE con_expression stmnt END
    (89) if_stmnt -> . IF con_expression if1 stmnt if2 else_stmnt
    (88) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (80) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (73) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (32) var_assignation -> . ID e5 assign e6 expression q3
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (100) move_type -> . CENTER
    (101) move_type -> . FORWARD
    (102) move_type -> . RIGHT
    (103) move_type -> . LEFT
    END             reduce using rule 107 (empty -> .)
    PEN_DOWN        shift and go to state 38
    PEN_UP          shift and go to state 39
    WHILE           shift and go to state 41
    IF              shift and go to state 42
    WRITE           shift and go to state 43
    READ            shift and go to state 44
    ID              shift and go to state 37
    BOOL            shift and go to state 8
    WORD            shift and go to state 9
    NUMBER          shift and go to state 10
    CENTER          shift and go to state 45
    FORWARD         shift and go to state 46
    RIGHT           shift and go to state 47
    LEFT            shift and go to state 48

    stmnt                          shift and go to state 179
    empty                          shift and go to state 26
    var_declaration_func           shift and go to state 27
    pen_func                       shift and go to state 28
    move_func                      shift and go to state 29
    while_stmnt                    shift and go to state 30
    if_stmnt                       shift and go to state 31
    write                          shift and go to state 32
    read                           shift and go to state 33
    func_call                      shift and go to state 34
    var_assignation                shift and go to state 35
    var_type                       shift and go to state 36
    move_type                      shift and go to state 40

state 173

    (11) func_declaration -> FUNC func_type ID fd1 OPEN_PTH parameter CLOSE_PTH stmnt . END
    END             shift and go to state 180


state 174

    (18) parameter -> var_type ID multiple_parameters .
    CLOSE_PTH       reduce using rule 18 (parameter -> var_type ID multiple_parameters .)


state 175

    (19) multiple_parameters -> empty .
    CLOSE_PTH       reduce using rule 19 (multiple_parameters -> empty .)


state 176

    (20) multiple_parameters -> COMMA . parameter
    (17) parameter -> . empty
    (18) parameter -> . var_type ID multiple_parameters
    (107) empty -> .
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    CLOSE_PTH       reduce using rule 107 (empty -> .)
    BOOL            shift and go to state 8
    WORD            shift and go to state 9
    NUMBER          shift and go to state 10

    parameter                      shift and go to state 181
    empty                          shift and go to state 145
    var_type                       shift and go to state 146

state 177

    (96) con_expression -> expression q5 log_op e7 expression q5 .
    PEN_DOWN        reduce using rule 96 (con_expression -> expression q5 log_op e7 expression q5 .)
    PEN_UP          reduce using rule 96 (con_expression -> expression q5 log_op e7 expression q5 .)
    WHILE           reduce using rule 96 (con_expression -> expression q5 log_op e7 expression q5 .)
    IF              reduce using rule 96 (con_expression -> expression q5 log_op e7 expression q5 .)
    WRITE           reduce using rule 96 (con_expression -> expression q5 log_op e7 expression q5 .)
    READ            reduce using rule 96 (con_expression -> expression q5 log_op e7 expression q5 .)
    ID              reduce using rule 96 (con_expression -> expression q5 log_op e7 expression q5 .)
    BOOL            reduce using rule 96 (con_expression -> expression q5 log_op e7 expression q5 .)
    WORD            reduce using rule 96 (con_expression -> expression q5 log_op e7 expression q5 .)
    NUMBER          reduce using rule 96 (con_expression -> expression q5 log_op e7 expression q5 .)
    CENTER          reduce using rule 96 (con_expression -> expression q5 log_op e7 expression q5 .)
    FORWARD         reduce using rule 96 (con_expression -> expression q5 log_op e7 expression q5 .)
    RIGHT           reduce using rule 96 (con_expression -> expression q5 log_op e7 expression q5 .)
    LEFT            reduce using rule 96 (con_expression -> expression q5 log_op e7 expression q5 .)
    END             reduce using rule 96 (con_expression -> expression q5 log_op e7 expression q5 .)
    ELSE            reduce using rule 96 (con_expression -> expression q5 log_op e7 expression q5 .)


state 178

    (85) matrix -> OPEN_SQR expression . CLOSE_SQR
    CLOSE_SQR       shift and go to state 182


state 179

    (93) else_stmnt -> ELSE stmnt . END
    END             shift and go to state 183


state 180

    (11) func_declaration -> FUNC func_type ID fd1 OPEN_PTH parameter CLOSE_PTH stmnt END .
    MAIN            reduce using rule 11 (func_declaration -> FUNC func_type ID fd1 OPEN_PTH parameter CLOSE_PTH stmnt END .)


state 181

    (20) multiple_parameters -> COMMA parameter .
    CLOSE_PTH       reduce using rule 20 (multiple_parameters -> COMMA parameter .)


state 182

    (85) matrix -> OPEN_SQR expression CLOSE_SQR .
    DIV             reduce using rule 85 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    MULT            reduce using rule 85 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    SUB             reduce using rule 85 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    SUM             reduce using rule 85 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    EQUAL_TO        reduce using rule 85 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    MORE_OR_EQ_THAN reduce using rule 85 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    LESS_OR_EQ_THAN reduce using rule 85 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    DIFFERENT_TO    reduce using rule 85 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    MORE_THAN       reduce using rule 85 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    LESS_THAN       reduce using rule 85 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    OR              reduce using rule 85 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    AND             reduce using rule 85 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    PEN_DOWN        reduce using rule 85 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    PEN_UP          reduce using rule 85 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    WHILE           reduce using rule 85 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    IF              reduce using rule 85 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    WRITE           reduce using rule 85 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    READ            reduce using rule 85 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    ID              reduce using rule 85 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    BOOL            reduce using rule 85 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    WORD            reduce using rule 85 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    NUMBER          reduce using rule 85 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    CENTER          reduce using rule 85 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    FORWARD         reduce using rule 85 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    RIGHT           reduce using rule 85 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    LEFT            reduce using rule 85 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    END             reduce using rule 85 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    ELSE            reduce using rule 85 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    COMMA           reduce using rule 85 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    CLOSE_PTH       reduce using rule 85 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    CLOSE_SQR       reduce using rule 85 (matrix -> OPEN_SQR expression CLOSE_SQR .)


state 183

    (93) else_stmnt -> ELSE stmnt END .
    PEN_DOWN        reduce using rule 93 (else_stmnt -> ELSE stmnt END .)
    PEN_UP          reduce using rule 93 (else_stmnt -> ELSE stmnt END .)
    WHILE           reduce using rule 93 (else_stmnt -> ELSE stmnt END .)
    IF              reduce using rule 93 (else_stmnt -> ELSE stmnt END .)
    WRITE           reduce using rule 93 (else_stmnt -> ELSE stmnt END .)
    READ            reduce using rule 93 (else_stmnt -> ELSE stmnt END .)
    ID              reduce using rule 93 (else_stmnt -> ELSE stmnt END .)
    BOOL            reduce using rule 93 (else_stmnt -> ELSE stmnt END .)
    WORD            reduce using rule 93 (else_stmnt -> ELSE stmnt END .)
    NUMBER          reduce using rule 93 (else_stmnt -> ELSE stmnt END .)
    CENTER          reduce using rule 93 (else_stmnt -> ELSE stmnt END .)
    FORWARD         reduce using rule 93 (else_stmnt -> ELSE stmnt END .)
    RIGHT           reduce using rule 93 (else_stmnt -> ELSE stmnt END .)
    LEFT            reduce using rule 93 (else_stmnt -> ELSE stmnt END .)
    END             reduce using rule 93 (else_stmnt -> ELSE stmnt END .)
    ELSE            reduce using rule 93 (else_stmnt -> ELSE stmnt END .)


Conflicts:

shift/reduce conflict for EQUAL_TO in state 69 resolved as shift
shift/reduce conflict for MORE_OR_EQ_THAN in state 69 resolved as shift
shift/reduce conflict for LESS_OR_EQ_THAN in state 69 resolved as shift
shift/reduce conflict for DIFFERENT_TO in state 69 resolved as shift
shift/reduce conflict for MORE_THAN in state 69 resolved as shift
shift/reduce conflict for LESS_THAN in state 69 resolved as shift
shift/reduce conflict for SUB in state 70 resolved as shift
shift/reduce conflict for SUM in state 70 resolved as shift