Grammar:

Rule 0     S' -> program
Rule 1     program -> DRAWING ID declaration
Rule 2     declaration -> main
Rule 3     declaration -> var_declaration func_declaration main
Rule 4     var_declaration -> var_type ID multiple_var
Rule 5     multiple_var -> empty
Rule 6     multiple_var -> COMMA ID multiple_var
Rule 7     var_type -> BOOL
Rule 8     var_type -> WORD
Rule 9     var_type -> NUMBER
Rule 10    func_declaration -> empty
Rule 11    func_declaration -> func_type FUNC ID OPEN_PTH parameter CLOSE_PTH stmnt END
Rule 12    func_type -> BOOL
Rule 13    func_type -> WORD
Rule 14    func_type -> NUMBER
Rule 15    func_type -> VOID
Rule 16    parameter -> empty
Rule 17    parameter -> var_type ID multiple_parameters
Rule 18    multiple_parameters -> empty
Rule 19    multiple_parameters -> COMMA parameter
Rule 20    stmnt -> empty
Rule 21    stmnt -> var_declaration_func stmnt
Rule 22    stmnt -> pen_func stmnt
Rule 23    stmnt -> move_func stmnt
Rule 24    stmnt -> while_stmnt stmnt
Rule 25    stmnt -> if_stmnt stmnt
Rule 26    stmnt -> write stmnt
Rule 27    stmnt -> read stmnt
Rule 28    stmnt -> func_call stmnt
Rule 29    stmnt -> var_assignation stmnt
Rule 30    var_declaration_func -> var_type ID multiple_vars
Rule 31    rel_op -> MORE_OR_EQ_THAN
Rule 32    rel_op -> LESS_OR_EQ_THAN
Rule 33    rel_op -> DIFFERENT_TO
Rule 34    rel_op -> MORE_THAN
Rule 35    rel_op -> LESS_THAN
Rule 36    rel_op -> EQUAL_TO
Rule 37    var_assignation -> ID a1 assign expression quads
Rule 38    assign -> ASSIGN
Rule 39    a1 -> <empty>
Rule 40    var_cte -> func_call
Rule 41    var_cte -> cte_bool
Rule 42    var_cte -> CTE_STR
Rule 43    var_cte -> CTE_NUM
Rule 44    var_cte -> variable
Rule 45    cte_bool -> FALSE
Rule 46    cte_bool -> TRUE
Rule 47    expression -> exp
Rule 48    expression -> exp e3 rel_op exp e3 quads2
Rule 49    quads2 -> <empty>
Rule 50    e3 -> <empty>
Rule 51    exp -> termino
Rule 52    exp -> termino e1 term_op e2 termino e1 quads1
Rule 53    termino -> factor
Rule 54    termino -> factor e1 fact_op factor e1 quads
Rule 55    factor -> term_op var_cte
Rule 56    factor -> var_cte
Rule 57    factor -> OPEN_PTH expression CLOSE_PTH
Rule 58    term_op -> SUB
Rule 59    term_op -> SUM
Rule 60    fact_op -> DIV
Rule 61    fact_op -> MULT
Rule 62    e1 -> <empty>
Rule 63    e2 -> <empty>
Rule 64    quads -> <empty>
Rule 65    quads1 -> <empty>
Rule 66    func_call -> ID OPEN_PTH func_call_param CLOSE_PTH
Rule 67    func_call_param -> expression multiple_fc_param
Rule 68    multiple_fc_param -> empty
Rule 69    multiple_fc_param -> COMMA func_call_param
Rule 70    read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH
Rule 71    variable -> ID array
Rule 72    array -> empty
Rule 73    array -> OPEN_SQR expression CLOSE_SQR matrix
Rule 74    matrix -> empty
Rule 75    matrix -> OPEN_SQR expression CLOSE_SQR
Rule 76    multiple_vars -> empty
Rule 77    multiple_vars -> COMMA variable
Rule 78    write -> WRITE OPEN_PTH expression CLOSE_PTH
Rule 79    if_stmnt -> IF con_expression stmnt else_stmnt
Rule 80    else_stmnt -> END
Rule 81    else_stmnt -> ELSE stmnt END
Rule 82    while_stmnt -> WHILE con_expression stmnt END
Rule 83    con_expression -> expression
Rule 84    con_expression -> expression rel_op e4 expression quads3
Rule 85    e4 -> <empty>
Rule 86    quads3 -> <empty>
Rule 87    move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH
Rule 88    move_type -> CENTER
Rule 89    move_type -> FORWARD
Rule 90    move_type -> RIGHT
Rule 91    move_type -> LEFT
Rule 92    pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH
Rule 93    pen_func -> PEN_UP OPEN_PTH CLOSE_PTH
Rule 94    main -> MAIN stmnt END
Rule 95    empty -> <empty>

Unused terminals:

    OR
    AND

Terminals, with rules where they appear:

AND                  : 
ASSIGN               : 38
BOOL                 : 7 12
CENTER               : 88
CLOSE_PTH            : 11 57 66 70 78 87 92 93
CLOSE_SQR            : 73 75
COMMA                : 6 19 69 77
CTE_NUM              : 43
CTE_STR              : 42
DIFFERENT_TO         : 33
DIV                  : 60
DRAWING              : 1
ELSE                 : 81
END                  : 11 80 81 82 94
EQUAL_TO             : 36
FALSE                : 45
FORWARD              : 89
FUNC                 : 11
ID                   : 1 4 6 11 17 30 37 66 71
IF                   : 79
LEFT                 : 91
LESS_OR_EQ_THAN      : 32
LESS_THAN            : 35
MAIN                 : 94
MORE_OR_EQ_THAN      : 31
MORE_THAN            : 34
MULT                 : 61
NUMBER               : 9 14
OPEN_PTH             : 11 57 66 70 78 87 92 93
OPEN_SQR             : 73 75
OR                   : 
PEN_DOWN             : 92
PEN_UP               : 93
READ                 : 70
RIGHT                : 90
SUB                  : 58
SUM                  : 59
TRUE                 : 46
VOID                 : 15
WHILE                : 82
WORD                 : 8 13
WRITE                : 78
error                : 

Nonterminals, with rules where they appear:

a1                   : 37
array                : 71
assign               : 37
con_expression       : 79 82
cte_bool             : 41
declaration          : 1
e1                   : 52 52 54 54
e2                   : 52
e3                   : 48 48
e4                   : 84
else_stmnt           : 79
empty                : 5 10 16 18 20 68 72 74 76
exp                  : 47 48 48
expression           : 37 57 67 73 75 78 83 84 84
fact_op              : 54
factor               : 53 54 54
func_call            : 28 40
func_call_param      : 66 69 87
func_declaration     : 3
func_type            : 11
if_stmnt             : 25
main                 : 2 3
matrix               : 73
move_func            : 23
move_type            : 87
multiple_fc_param    : 67
multiple_parameters  : 17
multiple_var         : 4 6
multiple_vars        : 30 70
parameter            : 11 19
pen_func             : 22
program              : 0
quads                : 37 54
quads1               : 52
quads2               : 48
quads3               : 84
read                 : 27
rel_op               : 48 84
stmnt                : 11 21 22 23 24 25 26 27 28 29 79 81 82 94
term_op              : 52 55
termino              : 51 52 52
var_assignation      : 29
var_cte              : 55 56
var_declaration      : 3
var_declaration_func : 21
var_type             : 4 17 30
variable             : 44 70 77
while_stmnt          : 24
write                : 26


state 0

    (0) S' -> . program
    (1) program -> . DRAWING ID declaration
    DRAWING         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .


state 2

    (1) program -> DRAWING . ID declaration
    ID              shift and go to state 3


state 3

    (1) program -> DRAWING ID . declaration
    (2) declaration -> . main
    (3) declaration -> . var_declaration func_declaration main
    (94) main -> . MAIN stmnt END
    (4) var_declaration -> . var_type ID multiple_var
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    MAIN            shift and go to state 7
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11

    declaration                    shift and go to state 4
    main                           shift and go to state 5
    var_declaration                shift and go to state 6
    var_type                       shift and go to state 8

state 4

    (1) program -> DRAWING ID declaration .
    $end            reduce using rule 1 (program -> DRAWING ID declaration .)


state 5

    (2) declaration -> main .
    $end            reduce using rule 2 (declaration -> main .)


state 6

    (3) declaration -> var_declaration . func_declaration main
    (10) func_declaration -> . empty
    (11) func_declaration -> . func_type FUNC ID OPEN_PTH parameter CLOSE_PTH stmnt END
    (95) empty -> .
    (12) func_type -> . BOOL
    (13) func_type -> . WORD
    (14) func_type -> . NUMBER
    (15) func_type -> . VOID
    MAIN            reduce using rule 95 (empty -> .)
    BOOL            shift and go to state 15
    WORD            shift and go to state 16
    NUMBER          shift and go to state 17
    VOID            shift and go to state 18

    func_declaration               shift and go to state 12
    empty                          shift and go to state 13
    func_type                      shift and go to state 14

state 7

    (94) main -> MAIN . stmnt END
    (20) stmnt -> . empty
    (21) stmnt -> . var_declaration_func stmnt
    (22) stmnt -> . pen_func stmnt
    (23) stmnt -> . move_func stmnt
    (24) stmnt -> . while_stmnt stmnt
    (25) stmnt -> . if_stmnt stmnt
    (26) stmnt -> . write stmnt
    (27) stmnt -> . read stmnt
    (28) stmnt -> . func_call stmnt
    (29) stmnt -> . var_assignation stmnt
    (95) empty -> .
    (30) var_declaration_func -> . var_type ID multiple_vars
    (92) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (93) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (87) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (82) while_stmnt -> . WHILE con_expression stmnt END
    (79) if_stmnt -> . IF con_expression stmnt else_stmnt
    (78) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (70) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (66) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (37) var_assignation -> . ID a1 assign expression quads
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (88) move_type -> . CENTER
    (89) move_type -> . FORWARD
    (90) move_type -> . RIGHT
    (91) move_type -> . LEFT
    END             reduce using rule 95 (empty -> .)
    PEN_DOWN        shift and go to state 32
    PEN_UP          shift and go to state 33
    WHILE           shift and go to state 35
    IF              shift and go to state 36
    WRITE           shift and go to state 37
    READ            shift and go to state 38
    ID              shift and go to state 31
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11
    CENTER          shift and go to state 39
    FORWARD         shift and go to state 40
    RIGHT           shift and go to state 41
    LEFT            shift and go to state 42

    stmnt                          shift and go to state 19
    empty                          shift and go to state 20
    var_declaration_func           shift and go to state 21
    pen_func                       shift and go to state 22
    move_func                      shift and go to state 23
    while_stmnt                    shift and go to state 24
    if_stmnt                       shift and go to state 25
    write                          shift and go to state 26
    read                           shift and go to state 27
    func_call                      shift and go to state 28
    var_assignation                shift and go to state 29
    var_type                       shift and go to state 30
    move_type                      shift and go to state 34

state 8

    (4) var_declaration -> var_type . ID multiple_var
    ID              shift and go to state 43


state 9

    (7) var_type -> BOOL .
    ID              reduce using rule 7 (var_type -> BOOL .)


state 10

    (8) var_type -> WORD .
    ID              reduce using rule 8 (var_type -> WORD .)


state 11

    (9) var_type -> NUMBER .
    ID              reduce using rule 9 (var_type -> NUMBER .)


state 12

    (3) declaration -> var_declaration func_declaration . main
    (94) main -> . MAIN stmnt END
    MAIN            shift and go to state 7

    main                           shift and go to state 44

state 13

    (10) func_declaration -> empty .
    MAIN            reduce using rule 10 (func_declaration -> empty .)


state 14

    (11) func_declaration -> func_type . FUNC ID OPEN_PTH parameter CLOSE_PTH stmnt END
    FUNC            shift and go to state 45


state 15

    (12) func_type -> BOOL .
    FUNC            reduce using rule 12 (func_type -> BOOL .)


state 16

    (13) func_type -> WORD .
    FUNC            reduce using rule 13 (func_type -> WORD .)


state 17

    (14) func_type -> NUMBER .
    FUNC            reduce using rule 14 (func_type -> NUMBER .)


state 18

    (15) func_type -> VOID .
    FUNC            reduce using rule 15 (func_type -> VOID .)


state 19

    (94) main -> MAIN stmnt . END
    END             shift and go to state 46


state 20

    (20) stmnt -> empty .
    END             reduce using rule 20 (stmnt -> empty .)
    ELSE            reduce using rule 20 (stmnt -> empty .)


state 21

    (21) stmnt -> var_declaration_func . stmnt
    (20) stmnt -> . empty
    (21) stmnt -> . var_declaration_func stmnt
    (22) stmnt -> . pen_func stmnt
    (23) stmnt -> . move_func stmnt
    (24) stmnt -> . while_stmnt stmnt
    (25) stmnt -> . if_stmnt stmnt
    (26) stmnt -> . write stmnt
    (27) stmnt -> . read stmnt
    (28) stmnt -> . func_call stmnt
    (29) stmnt -> . var_assignation stmnt
    (95) empty -> .
    (30) var_declaration_func -> . var_type ID multiple_vars
    (92) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (93) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (87) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (82) while_stmnt -> . WHILE con_expression stmnt END
    (79) if_stmnt -> . IF con_expression stmnt else_stmnt
    (78) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (70) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (66) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (37) var_assignation -> . ID a1 assign expression quads
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (88) move_type -> . CENTER
    (89) move_type -> . FORWARD
    (90) move_type -> . RIGHT
    (91) move_type -> . LEFT
    END             reduce using rule 95 (empty -> .)
    ELSE            reduce using rule 95 (empty -> .)
    PEN_DOWN        shift and go to state 32
    PEN_UP          shift and go to state 33
    WHILE           shift and go to state 35
    IF              shift and go to state 36
    WRITE           shift and go to state 37
    READ            shift and go to state 38
    ID              shift and go to state 31
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11
    CENTER          shift and go to state 39
    FORWARD         shift and go to state 40
    RIGHT           shift and go to state 41
    LEFT            shift and go to state 42

    var_declaration_func           shift and go to state 21
    stmnt                          shift and go to state 47
    empty                          shift and go to state 20
    pen_func                       shift and go to state 22
    move_func                      shift and go to state 23
    while_stmnt                    shift and go to state 24
    if_stmnt                       shift and go to state 25
    write                          shift and go to state 26
    read                           shift and go to state 27
    func_call                      shift and go to state 28
    var_assignation                shift and go to state 29
    var_type                       shift and go to state 30
    move_type                      shift and go to state 34

state 22

    (22) stmnt -> pen_func . stmnt
    (20) stmnt -> . empty
    (21) stmnt -> . var_declaration_func stmnt
    (22) stmnt -> . pen_func stmnt
    (23) stmnt -> . move_func stmnt
    (24) stmnt -> . while_stmnt stmnt
    (25) stmnt -> . if_stmnt stmnt
    (26) stmnt -> . write stmnt
    (27) stmnt -> . read stmnt
    (28) stmnt -> . func_call stmnt
    (29) stmnt -> . var_assignation stmnt
    (95) empty -> .
    (30) var_declaration_func -> . var_type ID multiple_vars
    (92) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (93) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (87) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (82) while_stmnt -> . WHILE con_expression stmnt END
    (79) if_stmnt -> . IF con_expression stmnt else_stmnt
    (78) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (70) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (66) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (37) var_assignation -> . ID a1 assign expression quads
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (88) move_type -> . CENTER
    (89) move_type -> . FORWARD
    (90) move_type -> . RIGHT
    (91) move_type -> . LEFT
    END             reduce using rule 95 (empty -> .)
    ELSE            reduce using rule 95 (empty -> .)
    PEN_DOWN        shift and go to state 32
    PEN_UP          shift and go to state 33
    WHILE           shift and go to state 35
    IF              shift and go to state 36
    WRITE           shift and go to state 37
    READ            shift and go to state 38
    ID              shift and go to state 31
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11
    CENTER          shift and go to state 39
    FORWARD         shift and go to state 40
    RIGHT           shift and go to state 41
    LEFT            shift and go to state 42

    pen_func                       shift and go to state 22
    stmnt                          shift and go to state 48
    empty                          shift and go to state 20
    var_declaration_func           shift and go to state 21
    move_func                      shift and go to state 23
    while_stmnt                    shift and go to state 24
    if_stmnt                       shift and go to state 25
    write                          shift and go to state 26
    read                           shift and go to state 27
    func_call                      shift and go to state 28
    var_assignation                shift and go to state 29
    var_type                       shift and go to state 30
    move_type                      shift and go to state 34

state 23

    (23) stmnt -> move_func . stmnt
    (20) stmnt -> . empty
    (21) stmnt -> . var_declaration_func stmnt
    (22) stmnt -> . pen_func stmnt
    (23) stmnt -> . move_func stmnt
    (24) stmnt -> . while_stmnt stmnt
    (25) stmnt -> . if_stmnt stmnt
    (26) stmnt -> . write stmnt
    (27) stmnt -> . read stmnt
    (28) stmnt -> . func_call stmnt
    (29) stmnt -> . var_assignation stmnt
    (95) empty -> .
    (30) var_declaration_func -> . var_type ID multiple_vars
    (92) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (93) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (87) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (82) while_stmnt -> . WHILE con_expression stmnt END
    (79) if_stmnt -> . IF con_expression stmnt else_stmnt
    (78) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (70) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (66) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (37) var_assignation -> . ID a1 assign expression quads
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (88) move_type -> . CENTER
    (89) move_type -> . FORWARD
    (90) move_type -> . RIGHT
    (91) move_type -> . LEFT
    END             reduce using rule 95 (empty -> .)
    ELSE            reduce using rule 95 (empty -> .)
    PEN_DOWN        shift and go to state 32
    PEN_UP          shift and go to state 33
    WHILE           shift and go to state 35
    IF              shift and go to state 36
    WRITE           shift and go to state 37
    READ            shift and go to state 38
    ID              shift and go to state 31
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11
    CENTER          shift and go to state 39
    FORWARD         shift and go to state 40
    RIGHT           shift and go to state 41
    LEFT            shift and go to state 42

    move_func                      shift and go to state 23
    stmnt                          shift and go to state 49
    empty                          shift and go to state 20
    var_declaration_func           shift and go to state 21
    pen_func                       shift and go to state 22
    while_stmnt                    shift and go to state 24
    if_stmnt                       shift and go to state 25
    write                          shift and go to state 26
    read                           shift and go to state 27
    func_call                      shift and go to state 28
    var_assignation                shift and go to state 29
    var_type                       shift and go to state 30
    move_type                      shift and go to state 34

state 24

    (24) stmnt -> while_stmnt . stmnt
    (20) stmnt -> . empty
    (21) stmnt -> . var_declaration_func stmnt
    (22) stmnt -> . pen_func stmnt
    (23) stmnt -> . move_func stmnt
    (24) stmnt -> . while_stmnt stmnt
    (25) stmnt -> . if_stmnt stmnt
    (26) stmnt -> . write stmnt
    (27) stmnt -> . read stmnt
    (28) stmnt -> . func_call stmnt
    (29) stmnt -> . var_assignation stmnt
    (95) empty -> .
    (30) var_declaration_func -> . var_type ID multiple_vars
    (92) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (93) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (87) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (82) while_stmnt -> . WHILE con_expression stmnt END
    (79) if_stmnt -> . IF con_expression stmnt else_stmnt
    (78) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (70) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (66) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (37) var_assignation -> . ID a1 assign expression quads
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (88) move_type -> . CENTER
    (89) move_type -> . FORWARD
    (90) move_type -> . RIGHT
    (91) move_type -> . LEFT
    END             reduce using rule 95 (empty -> .)
    ELSE            reduce using rule 95 (empty -> .)
    PEN_DOWN        shift and go to state 32
    PEN_UP          shift and go to state 33
    WHILE           shift and go to state 35
    IF              shift and go to state 36
    WRITE           shift and go to state 37
    READ            shift and go to state 38
    ID              shift and go to state 31
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11
    CENTER          shift and go to state 39
    FORWARD         shift and go to state 40
    RIGHT           shift and go to state 41
    LEFT            shift and go to state 42

    while_stmnt                    shift and go to state 24
    stmnt                          shift and go to state 50
    empty                          shift and go to state 20
    var_declaration_func           shift and go to state 21
    pen_func                       shift and go to state 22
    move_func                      shift and go to state 23
    if_stmnt                       shift and go to state 25
    write                          shift and go to state 26
    read                           shift and go to state 27
    func_call                      shift and go to state 28
    var_assignation                shift and go to state 29
    var_type                       shift and go to state 30
    move_type                      shift and go to state 34

state 25

    (25) stmnt -> if_stmnt . stmnt
    (20) stmnt -> . empty
    (21) stmnt -> . var_declaration_func stmnt
    (22) stmnt -> . pen_func stmnt
    (23) stmnt -> . move_func stmnt
    (24) stmnt -> . while_stmnt stmnt
    (25) stmnt -> . if_stmnt stmnt
    (26) stmnt -> . write stmnt
    (27) stmnt -> . read stmnt
    (28) stmnt -> . func_call stmnt
    (29) stmnt -> . var_assignation stmnt
    (95) empty -> .
    (30) var_declaration_func -> . var_type ID multiple_vars
    (92) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (93) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (87) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (82) while_stmnt -> . WHILE con_expression stmnt END
    (79) if_stmnt -> . IF con_expression stmnt else_stmnt
    (78) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (70) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (66) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (37) var_assignation -> . ID a1 assign expression quads
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (88) move_type -> . CENTER
    (89) move_type -> . FORWARD
    (90) move_type -> . RIGHT
    (91) move_type -> . LEFT
    END             reduce using rule 95 (empty -> .)
    ELSE            reduce using rule 95 (empty -> .)
    PEN_DOWN        shift and go to state 32
    PEN_UP          shift and go to state 33
    WHILE           shift and go to state 35
    IF              shift and go to state 36
    WRITE           shift and go to state 37
    READ            shift and go to state 38
    ID              shift and go to state 31
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11
    CENTER          shift and go to state 39
    FORWARD         shift and go to state 40
    RIGHT           shift and go to state 41
    LEFT            shift and go to state 42

    if_stmnt                       shift and go to state 25
    stmnt                          shift and go to state 51
    empty                          shift and go to state 20
    var_declaration_func           shift and go to state 21
    pen_func                       shift and go to state 22
    move_func                      shift and go to state 23
    while_stmnt                    shift and go to state 24
    write                          shift and go to state 26
    read                           shift and go to state 27
    func_call                      shift and go to state 28
    var_assignation                shift and go to state 29
    var_type                       shift and go to state 30
    move_type                      shift and go to state 34

state 26

    (26) stmnt -> write . stmnt
    (20) stmnt -> . empty
    (21) stmnt -> . var_declaration_func stmnt
    (22) stmnt -> . pen_func stmnt
    (23) stmnt -> . move_func stmnt
    (24) stmnt -> . while_stmnt stmnt
    (25) stmnt -> . if_stmnt stmnt
    (26) stmnt -> . write stmnt
    (27) stmnt -> . read stmnt
    (28) stmnt -> . func_call stmnt
    (29) stmnt -> . var_assignation stmnt
    (95) empty -> .
    (30) var_declaration_func -> . var_type ID multiple_vars
    (92) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (93) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (87) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (82) while_stmnt -> . WHILE con_expression stmnt END
    (79) if_stmnt -> . IF con_expression stmnt else_stmnt
    (78) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (70) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (66) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (37) var_assignation -> . ID a1 assign expression quads
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (88) move_type -> . CENTER
    (89) move_type -> . FORWARD
    (90) move_type -> . RIGHT
    (91) move_type -> . LEFT
    END             reduce using rule 95 (empty -> .)
    ELSE            reduce using rule 95 (empty -> .)
    PEN_DOWN        shift and go to state 32
    PEN_UP          shift and go to state 33
    WHILE           shift and go to state 35
    IF              shift and go to state 36
    WRITE           shift and go to state 37
    READ            shift and go to state 38
    ID              shift and go to state 31
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11
    CENTER          shift and go to state 39
    FORWARD         shift and go to state 40
    RIGHT           shift and go to state 41
    LEFT            shift and go to state 42

    write                          shift and go to state 26
    stmnt                          shift and go to state 52
    empty                          shift and go to state 20
    var_declaration_func           shift and go to state 21
    pen_func                       shift and go to state 22
    move_func                      shift and go to state 23
    while_stmnt                    shift and go to state 24
    if_stmnt                       shift and go to state 25
    read                           shift and go to state 27
    func_call                      shift and go to state 28
    var_assignation                shift and go to state 29
    var_type                       shift and go to state 30
    move_type                      shift and go to state 34

state 27

    (27) stmnt -> read . stmnt
    (20) stmnt -> . empty
    (21) stmnt -> . var_declaration_func stmnt
    (22) stmnt -> . pen_func stmnt
    (23) stmnt -> . move_func stmnt
    (24) stmnt -> . while_stmnt stmnt
    (25) stmnt -> . if_stmnt stmnt
    (26) stmnt -> . write stmnt
    (27) stmnt -> . read stmnt
    (28) stmnt -> . func_call stmnt
    (29) stmnt -> . var_assignation stmnt
    (95) empty -> .
    (30) var_declaration_func -> . var_type ID multiple_vars
    (92) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (93) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (87) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (82) while_stmnt -> . WHILE con_expression stmnt END
    (79) if_stmnt -> . IF con_expression stmnt else_stmnt
    (78) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (70) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (66) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (37) var_assignation -> . ID a1 assign expression quads
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (88) move_type -> . CENTER
    (89) move_type -> . FORWARD
    (90) move_type -> . RIGHT
    (91) move_type -> . LEFT
    END             reduce using rule 95 (empty -> .)
    ELSE            reduce using rule 95 (empty -> .)
    PEN_DOWN        shift and go to state 32
    PEN_UP          shift and go to state 33
    WHILE           shift and go to state 35
    IF              shift and go to state 36
    WRITE           shift and go to state 37
    READ            shift and go to state 38
    ID              shift and go to state 31
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11
    CENTER          shift and go to state 39
    FORWARD         shift and go to state 40
    RIGHT           shift and go to state 41
    LEFT            shift and go to state 42

    read                           shift and go to state 27
    stmnt                          shift and go to state 53
    empty                          shift and go to state 20
    var_declaration_func           shift and go to state 21
    pen_func                       shift and go to state 22
    move_func                      shift and go to state 23
    while_stmnt                    shift and go to state 24
    if_stmnt                       shift and go to state 25
    write                          shift and go to state 26
    func_call                      shift and go to state 28
    var_assignation                shift and go to state 29
    var_type                       shift and go to state 30
    move_type                      shift and go to state 34

state 28

    (28) stmnt -> func_call . stmnt
    (20) stmnt -> . empty
    (21) stmnt -> . var_declaration_func stmnt
    (22) stmnt -> . pen_func stmnt
    (23) stmnt -> . move_func stmnt
    (24) stmnt -> . while_stmnt stmnt
    (25) stmnt -> . if_stmnt stmnt
    (26) stmnt -> . write stmnt
    (27) stmnt -> . read stmnt
    (28) stmnt -> . func_call stmnt
    (29) stmnt -> . var_assignation stmnt
    (95) empty -> .
    (30) var_declaration_func -> . var_type ID multiple_vars
    (92) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (93) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (87) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (82) while_stmnt -> . WHILE con_expression stmnt END
    (79) if_stmnt -> . IF con_expression stmnt else_stmnt
    (78) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (70) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (66) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (37) var_assignation -> . ID a1 assign expression quads
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (88) move_type -> . CENTER
    (89) move_type -> . FORWARD
    (90) move_type -> . RIGHT
    (91) move_type -> . LEFT
    END             reduce using rule 95 (empty -> .)
    ELSE            reduce using rule 95 (empty -> .)
    PEN_DOWN        shift and go to state 32
    PEN_UP          shift and go to state 33
    WHILE           shift and go to state 35
    IF              shift and go to state 36
    WRITE           shift and go to state 37
    READ            shift and go to state 38
    ID              shift and go to state 31
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11
    CENTER          shift and go to state 39
    FORWARD         shift and go to state 40
    RIGHT           shift and go to state 41
    LEFT            shift and go to state 42

    func_call                      shift and go to state 28
    stmnt                          shift and go to state 54
    empty                          shift and go to state 20
    var_declaration_func           shift and go to state 21
    pen_func                       shift and go to state 22
    move_func                      shift and go to state 23
    while_stmnt                    shift and go to state 24
    if_stmnt                       shift and go to state 25
    write                          shift and go to state 26
    read                           shift and go to state 27
    var_assignation                shift and go to state 29
    var_type                       shift and go to state 30
    move_type                      shift and go to state 34

state 29

    (29) stmnt -> var_assignation . stmnt
    (20) stmnt -> . empty
    (21) stmnt -> . var_declaration_func stmnt
    (22) stmnt -> . pen_func stmnt
    (23) stmnt -> . move_func stmnt
    (24) stmnt -> . while_stmnt stmnt
    (25) stmnt -> . if_stmnt stmnt
    (26) stmnt -> . write stmnt
    (27) stmnt -> . read stmnt
    (28) stmnt -> . func_call stmnt
    (29) stmnt -> . var_assignation stmnt
    (95) empty -> .
    (30) var_declaration_func -> . var_type ID multiple_vars
    (92) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (93) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (87) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (82) while_stmnt -> . WHILE con_expression stmnt END
    (79) if_stmnt -> . IF con_expression stmnt else_stmnt
    (78) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (70) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (66) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (37) var_assignation -> . ID a1 assign expression quads
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (88) move_type -> . CENTER
    (89) move_type -> . FORWARD
    (90) move_type -> . RIGHT
    (91) move_type -> . LEFT
    END             reduce using rule 95 (empty -> .)
    ELSE            reduce using rule 95 (empty -> .)
    PEN_DOWN        shift and go to state 32
    PEN_UP          shift and go to state 33
    WHILE           shift and go to state 35
    IF              shift and go to state 36
    WRITE           shift and go to state 37
    READ            shift and go to state 38
    ID              shift and go to state 31
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11
    CENTER          shift and go to state 39
    FORWARD         shift and go to state 40
    RIGHT           shift and go to state 41
    LEFT            shift and go to state 42

    var_assignation                shift and go to state 29
    stmnt                          shift and go to state 55
    empty                          shift and go to state 20
    var_declaration_func           shift and go to state 21
    pen_func                       shift and go to state 22
    move_func                      shift and go to state 23
    while_stmnt                    shift and go to state 24
    if_stmnt                       shift and go to state 25
    write                          shift and go to state 26
    read                           shift and go to state 27
    func_call                      shift and go to state 28
    var_type                       shift and go to state 30
    move_type                      shift and go to state 34

state 30

    (30) var_declaration_func -> var_type . ID multiple_vars
    ID              shift and go to state 56


state 31

    (66) func_call -> ID . OPEN_PTH func_call_param CLOSE_PTH
    (37) var_assignation -> ID . a1 assign expression quads
    (39) a1 -> .
    OPEN_PTH        shift and go to state 57
    ASSIGN          reduce using rule 39 (a1 -> .)

    a1                             shift and go to state 58

state 32

    (92) pen_func -> PEN_DOWN . OPEN_PTH CLOSE_PTH
    OPEN_PTH        shift and go to state 59


state 33

    (93) pen_func -> PEN_UP . OPEN_PTH CLOSE_PTH
    OPEN_PTH        shift and go to state 60


state 34

    (87) move_func -> move_type . OPEN_PTH func_call_param CLOSE_PTH
    OPEN_PTH        shift and go to state 61


state 35

    (82) while_stmnt -> WHILE . con_expression stmnt END
    (83) con_expression -> . expression
    (84) con_expression -> . expression rel_op e4 expression quads3
    (47) expression -> . exp
    (48) expression -> . exp e3 rel_op exp e3 quads2
    (51) exp -> . termino
    (52) exp -> . termino e1 term_op e2 termino e1 quads1
    (53) termino -> . factor
    (54) termino -> . factor e1 fact_op factor e1 quads
    (55) factor -> . term_op var_cte
    (56) factor -> . var_cte
    (57) factor -> . OPEN_PTH expression CLOSE_PTH
    (58) term_op -> . SUB
    (59) term_op -> . SUM
    (40) var_cte -> . func_call
    (41) var_cte -> . cte_bool
    (42) var_cte -> . CTE_STR
    (43) var_cte -> . CTE_NUM
    (44) var_cte -> . variable
    (66) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (45) cte_bool -> . FALSE
    (46) cte_bool -> . TRUE
    (71) variable -> . ID array
    OPEN_PTH        shift and go to state 69
    SUB             shift and go to state 70
    SUM             shift and go to state 71
    CTE_STR         shift and go to state 74
    CTE_NUM         shift and go to state 75
    ID              shift and go to state 77
    FALSE           shift and go to state 78
    TRUE            shift and go to state 79

    con_expression                 shift and go to state 62
    expression                     shift and go to state 63
    exp                            shift and go to state 64
    termino                        shift and go to state 65
    term_op                        shift and go to state 66
    factor                         shift and go to state 67
    var_cte                        shift and go to state 68
    func_call                      shift and go to state 72
    cte_bool                       shift and go to state 73
    variable                       shift and go to state 76

state 36

    (79) if_stmnt -> IF . con_expression stmnt else_stmnt
    (83) con_expression -> . expression
    (84) con_expression -> . expression rel_op e4 expression quads3
    (47) expression -> . exp
    (48) expression -> . exp e3 rel_op exp e3 quads2
    (51) exp -> . termino
    (52) exp -> . termino e1 term_op e2 termino e1 quads1
    (53) termino -> . factor
    (54) termino -> . factor e1 fact_op factor e1 quads
    (55) factor -> . term_op var_cte
    (56) factor -> . var_cte
    (57) factor -> . OPEN_PTH expression CLOSE_PTH
    (58) term_op -> . SUB
    (59) term_op -> . SUM
    (40) var_cte -> . func_call
    (41) var_cte -> . cte_bool
    (42) var_cte -> . CTE_STR
    (43) var_cte -> . CTE_NUM
    (44) var_cte -> . variable
    (66) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (45) cte_bool -> . FALSE
    (46) cte_bool -> . TRUE
    (71) variable -> . ID array
    OPEN_PTH        shift and go to state 69
    SUB             shift and go to state 70
    SUM             shift and go to state 71
    CTE_STR         shift and go to state 74
    CTE_NUM         shift and go to state 75
    ID              shift and go to state 77
    FALSE           shift and go to state 78
    TRUE            shift and go to state 79

    con_expression                 shift and go to state 80
    expression                     shift and go to state 63
    exp                            shift and go to state 64
    termino                        shift and go to state 65
    term_op                        shift and go to state 66
    factor                         shift and go to state 67
    var_cte                        shift and go to state 68
    func_call                      shift and go to state 72
    cte_bool                       shift and go to state 73
    variable                       shift and go to state 76

state 37

    (78) write -> WRITE . OPEN_PTH expression CLOSE_PTH
    OPEN_PTH        shift and go to state 81


state 38

    (70) read -> READ . OPEN_PTH variable multiple_vars CLOSE_PTH
    OPEN_PTH        shift and go to state 82


state 39

    (88) move_type -> CENTER .
    OPEN_PTH        reduce using rule 88 (move_type -> CENTER .)


state 40

    (89) move_type -> FORWARD .
    OPEN_PTH        reduce using rule 89 (move_type -> FORWARD .)


state 41

    (90) move_type -> RIGHT .
    OPEN_PTH        reduce using rule 90 (move_type -> RIGHT .)


state 42

    (91) move_type -> LEFT .
    OPEN_PTH        reduce using rule 91 (move_type -> LEFT .)


state 43

    (4) var_declaration -> var_type ID . multiple_var
    (5) multiple_var -> . empty
    (6) multiple_var -> . COMMA ID multiple_var
    (95) empty -> .
    COMMA           shift and go to state 85
    BOOL            reduce using rule 95 (empty -> .)
    WORD            reduce using rule 95 (empty -> .)
    NUMBER          reduce using rule 95 (empty -> .)
    VOID            reduce using rule 95 (empty -> .)
    MAIN            reduce using rule 95 (empty -> .)

    multiple_var                   shift and go to state 83
    empty                          shift and go to state 84

state 44

    (3) declaration -> var_declaration func_declaration main .
    $end            reduce using rule 3 (declaration -> var_declaration func_declaration main .)


state 45

    (11) func_declaration -> func_type FUNC . ID OPEN_PTH parameter CLOSE_PTH stmnt END
    ID              shift and go to state 86


state 46

    (94) main -> MAIN stmnt END .
    $end            reduce using rule 94 (main -> MAIN stmnt END .)


state 47

    (21) stmnt -> var_declaration_func stmnt .
    END             reduce using rule 21 (stmnt -> var_declaration_func stmnt .)
    ELSE            reduce using rule 21 (stmnt -> var_declaration_func stmnt .)


state 48

    (22) stmnt -> pen_func stmnt .
    END             reduce using rule 22 (stmnt -> pen_func stmnt .)
    ELSE            reduce using rule 22 (stmnt -> pen_func stmnt .)


state 49

    (23) stmnt -> move_func stmnt .
    END             reduce using rule 23 (stmnt -> move_func stmnt .)
    ELSE            reduce using rule 23 (stmnt -> move_func stmnt .)


state 50

    (24) stmnt -> while_stmnt stmnt .
    END             reduce using rule 24 (stmnt -> while_stmnt stmnt .)
    ELSE            reduce using rule 24 (stmnt -> while_stmnt stmnt .)


state 51

    (25) stmnt -> if_stmnt stmnt .
    END             reduce using rule 25 (stmnt -> if_stmnt stmnt .)
    ELSE            reduce using rule 25 (stmnt -> if_stmnt stmnt .)


state 52

    (26) stmnt -> write stmnt .
    END             reduce using rule 26 (stmnt -> write stmnt .)
    ELSE            reduce using rule 26 (stmnt -> write stmnt .)


state 53

    (27) stmnt -> read stmnt .
    END             reduce using rule 27 (stmnt -> read stmnt .)
    ELSE            reduce using rule 27 (stmnt -> read stmnt .)


state 54

    (28) stmnt -> func_call stmnt .
    END             reduce using rule 28 (stmnt -> func_call stmnt .)
    ELSE            reduce using rule 28 (stmnt -> func_call stmnt .)


state 55

    (29) stmnt -> var_assignation stmnt .
    END             reduce using rule 29 (stmnt -> var_assignation stmnt .)
    ELSE            reduce using rule 29 (stmnt -> var_assignation stmnt .)


state 56

    (30) var_declaration_func -> var_type ID . multiple_vars
    (76) multiple_vars -> . empty
    (77) multiple_vars -> . COMMA variable
    (95) empty -> .
    COMMA           shift and go to state 89
    PEN_DOWN        reduce using rule 95 (empty -> .)
    PEN_UP          reduce using rule 95 (empty -> .)
    WHILE           reduce using rule 95 (empty -> .)
    IF              reduce using rule 95 (empty -> .)
    WRITE           reduce using rule 95 (empty -> .)
    READ            reduce using rule 95 (empty -> .)
    ID              reduce using rule 95 (empty -> .)
    BOOL            reduce using rule 95 (empty -> .)
    WORD            reduce using rule 95 (empty -> .)
    NUMBER          reduce using rule 95 (empty -> .)
    CENTER          reduce using rule 95 (empty -> .)
    FORWARD         reduce using rule 95 (empty -> .)
    RIGHT           reduce using rule 95 (empty -> .)
    LEFT            reduce using rule 95 (empty -> .)
    END             reduce using rule 95 (empty -> .)
    ELSE            reduce using rule 95 (empty -> .)

    multiple_vars                  shift and go to state 87
    empty                          shift and go to state 88

state 57

    (66) func_call -> ID OPEN_PTH . func_call_param CLOSE_PTH
    (67) func_call_param -> . expression multiple_fc_param
    (47) expression -> . exp
    (48) expression -> . exp e3 rel_op exp e3 quads2
    (51) exp -> . termino
    (52) exp -> . termino e1 term_op e2 termino e1 quads1
    (53) termino -> . factor
    (54) termino -> . factor e1 fact_op factor e1 quads
    (55) factor -> . term_op var_cte
    (56) factor -> . var_cte
    (57) factor -> . OPEN_PTH expression CLOSE_PTH
    (58) term_op -> . SUB
    (59) term_op -> . SUM
    (40) var_cte -> . func_call
    (41) var_cte -> . cte_bool
    (42) var_cte -> . CTE_STR
    (43) var_cte -> . CTE_NUM
    (44) var_cte -> . variable
    (66) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (45) cte_bool -> . FALSE
    (46) cte_bool -> . TRUE
    (71) variable -> . ID array
    OPEN_PTH        shift and go to state 69
    SUB             shift and go to state 70
    SUM             shift and go to state 71
    CTE_STR         shift and go to state 74
    CTE_NUM         shift and go to state 75
    ID              shift and go to state 77
    FALSE           shift and go to state 78
    TRUE            shift and go to state 79

    func_call_param                shift and go to state 90
    expression                     shift and go to state 91
    exp                            shift and go to state 64
    termino                        shift and go to state 65
    term_op                        shift and go to state 66
    factor                         shift and go to state 67
    var_cte                        shift and go to state 68
    func_call                      shift and go to state 72
    cte_bool                       shift and go to state 73
    variable                       shift and go to state 76

state 58

    (37) var_assignation -> ID a1 . assign expression quads
    (38) assign -> . ASSIGN
    ASSIGN          shift and go to state 93

    assign                         shift and go to state 92

state 59

    (92) pen_func -> PEN_DOWN OPEN_PTH . CLOSE_PTH
    CLOSE_PTH       shift and go to state 94


state 60

    (93) pen_func -> PEN_UP OPEN_PTH . CLOSE_PTH
    CLOSE_PTH       shift and go to state 95


state 61

    (87) move_func -> move_type OPEN_PTH . func_call_param CLOSE_PTH
    (67) func_call_param -> . expression multiple_fc_param
    (47) expression -> . exp
    (48) expression -> . exp e3 rel_op exp e3 quads2
    (51) exp -> . termino
    (52) exp -> . termino e1 term_op e2 termino e1 quads1
    (53) termino -> . factor
    (54) termino -> . factor e1 fact_op factor e1 quads
    (55) factor -> . term_op var_cte
    (56) factor -> . var_cte
    (57) factor -> . OPEN_PTH expression CLOSE_PTH
    (58) term_op -> . SUB
    (59) term_op -> . SUM
    (40) var_cte -> . func_call
    (41) var_cte -> . cte_bool
    (42) var_cte -> . CTE_STR
    (43) var_cte -> . CTE_NUM
    (44) var_cte -> . variable
    (66) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (45) cte_bool -> . FALSE
    (46) cte_bool -> . TRUE
    (71) variable -> . ID array
    OPEN_PTH        shift and go to state 69
    SUB             shift and go to state 70
    SUM             shift and go to state 71
    CTE_STR         shift and go to state 74
    CTE_NUM         shift and go to state 75
    ID              shift and go to state 77
    FALSE           shift and go to state 78
    TRUE            shift and go to state 79

    func_call_param                shift and go to state 96
    expression                     shift and go to state 91
    exp                            shift and go to state 64
    termino                        shift and go to state 65
    term_op                        shift and go to state 66
    factor                         shift and go to state 67
    var_cte                        shift and go to state 68
    func_call                      shift and go to state 72
    cte_bool                       shift and go to state 73
    variable                       shift and go to state 76

state 62

    (82) while_stmnt -> WHILE con_expression . stmnt END
    (20) stmnt -> . empty
    (21) stmnt -> . var_declaration_func stmnt
    (22) stmnt -> . pen_func stmnt
    (23) stmnt -> . move_func stmnt
    (24) stmnt -> . while_stmnt stmnt
    (25) stmnt -> . if_stmnt stmnt
    (26) stmnt -> . write stmnt
    (27) stmnt -> . read stmnt
    (28) stmnt -> . func_call stmnt
    (29) stmnt -> . var_assignation stmnt
    (95) empty -> .
    (30) var_declaration_func -> . var_type ID multiple_vars
    (92) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (93) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (87) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (82) while_stmnt -> . WHILE con_expression stmnt END
    (79) if_stmnt -> . IF con_expression stmnt else_stmnt
    (78) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (70) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (66) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (37) var_assignation -> . ID a1 assign expression quads
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (88) move_type -> . CENTER
    (89) move_type -> . FORWARD
    (90) move_type -> . RIGHT
    (91) move_type -> . LEFT
    END             reduce using rule 95 (empty -> .)
    PEN_DOWN        shift and go to state 32
    PEN_UP          shift and go to state 33
    WHILE           shift and go to state 35
    IF              shift and go to state 36
    WRITE           shift and go to state 37
    READ            shift and go to state 38
    ID              shift and go to state 31
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11
    CENTER          shift and go to state 39
    FORWARD         shift and go to state 40
    RIGHT           shift and go to state 41
    LEFT            shift and go to state 42

    stmnt                          shift and go to state 97
    empty                          shift and go to state 20
    var_declaration_func           shift and go to state 21
    pen_func                       shift and go to state 22
    move_func                      shift and go to state 23
    while_stmnt                    shift and go to state 24
    if_stmnt                       shift and go to state 25
    write                          shift and go to state 26
    read                           shift and go to state 27
    func_call                      shift and go to state 28
    var_assignation                shift and go to state 29
    var_type                       shift and go to state 30
    move_type                      shift and go to state 34

state 63

    (83) con_expression -> expression .
    (84) con_expression -> expression . rel_op e4 expression quads3
    (31) rel_op -> . MORE_OR_EQ_THAN
    (32) rel_op -> . LESS_OR_EQ_THAN
    (33) rel_op -> . DIFFERENT_TO
    (34) rel_op -> . MORE_THAN
    (35) rel_op -> . LESS_THAN
    (36) rel_op -> . EQUAL_TO
    PEN_DOWN        reduce using rule 83 (con_expression -> expression .)
    PEN_UP          reduce using rule 83 (con_expression -> expression .)
    WHILE           reduce using rule 83 (con_expression -> expression .)
    IF              reduce using rule 83 (con_expression -> expression .)
    WRITE           reduce using rule 83 (con_expression -> expression .)
    READ            reduce using rule 83 (con_expression -> expression .)
    ID              reduce using rule 83 (con_expression -> expression .)
    BOOL            reduce using rule 83 (con_expression -> expression .)
    WORD            reduce using rule 83 (con_expression -> expression .)
    NUMBER          reduce using rule 83 (con_expression -> expression .)
    CENTER          reduce using rule 83 (con_expression -> expression .)
    FORWARD         reduce using rule 83 (con_expression -> expression .)
    RIGHT           reduce using rule 83 (con_expression -> expression .)
    LEFT            reduce using rule 83 (con_expression -> expression .)
    END             reduce using rule 83 (con_expression -> expression .)
    ELSE            reduce using rule 83 (con_expression -> expression .)
    MORE_OR_EQ_THAN shift and go to state 99
    LESS_OR_EQ_THAN shift and go to state 100
    DIFFERENT_TO    shift and go to state 101
    MORE_THAN       shift and go to state 102
    LESS_THAN       shift and go to state 103
    EQUAL_TO        shift and go to state 104

    rel_op                         shift and go to state 98

state 64

    (47) expression -> exp .
    (48) expression -> exp . e3 rel_op exp e3 quads2
    (50) e3 -> .
  ! reduce/reduce conflict for MORE_OR_EQ_THAN resolved using rule 47 (expression -> exp .)
  ! reduce/reduce conflict for LESS_OR_EQ_THAN resolved using rule 47 (expression -> exp .)
  ! reduce/reduce conflict for DIFFERENT_TO resolved using rule 47 (expression -> exp .)
  ! reduce/reduce conflict for MORE_THAN resolved using rule 47 (expression -> exp .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 47 (expression -> exp .)
  ! reduce/reduce conflict for EQUAL_TO resolved using rule 47 (expression -> exp .)
    MORE_OR_EQ_THAN reduce using rule 47 (expression -> exp .)
    LESS_OR_EQ_THAN reduce using rule 47 (expression -> exp .)
    DIFFERENT_TO    reduce using rule 47 (expression -> exp .)
    MORE_THAN       reduce using rule 47 (expression -> exp .)
    LESS_THAN       reduce using rule 47 (expression -> exp .)
    EQUAL_TO        reduce using rule 47 (expression -> exp .)
    PEN_DOWN        reduce using rule 47 (expression -> exp .)
    PEN_UP          reduce using rule 47 (expression -> exp .)
    WHILE           reduce using rule 47 (expression -> exp .)
    IF              reduce using rule 47 (expression -> exp .)
    WRITE           reduce using rule 47 (expression -> exp .)
    READ            reduce using rule 47 (expression -> exp .)
    ID              reduce using rule 47 (expression -> exp .)
    BOOL            reduce using rule 47 (expression -> exp .)
    WORD            reduce using rule 47 (expression -> exp .)
    NUMBER          reduce using rule 47 (expression -> exp .)
    CENTER          reduce using rule 47 (expression -> exp .)
    FORWARD         reduce using rule 47 (expression -> exp .)
    RIGHT           reduce using rule 47 (expression -> exp .)
    LEFT            reduce using rule 47 (expression -> exp .)
    END             reduce using rule 47 (expression -> exp .)
    ELSE            reduce using rule 47 (expression -> exp .)
    COMMA           reduce using rule 47 (expression -> exp .)
    CLOSE_PTH       reduce using rule 47 (expression -> exp .)
    CLOSE_SQR       reduce using rule 47 (expression -> exp .)

    e3                             shift and go to state 105

state 65

    (51) exp -> termino .
    (52) exp -> termino . e1 term_op e2 termino e1 quads1
    (62) e1 -> .
    MORE_OR_EQ_THAN reduce using rule 51 (exp -> termino .)
    LESS_OR_EQ_THAN reduce using rule 51 (exp -> termino .)
    DIFFERENT_TO    reduce using rule 51 (exp -> termino .)
    MORE_THAN       reduce using rule 51 (exp -> termino .)
    LESS_THAN       reduce using rule 51 (exp -> termino .)
    EQUAL_TO        reduce using rule 51 (exp -> termino .)
    PEN_DOWN        reduce using rule 51 (exp -> termino .)
    PEN_UP          reduce using rule 51 (exp -> termino .)
    WHILE           reduce using rule 51 (exp -> termino .)
    IF              reduce using rule 51 (exp -> termino .)
    WRITE           reduce using rule 51 (exp -> termino .)
    READ            reduce using rule 51 (exp -> termino .)
    ID              reduce using rule 51 (exp -> termino .)
    BOOL            reduce using rule 51 (exp -> termino .)
    WORD            reduce using rule 51 (exp -> termino .)
    NUMBER          reduce using rule 51 (exp -> termino .)
    CENTER          reduce using rule 51 (exp -> termino .)
    FORWARD         reduce using rule 51 (exp -> termino .)
    RIGHT           reduce using rule 51 (exp -> termino .)
    LEFT            reduce using rule 51 (exp -> termino .)
    END             reduce using rule 51 (exp -> termino .)
    ELSE            reduce using rule 51 (exp -> termino .)
    COMMA           reduce using rule 51 (exp -> termino .)
    CLOSE_PTH       reduce using rule 51 (exp -> termino .)
    CLOSE_SQR       reduce using rule 51 (exp -> termino .)
    SUB             reduce using rule 62 (e1 -> .)
    SUM             reduce using rule 62 (e1 -> .)

    e1                             shift and go to state 106

state 66

    (55) factor -> term_op . var_cte
    (40) var_cte -> . func_call
    (41) var_cte -> . cte_bool
    (42) var_cte -> . CTE_STR
    (43) var_cte -> . CTE_NUM
    (44) var_cte -> . variable
    (66) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (45) cte_bool -> . FALSE
    (46) cte_bool -> . TRUE
    (71) variable -> . ID array
    CTE_STR         shift and go to state 74
    CTE_NUM         shift and go to state 75
    ID              shift and go to state 77
    FALSE           shift and go to state 78
    TRUE            shift and go to state 79

    var_cte                        shift and go to state 107
    func_call                      shift and go to state 72
    cte_bool                       shift and go to state 73
    variable                       shift and go to state 76

state 67

    (53) termino -> factor .
    (54) termino -> factor . e1 fact_op factor e1 quads
    (62) e1 -> .
    SUB             reduce using rule 53 (termino -> factor .)
    SUM             reduce using rule 53 (termino -> factor .)
    MORE_OR_EQ_THAN reduce using rule 53 (termino -> factor .)
    LESS_OR_EQ_THAN reduce using rule 53 (termino -> factor .)
    DIFFERENT_TO    reduce using rule 53 (termino -> factor .)
    MORE_THAN       reduce using rule 53 (termino -> factor .)
    LESS_THAN       reduce using rule 53 (termino -> factor .)
    EQUAL_TO        reduce using rule 53 (termino -> factor .)
    PEN_DOWN        reduce using rule 53 (termino -> factor .)
    PEN_UP          reduce using rule 53 (termino -> factor .)
    WHILE           reduce using rule 53 (termino -> factor .)
    IF              reduce using rule 53 (termino -> factor .)
    WRITE           reduce using rule 53 (termino -> factor .)
    READ            reduce using rule 53 (termino -> factor .)
    ID              reduce using rule 53 (termino -> factor .)
    BOOL            reduce using rule 53 (termino -> factor .)
    WORD            reduce using rule 53 (termino -> factor .)
    NUMBER          reduce using rule 53 (termino -> factor .)
    CENTER          reduce using rule 53 (termino -> factor .)
    FORWARD         reduce using rule 53 (termino -> factor .)
    RIGHT           reduce using rule 53 (termino -> factor .)
    LEFT            reduce using rule 53 (termino -> factor .)
    END             reduce using rule 53 (termino -> factor .)
    ELSE            reduce using rule 53 (termino -> factor .)
    COMMA           reduce using rule 53 (termino -> factor .)
    CLOSE_PTH       reduce using rule 53 (termino -> factor .)
    CLOSE_SQR       reduce using rule 53 (termino -> factor .)
    DIV             reduce using rule 62 (e1 -> .)
    MULT            reduce using rule 62 (e1 -> .)

    e1                             shift and go to state 108

state 68

    (56) factor -> var_cte .
    DIV             reduce using rule 56 (factor -> var_cte .)
    MULT            reduce using rule 56 (factor -> var_cte .)
    SUB             reduce using rule 56 (factor -> var_cte .)
    SUM             reduce using rule 56 (factor -> var_cte .)
    MORE_OR_EQ_THAN reduce using rule 56 (factor -> var_cte .)
    LESS_OR_EQ_THAN reduce using rule 56 (factor -> var_cte .)
    DIFFERENT_TO    reduce using rule 56 (factor -> var_cte .)
    MORE_THAN       reduce using rule 56 (factor -> var_cte .)
    LESS_THAN       reduce using rule 56 (factor -> var_cte .)
    EQUAL_TO        reduce using rule 56 (factor -> var_cte .)
    PEN_DOWN        reduce using rule 56 (factor -> var_cte .)
    PEN_UP          reduce using rule 56 (factor -> var_cte .)
    WHILE           reduce using rule 56 (factor -> var_cte .)
    IF              reduce using rule 56 (factor -> var_cte .)
    WRITE           reduce using rule 56 (factor -> var_cte .)
    READ            reduce using rule 56 (factor -> var_cte .)
    ID              reduce using rule 56 (factor -> var_cte .)
    BOOL            reduce using rule 56 (factor -> var_cte .)
    WORD            reduce using rule 56 (factor -> var_cte .)
    NUMBER          reduce using rule 56 (factor -> var_cte .)
    CENTER          reduce using rule 56 (factor -> var_cte .)
    FORWARD         reduce using rule 56 (factor -> var_cte .)
    RIGHT           reduce using rule 56 (factor -> var_cte .)
    LEFT            reduce using rule 56 (factor -> var_cte .)
    END             reduce using rule 56 (factor -> var_cte .)
    ELSE            reduce using rule 56 (factor -> var_cte .)
    COMMA           reduce using rule 56 (factor -> var_cte .)
    CLOSE_PTH       reduce using rule 56 (factor -> var_cte .)
    CLOSE_SQR       reduce using rule 56 (factor -> var_cte .)


state 69

    (57) factor -> OPEN_PTH . expression CLOSE_PTH
    (47) expression -> . exp
    (48) expression -> . exp e3 rel_op exp e3 quads2
    (51) exp -> . termino
    (52) exp -> . termino e1 term_op e2 termino e1 quads1
    (53) termino -> . factor
    (54) termino -> . factor e1 fact_op factor e1 quads
    (55) factor -> . term_op var_cte
    (56) factor -> . var_cte
    (57) factor -> . OPEN_PTH expression CLOSE_PTH
    (58) term_op -> . SUB
    (59) term_op -> . SUM
    (40) var_cte -> . func_call
    (41) var_cte -> . cte_bool
    (42) var_cte -> . CTE_STR
    (43) var_cte -> . CTE_NUM
    (44) var_cte -> . variable
    (66) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (45) cte_bool -> . FALSE
    (46) cte_bool -> . TRUE
    (71) variable -> . ID array
    OPEN_PTH        shift and go to state 69
    SUB             shift and go to state 70
    SUM             shift and go to state 71
    CTE_STR         shift and go to state 74
    CTE_NUM         shift and go to state 75
    ID              shift and go to state 77
    FALSE           shift and go to state 78
    TRUE            shift and go to state 79

    expression                     shift and go to state 109
    exp                            shift and go to state 64
    termino                        shift and go to state 65
    term_op                        shift and go to state 66
    factor                         shift and go to state 67
    var_cte                        shift and go to state 68
    func_call                      shift and go to state 72
    cte_bool                       shift and go to state 73
    variable                       shift and go to state 76

state 70

    (58) term_op -> SUB .
    CTE_STR         reduce using rule 58 (term_op -> SUB .)
    CTE_NUM         reduce using rule 58 (term_op -> SUB .)
    ID              reduce using rule 58 (term_op -> SUB .)
    FALSE           reduce using rule 58 (term_op -> SUB .)
    TRUE            reduce using rule 58 (term_op -> SUB .)
    OPEN_PTH        reduce using rule 58 (term_op -> SUB .)
    SUB             reduce using rule 58 (term_op -> SUB .)
    SUM             reduce using rule 58 (term_op -> SUB .)


state 71

    (59) term_op -> SUM .
    CTE_STR         reduce using rule 59 (term_op -> SUM .)
    CTE_NUM         reduce using rule 59 (term_op -> SUM .)
    ID              reduce using rule 59 (term_op -> SUM .)
    FALSE           reduce using rule 59 (term_op -> SUM .)
    TRUE            reduce using rule 59 (term_op -> SUM .)
    OPEN_PTH        reduce using rule 59 (term_op -> SUM .)
    SUB             reduce using rule 59 (term_op -> SUM .)
    SUM             reduce using rule 59 (term_op -> SUM .)


state 72

    (40) var_cte -> func_call .
    DIV             reduce using rule 40 (var_cte -> func_call .)
    MULT            reduce using rule 40 (var_cte -> func_call .)
    SUB             reduce using rule 40 (var_cte -> func_call .)
    SUM             reduce using rule 40 (var_cte -> func_call .)
    MORE_OR_EQ_THAN reduce using rule 40 (var_cte -> func_call .)
    LESS_OR_EQ_THAN reduce using rule 40 (var_cte -> func_call .)
    DIFFERENT_TO    reduce using rule 40 (var_cte -> func_call .)
    MORE_THAN       reduce using rule 40 (var_cte -> func_call .)
    LESS_THAN       reduce using rule 40 (var_cte -> func_call .)
    EQUAL_TO        reduce using rule 40 (var_cte -> func_call .)
    PEN_DOWN        reduce using rule 40 (var_cte -> func_call .)
    PEN_UP          reduce using rule 40 (var_cte -> func_call .)
    WHILE           reduce using rule 40 (var_cte -> func_call .)
    IF              reduce using rule 40 (var_cte -> func_call .)
    WRITE           reduce using rule 40 (var_cte -> func_call .)
    READ            reduce using rule 40 (var_cte -> func_call .)
    ID              reduce using rule 40 (var_cte -> func_call .)
    BOOL            reduce using rule 40 (var_cte -> func_call .)
    WORD            reduce using rule 40 (var_cte -> func_call .)
    NUMBER          reduce using rule 40 (var_cte -> func_call .)
    CENTER          reduce using rule 40 (var_cte -> func_call .)
    FORWARD         reduce using rule 40 (var_cte -> func_call .)
    RIGHT           reduce using rule 40 (var_cte -> func_call .)
    LEFT            reduce using rule 40 (var_cte -> func_call .)
    END             reduce using rule 40 (var_cte -> func_call .)
    ELSE            reduce using rule 40 (var_cte -> func_call .)
    COMMA           reduce using rule 40 (var_cte -> func_call .)
    CLOSE_PTH       reduce using rule 40 (var_cte -> func_call .)
    CLOSE_SQR       reduce using rule 40 (var_cte -> func_call .)


state 73

    (41) var_cte -> cte_bool .
    DIV             reduce using rule 41 (var_cte -> cte_bool .)
    MULT            reduce using rule 41 (var_cte -> cte_bool .)
    SUB             reduce using rule 41 (var_cte -> cte_bool .)
    SUM             reduce using rule 41 (var_cte -> cte_bool .)
    MORE_OR_EQ_THAN reduce using rule 41 (var_cte -> cte_bool .)
    LESS_OR_EQ_THAN reduce using rule 41 (var_cte -> cte_bool .)
    DIFFERENT_TO    reduce using rule 41 (var_cte -> cte_bool .)
    MORE_THAN       reduce using rule 41 (var_cte -> cte_bool .)
    LESS_THAN       reduce using rule 41 (var_cte -> cte_bool .)
    EQUAL_TO        reduce using rule 41 (var_cte -> cte_bool .)
    PEN_DOWN        reduce using rule 41 (var_cte -> cte_bool .)
    PEN_UP          reduce using rule 41 (var_cte -> cte_bool .)
    WHILE           reduce using rule 41 (var_cte -> cte_bool .)
    IF              reduce using rule 41 (var_cte -> cte_bool .)
    WRITE           reduce using rule 41 (var_cte -> cte_bool .)
    READ            reduce using rule 41 (var_cte -> cte_bool .)
    ID              reduce using rule 41 (var_cte -> cte_bool .)
    BOOL            reduce using rule 41 (var_cte -> cte_bool .)
    WORD            reduce using rule 41 (var_cte -> cte_bool .)
    NUMBER          reduce using rule 41 (var_cte -> cte_bool .)
    CENTER          reduce using rule 41 (var_cte -> cte_bool .)
    FORWARD         reduce using rule 41 (var_cte -> cte_bool .)
    RIGHT           reduce using rule 41 (var_cte -> cte_bool .)
    LEFT            reduce using rule 41 (var_cte -> cte_bool .)
    END             reduce using rule 41 (var_cte -> cte_bool .)
    ELSE            reduce using rule 41 (var_cte -> cte_bool .)
    COMMA           reduce using rule 41 (var_cte -> cte_bool .)
    CLOSE_PTH       reduce using rule 41 (var_cte -> cte_bool .)
    CLOSE_SQR       reduce using rule 41 (var_cte -> cte_bool .)


state 74

    (42) var_cte -> CTE_STR .
    DIV             reduce using rule 42 (var_cte -> CTE_STR .)
    MULT            reduce using rule 42 (var_cte -> CTE_STR .)
    SUB             reduce using rule 42 (var_cte -> CTE_STR .)
    SUM             reduce using rule 42 (var_cte -> CTE_STR .)
    MORE_OR_EQ_THAN reduce using rule 42 (var_cte -> CTE_STR .)
    LESS_OR_EQ_THAN reduce using rule 42 (var_cte -> CTE_STR .)
    DIFFERENT_TO    reduce using rule 42 (var_cte -> CTE_STR .)
    MORE_THAN       reduce using rule 42 (var_cte -> CTE_STR .)
    LESS_THAN       reduce using rule 42 (var_cte -> CTE_STR .)
    EQUAL_TO        reduce using rule 42 (var_cte -> CTE_STR .)
    PEN_DOWN        reduce using rule 42 (var_cte -> CTE_STR .)
    PEN_UP          reduce using rule 42 (var_cte -> CTE_STR .)
    WHILE           reduce using rule 42 (var_cte -> CTE_STR .)
    IF              reduce using rule 42 (var_cte -> CTE_STR .)
    WRITE           reduce using rule 42 (var_cte -> CTE_STR .)
    READ            reduce using rule 42 (var_cte -> CTE_STR .)
    ID              reduce using rule 42 (var_cte -> CTE_STR .)
    BOOL            reduce using rule 42 (var_cte -> CTE_STR .)
    WORD            reduce using rule 42 (var_cte -> CTE_STR .)
    NUMBER          reduce using rule 42 (var_cte -> CTE_STR .)
    CENTER          reduce using rule 42 (var_cte -> CTE_STR .)
    FORWARD         reduce using rule 42 (var_cte -> CTE_STR .)
    RIGHT           reduce using rule 42 (var_cte -> CTE_STR .)
    LEFT            reduce using rule 42 (var_cte -> CTE_STR .)
    END             reduce using rule 42 (var_cte -> CTE_STR .)
    ELSE            reduce using rule 42 (var_cte -> CTE_STR .)
    COMMA           reduce using rule 42 (var_cte -> CTE_STR .)
    CLOSE_PTH       reduce using rule 42 (var_cte -> CTE_STR .)
    CLOSE_SQR       reduce using rule 42 (var_cte -> CTE_STR .)


state 75

    (43) var_cte -> CTE_NUM .
    DIV             reduce using rule 43 (var_cte -> CTE_NUM .)
    MULT            reduce using rule 43 (var_cte -> CTE_NUM .)
    SUB             reduce using rule 43 (var_cte -> CTE_NUM .)
    SUM             reduce using rule 43 (var_cte -> CTE_NUM .)
    MORE_OR_EQ_THAN reduce using rule 43 (var_cte -> CTE_NUM .)
    LESS_OR_EQ_THAN reduce using rule 43 (var_cte -> CTE_NUM .)
    DIFFERENT_TO    reduce using rule 43 (var_cte -> CTE_NUM .)
    MORE_THAN       reduce using rule 43 (var_cte -> CTE_NUM .)
    LESS_THAN       reduce using rule 43 (var_cte -> CTE_NUM .)
    EQUAL_TO        reduce using rule 43 (var_cte -> CTE_NUM .)
    PEN_DOWN        reduce using rule 43 (var_cte -> CTE_NUM .)
    PEN_UP          reduce using rule 43 (var_cte -> CTE_NUM .)
    WHILE           reduce using rule 43 (var_cte -> CTE_NUM .)
    IF              reduce using rule 43 (var_cte -> CTE_NUM .)
    WRITE           reduce using rule 43 (var_cte -> CTE_NUM .)
    READ            reduce using rule 43 (var_cte -> CTE_NUM .)
    ID              reduce using rule 43 (var_cte -> CTE_NUM .)
    BOOL            reduce using rule 43 (var_cte -> CTE_NUM .)
    WORD            reduce using rule 43 (var_cte -> CTE_NUM .)
    NUMBER          reduce using rule 43 (var_cte -> CTE_NUM .)
    CENTER          reduce using rule 43 (var_cte -> CTE_NUM .)
    FORWARD         reduce using rule 43 (var_cte -> CTE_NUM .)
    RIGHT           reduce using rule 43 (var_cte -> CTE_NUM .)
    LEFT            reduce using rule 43 (var_cte -> CTE_NUM .)
    END             reduce using rule 43 (var_cte -> CTE_NUM .)
    ELSE            reduce using rule 43 (var_cte -> CTE_NUM .)
    COMMA           reduce using rule 43 (var_cte -> CTE_NUM .)
    CLOSE_PTH       reduce using rule 43 (var_cte -> CTE_NUM .)
    CLOSE_SQR       reduce using rule 43 (var_cte -> CTE_NUM .)


state 76

    (44) var_cte -> variable .
    DIV             reduce using rule 44 (var_cte -> variable .)
    MULT            reduce using rule 44 (var_cte -> variable .)
    SUB             reduce using rule 44 (var_cte -> variable .)
    SUM             reduce using rule 44 (var_cte -> variable .)
    MORE_OR_EQ_THAN reduce using rule 44 (var_cte -> variable .)
    LESS_OR_EQ_THAN reduce using rule 44 (var_cte -> variable .)
    DIFFERENT_TO    reduce using rule 44 (var_cte -> variable .)
    MORE_THAN       reduce using rule 44 (var_cte -> variable .)
    LESS_THAN       reduce using rule 44 (var_cte -> variable .)
    EQUAL_TO        reduce using rule 44 (var_cte -> variable .)
    PEN_DOWN        reduce using rule 44 (var_cte -> variable .)
    PEN_UP          reduce using rule 44 (var_cte -> variable .)
    WHILE           reduce using rule 44 (var_cte -> variable .)
    IF              reduce using rule 44 (var_cte -> variable .)
    WRITE           reduce using rule 44 (var_cte -> variable .)
    READ            reduce using rule 44 (var_cte -> variable .)
    ID              reduce using rule 44 (var_cte -> variable .)
    BOOL            reduce using rule 44 (var_cte -> variable .)
    WORD            reduce using rule 44 (var_cte -> variable .)
    NUMBER          reduce using rule 44 (var_cte -> variable .)
    CENTER          reduce using rule 44 (var_cte -> variable .)
    FORWARD         reduce using rule 44 (var_cte -> variable .)
    RIGHT           reduce using rule 44 (var_cte -> variable .)
    LEFT            reduce using rule 44 (var_cte -> variable .)
    END             reduce using rule 44 (var_cte -> variable .)
    ELSE            reduce using rule 44 (var_cte -> variable .)
    COMMA           reduce using rule 44 (var_cte -> variable .)
    CLOSE_PTH       reduce using rule 44 (var_cte -> variable .)
    CLOSE_SQR       reduce using rule 44 (var_cte -> variable .)


state 77

    (66) func_call -> ID . OPEN_PTH func_call_param CLOSE_PTH
    (71) variable -> ID . array
    (72) array -> . empty
    (73) array -> . OPEN_SQR expression CLOSE_SQR matrix
    (95) empty -> .
    OPEN_PTH        shift and go to state 57
    OPEN_SQR        shift and go to state 112
    DIV             reduce using rule 95 (empty -> .)
    MULT            reduce using rule 95 (empty -> .)
    SUB             reduce using rule 95 (empty -> .)
    SUM             reduce using rule 95 (empty -> .)
    MORE_OR_EQ_THAN reduce using rule 95 (empty -> .)
    LESS_OR_EQ_THAN reduce using rule 95 (empty -> .)
    DIFFERENT_TO    reduce using rule 95 (empty -> .)
    MORE_THAN       reduce using rule 95 (empty -> .)
    LESS_THAN       reduce using rule 95 (empty -> .)
    EQUAL_TO        reduce using rule 95 (empty -> .)
    PEN_DOWN        reduce using rule 95 (empty -> .)
    PEN_UP          reduce using rule 95 (empty -> .)
    WHILE           reduce using rule 95 (empty -> .)
    IF              reduce using rule 95 (empty -> .)
    WRITE           reduce using rule 95 (empty -> .)
    READ            reduce using rule 95 (empty -> .)
    ID              reduce using rule 95 (empty -> .)
    BOOL            reduce using rule 95 (empty -> .)
    WORD            reduce using rule 95 (empty -> .)
    NUMBER          reduce using rule 95 (empty -> .)
    CENTER          reduce using rule 95 (empty -> .)
    FORWARD         reduce using rule 95 (empty -> .)
    RIGHT           reduce using rule 95 (empty -> .)
    LEFT            reduce using rule 95 (empty -> .)
    END             reduce using rule 95 (empty -> .)
    ELSE            reduce using rule 95 (empty -> .)
    COMMA           reduce using rule 95 (empty -> .)
    CLOSE_PTH       reduce using rule 95 (empty -> .)
    CLOSE_SQR       reduce using rule 95 (empty -> .)

    array                          shift and go to state 110
    empty                          shift and go to state 111

state 78

    (45) cte_bool -> FALSE .
    DIV             reduce using rule 45 (cte_bool -> FALSE .)
    MULT            reduce using rule 45 (cte_bool -> FALSE .)
    SUB             reduce using rule 45 (cte_bool -> FALSE .)
    SUM             reduce using rule 45 (cte_bool -> FALSE .)
    MORE_OR_EQ_THAN reduce using rule 45 (cte_bool -> FALSE .)
    LESS_OR_EQ_THAN reduce using rule 45 (cte_bool -> FALSE .)
    DIFFERENT_TO    reduce using rule 45 (cte_bool -> FALSE .)
    MORE_THAN       reduce using rule 45 (cte_bool -> FALSE .)
    LESS_THAN       reduce using rule 45 (cte_bool -> FALSE .)
    EQUAL_TO        reduce using rule 45 (cte_bool -> FALSE .)
    PEN_DOWN        reduce using rule 45 (cte_bool -> FALSE .)
    PEN_UP          reduce using rule 45 (cte_bool -> FALSE .)
    WHILE           reduce using rule 45 (cte_bool -> FALSE .)
    IF              reduce using rule 45 (cte_bool -> FALSE .)
    WRITE           reduce using rule 45 (cte_bool -> FALSE .)
    READ            reduce using rule 45 (cte_bool -> FALSE .)
    ID              reduce using rule 45 (cte_bool -> FALSE .)
    BOOL            reduce using rule 45 (cte_bool -> FALSE .)
    WORD            reduce using rule 45 (cte_bool -> FALSE .)
    NUMBER          reduce using rule 45 (cte_bool -> FALSE .)
    CENTER          reduce using rule 45 (cte_bool -> FALSE .)
    FORWARD         reduce using rule 45 (cte_bool -> FALSE .)
    RIGHT           reduce using rule 45 (cte_bool -> FALSE .)
    LEFT            reduce using rule 45 (cte_bool -> FALSE .)
    END             reduce using rule 45 (cte_bool -> FALSE .)
    ELSE            reduce using rule 45 (cte_bool -> FALSE .)
    COMMA           reduce using rule 45 (cte_bool -> FALSE .)
    CLOSE_PTH       reduce using rule 45 (cte_bool -> FALSE .)
    CLOSE_SQR       reduce using rule 45 (cte_bool -> FALSE .)


state 79

    (46) cte_bool -> TRUE .
    DIV             reduce using rule 46 (cte_bool -> TRUE .)
    MULT            reduce using rule 46 (cte_bool -> TRUE .)
    SUB             reduce using rule 46 (cte_bool -> TRUE .)
    SUM             reduce using rule 46 (cte_bool -> TRUE .)
    MORE_OR_EQ_THAN reduce using rule 46 (cte_bool -> TRUE .)
    LESS_OR_EQ_THAN reduce using rule 46 (cte_bool -> TRUE .)
    DIFFERENT_TO    reduce using rule 46 (cte_bool -> TRUE .)
    MORE_THAN       reduce using rule 46 (cte_bool -> TRUE .)
    LESS_THAN       reduce using rule 46 (cte_bool -> TRUE .)
    EQUAL_TO        reduce using rule 46 (cte_bool -> TRUE .)
    PEN_DOWN        reduce using rule 46 (cte_bool -> TRUE .)
    PEN_UP          reduce using rule 46 (cte_bool -> TRUE .)
    WHILE           reduce using rule 46 (cte_bool -> TRUE .)
    IF              reduce using rule 46 (cte_bool -> TRUE .)
    WRITE           reduce using rule 46 (cte_bool -> TRUE .)
    READ            reduce using rule 46 (cte_bool -> TRUE .)
    ID              reduce using rule 46 (cte_bool -> TRUE .)
    BOOL            reduce using rule 46 (cte_bool -> TRUE .)
    WORD            reduce using rule 46 (cte_bool -> TRUE .)
    NUMBER          reduce using rule 46 (cte_bool -> TRUE .)
    CENTER          reduce using rule 46 (cte_bool -> TRUE .)
    FORWARD         reduce using rule 46 (cte_bool -> TRUE .)
    RIGHT           reduce using rule 46 (cte_bool -> TRUE .)
    LEFT            reduce using rule 46 (cte_bool -> TRUE .)
    END             reduce using rule 46 (cte_bool -> TRUE .)
    ELSE            reduce using rule 46 (cte_bool -> TRUE .)
    COMMA           reduce using rule 46 (cte_bool -> TRUE .)
    CLOSE_PTH       reduce using rule 46 (cte_bool -> TRUE .)
    CLOSE_SQR       reduce using rule 46 (cte_bool -> TRUE .)


state 80

    (79) if_stmnt -> IF con_expression . stmnt else_stmnt
    (20) stmnt -> . empty
    (21) stmnt -> . var_declaration_func stmnt
    (22) stmnt -> . pen_func stmnt
    (23) stmnt -> . move_func stmnt
    (24) stmnt -> . while_stmnt stmnt
    (25) stmnt -> . if_stmnt stmnt
    (26) stmnt -> . write stmnt
    (27) stmnt -> . read stmnt
    (28) stmnt -> . func_call stmnt
    (29) stmnt -> . var_assignation stmnt
    (95) empty -> .
    (30) var_declaration_func -> . var_type ID multiple_vars
    (92) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (93) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (87) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (82) while_stmnt -> . WHILE con_expression stmnt END
    (79) if_stmnt -> . IF con_expression stmnt else_stmnt
    (78) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (70) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (66) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (37) var_assignation -> . ID a1 assign expression quads
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (88) move_type -> . CENTER
    (89) move_type -> . FORWARD
    (90) move_type -> . RIGHT
    (91) move_type -> . LEFT
    END             reduce using rule 95 (empty -> .)
    ELSE            reduce using rule 95 (empty -> .)
    PEN_DOWN        shift and go to state 32
    PEN_UP          shift and go to state 33
    WHILE           shift and go to state 35
    IF              shift and go to state 36
    WRITE           shift and go to state 37
    READ            shift and go to state 38
    ID              shift and go to state 31
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11
    CENTER          shift and go to state 39
    FORWARD         shift and go to state 40
    RIGHT           shift and go to state 41
    LEFT            shift and go to state 42

    stmnt                          shift and go to state 113
    empty                          shift and go to state 20
    var_declaration_func           shift and go to state 21
    pen_func                       shift and go to state 22
    move_func                      shift and go to state 23
    while_stmnt                    shift and go to state 24
    if_stmnt                       shift and go to state 25
    write                          shift and go to state 26
    read                           shift and go to state 27
    func_call                      shift and go to state 28
    var_assignation                shift and go to state 29
    var_type                       shift and go to state 30
    move_type                      shift and go to state 34

state 81

    (78) write -> WRITE OPEN_PTH . expression CLOSE_PTH
    (47) expression -> . exp
    (48) expression -> . exp e3 rel_op exp e3 quads2
    (51) exp -> . termino
    (52) exp -> . termino e1 term_op e2 termino e1 quads1
    (53) termino -> . factor
    (54) termino -> . factor e1 fact_op factor e1 quads
    (55) factor -> . term_op var_cte
    (56) factor -> . var_cte
    (57) factor -> . OPEN_PTH expression CLOSE_PTH
    (58) term_op -> . SUB
    (59) term_op -> . SUM
    (40) var_cte -> . func_call
    (41) var_cte -> . cte_bool
    (42) var_cte -> . CTE_STR
    (43) var_cte -> . CTE_NUM
    (44) var_cte -> . variable
    (66) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (45) cte_bool -> . FALSE
    (46) cte_bool -> . TRUE
    (71) variable -> . ID array
    OPEN_PTH        shift and go to state 69
    SUB             shift and go to state 70
    SUM             shift and go to state 71
    CTE_STR         shift and go to state 74
    CTE_NUM         shift and go to state 75
    ID              shift and go to state 77
    FALSE           shift and go to state 78
    TRUE            shift and go to state 79

    expression                     shift and go to state 114
    exp                            shift and go to state 64
    termino                        shift and go to state 65
    term_op                        shift and go to state 66
    factor                         shift and go to state 67
    var_cte                        shift and go to state 68
    func_call                      shift and go to state 72
    cte_bool                       shift and go to state 73
    variable                       shift and go to state 76

state 82

    (70) read -> READ OPEN_PTH . variable multiple_vars CLOSE_PTH
    (71) variable -> . ID array
    ID              shift and go to state 116

    variable                       shift and go to state 115

state 83

    (4) var_declaration -> var_type ID multiple_var .
    BOOL            reduce using rule 4 (var_declaration -> var_type ID multiple_var .)
    WORD            reduce using rule 4 (var_declaration -> var_type ID multiple_var .)
    NUMBER          reduce using rule 4 (var_declaration -> var_type ID multiple_var .)
    VOID            reduce using rule 4 (var_declaration -> var_type ID multiple_var .)
    MAIN            reduce using rule 4 (var_declaration -> var_type ID multiple_var .)


state 84

    (5) multiple_var -> empty .
    BOOL            reduce using rule 5 (multiple_var -> empty .)
    WORD            reduce using rule 5 (multiple_var -> empty .)
    NUMBER          reduce using rule 5 (multiple_var -> empty .)
    VOID            reduce using rule 5 (multiple_var -> empty .)
    MAIN            reduce using rule 5 (multiple_var -> empty .)


state 85

    (6) multiple_var -> COMMA . ID multiple_var
    ID              shift and go to state 117


state 86

    (11) func_declaration -> func_type FUNC ID . OPEN_PTH parameter CLOSE_PTH stmnt END
    OPEN_PTH        shift and go to state 118


state 87

    (30) var_declaration_func -> var_type ID multiple_vars .
    PEN_DOWN        reduce using rule 30 (var_declaration_func -> var_type ID multiple_vars .)
    PEN_UP          reduce using rule 30 (var_declaration_func -> var_type ID multiple_vars .)
    WHILE           reduce using rule 30 (var_declaration_func -> var_type ID multiple_vars .)
    IF              reduce using rule 30 (var_declaration_func -> var_type ID multiple_vars .)
    WRITE           reduce using rule 30 (var_declaration_func -> var_type ID multiple_vars .)
    READ            reduce using rule 30 (var_declaration_func -> var_type ID multiple_vars .)
    ID              reduce using rule 30 (var_declaration_func -> var_type ID multiple_vars .)
    BOOL            reduce using rule 30 (var_declaration_func -> var_type ID multiple_vars .)
    WORD            reduce using rule 30 (var_declaration_func -> var_type ID multiple_vars .)
    NUMBER          reduce using rule 30 (var_declaration_func -> var_type ID multiple_vars .)
    CENTER          reduce using rule 30 (var_declaration_func -> var_type ID multiple_vars .)
    FORWARD         reduce using rule 30 (var_declaration_func -> var_type ID multiple_vars .)
    RIGHT           reduce using rule 30 (var_declaration_func -> var_type ID multiple_vars .)
    LEFT            reduce using rule 30 (var_declaration_func -> var_type ID multiple_vars .)
    END             reduce using rule 30 (var_declaration_func -> var_type ID multiple_vars .)
    ELSE            reduce using rule 30 (var_declaration_func -> var_type ID multiple_vars .)


state 88

    (76) multiple_vars -> empty .
    PEN_DOWN        reduce using rule 76 (multiple_vars -> empty .)
    PEN_UP          reduce using rule 76 (multiple_vars -> empty .)
    WHILE           reduce using rule 76 (multiple_vars -> empty .)
    IF              reduce using rule 76 (multiple_vars -> empty .)
    WRITE           reduce using rule 76 (multiple_vars -> empty .)
    READ            reduce using rule 76 (multiple_vars -> empty .)
    ID              reduce using rule 76 (multiple_vars -> empty .)
    BOOL            reduce using rule 76 (multiple_vars -> empty .)
    WORD            reduce using rule 76 (multiple_vars -> empty .)
    NUMBER          reduce using rule 76 (multiple_vars -> empty .)
    CENTER          reduce using rule 76 (multiple_vars -> empty .)
    FORWARD         reduce using rule 76 (multiple_vars -> empty .)
    RIGHT           reduce using rule 76 (multiple_vars -> empty .)
    LEFT            reduce using rule 76 (multiple_vars -> empty .)
    END             reduce using rule 76 (multiple_vars -> empty .)
    ELSE            reduce using rule 76 (multiple_vars -> empty .)
    CLOSE_PTH       reduce using rule 76 (multiple_vars -> empty .)


state 89

    (77) multiple_vars -> COMMA . variable
    (71) variable -> . ID array
    ID              shift and go to state 116

    variable                       shift and go to state 119

state 90

    (66) func_call -> ID OPEN_PTH func_call_param . CLOSE_PTH
    CLOSE_PTH       shift and go to state 120


state 91

    (67) func_call_param -> expression . multiple_fc_param
    (68) multiple_fc_param -> . empty
    (69) multiple_fc_param -> . COMMA func_call_param
    (95) empty -> .
    COMMA           shift and go to state 123
    CLOSE_PTH       reduce using rule 95 (empty -> .)

    multiple_fc_param              shift and go to state 121
    empty                          shift and go to state 122

state 92

    (37) var_assignation -> ID a1 assign . expression quads
    (47) expression -> . exp
    (48) expression -> . exp e3 rel_op exp e3 quads2
    (51) exp -> . termino
    (52) exp -> . termino e1 term_op e2 termino e1 quads1
    (53) termino -> . factor
    (54) termino -> . factor e1 fact_op factor e1 quads
    (55) factor -> . term_op var_cte
    (56) factor -> . var_cte
    (57) factor -> . OPEN_PTH expression CLOSE_PTH
    (58) term_op -> . SUB
    (59) term_op -> . SUM
    (40) var_cte -> . func_call
    (41) var_cte -> . cte_bool
    (42) var_cte -> . CTE_STR
    (43) var_cte -> . CTE_NUM
    (44) var_cte -> . variable
    (66) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (45) cte_bool -> . FALSE
    (46) cte_bool -> . TRUE
    (71) variable -> . ID array
    OPEN_PTH        shift and go to state 69
    SUB             shift and go to state 70
    SUM             shift and go to state 71
    CTE_STR         shift and go to state 74
    CTE_NUM         shift and go to state 75
    ID              shift and go to state 77
    FALSE           shift and go to state 78
    TRUE            shift and go to state 79

    expression                     shift and go to state 124
    exp                            shift and go to state 64
    termino                        shift and go to state 65
    term_op                        shift and go to state 66
    factor                         shift and go to state 67
    var_cte                        shift and go to state 68
    func_call                      shift and go to state 72
    cte_bool                       shift and go to state 73
    variable                       shift and go to state 76

state 93

    (38) assign -> ASSIGN .
    OPEN_PTH        reduce using rule 38 (assign -> ASSIGN .)
    SUB             reduce using rule 38 (assign -> ASSIGN .)
    SUM             reduce using rule 38 (assign -> ASSIGN .)
    CTE_STR         reduce using rule 38 (assign -> ASSIGN .)
    CTE_NUM         reduce using rule 38 (assign -> ASSIGN .)
    ID              reduce using rule 38 (assign -> ASSIGN .)
    FALSE           reduce using rule 38 (assign -> ASSIGN .)
    TRUE            reduce using rule 38 (assign -> ASSIGN .)


state 94

    (92) pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .
    PEN_DOWN        reduce using rule 92 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    PEN_UP          reduce using rule 92 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    WHILE           reduce using rule 92 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    IF              reduce using rule 92 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    WRITE           reduce using rule 92 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    READ            reduce using rule 92 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    ID              reduce using rule 92 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    BOOL            reduce using rule 92 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    WORD            reduce using rule 92 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    NUMBER          reduce using rule 92 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    CENTER          reduce using rule 92 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    FORWARD         reduce using rule 92 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    RIGHT           reduce using rule 92 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    LEFT            reduce using rule 92 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    END             reduce using rule 92 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    ELSE            reduce using rule 92 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)


state 95

    (93) pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .
    PEN_DOWN        reduce using rule 93 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    PEN_UP          reduce using rule 93 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    WHILE           reduce using rule 93 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    IF              reduce using rule 93 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    WRITE           reduce using rule 93 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    READ            reduce using rule 93 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    ID              reduce using rule 93 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    BOOL            reduce using rule 93 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    WORD            reduce using rule 93 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    NUMBER          reduce using rule 93 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    CENTER          reduce using rule 93 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    FORWARD         reduce using rule 93 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    RIGHT           reduce using rule 93 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    LEFT            reduce using rule 93 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    END             reduce using rule 93 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    ELSE            reduce using rule 93 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)


state 96

    (87) move_func -> move_type OPEN_PTH func_call_param . CLOSE_PTH
    CLOSE_PTH       shift and go to state 125


state 97

    (82) while_stmnt -> WHILE con_expression stmnt . END
    END             shift and go to state 126


state 98

    (84) con_expression -> expression rel_op . e4 expression quads3
    (85) e4 -> .
    OPEN_PTH        reduce using rule 85 (e4 -> .)
    SUB             reduce using rule 85 (e4 -> .)
    SUM             reduce using rule 85 (e4 -> .)
    CTE_STR         reduce using rule 85 (e4 -> .)
    CTE_NUM         reduce using rule 85 (e4 -> .)
    ID              reduce using rule 85 (e4 -> .)
    FALSE           reduce using rule 85 (e4 -> .)
    TRUE            reduce using rule 85 (e4 -> .)

    e4                             shift and go to state 127

state 99

    (31) rel_op -> MORE_OR_EQ_THAN .
    OPEN_PTH        reduce using rule 31 (rel_op -> MORE_OR_EQ_THAN .)
    SUB             reduce using rule 31 (rel_op -> MORE_OR_EQ_THAN .)
    SUM             reduce using rule 31 (rel_op -> MORE_OR_EQ_THAN .)
    CTE_STR         reduce using rule 31 (rel_op -> MORE_OR_EQ_THAN .)
    CTE_NUM         reduce using rule 31 (rel_op -> MORE_OR_EQ_THAN .)
    ID              reduce using rule 31 (rel_op -> MORE_OR_EQ_THAN .)
    FALSE           reduce using rule 31 (rel_op -> MORE_OR_EQ_THAN .)
    TRUE            reduce using rule 31 (rel_op -> MORE_OR_EQ_THAN .)


state 100

    (32) rel_op -> LESS_OR_EQ_THAN .
    OPEN_PTH        reduce using rule 32 (rel_op -> LESS_OR_EQ_THAN .)
    SUB             reduce using rule 32 (rel_op -> LESS_OR_EQ_THAN .)
    SUM             reduce using rule 32 (rel_op -> LESS_OR_EQ_THAN .)
    CTE_STR         reduce using rule 32 (rel_op -> LESS_OR_EQ_THAN .)
    CTE_NUM         reduce using rule 32 (rel_op -> LESS_OR_EQ_THAN .)
    ID              reduce using rule 32 (rel_op -> LESS_OR_EQ_THAN .)
    FALSE           reduce using rule 32 (rel_op -> LESS_OR_EQ_THAN .)
    TRUE            reduce using rule 32 (rel_op -> LESS_OR_EQ_THAN .)


state 101

    (33) rel_op -> DIFFERENT_TO .
    OPEN_PTH        reduce using rule 33 (rel_op -> DIFFERENT_TO .)
    SUB             reduce using rule 33 (rel_op -> DIFFERENT_TO .)
    SUM             reduce using rule 33 (rel_op -> DIFFERENT_TO .)
    CTE_STR         reduce using rule 33 (rel_op -> DIFFERENT_TO .)
    CTE_NUM         reduce using rule 33 (rel_op -> DIFFERENT_TO .)
    ID              reduce using rule 33 (rel_op -> DIFFERENT_TO .)
    FALSE           reduce using rule 33 (rel_op -> DIFFERENT_TO .)
    TRUE            reduce using rule 33 (rel_op -> DIFFERENT_TO .)


state 102

    (34) rel_op -> MORE_THAN .
    OPEN_PTH        reduce using rule 34 (rel_op -> MORE_THAN .)
    SUB             reduce using rule 34 (rel_op -> MORE_THAN .)
    SUM             reduce using rule 34 (rel_op -> MORE_THAN .)
    CTE_STR         reduce using rule 34 (rel_op -> MORE_THAN .)
    CTE_NUM         reduce using rule 34 (rel_op -> MORE_THAN .)
    ID              reduce using rule 34 (rel_op -> MORE_THAN .)
    FALSE           reduce using rule 34 (rel_op -> MORE_THAN .)
    TRUE            reduce using rule 34 (rel_op -> MORE_THAN .)


state 103

    (35) rel_op -> LESS_THAN .
    OPEN_PTH        reduce using rule 35 (rel_op -> LESS_THAN .)
    SUB             reduce using rule 35 (rel_op -> LESS_THAN .)
    SUM             reduce using rule 35 (rel_op -> LESS_THAN .)
    CTE_STR         reduce using rule 35 (rel_op -> LESS_THAN .)
    CTE_NUM         reduce using rule 35 (rel_op -> LESS_THAN .)
    ID              reduce using rule 35 (rel_op -> LESS_THAN .)
    FALSE           reduce using rule 35 (rel_op -> LESS_THAN .)
    TRUE            reduce using rule 35 (rel_op -> LESS_THAN .)


state 104

    (36) rel_op -> EQUAL_TO .
    OPEN_PTH        reduce using rule 36 (rel_op -> EQUAL_TO .)
    SUB             reduce using rule 36 (rel_op -> EQUAL_TO .)
    SUM             reduce using rule 36 (rel_op -> EQUAL_TO .)
    CTE_STR         reduce using rule 36 (rel_op -> EQUAL_TO .)
    CTE_NUM         reduce using rule 36 (rel_op -> EQUAL_TO .)
    ID              reduce using rule 36 (rel_op -> EQUAL_TO .)
    FALSE           reduce using rule 36 (rel_op -> EQUAL_TO .)
    TRUE            reduce using rule 36 (rel_op -> EQUAL_TO .)


state 105

    (48) expression -> exp e3 . rel_op exp e3 quads2
    (31) rel_op -> . MORE_OR_EQ_THAN
    (32) rel_op -> . LESS_OR_EQ_THAN
    (33) rel_op -> . DIFFERENT_TO
    (34) rel_op -> . MORE_THAN
    (35) rel_op -> . LESS_THAN
    (36) rel_op -> . EQUAL_TO
    MORE_OR_EQ_THAN shift and go to state 99
    LESS_OR_EQ_THAN shift and go to state 100
    DIFFERENT_TO    shift and go to state 101
    MORE_THAN       shift and go to state 102
    LESS_THAN       shift and go to state 103
    EQUAL_TO        shift and go to state 104

    rel_op                         shift and go to state 128

state 106

    (52) exp -> termino e1 . term_op e2 termino e1 quads1
    (58) term_op -> . SUB
    (59) term_op -> . SUM
    SUB             shift and go to state 70
    SUM             shift and go to state 71

    term_op                        shift and go to state 129

state 107

    (55) factor -> term_op var_cte .
    DIV             reduce using rule 55 (factor -> term_op var_cte .)
    MULT            reduce using rule 55 (factor -> term_op var_cte .)
    SUB             reduce using rule 55 (factor -> term_op var_cte .)
    SUM             reduce using rule 55 (factor -> term_op var_cte .)
    MORE_OR_EQ_THAN reduce using rule 55 (factor -> term_op var_cte .)
    LESS_OR_EQ_THAN reduce using rule 55 (factor -> term_op var_cte .)
    DIFFERENT_TO    reduce using rule 55 (factor -> term_op var_cte .)
    MORE_THAN       reduce using rule 55 (factor -> term_op var_cte .)
    LESS_THAN       reduce using rule 55 (factor -> term_op var_cte .)
    EQUAL_TO        reduce using rule 55 (factor -> term_op var_cte .)
    PEN_DOWN        reduce using rule 55 (factor -> term_op var_cte .)
    PEN_UP          reduce using rule 55 (factor -> term_op var_cte .)
    WHILE           reduce using rule 55 (factor -> term_op var_cte .)
    IF              reduce using rule 55 (factor -> term_op var_cte .)
    WRITE           reduce using rule 55 (factor -> term_op var_cte .)
    READ            reduce using rule 55 (factor -> term_op var_cte .)
    ID              reduce using rule 55 (factor -> term_op var_cte .)
    BOOL            reduce using rule 55 (factor -> term_op var_cte .)
    WORD            reduce using rule 55 (factor -> term_op var_cte .)
    NUMBER          reduce using rule 55 (factor -> term_op var_cte .)
    CENTER          reduce using rule 55 (factor -> term_op var_cte .)
    FORWARD         reduce using rule 55 (factor -> term_op var_cte .)
    RIGHT           reduce using rule 55 (factor -> term_op var_cte .)
    LEFT            reduce using rule 55 (factor -> term_op var_cte .)
    END             reduce using rule 55 (factor -> term_op var_cte .)
    ELSE            reduce using rule 55 (factor -> term_op var_cte .)
    COMMA           reduce using rule 55 (factor -> term_op var_cte .)
    CLOSE_PTH       reduce using rule 55 (factor -> term_op var_cte .)
    CLOSE_SQR       reduce using rule 55 (factor -> term_op var_cte .)


state 108

    (54) termino -> factor e1 . fact_op factor e1 quads
    (60) fact_op -> . DIV
    (61) fact_op -> . MULT
    DIV             shift and go to state 131
    MULT            shift and go to state 132

    fact_op                        shift and go to state 130

state 109

    (57) factor -> OPEN_PTH expression . CLOSE_PTH
    CLOSE_PTH       shift and go to state 133


state 110

    (71) variable -> ID array .
    DIV             reduce using rule 71 (variable -> ID array .)
    MULT            reduce using rule 71 (variable -> ID array .)
    SUB             reduce using rule 71 (variable -> ID array .)
    SUM             reduce using rule 71 (variable -> ID array .)
    MORE_OR_EQ_THAN reduce using rule 71 (variable -> ID array .)
    LESS_OR_EQ_THAN reduce using rule 71 (variable -> ID array .)
    DIFFERENT_TO    reduce using rule 71 (variable -> ID array .)
    MORE_THAN       reduce using rule 71 (variable -> ID array .)
    LESS_THAN       reduce using rule 71 (variable -> ID array .)
    EQUAL_TO        reduce using rule 71 (variable -> ID array .)
    PEN_DOWN        reduce using rule 71 (variable -> ID array .)
    PEN_UP          reduce using rule 71 (variable -> ID array .)
    WHILE           reduce using rule 71 (variable -> ID array .)
    IF              reduce using rule 71 (variable -> ID array .)
    WRITE           reduce using rule 71 (variable -> ID array .)
    READ            reduce using rule 71 (variable -> ID array .)
    ID              reduce using rule 71 (variable -> ID array .)
    BOOL            reduce using rule 71 (variable -> ID array .)
    WORD            reduce using rule 71 (variable -> ID array .)
    NUMBER          reduce using rule 71 (variable -> ID array .)
    CENTER          reduce using rule 71 (variable -> ID array .)
    FORWARD         reduce using rule 71 (variable -> ID array .)
    RIGHT           reduce using rule 71 (variable -> ID array .)
    LEFT            reduce using rule 71 (variable -> ID array .)
    END             reduce using rule 71 (variable -> ID array .)
    ELSE            reduce using rule 71 (variable -> ID array .)
    COMMA           reduce using rule 71 (variable -> ID array .)
    CLOSE_PTH       reduce using rule 71 (variable -> ID array .)
    CLOSE_SQR       reduce using rule 71 (variable -> ID array .)


state 111

    (72) array -> empty .
    DIV             reduce using rule 72 (array -> empty .)
    MULT            reduce using rule 72 (array -> empty .)
    SUB             reduce using rule 72 (array -> empty .)
    SUM             reduce using rule 72 (array -> empty .)
    MORE_OR_EQ_THAN reduce using rule 72 (array -> empty .)
    LESS_OR_EQ_THAN reduce using rule 72 (array -> empty .)
    DIFFERENT_TO    reduce using rule 72 (array -> empty .)
    MORE_THAN       reduce using rule 72 (array -> empty .)
    LESS_THAN       reduce using rule 72 (array -> empty .)
    EQUAL_TO        reduce using rule 72 (array -> empty .)
    PEN_DOWN        reduce using rule 72 (array -> empty .)
    PEN_UP          reduce using rule 72 (array -> empty .)
    WHILE           reduce using rule 72 (array -> empty .)
    IF              reduce using rule 72 (array -> empty .)
    WRITE           reduce using rule 72 (array -> empty .)
    READ            reduce using rule 72 (array -> empty .)
    ID              reduce using rule 72 (array -> empty .)
    BOOL            reduce using rule 72 (array -> empty .)
    WORD            reduce using rule 72 (array -> empty .)
    NUMBER          reduce using rule 72 (array -> empty .)
    CENTER          reduce using rule 72 (array -> empty .)
    FORWARD         reduce using rule 72 (array -> empty .)
    RIGHT           reduce using rule 72 (array -> empty .)
    LEFT            reduce using rule 72 (array -> empty .)
    END             reduce using rule 72 (array -> empty .)
    ELSE            reduce using rule 72 (array -> empty .)
    COMMA           reduce using rule 72 (array -> empty .)
    CLOSE_PTH       reduce using rule 72 (array -> empty .)
    CLOSE_SQR       reduce using rule 72 (array -> empty .)


state 112

    (73) array -> OPEN_SQR . expression CLOSE_SQR matrix
    (47) expression -> . exp
    (48) expression -> . exp e3 rel_op exp e3 quads2
    (51) exp -> . termino
    (52) exp -> . termino e1 term_op e2 termino e1 quads1
    (53) termino -> . factor
    (54) termino -> . factor e1 fact_op factor e1 quads
    (55) factor -> . term_op var_cte
    (56) factor -> . var_cte
    (57) factor -> . OPEN_PTH expression CLOSE_PTH
    (58) term_op -> . SUB
    (59) term_op -> . SUM
    (40) var_cte -> . func_call
    (41) var_cte -> . cte_bool
    (42) var_cte -> . CTE_STR
    (43) var_cte -> . CTE_NUM
    (44) var_cte -> . variable
    (66) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (45) cte_bool -> . FALSE
    (46) cte_bool -> . TRUE
    (71) variable -> . ID array
    OPEN_PTH        shift and go to state 69
    SUB             shift and go to state 70
    SUM             shift and go to state 71
    CTE_STR         shift and go to state 74
    CTE_NUM         shift and go to state 75
    ID              shift and go to state 77
    FALSE           shift and go to state 78
    TRUE            shift and go to state 79

    expression                     shift and go to state 134
    exp                            shift and go to state 64
    termino                        shift and go to state 65
    term_op                        shift and go to state 66
    factor                         shift and go to state 67
    var_cte                        shift and go to state 68
    func_call                      shift and go to state 72
    cte_bool                       shift and go to state 73
    variable                       shift and go to state 76

state 113

    (79) if_stmnt -> IF con_expression stmnt . else_stmnt
    (80) else_stmnt -> . END
    (81) else_stmnt -> . ELSE stmnt END
    END             shift and go to state 136
    ELSE            shift and go to state 137

    else_stmnt                     shift and go to state 135

state 114

    (78) write -> WRITE OPEN_PTH expression . CLOSE_PTH
    CLOSE_PTH       shift and go to state 138


state 115

    (70) read -> READ OPEN_PTH variable . multiple_vars CLOSE_PTH
    (76) multiple_vars -> . empty
    (77) multiple_vars -> . COMMA variable
    (95) empty -> .
    COMMA           shift and go to state 89
    CLOSE_PTH       reduce using rule 95 (empty -> .)

    multiple_vars                  shift and go to state 139
    empty                          shift and go to state 88

state 116

    (71) variable -> ID . array
    (72) array -> . empty
    (73) array -> . OPEN_SQR expression CLOSE_SQR matrix
    (95) empty -> .
    OPEN_SQR        shift and go to state 112
    COMMA           reduce using rule 95 (empty -> .)
    CLOSE_PTH       reduce using rule 95 (empty -> .)
    PEN_DOWN        reduce using rule 95 (empty -> .)
    PEN_UP          reduce using rule 95 (empty -> .)
    WHILE           reduce using rule 95 (empty -> .)
    IF              reduce using rule 95 (empty -> .)
    WRITE           reduce using rule 95 (empty -> .)
    READ            reduce using rule 95 (empty -> .)
    ID              reduce using rule 95 (empty -> .)
    BOOL            reduce using rule 95 (empty -> .)
    WORD            reduce using rule 95 (empty -> .)
    NUMBER          reduce using rule 95 (empty -> .)
    CENTER          reduce using rule 95 (empty -> .)
    FORWARD         reduce using rule 95 (empty -> .)
    RIGHT           reduce using rule 95 (empty -> .)
    LEFT            reduce using rule 95 (empty -> .)
    END             reduce using rule 95 (empty -> .)
    ELSE            reduce using rule 95 (empty -> .)

    array                          shift and go to state 110
    empty                          shift and go to state 111

state 117

    (6) multiple_var -> COMMA ID . multiple_var
    (5) multiple_var -> . empty
    (6) multiple_var -> . COMMA ID multiple_var
    (95) empty -> .
    COMMA           shift and go to state 85
    BOOL            reduce using rule 95 (empty -> .)
    WORD            reduce using rule 95 (empty -> .)
    NUMBER          reduce using rule 95 (empty -> .)
    VOID            reduce using rule 95 (empty -> .)
    MAIN            reduce using rule 95 (empty -> .)

    multiple_var                   shift and go to state 140
    empty                          shift and go to state 84

state 118

    (11) func_declaration -> func_type FUNC ID OPEN_PTH . parameter CLOSE_PTH stmnt END
    (16) parameter -> . empty
    (17) parameter -> . var_type ID multiple_parameters
    (95) empty -> .
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    CLOSE_PTH       reduce using rule 95 (empty -> .)
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11

    parameter                      shift and go to state 141
    empty                          shift and go to state 142
    var_type                       shift and go to state 143

state 119

    (77) multiple_vars -> COMMA variable .
    PEN_DOWN        reduce using rule 77 (multiple_vars -> COMMA variable .)
    PEN_UP          reduce using rule 77 (multiple_vars -> COMMA variable .)
    WHILE           reduce using rule 77 (multiple_vars -> COMMA variable .)
    IF              reduce using rule 77 (multiple_vars -> COMMA variable .)
    WRITE           reduce using rule 77 (multiple_vars -> COMMA variable .)
    READ            reduce using rule 77 (multiple_vars -> COMMA variable .)
    ID              reduce using rule 77 (multiple_vars -> COMMA variable .)
    BOOL            reduce using rule 77 (multiple_vars -> COMMA variable .)
    WORD            reduce using rule 77 (multiple_vars -> COMMA variable .)
    NUMBER          reduce using rule 77 (multiple_vars -> COMMA variable .)
    CENTER          reduce using rule 77 (multiple_vars -> COMMA variable .)
    FORWARD         reduce using rule 77 (multiple_vars -> COMMA variable .)
    RIGHT           reduce using rule 77 (multiple_vars -> COMMA variable .)
    LEFT            reduce using rule 77 (multiple_vars -> COMMA variable .)
    END             reduce using rule 77 (multiple_vars -> COMMA variable .)
    ELSE            reduce using rule 77 (multiple_vars -> COMMA variable .)
    CLOSE_PTH       reduce using rule 77 (multiple_vars -> COMMA variable .)


state 120

    (66) func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .
    PEN_DOWN        reduce using rule 66 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    PEN_UP          reduce using rule 66 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    WHILE           reduce using rule 66 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    IF              reduce using rule 66 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    WRITE           reduce using rule 66 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    READ            reduce using rule 66 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    ID              reduce using rule 66 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    BOOL            reduce using rule 66 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    WORD            reduce using rule 66 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    NUMBER          reduce using rule 66 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    CENTER          reduce using rule 66 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    FORWARD         reduce using rule 66 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    RIGHT           reduce using rule 66 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    LEFT            reduce using rule 66 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    END             reduce using rule 66 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    ELSE            reduce using rule 66 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    DIV             reduce using rule 66 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    MULT            reduce using rule 66 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    SUB             reduce using rule 66 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    SUM             reduce using rule 66 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    MORE_OR_EQ_THAN reduce using rule 66 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    LESS_OR_EQ_THAN reduce using rule 66 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    DIFFERENT_TO    reduce using rule 66 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    MORE_THAN       reduce using rule 66 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    LESS_THAN       reduce using rule 66 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    EQUAL_TO        reduce using rule 66 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    COMMA           reduce using rule 66 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    CLOSE_PTH       reduce using rule 66 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    CLOSE_SQR       reduce using rule 66 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)


state 121

    (67) func_call_param -> expression multiple_fc_param .
    CLOSE_PTH       reduce using rule 67 (func_call_param -> expression multiple_fc_param .)


state 122

    (68) multiple_fc_param -> empty .
    CLOSE_PTH       reduce using rule 68 (multiple_fc_param -> empty .)


state 123

    (69) multiple_fc_param -> COMMA . func_call_param
    (67) func_call_param -> . expression multiple_fc_param
    (47) expression -> . exp
    (48) expression -> . exp e3 rel_op exp e3 quads2
    (51) exp -> . termino
    (52) exp -> . termino e1 term_op e2 termino e1 quads1
    (53) termino -> . factor
    (54) termino -> . factor e1 fact_op factor e1 quads
    (55) factor -> . term_op var_cte
    (56) factor -> . var_cte
    (57) factor -> . OPEN_PTH expression CLOSE_PTH
    (58) term_op -> . SUB
    (59) term_op -> . SUM
    (40) var_cte -> . func_call
    (41) var_cte -> . cte_bool
    (42) var_cte -> . CTE_STR
    (43) var_cte -> . CTE_NUM
    (44) var_cte -> . variable
    (66) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (45) cte_bool -> . FALSE
    (46) cte_bool -> . TRUE
    (71) variable -> . ID array
    OPEN_PTH        shift and go to state 69
    SUB             shift and go to state 70
    SUM             shift and go to state 71
    CTE_STR         shift and go to state 74
    CTE_NUM         shift and go to state 75
    ID              shift and go to state 77
    FALSE           shift and go to state 78
    TRUE            shift and go to state 79

    func_call_param                shift and go to state 144
    expression                     shift and go to state 91
    exp                            shift and go to state 64
    termino                        shift and go to state 65
    term_op                        shift and go to state 66
    factor                         shift and go to state 67
    var_cte                        shift and go to state 68
    func_call                      shift and go to state 72
    cte_bool                       shift and go to state 73
    variable                       shift and go to state 76

state 124

    (37) var_assignation -> ID a1 assign expression . quads
    (64) quads -> .
    PEN_DOWN        reduce using rule 64 (quads -> .)
    PEN_UP          reduce using rule 64 (quads -> .)
    WHILE           reduce using rule 64 (quads -> .)
    IF              reduce using rule 64 (quads -> .)
    WRITE           reduce using rule 64 (quads -> .)
    READ            reduce using rule 64 (quads -> .)
    ID              reduce using rule 64 (quads -> .)
    BOOL            reduce using rule 64 (quads -> .)
    WORD            reduce using rule 64 (quads -> .)
    NUMBER          reduce using rule 64 (quads -> .)
    CENTER          reduce using rule 64 (quads -> .)
    FORWARD         reduce using rule 64 (quads -> .)
    RIGHT           reduce using rule 64 (quads -> .)
    LEFT            reduce using rule 64 (quads -> .)
    END             reduce using rule 64 (quads -> .)
    ELSE            reduce using rule 64 (quads -> .)

    quads                          shift and go to state 145

state 125

    (87) move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .
    PEN_DOWN        reduce using rule 87 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    PEN_UP          reduce using rule 87 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    WHILE           reduce using rule 87 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    IF              reduce using rule 87 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    WRITE           reduce using rule 87 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    READ            reduce using rule 87 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    ID              reduce using rule 87 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    BOOL            reduce using rule 87 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    WORD            reduce using rule 87 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    NUMBER          reduce using rule 87 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    CENTER          reduce using rule 87 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    FORWARD         reduce using rule 87 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    RIGHT           reduce using rule 87 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    LEFT            reduce using rule 87 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    END             reduce using rule 87 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    ELSE            reduce using rule 87 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)


state 126

    (82) while_stmnt -> WHILE con_expression stmnt END .
    PEN_DOWN        reduce using rule 82 (while_stmnt -> WHILE con_expression stmnt END .)
    PEN_UP          reduce using rule 82 (while_stmnt -> WHILE con_expression stmnt END .)
    WHILE           reduce using rule 82 (while_stmnt -> WHILE con_expression stmnt END .)
    IF              reduce using rule 82 (while_stmnt -> WHILE con_expression stmnt END .)
    WRITE           reduce using rule 82 (while_stmnt -> WHILE con_expression stmnt END .)
    READ            reduce using rule 82 (while_stmnt -> WHILE con_expression stmnt END .)
    ID              reduce using rule 82 (while_stmnt -> WHILE con_expression stmnt END .)
    BOOL            reduce using rule 82 (while_stmnt -> WHILE con_expression stmnt END .)
    WORD            reduce using rule 82 (while_stmnt -> WHILE con_expression stmnt END .)
    NUMBER          reduce using rule 82 (while_stmnt -> WHILE con_expression stmnt END .)
    CENTER          reduce using rule 82 (while_stmnt -> WHILE con_expression stmnt END .)
    FORWARD         reduce using rule 82 (while_stmnt -> WHILE con_expression stmnt END .)
    RIGHT           reduce using rule 82 (while_stmnt -> WHILE con_expression stmnt END .)
    LEFT            reduce using rule 82 (while_stmnt -> WHILE con_expression stmnt END .)
    END             reduce using rule 82 (while_stmnt -> WHILE con_expression stmnt END .)
    ELSE            reduce using rule 82 (while_stmnt -> WHILE con_expression stmnt END .)


state 127

    (84) con_expression -> expression rel_op e4 . expression quads3
    (47) expression -> . exp
    (48) expression -> . exp e3 rel_op exp e3 quads2
    (51) exp -> . termino
    (52) exp -> . termino e1 term_op e2 termino e1 quads1
    (53) termino -> . factor
    (54) termino -> . factor e1 fact_op factor e1 quads
    (55) factor -> . term_op var_cte
    (56) factor -> . var_cte
    (57) factor -> . OPEN_PTH expression CLOSE_PTH
    (58) term_op -> . SUB
    (59) term_op -> . SUM
    (40) var_cte -> . func_call
    (41) var_cte -> . cte_bool
    (42) var_cte -> . CTE_STR
    (43) var_cte -> . CTE_NUM
    (44) var_cte -> . variable
    (66) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (45) cte_bool -> . FALSE
    (46) cte_bool -> . TRUE
    (71) variable -> . ID array
    OPEN_PTH        shift and go to state 69
    SUB             shift and go to state 70
    SUM             shift and go to state 71
    CTE_STR         shift and go to state 74
    CTE_NUM         shift and go to state 75
    ID              shift and go to state 77
    FALSE           shift and go to state 78
    TRUE            shift and go to state 79

    expression                     shift and go to state 146
    exp                            shift and go to state 64
    termino                        shift and go to state 65
    term_op                        shift and go to state 66
    factor                         shift and go to state 67
    var_cte                        shift and go to state 68
    func_call                      shift and go to state 72
    cte_bool                       shift and go to state 73
    variable                       shift and go to state 76

state 128

    (48) expression -> exp e3 rel_op . exp e3 quads2
    (51) exp -> . termino
    (52) exp -> . termino e1 term_op e2 termino e1 quads1
    (53) termino -> . factor
    (54) termino -> . factor e1 fact_op factor e1 quads
    (55) factor -> . term_op var_cte
    (56) factor -> . var_cte
    (57) factor -> . OPEN_PTH expression CLOSE_PTH
    (58) term_op -> . SUB
    (59) term_op -> . SUM
    (40) var_cte -> . func_call
    (41) var_cte -> . cte_bool
    (42) var_cte -> . CTE_STR
    (43) var_cte -> . CTE_NUM
    (44) var_cte -> . variable
    (66) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (45) cte_bool -> . FALSE
    (46) cte_bool -> . TRUE
    (71) variable -> . ID array
    OPEN_PTH        shift and go to state 69
    SUB             shift and go to state 70
    SUM             shift and go to state 71
    CTE_STR         shift and go to state 74
    CTE_NUM         shift and go to state 75
    ID              shift and go to state 77
    FALSE           shift and go to state 78
    TRUE            shift and go to state 79

    exp                            shift and go to state 147
    termino                        shift and go to state 65
    term_op                        shift and go to state 66
    factor                         shift and go to state 67
    var_cte                        shift and go to state 68
    func_call                      shift and go to state 72
    cte_bool                       shift and go to state 73
    variable                       shift and go to state 76

state 129

    (52) exp -> termino e1 term_op . e2 termino e1 quads1
    (63) e2 -> .
    OPEN_PTH        reduce using rule 63 (e2 -> .)
    SUB             reduce using rule 63 (e2 -> .)
    SUM             reduce using rule 63 (e2 -> .)
    CTE_STR         reduce using rule 63 (e2 -> .)
    CTE_NUM         reduce using rule 63 (e2 -> .)
    ID              reduce using rule 63 (e2 -> .)
    FALSE           reduce using rule 63 (e2 -> .)
    TRUE            reduce using rule 63 (e2 -> .)

    e2                             shift and go to state 148

state 130

    (54) termino -> factor e1 fact_op . factor e1 quads
    (55) factor -> . term_op var_cte
    (56) factor -> . var_cte
    (57) factor -> . OPEN_PTH expression CLOSE_PTH
    (58) term_op -> . SUB
    (59) term_op -> . SUM
    (40) var_cte -> . func_call
    (41) var_cte -> . cte_bool
    (42) var_cte -> . CTE_STR
    (43) var_cte -> . CTE_NUM
    (44) var_cte -> . variable
    (66) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (45) cte_bool -> . FALSE
    (46) cte_bool -> . TRUE
    (71) variable -> . ID array
    OPEN_PTH        shift and go to state 69
    SUB             shift and go to state 70
    SUM             shift and go to state 71
    CTE_STR         shift and go to state 74
    CTE_NUM         shift and go to state 75
    ID              shift and go to state 77
    FALSE           shift and go to state 78
    TRUE            shift and go to state 79

    factor                         shift and go to state 149
    term_op                        shift and go to state 66
    var_cte                        shift and go to state 68
    func_call                      shift and go to state 72
    cte_bool                       shift and go to state 73
    variable                       shift and go to state 76

state 131

    (60) fact_op -> DIV .
    OPEN_PTH        reduce using rule 60 (fact_op -> DIV .)
    SUB             reduce using rule 60 (fact_op -> DIV .)
    SUM             reduce using rule 60 (fact_op -> DIV .)
    CTE_STR         reduce using rule 60 (fact_op -> DIV .)
    CTE_NUM         reduce using rule 60 (fact_op -> DIV .)
    ID              reduce using rule 60 (fact_op -> DIV .)
    FALSE           reduce using rule 60 (fact_op -> DIV .)
    TRUE            reduce using rule 60 (fact_op -> DIV .)


state 132

    (61) fact_op -> MULT .
    OPEN_PTH        reduce using rule 61 (fact_op -> MULT .)
    SUB             reduce using rule 61 (fact_op -> MULT .)
    SUM             reduce using rule 61 (fact_op -> MULT .)
    CTE_STR         reduce using rule 61 (fact_op -> MULT .)
    CTE_NUM         reduce using rule 61 (fact_op -> MULT .)
    ID              reduce using rule 61 (fact_op -> MULT .)
    FALSE           reduce using rule 61 (fact_op -> MULT .)
    TRUE            reduce using rule 61 (fact_op -> MULT .)


state 133

    (57) factor -> OPEN_PTH expression CLOSE_PTH .
    DIV             reduce using rule 57 (factor -> OPEN_PTH expression CLOSE_PTH .)
    MULT            reduce using rule 57 (factor -> OPEN_PTH expression CLOSE_PTH .)
    SUB             reduce using rule 57 (factor -> OPEN_PTH expression CLOSE_PTH .)
    SUM             reduce using rule 57 (factor -> OPEN_PTH expression CLOSE_PTH .)
    MORE_OR_EQ_THAN reduce using rule 57 (factor -> OPEN_PTH expression CLOSE_PTH .)
    LESS_OR_EQ_THAN reduce using rule 57 (factor -> OPEN_PTH expression CLOSE_PTH .)
    DIFFERENT_TO    reduce using rule 57 (factor -> OPEN_PTH expression CLOSE_PTH .)
    MORE_THAN       reduce using rule 57 (factor -> OPEN_PTH expression CLOSE_PTH .)
    LESS_THAN       reduce using rule 57 (factor -> OPEN_PTH expression CLOSE_PTH .)
    EQUAL_TO        reduce using rule 57 (factor -> OPEN_PTH expression CLOSE_PTH .)
    PEN_DOWN        reduce using rule 57 (factor -> OPEN_PTH expression CLOSE_PTH .)
    PEN_UP          reduce using rule 57 (factor -> OPEN_PTH expression CLOSE_PTH .)
    WHILE           reduce using rule 57 (factor -> OPEN_PTH expression CLOSE_PTH .)
    IF              reduce using rule 57 (factor -> OPEN_PTH expression CLOSE_PTH .)
    WRITE           reduce using rule 57 (factor -> OPEN_PTH expression CLOSE_PTH .)
    READ            reduce using rule 57 (factor -> OPEN_PTH expression CLOSE_PTH .)
    ID              reduce using rule 57 (factor -> OPEN_PTH expression CLOSE_PTH .)
    BOOL            reduce using rule 57 (factor -> OPEN_PTH expression CLOSE_PTH .)
    WORD            reduce using rule 57 (factor -> OPEN_PTH expression CLOSE_PTH .)
    NUMBER          reduce using rule 57 (factor -> OPEN_PTH expression CLOSE_PTH .)
    CENTER          reduce using rule 57 (factor -> OPEN_PTH expression CLOSE_PTH .)
    FORWARD         reduce using rule 57 (factor -> OPEN_PTH expression CLOSE_PTH .)
    RIGHT           reduce using rule 57 (factor -> OPEN_PTH expression CLOSE_PTH .)
    LEFT            reduce using rule 57 (factor -> OPEN_PTH expression CLOSE_PTH .)
    END             reduce using rule 57 (factor -> OPEN_PTH expression CLOSE_PTH .)
    ELSE            reduce using rule 57 (factor -> OPEN_PTH expression CLOSE_PTH .)
    COMMA           reduce using rule 57 (factor -> OPEN_PTH expression CLOSE_PTH .)
    CLOSE_PTH       reduce using rule 57 (factor -> OPEN_PTH expression CLOSE_PTH .)
    CLOSE_SQR       reduce using rule 57 (factor -> OPEN_PTH expression CLOSE_PTH .)


state 134

    (73) array -> OPEN_SQR expression . CLOSE_SQR matrix
    CLOSE_SQR       shift and go to state 150


state 135

    (79) if_stmnt -> IF con_expression stmnt else_stmnt .
    PEN_DOWN        reduce using rule 79 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    PEN_UP          reduce using rule 79 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    WHILE           reduce using rule 79 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    IF              reduce using rule 79 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    WRITE           reduce using rule 79 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    READ            reduce using rule 79 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    ID              reduce using rule 79 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    BOOL            reduce using rule 79 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    WORD            reduce using rule 79 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    NUMBER          reduce using rule 79 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    CENTER          reduce using rule 79 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    FORWARD         reduce using rule 79 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    RIGHT           reduce using rule 79 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    LEFT            reduce using rule 79 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    END             reduce using rule 79 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    ELSE            reduce using rule 79 (if_stmnt -> IF con_expression stmnt else_stmnt .)


state 136

    (80) else_stmnt -> END .
    PEN_DOWN        reduce using rule 80 (else_stmnt -> END .)
    PEN_UP          reduce using rule 80 (else_stmnt -> END .)
    WHILE           reduce using rule 80 (else_stmnt -> END .)
    IF              reduce using rule 80 (else_stmnt -> END .)
    WRITE           reduce using rule 80 (else_stmnt -> END .)
    READ            reduce using rule 80 (else_stmnt -> END .)
    ID              reduce using rule 80 (else_stmnt -> END .)
    BOOL            reduce using rule 80 (else_stmnt -> END .)
    WORD            reduce using rule 80 (else_stmnt -> END .)
    NUMBER          reduce using rule 80 (else_stmnt -> END .)
    CENTER          reduce using rule 80 (else_stmnt -> END .)
    FORWARD         reduce using rule 80 (else_stmnt -> END .)
    RIGHT           reduce using rule 80 (else_stmnt -> END .)
    LEFT            reduce using rule 80 (else_stmnt -> END .)
    END             reduce using rule 80 (else_stmnt -> END .)
    ELSE            reduce using rule 80 (else_stmnt -> END .)


state 137

    (81) else_stmnt -> ELSE . stmnt END
    (20) stmnt -> . empty
    (21) stmnt -> . var_declaration_func stmnt
    (22) stmnt -> . pen_func stmnt
    (23) stmnt -> . move_func stmnt
    (24) stmnt -> . while_stmnt stmnt
    (25) stmnt -> . if_stmnt stmnt
    (26) stmnt -> . write stmnt
    (27) stmnt -> . read stmnt
    (28) stmnt -> . func_call stmnt
    (29) stmnt -> . var_assignation stmnt
    (95) empty -> .
    (30) var_declaration_func -> . var_type ID multiple_vars
    (92) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (93) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (87) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (82) while_stmnt -> . WHILE con_expression stmnt END
    (79) if_stmnt -> . IF con_expression stmnt else_stmnt
    (78) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (70) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (66) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (37) var_assignation -> . ID a1 assign expression quads
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (88) move_type -> . CENTER
    (89) move_type -> . FORWARD
    (90) move_type -> . RIGHT
    (91) move_type -> . LEFT
    END             reduce using rule 95 (empty -> .)
    PEN_DOWN        shift and go to state 32
    PEN_UP          shift and go to state 33
    WHILE           shift and go to state 35
    IF              shift and go to state 36
    WRITE           shift and go to state 37
    READ            shift and go to state 38
    ID              shift and go to state 31
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11
    CENTER          shift and go to state 39
    FORWARD         shift and go to state 40
    RIGHT           shift and go to state 41
    LEFT            shift and go to state 42

    stmnt                          shift and go to state 151
    empty                          shift and go to state 20
    var_declaration_func           shift and go to state 21
    pen_func                       shift and go to state 22
    move_func                      shift and go to state 23
    while_stmnt                    shift and go to state 24
    if_stmnt                       shift and go to state 25
    write                          shift and go to state 26
    read                           shift and go to state 27
    func_call                      shift and go to state 28
    var_assignation                shift and go to state 29
    var_type                       shift and go to state 30
    move_type                      shift and go to state 34

state 138

    (78) write -> WRITE OPEN_PTH expression CLOSE_PTH .
    PEN_DOWN        reduce using rule 78 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    PEN_UP          reduce using rule 78 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    WHILE           reduce using rule 78 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    IF              reduce using rule 78 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    WRITE           reduce using rule 78 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    READ            reduce using rule 78 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    ID              reduce using rule 78 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    BOOL            reduce using rule 78 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    WORD            reduce using rule 78 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    NUMBER          reduce using rule 78 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    CENTER          reduce using rule 78 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    FORWARD         reduce using rule 78 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    RIGHT           reduce using rule 78 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    LEFT            reduce using rule 78 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    END             reduce using rule 78 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    ELSE            reduce using rule 78 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)


state 139

    (70) read -> READ OPEN_PTH variable multiple_vars . CLOSE_PTH
    CLOSE_PTH       shift and go to state 152


state 140

    (6) multiple_var -> COMMA ID multiple_var .
    BOOL            reduce using rule 6 (multiple_var -> COMMA ID multiple_var .)
    WORD            reduce using rule 6 (multiple_var -> COMMA ID multiple_var .)
    NUMBER          reduce using rule 6 (multiple_var -> COMMA ID multiple_var .)
    VOID            reduce using rule 6 (multiple_var -> COMMA ID multiple_var .)
    MAIN            reduce using rule 6 (multiple_var -> COMMA ID multiple_var .)


state 141

    (11) func_declaration -> func_type FUNC ID OPEN_PTH parameter . CLOSE_PTH stmnt END
    CLOSE_PTH       shift and go to state 153


state 142

    (16) parameter -> empty .
    CLOSE_PTH       reduce using rule 16 (parameter -> empty .)


state 143

    (17) parameter -> var_type . ID multiple_parameters
    ID              shift and go to state 154


state 144

    (69) multiple_fc_param -> COMMA func_call_param .
    CLOSE_PTH       reduce using rule 69 (multiple_fc_param -> COMMA func_call_param .)


state 145

    (37) var_assignation -> ID a1 assign expression quads .
    PEN_DOWN        reduce using rule 37 (var_assignation -> ID a1 assign expression quads .)
    PEN_UP          reduce using rule 37 (var_assignation -> ID a1 assign expression quads .)
    WHILE           reduce using rule 37 (var_assignation -> ID a1 assign expression quads .)
    IF              reduce using rule 37 (var_assignation -> ID a1 assign expression quads .)
    WRITE           reduce using rule 37 (var_assignation -> ID a1 assign expression quads .)
    READ            reduce using rule 37 (var_assignation -> ID a1 assign expression quads .)
    ID              reduce using rule 37 (var_assignation -> ID a1 assign expression quads .)
    BOOL            reduce using rule 37 (var_assignation -> ID a1 assign expression quads .)
    WORD            reduce using rule 37 (var_assignation -> ID a1 assign expression quads .)
    NUMBER          reduce using rule 37 (var_assignation -> ID a1 assign expression quads .)
    CENTER          reduce using rule 37 (var_assignation -> ID a1 assign expression quads .)
    FORWARD         reduce using rule 37 (var_assignation -> ID a1 assign expression quads .)
    RIGHT           reduce using rule 37 (var_assignation -> ID a1 assign expression quads .)
    LEFT            reduce using rule 37 (var_assignation -> ID a1 assign expression quads .)
    END             reduce using rule 37 (var_assignation -> ID a1 assign expression quads .)
    ELSE            reduce using rule 37 (var_assignation -> ID a1 assign expression quads .)


state 146

    (84) con_expression -> expression rel_op e4 expression . quads3
    (86) quads3 -> .
    PEN_DOWN        reduce using rule 86 (quads3 -> .)
    PEN_UP          reduce using rule 86 (quads3 -> .)
    WHILE           reduce using rule 86 (quads3 -> .)
    IF              reduce using rule 86 (quads3 -> .)
    WRITE           reduce using rule 86 (quads3 -> .)
    READ            reduce using rule 86 (quads3 -> .)
    ID              reduce using rule 86 (quads3 -> .)
    BOOL            reduce using rule 86 (quads3 -> .)
    WORD            reduce using rule 86 (quads3 -> .)
    NUMBER          reduce using rule 86 (quads3 -> .)
    CENTER          reduce using rule 86 (quads3 -> .)
    FORWARD         reduce using rule 86 (quads3 -> .)
    RIGHT           reduce using rule 86 (quads3 -> .)
    LEFT            reduce using rule 86 (quads3 -> .)
    END             reduce using rule 86 (quads3 -> .)
    ELSE            reduce using rule 86 (quads3 -> .)

    quads3                         shift and go to state 155

state 147

    (48) expression -> exp e3 rel_op exp . e3 quads2
    (50) e3 -> .
    MORE_OR_EQ_THAN reduce using rule 50 (e3 -> .)
    LESS_OR_EQ_THAN reduce using rule 50 (e3 -> .)
    DIFFERENT_TO    reduce using rule 50 (e3 -> .)
    MORE_THAN       reduce using rule 50 (e3 -> .)
    LESS_THAN       reduce using rule 50 (e3 -> .)
    EQUAL_TO        reduce using rule 50 (e3 -> .)
    PEN_DOWN        reduce using rule 50 (e3 -> .)
    PEN_UP          reduce using rule 50 (e3 -> .)
    WHILE           reduce using rule 50 (e3 -> .)
    IF              reduce using rule 50 (e3 -> .)
    WRITE           reduce using rule 50 (e3 -> .)
    READ            reduce using rule 50 (e3 -> .)
    ID              reduce using rule 50 (e3 -> .)
    BOOL            reduce using rule 50 (e3 -> .)
    WORD            reduce using rule 50 (e3 -> .)
    NUMBER          reduce using rule 50 (e3 -> .)
    CENTER          reduce using rule 50 (e3 -> .)
    FORWARD         reduce using rule 50 (e3 -> .)
    RIGHT           reduce using rule 50 (e3 -> .)
    LEFT            reduce using rule 50 (e3 -> .)
    END             reduce using rule 50 (e3 -> .)
    ELSE            reduce using rule 50 (e3 -> .)
    COMMA           reduce using rule 50 (e3 -> .)
    CLOSE_PTH       reduce using rule 50 (e3 -> .)
    CLOSE_SQR       reduce using rule 50 (e3 -> .)

    e3                             shift and go to state 156

state 148

    (52) exp -> termino e1 term_op e2 . termino e1 quads1
    (53) termino -> . factor
    (54) termino -> . factor e1 fact_op factor e1 quads
    (55) factor -> . term_op var_cte
    (56) factor -> . var_cte
    (57) factor -> . OPEN_PTH expression CLOSE_PTH
    (58) term_op -> . SUB
    (59) term_op -> . SUM
    (40) var_cte -> . func_call
    (41) var_cte -> . cte_bool
    (42) var_cte -> . CTE_STR
    (43) var_cte -> . CTE_NUM
    (44) var_cte -> . variable
    (66) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (45) cte_bool -> . FALSE
    (46) cte_bool -> . TRUE
    (71) variable -> . ID array
    OPEN_PTH        shift and go to state 69
    SUB             shift and go to state 70
    SUM             shift and go to state 71
    CTE_STR         shift and go to state 74
    CTE_NUM         shift and go to state 75
    ID              shift and go to state 77
    FALSE           shift and go to state 78
    TRUE            shift and go to state 79

    termino                        shift and go to state 157
    term_op                        shift and go to state 66
    factor                         shift and go to state 67
    var_cte                        shift and go to state 68
    func_call                      shift and go to state 72
    cte_bool                       shift and go to state 73
    variable                       shift and go to state 76

state 149

    (54) termino -> factor e1 fact_op factor . e1 quads
    (62) e1 -> .
    SUB             reduce using rule 62 (e1 -> .)
    SUM             reduce using rule 62 (e1 -> .)
    MORE_OR_EQ_THAN reduce using rule 62 (e1 -> .)
    LESS_OR_EQ_THAN reduce using rule 62 (e1 -> .)
    DIFFERENT_TO    reduce using rule 62 (e1 -> .)
    MORE_THAN       reduce using rule 62 (e1 -> .)
    LESS_THAN       reduce using rule 62 (e1 -> .)
    EQUAL_TO        reduce using rule 62 (e1 -> .)
    PEN_DOWN        reduce using rule 62 (e1 -> .)
    PEN_UP          reduce using rule 62 (e1 -> .)
    WHILE           reduce using rule 62 (e1 -> .)
    IF              reduce using rule 62 (e1 -> .)
    WRITE           reduce using rule 62 (e1 -> .)
    READ            reduce using rule 62 (e1 -> .)
    ID              reduce using rule 62 (e1 -> .)
    BOOL            reduce using rule 62 (e1 -> .)
    WORD            reduce using rule 62 (e1 -> .)
    NUMBER          reduce using rule 62 (e1 -> .)
    CENTER          reduce using rule 62 (e1 -> .)
    FORWARD         reduce using rule 62 (e1 -> .)
    RIGHT           reduce using rule 62 (e1 -> .)
    LEFT            reduce using rule 62 (e1 -> .)
    END             reduce using rule 62 (e1 -> .)
    ELSE            reduce using rule 62 (e1 -> .)
    COMMA           reduce using rule 62 (e1 -> .)
    CLOSE_PTH       reduce using rule 62 (e1 -> .)
    CLOSE_SQR       reduce using rule 62 (e1 -> .)

    e1                             shift and go to state 158

state 150

    (73) array -> OPEN_SQR expression CLOSE_SQR . matrix
    (74) matrix -> . empty
    (75) matrix -> . OPEN_SQR expression CLOSE_SQR
    (95) empty -> .
    OPEN_SQR        shift and go to state 159
    DIV             reduce using rule 95 (empty -> .)
    MULT            reduce using rule 95 (empty -> .)
    SUB             reduce using rule 95 (empty -> .)
    SUM             reduce using rule 95 (empty -> .)
    MORE_OR_EQ_THAN reduce using rule 95 (empty -> .)
    LESS_OR_EQ_THAN reduce using rule 95 (empty -> .)
    DIFFERENT_TO    reduce using rule 95 (empty -> .)
    MORE_THAN       reduce using rule 95 (empty -> .)
    LESS_THAN       reduce using rule 95 (empty -> .)
    EQUAL_TO        reduce using rule 95 (empty -> .)
    PEN_DOWN        reduce using rule 95 (empty -> .)
    PEN_UP          reduce using rule 95 (empty -> .)
    WHILE           reduce using rule 95 (empty -> .)
    IF              reduce using rule 95 (empty -> .)
    WRITE           reduce using rule 95 (empty -> .)
    READ            reduce using rule 95 (empty -> .)
    ID              reduce using rule 95 (empty -> .)
    BOOL            reduce using rule 95 (empty -> .)
    WORD            reduce using rule 95 (empty -> .)
    NUMBER          reduce using rule 95 (empty -> .)
    CENTER          reduce using rule 95 (empty -> .)
    FORWARD         reduce using rule 95 (empty -> .)
    RIGHT           reduce using rule 95 (empty -> .)
    LEFT            reduce using rule 95 (empty -> .)
    END             reduce using rule 95 (empty -> .)
    ELSE            reduce using rule 95 (empty -> .)
    COMMA           reduce using rule 95 (empty -> .)
    CLOSE_PTH       reduce using rule 95 (empty -> .)
    CLOSE_SQR       reduce using rule 95 (empty -> .)

    matrix                         shift and go to state 160
    empty                          shift and go to state 161

state 151

    (81) else_stmnt -> ELSE stmnt . END
    END             shift and go to state 162


state 152

    (70) read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .
    PEN_DOWN        reduce using rule 70 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    PEN_UP          reduce using rule 70 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    WHILE           reduce using rule 70 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    IF              reduce using rule 70 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    WRITE           reduce using rule 70 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    READ            reduce using rule 70 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    ID              reduce using rule 70 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    BOOL            reduce using rule 70 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    WORD            reduce using rule 70 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    NUMBER          reduce using rule 70 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    CENTER          reduce using rule 70 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    FORWARD         reduce using rule 70 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    RIGHT           reduce using rule 70 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    LEFT            reduce using rule 70 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    END             reduce using rule 70 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    ELSE            reduce using rule 70 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)


state 153

    (11) func_declaration -> func_type FUNC ID OPEN_PTH parameter CLOSE_PTH . stmnt END
    (20) stmnt -> . empty
    (21) stmnt -> . var_declaration_func stmnt
    (22) stmnt -> . pen_func stmnt
    (23) stmnt -> . move_func stmnt
    (24) stmnt -> . while_stmnt stmnt
    (25) stmnt -> . if_stmnt stmnt
    (26) stmnt -> . write stmnt
    (27) stmnt -> . read stmnt
    (28) stmnt -> . func_call stmnt
    (29) stmnt -> . var_assignation stmnt
    (95) empty -> .
    (30) var_declaration_func -> . var_type ID multiple_vars
    (92) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (93) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (87) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (82) while_stmnt -> . WHILE con_expression stmnt END
    (79) if_stmnt -> . IF con_expression stmnt else_stmnt
    (78) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (70) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (66) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (37) var_assignation -> . ID a1 assign expression quads
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    (88) move_type -> . CENTER
    (89) move_type -> . FORWARD
    (90) move_type -> . RIGHT
    (91) move_type -> . LEFT
    END             reduce using rule 95 (empty -> .)
    PEN_DOWN        shift and go to state 32
    PEN_UP          shift and go to state 33
    WHILE           shift and go to state 35
    IF              shift and go to state 36
    WRITE           shift and go to state 37
    READ            shift and go to state 38
    ID              shift and go to state 31
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11
    CENTER          shift and go to state 39
    FORWARD         shift and go to state 40
    RIGHT           shift and go to state 41
    LEFT            shift and go to state 42

    stmnt                          shift and go to state 163
    empty                          shift and go to state 20
    var_declaration_func           shift and go to state 21
    pen_func                       shift and go to state 22
    move_func                      shift and go to state 23
    while_stmnt                    shift and go to state 24
    if_stmnt                       shift and go to state 25
    write                          shift and go to state 26
    read                           shift and go to state 27
    func_call                      shift and go to state 28
    var_assignation                shift and go to state 29
    var_type                       shift and go to state 30
    move_type                      shift and go to state 34

state 154

    (17) parameter -> var_type ID . multiple_parameters
    (18) multiple_parameters -> . empty
    (19) multiple_parameters -> . COMMA parameter
    (95) empty -> .
    COMMA           shift and go to state 166
    CLOSE_PTH       reduce using rule 95 (empty -> .)

    multiple_parameters            shift and go to state 164
    empty                          shift and go to state 165

state 155

    (84) con_expression -> expression rel_op e4 expression quads3 .
    PEN_DOWN        reduce using rule 84 (con_expression -> expression rel_op e4 expression quads3 .)
    PEN_UP          reduce using rule 84 (con_expression -> expression rel_op e4 expression quads3 .)
    WHILE           reduce using rule 84 (con_expression -> expression rel_op e4 expression quads3 .)
    IF              reduce using rule 84 (con_expression -> expression rel_op e4 expression quads3 .)
    WRITE           reduce using rule 84 (con_expression -> expression rel_op e4 expression quads3 .)
    READ            reduce using rule 84 (con_expression -> expression rel_op e4 expression quads3 .)
    ID              reduce using rule 84 (con_expression -> expression rel_op e4 expression quads3 .)
    BOOL            reduce using rule 84 (con_expression -> expression rel_op e4 expression quads3 .)
    WORD            reduce using rule 84 (con_expression -> expression rel_op e4 expression quads3 .)
    NUMBER          reduce using rule 84 (con_expression -> expression rel_op e4 expression quads3 .)
    CENTER          reduce using rule 84 (con_expression -> expression rel_op e4 expression quads3 .)
    FORWARD         reduce using rule 84 (con_expression -> expression rel_op e4 expression quads3 .)
    RIGHT           reduce using rule 84 (con_expression -> expression rel_op e4 expression quads3 .)
    LEFT            reduce using rule 84 (con_expression -> expression rel_op e4 expression quads3 .)
    END             reduce using rule 84 (con_expression -> expression rel_op e4 expression quads3 .)
    ELSE            reduce using rule 84 (con_expression -> expression rel_op e4 expression quads3 .)


state 156

    (48) expression -> exp e3 rel_op exp e3 . quads2
    (49) quads2 -> .
    MORE_OR_EQ_THAN reduce using rule 49 (quads2 -> .)
    LESS_OR_EQ_THAN reduce using rule 49 (quads2 -> .)
    DIFFERENT_TO    reduce using rule 49 (quads2 -> .)
    MORE_THAN       reduce using rule 49 (quads2 -> .)
    LESS_THAN       reduce using rule 49 (quads2 -> .)
    EQUAL_TO        reduce using rule 49 (quads2 -> .)
    PEN_DOWN        reduce using rule 49 (quads2 -> .)
    PEN_UP          reduce using rule 49 (quads2 -> .)
    WHILE           reduce using rule 49 (quads2 -> .)
    IF              reduce using rule 49 (quads2 -> .)
    WRITE           reduce using rule 49 (quads2 -> .)
    READ            reduce using rule 49 (quads2 -> .)
    ID              reduce using rule 49 (quads2 -> .)
    BOOL            reduce using rule 49 (quads2 -> .)
    WORD            reduce using rule 49 (quads2 -> .)
    NUMBER          reduce using rule 49 (quads2 -> .)
    CENTER          reduce using rule 49 (quads2 -> .)
    FORWARD         reduce using rule 49 (quads2 -> .)
    RIGHT           reduce using rule 49 (quads2 -> .)
    LEFT            reduce using rule 49 (quads2 -> .)
    END             reduce using rule 49 (quads2 -> .)
    ELSE            reduce using rule 49 (quads2 -> .)
    COMMA           reduce using rule 49 (quads2 -> .)
    CLOSE_PTH       reduce using rule 49 (quads2 -> .)
    CLOSE_SQR       reduce using rule 49 (quads2 -> .)

    quads2                         shift and go to state 167

state 157

    (52) exp -> termino e1 term_op e2 termino . e1 quads1
    (62) e1 -> .
    MORE_OR_EQ_THAN reduce using rule 62 (e1 -> .)
    LESS_OR_EQ_THAN reduce using rule 62 (e1 -> .)
    DIFFERENT_TO    reduce using rule 62 (e1 -> .)
    MORE_THAN       reduce using rule 62 (e1 -> .)
    LESS_THAN       reduce using rule 62 (e1 -> .)
    EQUAL_TO        reduce using rule 62 (e1 -> .)
    PEN_DOWN        reduce using rule 62 (e1 -> .)
    PEN_UP          reduce using rule 62 (e1 -> .)
    WHILE           reduce using rule 62 (e1 -> .)
    IF              reduce using rule 62 (e1 -> .)
    WRITE           reduce using rule 62 (e1 -> .)
    READ            reduce using rule 62 (e1 -> .)
    ID              reduce using rule 62 (e1 -> .)
    BOOL            reduce using rule 62 (e1 -> .)
    WORD            reduce using rule 62 (e1 -> .)
    NUMBER          reduce using rule 62 (e1 -> .)
    CENTER          reduce using rule 62 (e1 -> .)
    FORWARD         reduce using rule 62 (e1 -> .)
    RIGHT           reduce using rule 62 (e1 -> .)
    LEFT            reduce using rule 62 (e1 -> .)
    END             reduce using rule 62 (e1 -> .)
    ELSE            reduce using rule 62 (e1 -> .)
    COMMA           reduce using rule 62 (e1 -> .)
    CLOSE_PTH       reduce using rule 62 (e1 -> .)
    CLOSE_SQR       reduce using rule 62 (e1 -> .)

    e1                             shift and go to state 168

state 158

    (54) termino -> factor e1 fact_op factor e1 . quads
    (64) quads -> .
    SUB             reduce using rule 64 (quads -> .)
    SUM             reduce using rule 64 (quads -> .)
    MORE_OR_EQ_THAN reduce using rule 64 (quads -> .)
    LESS_OR_EQ_THAN reduce using rule 64 (quads -> .)
    DIFFERENT_TO    reduce using rule 64 (quads -> .)
    MORE_THAN       reduce using rule 64 (quads -> .)
    LESS_THAN       reduce using rule 64 (quads -> .)
    EQUAL_TO        reduce using rule 64 (quads -> .)
    PEN_DOWN        reduce using rule 64 (quads -> .)
    PEN_UP          reduce using rule 64 (quads -> .)
    WHILE           reduce using rule 64 (quads -> .)
    IF              reduce using rule 64 (quads -> .)
    WRITE           reduce using rule 64 (quads -> .)
    READ            reduce using rule 64 (quads -> .)
    ID              reduce using rule 64 (quads -> .)
    BOOL            reduce using rule 64 (quads -> .)
    WORD            reduce using rule 64 (quads -> .)
    NUMBER          reduce using rule 64 (quads -> .)
    CENTER          reduce using rule 64 (quads -> .)
    FORWARD         reduce using rule 64 (quads -> .)
    RIGHT           reduce using rule 64 (quads -> .)
    LEFT            reduce using rule 64 (quads -> .)
    END             reduce using rule 64 (quads -> .)
    ELSE            reduce using rule 64 (quads -> .)
    COMMA           reduce using rule 64 (quads -> .)
    CLOSE_PTH       reduce using rule 64 (quads -> .)
    CLOSE_SQR       reduce using rule 64 (quads -> .)

    quads                          shift and go to state 169

state 159

    (75) matrix -> OPEN_SQR . expression CLOSE_SQR
    (47) expression -> . exp
    (48) expression -> . exp e3 rel_op exp e3 quads2
    (51) exp -> . termino
    (52) exp -> . termino e1 term_op e2 termino e1 quads1
    (53) termino -> . factor
    (54) termino -> . factor e1 fact_op factor e1 quads
    (55) factor -> . term_op var_cte
    (56) factor -> . var_cte
    (57) factor -> . OPEN_PTH expression CLOSE_PTH
    (58) term_op -> . SUB
    (59) term_op -> . SUM
    (40) var_cte -> . func_call
    (41) var_cte -> . cte_bool
    (42) var_cte -> . CTE_STR
    (43) var_cte -> . CTE_NUM
    (44) var_cte -> . variable
    (66) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (45) cte_bool -> . FALSE
    (46) cte_bool -> . TRUE
    (71) variable -> . ID array
    OPEN_PTH        shift and go to state 69
    SUB             shift and go to state 70
    SUM             shift and go to state 71
    CTE_STR         shift and go to state 74
    CTE_NUM         shift and go to state 75
    ID              shift and go to state 77
    FALSE           shift and go to state 78
    TRUE            shift and go to state 79

    expression                     shift and go to state 170
    exp                            shift and go to state 64
    termino                        shift and go to state 65
    term_op                        shift and go to state 66
    factor                         shift and go to state 67
    var_cte                        shift and go to state 68
    func_call                      shift and go to state 72
    cte_bool                       shift and go to state 73
    variable                       shift and go to state 76

state 160

    (73) array -> OPEN_SQR expression CLOSE_SQR matrix .
    DIV             reduce using rule 73 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    MULT            reduce using rule 73 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    SUB             reduce using rule 73 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    SUM             reduce using rule 73 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    MORE_OR_EQ_THAN reduce using rule 73 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    LESS_OR_EQ_THAN reduce using rule 73 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    DIFFERENT_TO    reduce using rule 73 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    MORE_THAN       reduce using rule 73 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    LESS_THAN       reduce using rule 73 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    EQUAL_TO        reduce using rule 73 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    PEN_DOWN        reduce using rule 73 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    PEN_UP          reduce using rule 73 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    WHILE           reduce using rule 73 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    IF              reduce using rule 73 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    WRITE           reduce using rule 73 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    READ            reduce using rule 73 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    ID              reduce using rule 73 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    BOOL            reduce using rule 73 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    WORD            reduce using rule 73 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    NUMBER          reduce using rule 73 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    CENTER          reduce using rule 73 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    FORWARD         reduce using rule 73 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    RIGHT           reduce using rule 73 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    LEFT            reduce using rule 73 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    END             reduce using rule 73 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    ELSE            reduce using rule 73 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    COMMA           reduce using rule 73 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    CLOSE_PTH       reduce using rule 73 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    CLOSE_SQR       reduce using rule 73 (array -> OPEN_SQR expression CLOSE_SQR matrix .)


state 161

    (74) matrix -> empty .
    DIV             reduce using rule 74 (matrix -> empty .)
    MULT            reduce using rule 74 (matrix -> empty .)
    SUB             reduce using rule 74 (matrix -> empty .)
    SUM             reduce using rule 74 (matrix -> empty .)
    MORE_OR_EQ_THAN reduce using rule 74 (matrix -> empty .)
    LESS_OR_EQ_THAN reduce using rule 74 (matrix -> empty .)
    DIFFERENT_TO    reduce using rule 74 (matrix -> empty .)
    MORE_THAN       reduce using rule 74 (matrix -> empty .)
    LESS_THAN       reduce using rule 74 (matrix -> empty .)
    EQUAL_TO        reduce using rule 74 (matrix -> empty .)
    PEN_DOWN        reduce using rule 74 (matrix -> empty .)
    PEN_UP          reduce using rule 74 (matrix -> empty .)
    WHILE           reduce using rule 74 (matrix -> empty .)
    IF              reduce using rule 74 (matrix -> empty .)
    WRITE           reduce using rule 74 (matrix -> empty .)
    READ            reduce using rule 74 (matrix -> empty .)
    ID              reduce using rule 74 (matrix -> empty .)
    BOOL            reduce using rule 74 (matrix -> empty .)
    WORD            reduce using rule 74 (matrix -> empty .)
    NUMBER          reduce using rule 74 (matrix -> empty .)
    CENTER          reduce using rule 74 (matrix -> empty .)
    FORWARD         reduce using rule 74 (matrix -> empty .)
    RIGHT           reduce using rule 74 (matrix -> empty .)
    LEFT            reduce using rule 74 (matrix -> empty .)
    END             reduce using rule 74 (matrix -> empty .)
    ELSE            reduce using rule 74 (matrix -> empty .)
    COMMA           reduce using rule 74 (matrix -> empty .)
    CLOSE_PTH       reduce using rule 74 (matrix -> empty .)
    CLOSE_SQR       reduce using rule 74 (matrix -> empty .)


state 162

    (81) else_stmnt -> ELSE stmnt END .
    PEN_DOWN        reduce using rule 81 (else_stmnt -> ELSE stmnt END .)
    PEN_UP          reduce using rule 81 (else_stmnt -> ELSE stmnt END .)
    WHILE           reduce using rule 81 (else_stmnt -> ELSE stmnt END .)
    IF              reduce using rule 81 (else_stmnt -> ELSE stmnt END .)
    WRITE           reduce using rule 81 (else_stmnt -> ELSE stmnt END .)
    READ            reduce using rule 81 (else_stmnt -> ELSE stmnt END .)
    ID              reduce using rule 81 (else_stmnt -> ELSE stmnt END .)
    BOOL            reduce using rule 81 (else_stmnt -> ELSE stmnt END .)
    WORD            reduce using rule 81 (else_stmnt -> ELSE stmnt END .)
    NUMBER          reduce using rule 81 (else_stmnt -> ELSE stmnt END .)
    CENTER          reduce using rule 81 (else_stmnt -> ELSE stmnt END .)
    FORWARD         reduce using rule 81 (else_stmnt -> ELSE stmnt END .)
    RIGHT           reduce using rule 81 (else_stmnt -> ELSE stmnt END .)
    LEFT            reduce using rule 81 (else_stmnt -> ELSE stmnt END .)
    END             reduce using rule 81 (else_stmnt -> ELSE stmnt END .)
    ELSE            reduce using rule 81 (else_stmnt -> ELSE stmnt END .)


state 163

    (11) func_declaration -> func_type FUNC ID OPEN_PTH parameter CLOSE_PTH stmnt . END
    END             shift and go to state 171


state 164

    (17) parameter -> var_type ID multiple_parameters .
    CLOSE_PTH       reduce using rule 17 (parameter -> var_type ID multiple_parameters .)


state 165

    (18) multiple_parameters -> empty .
    CLOSE_PTH       reduce using rule 18 (multiple_parameters -> empty .)


state 166

    (19) multiple_parameters -> COMMA . parameter
    (16) parameter -> . empty
    (17) parameter -> . var_type ID multiple_parameters
    (95) empty -> .
    (7) var_type -> . BOOL
    (8) var_type -> . WORD
    (9) var_type -> . NUMBER
    CLOSE_PTH       reduce using rule 95 (empty -> .)
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11

    parameter                      shift and go to state 172
    empty                          shift and go to state 142
    var_type                       shift and go to state 143

state 167

    (48) expression -> exp e3 rel_op exp e3 quads2 .
    MORE_OR_EQ_THAN reduce using rule 48 (expression -> exp e3 rel_op exp e3 quads2 .)
    LESS_OR_EQ_THAN reduce using rule 48 (expression -> exp e3 rel_op exp e3 quads2 .)
    DIFFERENT_TO    reduce using rule 48 (expression -> exp e3 rel_op exp e3 quads2 .)
    MORE_THAN       reduce using rule 48 (expression -> exp e3 rel_op exp e3 quads2 .)
    LESS_THAN       reduce using rule 48 (expression -> exp e3 rel_op exp e3 quads2 .)
    EQUAL_TO        reduce using rule 48 (expression -> exp e3 rel_op exp e3 quads2 .)
    PEN_DOWN        reduce using rule 48 (expression -> exp e3 rel_op exp e3 quads2 .)
    PEN_UP          reduce using rule 48 (expression -> exp e3 rel_op exp e3 quads2 .)
    WHILE           reduce using rule 48 (expression -> exp e3 rel_op exp e3 quads2 .)
    IF              reduce using rule 48 (expression -> exp e3 rel_op exp e3 quads2 .)
    WRITE           reduce using rule 48 (expression -> exp e3 rel_op exp e3 quads2 .)
    READ            reduce using rule 48 (expression -> exp e3 rel_op exp e3 quads2 .)
    ID              reduce using rule 48 (expression -> exp e3 rel_op exp e3 quads2 .)
    BOOL            reduce using rule 48 (expression -> exp e3 rel_op exp e3 quads2 .)
    WORD            reduce using rule 48 (expression -> exp e3 rel_op exp e3 quads2 .)
    NUMBER          reduce using rule 48 (expression -> exp e3 rel_op exp e3 quads2 .)
    CENTER          reduce using rule 48 (expression -> exp e3 rel_op exp e3 quads2 .)
    FORWARD         reduce using rule 48 (expression -> exp e3 rel_op exp e3 quads2 .)
    RIGHT           reduce using rule 48 (expression -> exp e3 rel_op exp e3 quads2 .)
    LEFT            reduce using rule 48 (expression -> exp e3 rel_op exp e3 quads2 .)
    END             reduce using rule 48 (expression -> exp e3 rel_op exp e3 quads2 .)
    ELSE            reduce using rule 48 (expression -> exp e3 rel_op exp e3 quads2 .)
    COMMA           reduce using rule 48 (expression -> exp e3 rel_op exp e3 quads2 .)
    CLOSE_PTH       reduce using rule 48 (expression -> exp e3 rel_op exp e3 quads2 .)
    CLOSE_SQR       reduce using rule 48 (expression -> exp e3 rel_op exp e3 quads2 .)


state 168

    (52) exp -> termino e1 term_op e2 termino e1 . quads1
    (65) quads1 -> .
    MORE_OR_EQ_THAN reduce using rule 65 (quads1 -> .)
    LESS_OR_EQ_THAN reduce using rule 65 (quads1 -> .)
    DIFFERENT_TO    reduce using rule 65 (quads1 -> .)
    MORE_THAN       reduce using rule 65 (quads1 -> .)
    LESS_THAN       reduce using rule 65 (quads1 -> .)
    EQUAL_TO        reduce using rule 65 (quads1 -> .)
    PEN_DOWN        reduce using rule 65 (quads1 -> .)
    PEN_UP          reduce using rule 65 (quads1 -> .)
    WHILE           reduce using rule 65 (quads1 -> .)
    IF              reduce using rule 65 (quads1 -> .)
    WRITE           reduce using rule 65 (quads1 -> .)
    READ            reduce using rule 65 (quads1 -> .)
    ID              reduce using rule 65 (quads1 -> .)
    BOOL            reduce using rule 65 (quads1 -> .)
    WORD            reduce using rule 65 (quads1 -> .)
    NUMBER          reduce using rule 65 (quads1 -> .)
    CENTER          reduce using rule 65 (quads1 -> .)
    FORWARD         reduce using rule 65 (quads1 -> .)
    RIGHT           reduce using rule 65 (quads1 -> .)
    LEFT            reduce using rule 65 (quads1 -> .)
    END             reduce using rule 65 (quads1 -> .)
    ELSE            reduce using rule 65 (quads1 -> .)
    COMMA           reduce using rule 65 (quads1 -> .)
    CLOSE_PTH       reduce using rule 65 (quads1 -> .)
    CLOSE_SQR       reduce using rule 65 (quads1 -> .)

    quads1                         shift and go to state 173

state 169

    (54) termino -> factor e1 fact_op factor e1 quads .
    SUB             reduce using rule 54 (termino -> factor e1 fact_op factor e1 quads .)
    SUM             reduce using rule 54 (termino -> factor e1 fact_op factor e1 quads .)
    MORE_OR_EQ_THAN reduce using rule 54 (termino -> factor e1 fact_op factor e1 quads .)
    LESS_OR_EQ_THAN reduce using rule 54 (termino -> factor e1 fact_op factor e1 quads .)
    DIFFERENT_TO    reduce using rule 54 (termino -> factor e1 fact_op factor e1 quads .)
    MORE_THAN       reduce using rule 54 (termino -> factor e1 fact_op factor e1 quads .)
    LESS_THAN       reduce using rule 54 (termino -> factor e1 fact_op factor e1 quads .)
    EQUAL_TO        reduce using rule 54 (termino -> factor e1 fact_op factor e1 quads .)
    PEN_DOWN        reduce using rule 54 (termino -> factor e1 fact_op factor e1 quads .)
    PEN_UP          reduce using rule 54 (termino -> factor e1 fact_op factor e1 quads .)
    WHILE           reduce using rule 54 (termino -> factor e1 fact_op factor e1 quads .)
    IF              reduce using rule 54 (termino -> factor e1 fact_op factor e1 quads .)
    WRITE           reduce using rule 54 (termino -> factor e1 fact_op factor e1 quads .)
    READ            reduce using rule 54 (termino -> factor e1 fact_op factor e1 quads .)
    ID              reduce using rule 54 (termino -> factor e1 fact_op factor e1 quads .)
    BOOL            reduce using rule 54 (termino -> factor e1 fact_op factor e1 quads .)
    WORD            reduce using rule 54 (termino -> factor e1 fact_op factor e1 quads .)
    NUMBER          reduce using rule 54 (termino -> factor e1 fact_op factor e1 quads .)
    CENTER          reduce using rule 54 (termino -> factor e1 fact_op factor e1 quads .)
    FORWARD         reduce using rule 54 (termino -> factor e1 fact_op factor e1 quads .)
    RIGHT           reduce using rule 54 (termino -> factor e1 fact_op factor e1 quads .)
    LEFT            reduce using rule 54 (termino -> factor e1 fact_op factor e1 quads .)
    END             reduce using rule 54 (termino -> factor e1 fact_op factor e1 quads .)
    ELSE            reduce using rule 54 (termino -> factor e1 fact_op factor e1 quads .)
    COMMA           reduce using rule 54 (termino -> factor e1 fact_op factor e1 quads .)
    CLOSE_PTH       reduce using rule 54 (termino -> factor e1 fact_op factor e1 quads .)
    CLOSE_SQR       reduce using rule 54 (termino -> factor e1 fact_op factor e1 quads .)


state 170

    (75) matrix -> OPEN_SQR expression . CLOSE_SQR
    CLOSE_SQR       shift and go to state 174


state 171

    (11) func_declaration -> func_type FUNC ID OPEN_PTH parameter CLOSE_PTH stmnt END .
    MAIN            reduce using rule 11 (func_declaration -> func_type FUNC ID OPEN_PTH parameter CLOSE_PTH stmnt END .)


state 172

    (19) multiple_parameters -> COMMA parameter .
    CLOSE_PTH       reduce using rule 19 (multiple_parameters -> COMMA parameter .)


state 173

    (52) exp -> termino e1 term_op e2 termino e1 quads1 .
    MORE_OR_EQ_THAN reduce using rule 52 (exp -> termino e1 term_op e2 termino e1 quads1 .)
    LESS_OR_EQ_THAN reduce using rule 52 (exp -> termino e1 term_op e2 termino e1 quads1 .)
    DIFFERENT_TO    reduce using rule 52 (exp -> termino e1 term_op e2 termino e1 quads1 .)
    MORE_THAN       reduce using rule 52 (exp -> termino e1 term_op e2 termino e1 quads1 .)
    LESS_THAN       reduce using rule 52 (exp -> termino e1 term_op e2 termino e1 quads1 .)
    EQUAL_TO        reduce using rule 52 (exp -> termino e1 term_op e2 termino e1 quads1 .)
    PEN_DOWN        reduce using rule 52 (exp -> termino e1 term_op e2 termino e1 quads1 .)
    PEN_UP          reduce using rule 52 (exp -> termino e1 term_op e2 termino e1 quads1 .)
    WHILE           reduce using rule 52 (exp -> termino e1 term_op e2 termino e1 quads1 .)
    IF              reduce using rule 52 (exp -> termino e1 term_op e2 termino e1 quads1 .)
    WRITE           reduce using rule 52 (exp -> termino e1 term_op e2 termino e1 quads1 .)
    READ            reduce using rule 52 (exp -> termino e1 term_op e2 termino e1 quads1 .)
    ID              reduce using rule 52 (exp -> termino e1 term_op e2 termino e1 quads1 .)
    BOOL            reduce using rule 52 (exp -> termino e1 term_op e2 termino e1 quads1 .)
    WORD            reduce using rule 52 (exp -> termino e1 term_op e2 termino e1 quads1 .)
    NUMBER          reduce using rule 52 (exp -> termino e1 term_op e2 termino e1 quads1 .)
    CENTER          reduce using rule 52 (exp -> termino e1 term_op e2 termino e1 quads1 .)
    FORWARD         reduce using rule 52 (exp -> termino e1 term_op e2 termino e1 quads1 .)
    RIGHT           reduce using rule 52 (exp -> termino e1 term_op e2 termino e1 quads1 .)
    LEFT            reduce using rule 52 (exp -> termino e1 term_op e2 termino e1 quads1 .)
    END             reduce using rule 52 (exp -> termino e1 term_op e2 termino e1 quads1 .)
    ELSE            reduce using rule 52 (exp -> termino e1 term_op e2 termino e1 quads1 .)
    COMMA           reduce using rule 52 (exp -> termino e1 term_op e2 termino e1 quads1 .)
    CLOSE_PTH       reduce using rule 52 (exp -> termino e1 term_op e2 termino e1 quads1 .)
    CLOSE_SQR       reduce using rule 52 (exp -> termino e1 term_op e2 termino e1 quads1 .)


state 174

    (75) matrix -> OPEN_SQR expression CLOSE_SQR .
    DIV             reduce using rule 75 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    MULT            reduce using rule 75 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    SUB             reduce using rule 75 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    SUM             reduce using rule 75 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    MORE_OR_EQ_THAN reduce using rule 75 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    LESS_OR_EQ_THAN reduce using rule 75 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    DIFFERENT_TO    reduce using rule 75 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    MORE_THAN       reduce using rule 75 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    LESS_THAN       reduce using rule 75 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    EQUAL_TO        reduce using rule 75 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    PEN_DOWN        reduce using rule 75 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    PEN_UP          reduce using rule 75 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    WHILE           reduce using rule 75 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    IF              reduce using rule 75 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    WRITE           reduce using rule 75 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    READ            reduce using rule 75 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    ID              reduce using rule 75 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    BOOL            reduce using rule 75 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    WORD            reduce using rule 75 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    NUMBER          reduce using rule 75 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    CENTER          reduce using rule 75 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    FORWARD         reduce using rule 75 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    RIGHT           reduce using rule 75 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    LEFT            reduce using rule 75 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    END             reduce using rule 75 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    ELSE            reduce using rule 75 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    COMMA           reduce using rule 75 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    CLOSE_PTH       reduce using rule 75 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    CLOSE_SQR       reduce using rule 75 (matrix -> OPEN_SQR expression CLOSE_SQR .)


Conflicts:

reduce/reduce conflict in state 64 resolved using rule expression -> exp
rejected rule (e3 -> <empty>) in state 64