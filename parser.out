Grammar:

Rule 0     S' -> program
Rule 1     program -> DRAWING ID fd1 declaration
Rule 2     declaration -> var_declaration vd1 func_declaration main
Rule 3     var_declaration -> empty
Rule 4     var_declaration -> var_type addvartype ID varglobal multiple_var var_declaration
Rule 5     varglobal -> <empty>
Rule 6     addvartype -> <empty>
Rule 7     addvardic -> <empty>
Rule 8     multiple_var -> empty
Rule 9     multiple_var -> COMMA ID varglobal multiple_var
Rule 10    var_type -> BOOL
Rule 11    var_type -> WORD
Rule 12    var_type -> NUMBER
Rule 13    func_declaration -> empty
Rule 14    func_declaration -> FUNC resetvars func_type ID fd1 OPEN_PTH parameter CLOSE_PTH stmnt vd1 END
Rule 15    resetvars -> <empty>
Rule 16    fd1 -> <empty>
Rule 17    vd1 -> <empty>
Rule 18    func_type -> BOOL
Rule 19    func_type -> WORD
Rule 20    func_type -> NUMBER
Rule 21    func_type -> VOID
Rule 22    parameter -> empty
Rule 23    parameter -> var_type addvartype ID varid multiple_parameters
Rule 24    multiple_parameters -> empty
Rule 25    multiple_parameters -> COMMA parameter
Rule 26    stmnt -> empty
Rule 27    stmnt -> returnf stmnt
Rule 28    stmnt -> var_declaration_func stmnt
Rule 29    stmnt -> pen_func stmnt
Rule 30    stmnt -> move_func stmnt
Rule 31    stmnt -> while_stmnt stmnt
Rule 32    stmnt -> if_stmnt stmnt
Rule 33    stmnt -> write stmnt
Rule 34    stmnt -> read stmnt
Rule 35    stmnt -> func_call stmnt
Rule 36    stmnt -> var_assignation stmnt
Rule 37    returnf -> RETURN expression
Rule 38    var_declaration_func -> var_type addvartype ID varid multiple_vars
Rule 39    varid -> <empty>
Rule 40    var_assignation -> ID e5 assign e6 expression q3
Rule 41    e5 -> <empty>
Rule 42    e6 -> <empty>
Rule 43    assign -> ASSIGN
Rule 44    var_cte -> func_call
Rule 45    var_cte -> cte_bool
Rule 46    var_cte -> CTE_STR
Rule 47    var_cte -> CTE_NUM
Rule 48    var_cte -> variable
Rule 49    cte_bool -> FALSE
Rule 50    cte_bool -> TRUE
Rule 51    expression -> exp q4
Rule 52    expression -> exp rel_op exp q4
Rule 53    q4 -> <empty>
Rule 54    e4 -> <empty>
Rule 55    exp -> termino q1
Rule 56    exp -> termino term_op e3 termino q1
Rule 57    e3 -> <empty>
Rule 58    q2 -> <empty>
Rule 59    term_op -> SUB
Rule 60    term_op -> SUM
Rule 61    termino -> factor q2
Rule 62    termino -> factor fact_op e2 expression q2
Rule 63    q1 -> <empty>
Rule 64    q3 -> <empty>
Rule 65    e2 -> <empty>
Rule 66    fact_op -> DIV
Rule 67    fact_op -> MULT
Rule 68    factor -> var_cte e1
Rule 69    factor -> open_pth expression close_pth
Rule 70    e1 -> <empty>
Rule 71    open_pth -> OPEN_PTH
Rule 72    close_pth -> CLOSE_PTH
Rule 73    log_op -> OR
Rule 74    log_op -> AND
Rule 75    rel_op -> EQUAL_TO
Rule 76    rel_op -> MORE_OR_EQ_THAN
Rule 77    rel_op -> LESS_OR_EQ_THAN
Rule 78    rel_op -> DIFFERENT_TO
Rule 79    rel_op -> MORE_THAN
Rule 80    rel_op -> LESS_THAN
Rule 81    func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
Rule 82    func1 -> <empty>
Rule 83    func_call_param -> expression func2 multiple_fc_param
Rule 84    func2 -> <empty>
Rule 85    func3 -> <empty>
Rule 86    multiple_fc_param -> empty
Rule 87    multiple_fc_param -> COMMA func_call_param
Rule 88    read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH
Rule 89    variable -> ID array
Rule 90    array -> empty
Rule 91    array -> OPEN_SQR expression CLOSE_SQR matrix
Rule 92    matrix -> empty
Rule 93    matrix -> OPEN_SQR expression CLOSE_SQR
Rule 94    multiple_vars -> empty
Rule 95    multiple_vars -> COMMA variable varid
Rule 96    write -> WRITE OPEN_PTH expression CLOSE_PTH
Rule 97    if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt
Rule 98    if1 -> <empty>
Rule 99    if2 -> <empty>
Rule 100   else_stmnt -> END
Rule 101   else_stmnt -> ELSE if3 stmnt if4 END
Rule 102   if3 -> <empty>
Rule 103   if4 -> <empty>
Rule 104   while_stmnt -> WHILE w1 con_expression w2 stmnt w3 END
Rule 105   w1 -> <empty>
Rule 106   w2 -> <empty>
Rule 107   w3 -> <empty>
Rule 108   con_expression -> expression q5
Rule 109   con_expression -> expression q5 log_op e7 expression q5
Rule 110   e7 -> <empty>
Rule 111   q5 -> <empty>
Rule 112   move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH
Rule 113   move_type -> CENTER
Rule 114   move_type -> FORWARD
Rule 115   move_type -> RIGHT
Rule 116   move_type -> LEFT
Rule 117   pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH
Rule 118   pen_func -> PEN_UP OPEN_PTH CLOSE_PTH
Rule 119   md1 -> <empty>
Rule 120   main -> MAIN fd1 resetvars stmnt vd1 END
Rule 121   empty -> <empty>

Terminals, with rules where they appear:

AND                  : 74
ASSIGN               : 43
BOOL                 : 10 18
CENTER               : 113
CLOSE_PTH            : 14 72 81 88 96 112 117 118
CLOSE_SQR            : 91 93
COMMA                : 9 25 87 95
CTE_NUM              : 47
CTE_STR              : 46
DIFFERENT_TO         : 78
DIV                  : 66
DRAWING              : 1
ELSE                 : 101
END                  : 14 100 101 104 120
EQUAL_TO             : 75
FALSE                : 49
FORWARD              : 114
FUNC                 : 14
ID                   : 1 4 9 14 23 38 40 81 89
IF                   : 97
LEFT                 : 116
LESS_OR_EQ_THAN      : 77
LESS_THAN            : 80
MAIN                 : 120
MORE_OR_EQ_THAN      : 76
MORE_THAN            : 79
MULT                 : 67
NUMBER               : 12 20
OPEN_PTH             : 14 71 81 88 96 112 117 118
OPEN_SQR             : 91 93
OR                   : 73
PEN_DOWN             : 117
PEN_UP               : 118
READ                 : 88
RETURN               : 37
RIGHT                : 115
SUB                  : 59
SUM                  : 60
TRUE                 : 50
VOID                 : 21
WHILE                : 104
WORD                 : 11 19
WRITE                : 96
error                : 

Nonterminals, with rules where they appear:

addvardic            : 
addvartype           : 4 23 38
array                : 89
assign               : 40
close_pth            : 69
con_expression       : 97 104
cte_bool             : 45
declaration          : 1
e1                   : 68
e2                   : 62
e3                   : 56
e4                   : 
e5                   : 40
e6                   : 40
e7                   : 109
else_stmnt           : 97
empty                : 3 8 13 22 24 26 86 90 92 94
exp                  : 51 52 52
expression           : 37 40 62 69 83 91 93 96 108 109 109
fact_op              : 62
factor               : 61 62
fd1                  : 1 14 120
func1                : 81
func2                : 83
func3                : 81
func_call            : 35 44
func_call_param      : 81 87 112
func_declaration     : 2
func_type            : 14
if1                  : 97
if2                  : 97
if3                  : 101
if4                  : 101
if_stmnt             : 32
log_op               : 109
main                 : 2
matrix               : 91
md1                  : 
move_func            : 30
move_type            : 112
multiple_fc_param    : 83
multiple_parameters  : 23
multiple_var         : 4 9
multiple_vars        : 38 88
open_pth             : 69
parameter            : 14 25
pen_func             : 29
program              : 0
q1                   : 55 56
q2                   : 61 62
q3                   : 40
q4                   : 51 52
q5                   : 108 109 109
read                 : 34
rel_op               : 52
resetvars            : 14 120
returnf              : 27
stmnt                : 14 27 28 29 30 31 32 33 34 35 36 97 101 104 120
term_op              : 56
termino              : 55 56 56
var_assignation      : 36
var_cte              : 68
var_declaration      : 2 4
var_declaration_func : 28
var_type             : 4 23 38
varglobal            : 4 9
variable             : 48 88 95
varid                : 23 38 95
vd1                  : 2 14 120
w1                   : 104
w2                   : 104
w3                   : 104
while_stmnt          : 31
write                : 33


state 0

    (0) S' -> . program
    (1) program -> . DRAWING ID fd1 declaration
    DRAWING         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .


state 2

    (1) program -> DRAWING . ID fd1 declaration
    ID              shift and go to state 3


state 3

    (1) program -> DRAWING ID . fd1 declaration
    (16) fd1 -> .
    BOOL            reduce using rule 16 (fd1 -> .)
    WORD            reduce using rule 16 (fd1 -> .)
    NUMBER          reduce using rule 16 (fd1 -> .)
    FUNC            reduce using rule 16 (fd1 -> .)
    MAIN            reduce using rule 16 (fd1 -> .)

    fd1                            shift and go to state 4

state 4

    (1) program -> DRAWING ID fd1 . declaration
    (2) declaration -> . var_declaration vd1 func_declaration main
    (3) var_declaration -> . empty
    (4) var_declaration -> . var_type addvartype ID varglobal multiple_var var_declaration
    (121) empty -> .
    (10) var_type -> . BOOL
    (11) var_type -> . WORD
    (12) var_type -> . NUMBER
    FUNC            reduce using rule 121 (empty -> .)
    MAIN            reduce using rule 121 (empty -> .)
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11

    declaration                    shift and go to state 5
    var_declaration                shift and go to state 6
    empty                          shift and go to state 7
    var_type                       shift and go to state 8

state 5

    (1) program -> DRAWING ID fd1 declaration .
    $end            reduce using rule 1 (program -> DRAWING ID fd1 declaration .)


state 6

    (2) declaration -> var_declaration . vd1 func_declaration main
    (17) vd1 -> .
    FUNC            reduce using rule 17 (vd1 -> .)
    MAIN            reduce using rule 17 (vd1 -> .)

    vd1                            shift and go to state 12

state 7

    (3) var_declaration -> empty .
    FUNC            reduce using rule 3 (var_declaration -> empty .)
    MAIN            reduce using rule 3 (var_declaration -> empty .)


state 8

    (4) var_declaration -> var_type . addvartype ID varglobal multiple_var var_declaration
    (6) addvartype -> .
    ID              reduce using rule 6 (addvartype -> .)

    addvartype                     shift and go to state 13

state 9

    (10) var_type -> BOOL .
    ID              reduce using rule 10 (var_type -> BOOL .)


state 10

    (11) var_type -> WORD .
    ID              reduce using rule 11 (var_type -> WORD .)


state 11

    (12) var_type -> NUMBER .
    ID              reduce using rule 12 (var_type -> NUMBER .)


state 12

    (2) declaration -> var_declaration vd1 . func_declaration main
    (13) func_declaration -> . empty
    (14) func_declaration -> . FUNC resetvars func_type ID fd1 OPEN_PTH parameter CLOSE_PTH stmnt vd1 END
    (121) empty -> .
    FUNC            shift and go to state 16
    MAIN            reduce using rule 121 (empty -> .)

    func_declaration               shift and go to state 14
    empty                          shift and go to state 15

state 13

    (4) var_declaration -> var_type addvartype . ID varglobal multiple_var var_declaration
    ID              shift and go to state 17


state 14

    (2) declaration -> var_declaration vd1 func_declaration . main
    (120) main -> . MAIN fd1 resetvars stmnt vd1 END
    MAIN            shift and go to state 19

    main                           shift and go to state 18

state 15

    (13) func_declaration -> empty .
    MAIN            reduce using rule 13 (func_declaration -> empty .)


state 16

    (14) func_declaration -> FUNC . resetvars func_type ID fd1 OPEN_PTH parameter CLOSE_PTH stmnt vd1 END
    (15) resetvars -> .
    BOOL            reduce using rule 15 (resetvars -> .)
    WORD            reduce using rule 15 (resetvars -> .)
    NUMBER          reduce using rule 15 (resetvars -> .)
    VOID            reduce using rule 15 (resetvars -> .)

    resetvars                      shift and go to state 20

state 17

    (4) var_declaration -> var_type addvartype ID . varglobal multiple_var var_declaration
    (5) varglobal -> .
    COMMA           reduce using rule 5 (varglobal -> .)
    BOOL            reduce using rule 5 (varglobal -> .)
    WORD            reduce using rule 5 (varglobal -> .)
    NUMBER          reduce using rule 5 (varglobal -> .)
    FUNC            reduce using rule 5 (varglobal -> .)
    MAIN            reduce using rule 5 (varglobal -> .)

    varglobal                      shift and go to state 21

state 18

    (2) declaration -> var_declaration vd1 func_declaration main .
    $end            reduce using rule 2 (declaration -> var_declaration vd1 func_declaration main .)


state 19

    (120) main -> MAIN . fd1 resetvars stmnt vd1 END
    (16) fd1 -> .
    RETURN          reduce using rule 16 (fd1 -> .)
    PEN_DOWN        reduce using rule 16 (fd1 -> .)
    PEN_UP          reduce using rule 16 (fd1 -> .)
    WHILE           reduce using rule 16 (fd1 -> .)
    IF              reduce using rule 16 (fd1 -> .)
    WRITE           reduce using rule 16 (fd1 -> .)
    READ            reduce using rule 16 (fd1 -> .)
    ID              reduce using rule 16 (fd1 -> .)
    BOOL            reduce using rule 16 (fd1 -> .)
    WORD            reduce using rule 16 (fd1 -> .)
    NUMBER          reduce using rule 16 (fd1 -> .)
    CENTER          reduce using rule 16 (fd1 -> .)
    FORWARD         reduce using rule 16 (fd1 -> .)
    RIGHT           reduce using rule 16 (fd1 -> .)
    LEFT            reduce using rule 16 (fd1 -> .)
    END             reduce using rule 16 (fd1 -> .)

    fd1                            shift and go to state 22

state 20

    (14) func_declaration -> FUNC resetvars . func_type ID fd1 OPEN_PTH parameter CLOSE_PTH stmnt vd1 END
    (18) func_type -> . BOOL
    (19) func_type -> . WORD
    (20) func_type -> . NUMBER
    (21) func_type -> . VOID
    BOOL            shift and go to state 24
    WORD            shift and go to state 25
    NUMBER          shift and go to state 26
    VOID            shift and go to state 27

    func_type                      shift and go to state 23

state 21

    (4) var_declaration -> var_type addvartype ID varglobal . multiple_var var_declaration
    (8) multiple_var -> . empty
    (9) multiple_var -> . COMMA ID varglobal multiple_var
    (121) empty -> .
    COMMA           shift and go to state 30
    BOOL            reduce using rule 121 (empty -> .)
    WORD            reduce using rule 121 (empty -> .)
    NUMBER          reduce using rule 121 (empty -> .)
    FUNC            reduce using rule 121 (empty -> .)
    MAIN            reduce using rule 121 (empty -> .)

    multiple_var                   shift and go to state 28
    empty                          shift and go to state 29

state 22

    (120) main -> MAIN fd1 . resetvars stmnt vd1 END
    (15) resetvars -> .
    RETURN          reduce using rule 15 (resetvars -> .)
    PEN_DOWN        reduce using rule 15 (resetvars -> .)
    PEN_UP          reduce using rule 15 (resetvars -> .)
    WHILE           reduce using rule 15 (resetvars -> .)
    IF              reduce using rule 15 (resetvars -> .)
    WRITE           reduce using rule 15 (resetvars -> .)
    READ            reduce using rule 15 (resetvars -> .)
    ID              reduce using rule 15 (resetvars -> .)
    BOOL            reduce using rule 15 (resetvars -> .)
    WORD            reduce using rule 15 (resetvars -> .)
    NUMBER          reduce using rule 15 (resetvars -> .)
    CENTER          reduce using rule 15 (resetvars -> .)
    FORWARD         reduce using rule 15 (resetvars -> .)
    RIGHT           reduce using rule 15 (resetvars -> .)
    LEFT            reduce using rule 15 (resetvars -> .)
    END             reduce using rule 15 (resetvars -> .)

    resetvars                      shift and go to state 31

state 23

    (14) func_declaration -> FUNC resetvars func_type . ID fd1 OPEN_PTH parameter CLOSE_PTH stmnt vd1 END
    ID              shift and go to state 32


state 24

    (18) func_type -> BOOL .
    ID              reduce using rule 18 (func_type -> BOOL .)


state 25

    (19) func_type -> WORD .
    ID              reduce using rule 19 (func_type -> WORD .)


state 26

    (20) func_type -> NUMBER .
    ID              reduce using rule 20 (func_type -> NUMBER .)


state 27

    (21) func_type -> VOID .
    ID              reduce using rule 21 (func_type -> VOID .)


state 28

    (4) var_declaration -> var_type addvartype ID varglobal multiple_var . var_declaration
    (3) var_declaration -> . empty
    (4) var_declaration -> . var_type addvartype ID varglobal multiple_var var_declaration
    (121) empty -> .
    (10) var_type -> . BOOL
    (11) var_type -> . WORD
    (12) var_type -> . NUMBER
    FUNC            reduce using rule 121 (empty -> .)
    MAIN            reduce using rule 121 (empty -> .)
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11

    var_type                       shift and go to state 8
    var_declaration                shift and go to state 33
    empty                          shift and go to state 7

state 29

    (8) multiple_var -> empty .
    BOOL            reduce using rule 8 (multiple_var -> empty .)
    WORD            reduce using rule 8 (multiple_var -> empty .)
    NUMBER          reduce using rule 8 (multiple_var -> empty .)
    FUNC            reduce using rule 8 (multiple_var -> empty .)
    MAIN            reduce using rule 8 (multiple_var -> empty .)


state 30

    (9) multiple_var -> COMMA . ID varglobal multiple_var
    ID              shift and go to state 34


state 31

    (120) main -> MAIN fd1 resetvars . stmnt vd1 END
    (26) stmnt -> . empty
    (27) stmnt -> . returnf stmnt
    (28) stmnt -> . var_declaration_func stmnt
    (29) stmnt -> . pen_func stmnt
    (30) stmnt -> . move_func stmnt
    (31) stmnt -> . while_stmnt stmnt
    (32) stmnt -> . if_stmnt stmnt
    (33) stmnt -> . write stmnt
    (34) stmnt -> . read stmnt
    (35) stmnt -> . func_call stmnt
    (36) stmnt -> . var_assignation stmnt
    (121) empty -> .
    (37) returnf -> . RETURN expression
    (38) var_declaration_func -> . var_type addvartype ID varid multiple_vars
    (117) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (118) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (112) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (104) while_stmnt -> . WHILE w1 con_expression w2 stmnt w3 END
    (97) if_stmnt -> . IF con_expression if1 stmnt if2 else_stmnt
    (96) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (88) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (81) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (40) var_assignation -> . ID e5 assign e6 expression q3
    (10) var_type -> . BOOL
    (11) var_type -> . WORD
    (12) var_type -> . NUMBER
    (113) move_type -> . CENTER
    (114) move_type -> . FORWARD
    (115) move_type -> . RIGHT
    (116) move_type -> . LEFT
    END             reduce using rule 121 (empty -> .)
    RETURN          shift and go to state 47
    PEN_DOWN        shift and go to state 50
    PEN_UP          shift and go to state 51
    WHILE           shift and go to state 53
    IF              shift and go to state 54
    WRITE           shift and go to state 55
    READ            shift and go to state 56
    ID              shift and go to state 49
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11
    CENTER          shift and go to state 57
    FORWARD         shift and go to state 58
    RIGHT           shift and go to state 59
    LEFT            shift and go to state 60

    stmnt                          shift and go to state 35
    empty                          shift and go to state 36
    returnf                        shift and go to state 37
    var_declaration_func           shift and go to state 38
    pen_func                       shift and go to state 39
    move_func                      shift and go to state 40
    while_stmnt                    shift and go to state 41
    if_stmnt                       shift and go to state 42
    write                          shift and go to state 43
    read                           shift and go to state 44
    func_call                      shift and go to state 45
    var_assignation                shift and go to state 46
    var_type                       shift and go to state 48
    move_type                      shift and go to state 52

state 32

    (14) func_declaration -> FUNC resetvars func_type ID . fd1 OPEN_PTH parameter CLOSE_PTH stmnt vd1 END
    (16) fd1 -> .
    OPEN_PTH        reduce using rule 16 (fd1 -> .)

    fd1                            shift and go to state 61

state 33

    (4) var_declaration -> var_type addvartype ID varglobal multiple_var var_declaration .
    FUNC            reduce using rule 4 (var_declaration -> var_type addvartype ID varglobal multiple_var var_declaration .)
    MAIN            reduce using rule 4 (var_declaration -> var_type addvartype ID varglobal multiple_var var_declaration .)


state 34

    (9) multiple_var -> COMMA ID . varglobal multiple_var
    (5) varglobal -> .
    COMMA           reduce using rule 5 (varglobal -> .)
    BOOL            reduce using rule 5 (varglobal -> .)
    WORD            reduce using rule 5 (varglobal -> .)
    NUMBER          reduce using rule 5 (varglobal -> .)
    FUNC            reduce using rule 5 (varglobal -> .)
    MAIN            reduce using rule 5 (varglobal -> .)

    varglobal                      shift and go to state 62

state 35

    (120) main -> MAIN fd1 resetvars stmnt . vd1 END
    (17) vd1 -> .
    END             reduce using rule 17 (vd1 -> .)

    vd1                            shift and go to state 63

state 36

    (26) stmnt -> empty .
    END             reduce using rule 26 (stmnt -> empty .)
    ELSE            reduce using rule 26 (stmnt -> empty .)


state 37

    (27) stmnt -> returnf . stmnt
    (26) stmnt -> . empty
    (27) stmnt -> . returnf stmnt
    (28) stmnt -> . var_declaration_func stmnt
    (29) stmnt -> . pen_func stmnt
    (30) stmnt -> . move_func stmnt
    (31) stmnt -> . while_stmnt stmnt
    (32) stmnt -> . if_stmnt stmnt
    (33) stmnt -> . write stmnt
    (34) stmnt -> . read stmnt
    (35) stmnt -> . func_call stmnt
    (36) stmnt -> . var_assignation stmnt
    (121) empty -> .
    (37) returnf -> . RETURN expression
    (38) var_declaration_func -> . var_type addvartype ID varid multiple_vars
    (117) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (118) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (112) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (104) while_stmnt -> . WHILE w1 con_expression w2 stmnt w3 END
    (97) if_stmnt -> . IF con_expression if1 stmnt if2 else_stmnt
    (96) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (88) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (81) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (40) var_assignation -> . ID e5 assign e6 expression q3
    (10) var_type -> . BOOL
    (11) var_type -> . WORD
    (12) var_type -> . NUMBER
    (113) move_type -> . CENTER
    (114) move_type -> . FORWARD
    (115) move_type -> . RIGHT
    (116) move_type -> . LEFT
    END             reduce using rule 121 (empty -> .)
    ELSE            reduce using rule 121 (empty -> .)
    RETURN          shift and go to state 47
    PEN_DOWN        shift and go to state 50
    PEN_UP          shift and go to state 51
    WHILE           shift and go to state 53
    IF              shift and go to state 54
    WRITE           shift and go to state 55
    READ            shift and go to state 56
    ID              shift and go to state 49
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11
    CENTER          shift and go to state 57
    FORWARD         shift and go to state 58
    RIGHT           shift and go to state 59
    LEFT            shift and go to state 60

    returnf                        shift and go to state 37
    stmnt                          shift and go to state 64
    empty                          shift and go to state 36
    var_declaration_func           shift and go to state 38
    pen_func                       shift and go to state 39
    move_func                      shift and go to state 40
    while_stmnt                    shift and go to state 41
    if_stmnt                       shift and go to state 42
    write                          shift and go to state 43
    read                           shift and go to state 44
    func_call                      shift and go to state 45
    var_assignation                shift and go to state 46
    var_type                       shift and go to state 48
    move_type                      shift and go to state 52

state 38

    (28) stmnt -> var_declaration_func . stmnt
    (26) stmnt -> . empty
    (27) stmnt -> . returnf stmnt
    (28) stmnt -> . var_declaration_func stmnt
    (29) stmnt -> . pen_func stmnt
    (30) stmnt -> . move_func stmnt
    (31) stmnt -> . while_stmnt stmnt
    (32) stmnt -> . if_stmnt stmnt
    (33) stmnt -> . write stmnt
    (34) stmnt -> . read stmnt
    (35) stmnt -> . func_call stmnt
    (36) stmnt -> . var_assignation stmnt
    (121) empty -> .
    (37) returnf -> . RETURN expression
    (38) var_declaration_func -> . var_type addvartype ID varid multiple_vars
    (117) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (118) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (112) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (104) while_stmnt -> . WHILE w1 con_expression w2 stmnt w3 END
    (97) if_stmnt -> . IF con_expression if1 stmnt if2 else_stmnt
    (96) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (88) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (81) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (40) var_assignation -> . ID e5 assign e6 expression q3
    (10) var_type -> . BOOL
    (11) var_type -> . WORD
    (12) var_type -> . NUMBER
    (113) move_type -> . CENTER
    (114) move_type -> . FORWARD
    (115) move_type -> . RIGHT
    (116) move_type -> . LEFT
    END             reduce using rule 121 (empty -> .)
    ELSE            reduce using rule 121 (empty -> .)
    RETURN          shift and go to state 47
    PEN_DOWN        shift and go to state 50
    PEN_UP          shift and go to state 51
    WHILE           shift and go to state 53
    IF              shift and go to state 54
    WRITE           shift and go to state 55
    READ            shift and go to state 56
    ID              shift and go to state 49
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11
    CENTER          shift and go to state 57
    FORWARD         shift and go to state 58
    RIGHT           shift and go to state 59
    LEFT            shift and go to state 60

    var_declaration_func           shift and go to state 38
    stmnt                          shift and go to state 65
    empty                          shift and go to state 36
    returnf                        shift and go to state 37
    pen_func                       shift and go to state 39
    move_func                      shift and go to state 40
    while_stmnt                    shift and go to state 41
    if_stmnt                       shift and go to state 42
    write                          shift and go to state 43
    read                           shift and go to state 44
    func_call                      shift and go to state 45
    var_assignation                shift and go to state 46
    var_type                       shift and go to state 48
    move_type                      shift and go to state 52

state 39

    (29) stmnt -> pen_func . stmnt
    (26) stmnt -> . empty
    (27) stmnt -> . returnf stmnt
    (28) stmnt -> . var_declaration_func stmnt
    (29) stmnt -> . pen_func stmnt
    (30) stmnt -> . move_func stmnt
    (31) stmnt -> . while_stmnt stmnt
    (32) stmnt -> . if_stmnt stmnt
    (33) stmnt -> . write stmnt
    (34) stmnt -> . read stmnt
    (35) stmnt -> . func_call stmnt
    (36) stmnt -> . var_assignation stmnt
    (121) empty -> .
    (37) returnf -> . RETURN expression
    (38) var_declaration_func -> . var_type addvartype ID varid multiple_vars
    (117) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (118) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (112) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (104) while_stmnt -> . WHILE w1 con_expression w2 stmnt w3 END
    (97) if_stmnt -> . IF con_expression if1 stmnt if2 else_stmnt
    (96) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (88) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (81) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (40) var_assignation -> . ID e5 assign e6 expression q3
    (10) var_type -> . BOOL
    (11) var_type -> . WORD
    (12) var_type -> . NUMBER
    (113) move_type -> . CENTER
    (114) move_type -> . FORWARD
    (115) move_type -> . RIGHT
    (116) move_type -> . LEFT
    END             reduce using rule 121 (empty -> .)
    ELSE            reduce using rule 121 (empty -> .)
    RETURN          shift and go to state 47
    PEN_DOWN        shift and go to state 50
    PEN_UP          shift and go to state 51
    WHILE           shift and go to state 53
    IF              shift and go to state 54
    WRITE           shift and go to state 55
    READ            shift and go to state 56
    ID              shift and go to state 49
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11
    CENTER          shift and go to state 57
    FORWARD         shift and go to state 58
    RIGHT           shift and go to state 59
    LEFT            shift and go to state 60

    pen_func                       shift and go to state 39
    stmnt                          shift and go to state 66
    empty                          shift and go to state 36
    returnf                        shift and go to state 37
    var_declaration_func           shift and go to state 38
    move_func                      shift and go to state 40
    while_stmnt                    shift and go to state 41
    if_stmnt                       shift and go to state 42
    write                          shift and go to state 43
    read                           shift and go to state 44
    func_call                      shift and go to state 45
    var_assignation                shift and go to state 46
    var_type                       shift and go to state 48
    move_type                      shift and go to state 52

state 40

    (30) stmnt -> move_func . stmnt
    (26) stmnt -> . empty
    (27) stmnt -> . returnf stmnt
    (28) stmnt -> . var_declaration_func stmnt
    (29) stmnt -> . pen_func stmnt
    (30) stmnt -> . move_func stmnt
    (31) stmnt -> . while_stmnt stmnt
    (32) stmnt -> . if_stmnt stmnt
    (33) stmnt -> . write stmnt
    (34) stmnt -> . read stmnt
    (35) stmnt -> . func_call stmnt
    (36) stmnt -> . var_assignation stmnt
    (121) empty -> .
    (37) returnf -> . RETURN expression
    (38) var_declaration_func -> . var_type addvartype ID varid multiple_vars
    (117) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (118) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (112) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (104) while_stmnt -> . WHILE w1 con_expression w2 stmnt w3 END
    (97) if_stmnt -> . IF con_expression if1 stmnt if2 else_stmnt
    (96) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (88) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (81) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (40) var_assignation -> . ID e5 assign e6 expression q3
    (10) var_type -> . BOOL
    (11) var_type -> . WORD
    (12) var_type -> . NUMBER
    (113) move_type -> . CENTER
    (114) move_type -> . FORWARD
    (115) move_type -> . RIGHT
    (116) move_type -> . LEFT
    END             reduce using rule 121 (empty -> .)
    ELSE            reduce using rule 121 (empty -> .)
    RETURN          shift and go to state 47
    PEN_DOWN        shift and go to state 50
    PEN_UP          shift and go to state 51
    WHILE           shift and go to state 53
    IF              shift and go to state 54
    WRITE           shift and go to state 55
    READ            shift and go to state 56
    ID              shift and go to state 49
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11
    CENTER          shift and go to state 57
    FORWARD         shift and go to state 58
    RIGHT           shift and go to state 59
    LEFT            shift and go to state 60

    move_func                      shift and go to state 40
    stmnt                          shift and go to state 67
    empty                          shift and go to state 36
    returnf                        shift and go to state 37
    var_declaration_func           shift and go to state 38
    pen_func                       shift and go to state 39
    while_stmnt                    shift and go to state 41
    if_stmnt                       shift and go to state 42
    write                          shift and go to state 43
    read                           shift and go to state 44
    func_call                      shift and go to state 45
    var_assignation                shift and go to state 46
    var_type                       shift and go to state 48
    move_type                      shift and go to state 52

state 41

    (31) stmnt -> while_stmnt . stmnt
    (26) stmnt -> . empty
    (27) stmnt -> . returnf stmnt
    (28) stmnt -> . var_declaration_func stmnt
    (29) stmnt -> . pen_func stmnt
    (30) stmnt -> . move_func stmnt
    (31) stmnt -> . while_stmnt stmnt
    (32) stmnt -> . if_stmnt stmnt
    (33) stmnt -> . write stmnt
    (34) stmnt -> . read stmnt
    (35) stmnt -> . func_call stmnt
    (36) stmnt -> . var_assignation stmnt
    (121) empty -> .
    (37) returnf -> . RETURN expression
    (38) var_declaration_func -> . var_type addvartype ID varid multiple_vars
    (117) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (118) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (112) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (104) while_stmnt -> . WHILE w1 con_expression w2 stmnt w3 END
    (97) if_stmnt -> . IF con_expression if1 stmnt if2 else_stmnt
    (96) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (88) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (81) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (40) var_assignation -> . ID e5 assign e6 expression q3
    (10) var_type -> . BOOL
    (11) var_type -> . WORD
    (12) var_type -> . NUMBER
    (113) move_type -> . CENTER
    (114) move_type -> . FORWARD
    (115) move_type -> . RIGHT
    (116) move_type -> . LEFT
    END             reduce using rule 121 (empty -> .)
    ELSE            reduce using rule 121 (empty -> .)
    RETURN          shift and go to state 47
    PEN_DOWN        shift and go to state 50
    PEN_UP          shift and go to state 51
    WHILE           shift and go to state 53
    IF              shift and go to state 54
    WRITE           shift and go to state 55
    READ            shift and go to state 56
    ID              shift and go to state 49
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11
    CENTER          shift and go to state 57
    FORWARD         shift and go to state 58
    RIGHT           shift and go to state 59
    LEFT            shift and go to state 60

    while_stmnt                    shift and go to state 41
    stmnt                          shift and go to state 68
    empty                          shift and go to state 36
    returnf                        shift and go to state 37
    var_declaration_func           shift and go to state 38
    pen_func                       shift and go to state 39
    move_func                      shift and go to state 40
    if_stmnt                       shift and go to state 42
    write                          shift and go to state 43
    read                           shift and go to state 44
    func_call                      shift and go to state 45
    var_assignation                shift and go to state 46
    var_type                       shift and go to state 48
    move_type                      shift and go to state 52

state 42

    (32) stmnt -> if_stmnt . stmnt
    (26) stmnt -> . empty
    (27) stmnt -> . returnf stmnt
    (28) stmnt -> . var_declaration_func stmnt
    (29) stmnt -> . pen_func stmnt
    (30) stmnt -> . move_func stmnt
    (31) stmnt -> . while_stmnt stmnt
    (32) stmnt -> . if_stmnt stmnt
    (33) stmnt -> . write stmnt
    (34) stmnt -> . read stmnt
    (35) stmnt -> . func_call stmnt
    (36) stmnt -> . var_assignation stmnt
    (121) empty -> .
    (37) returnf -> . RETURN expression
    (38) var_declaration_func -> . var_type addvartype ID varid multiple_vars
    (117) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (118) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (112) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (104) while_stmnt -> . WHILE w1 con_expression w2 stmnt w3 END
    (97) if_stmnt -> . IF con_expression if1 stmnt if2 else_stmnt
    (96) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (88) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (81) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (40) var_assignation -> . ID e5 assign e6 expression q3
    (10) var_type -> . BOOL
    (11) var_type -> . WORD
    (12) var_type -> . NUMBER
    (113) move_type -> . CENTER
    (114) move_type -> . FORWARD
    (115) move_type -> . RIGHT
    (116) move_type -> . LEFT
    END             reduce using rule 121 (empty -> .)
    ELSE            reduce using rule 121 (empty -> .)
    RETURN          shift and go to state 47
    PEN_DOWN        shift and go to state 50
    PEN_UP          shift and go to state 51
    WHILE           shift and go to state 53
    IF              shift and go to state 54
    WRITE           shift and go to state 55
    READ            shift and go to state 56
    ID              shift and go to state 49
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11
    CENTER          shift and go to state 57
    FORWARD         shift and go to state 58
    RIGHT           shift and go to state 59
    LEFT            shift and go to state 60

    if_stmnt                       shift and go to state 42
    stmnt                          shift and go to state 69
    empty                          shift and go to state 36
    returnf                        shift and go to state 37
    var_declaration_func           shift and go to state 38
    pen_func                       shift and go to state 39
    move_func                      shift and go to state 40
    while_stmnt                    shift and go to state 41
    write                          shift and go to state 43
    read                           shift and go to state 44
    func_call                      shift and go to state 45
    var_assignation                shift and go to state 46
    var_type                       shift and go to state 48
    move_type                      shift and go to state 52

state 43

    (33) stmnt -> write . stmnt
    (26) stmnt -> . empty
    (27) stmnt -> . returnf stmnt
    (28) stmnt -> . var_declaration_func stmnt
    (29) stmnt -> . pen_func stmnt
    (30) stmnt -> . move_func stmnt
    (31) stmnt -> . while_stmnt stmnt
    (32) stmnt -> . if_stmnt stmnt
    (33) stmnt -> . write stmnt
    (34) stmnt -> . read stmnt
    (35) stmnt -> . func_call stmnt
    (36) stmnt -> . var_assignation stmnt
    (121) empty -> .
    (37) returnf -> . RETURN expression
    (38) var_declaration_func -> . var_type addvartype ID varid multiple_vars
    (117) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (118) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (112) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (104) while_stmnt -> . WHILE w1 con_expression w2 stmnt w3 END
    (97) if_stmnt -> . IF con_expression if1 stmnt if2 else_stmnt
    (96) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (88) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (81) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (40) var_assignation -> . ID e5 assign e6 expression q3
    (10) var_type -> . BOOL
    (11) var_type -> . WORD
    (12) var_type -> . NUMBER
    (113) move_type -> . CENTER
    (114) move_type -> . FORWARD
    (115) move_type -> . RIGHT
    (116) move_type -> . LEFT
    END             reduce using rule 121 (empty -> .)
    ELSE            reduce using rule 121 (empty -> .)
    RETURN          shift and go to state 47
    PEN_DOWN        shift and go to state 50
    PEN_UP          shift and go to state 51
    WHILE           shift and go to state 53
    IF              shift and go to state 54
    WRITE           shift and go to state 55
    READ            shift and go to state 56
    ID              shift and go to state 49
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11
    CENTER          shift and go to state 57
    FORWARD         shift and go to state 58
    RIGHT           shift and go to state 59
    LEFT            shift and go to state 60

    write                          shift and go to state 43
    stmnt                          shift and go to state 70
    empty                          shift and go to state 36
    returnf                        shift and go to state 37
    var_declaration_func           shift and go to state 38
    pen_func                       shift and go to state 39
    move_func                      shift and go to state 40
    while_stmnt                    shift and go to state 41
    if_stmnt                       shift and go to state 42
    read                           shift and go to state 44
    func_call                      shift and go to state 45
    var_assignation                shift and go to state 46
    var_type                       shift and go to state 48
    move_type                      shift and go to state 52

state 44

    (34) stmnt -> read . stmnt
    (26) stmnt -> . empty
    (27) stmnt -> . returnf stmnt
    (28) stmnt -> . var_declaration_func stmnt
    (29) stmnt -> . pen_func stmnt
    (30) stmnt -> . move_func stmnt
    (31) stmnt -> . while_stmnt stmnt
    (32) stmnt -> . if_stmnt stmnt
    (33) stmnt -> . write stmnt
    (34) stmnt -> . read stmnt
    (35) stmnt -> . func_call stmnt
    (36) stmnt -> . var_assignation stmnt
    (121) empty -> .
    (37) returnf -> . RETURN expression
    (38) var_declaration_func -> . var_type addvartype ID varid multiple_vars
    (117) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (118) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (112) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (104) while_stmnt -> . WHILE w1 con_expression w2 stmnt w3 END
    (97) if_stmnt -> . IF con_expression if1 stmnt if2 else_stmnt
    (96) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (88) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (81) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (40) var_assignation -> . ID e5 assign e6 expression q3
    (10) var_type -> . BOOL
    (11) var_type -> . WORD
    (12) var_type -> . NUMBER
    (113) move_type -> . CENTER
    (114) move_type -> . FORWARD
    (115) move_type -> . RIGHT
    (116) move_type -> . LEFT
    END             reduce using rule 121 (empty -> .)
    ELSE            reduce using rule 121 (empty -> .)
    RETURN          shift and go to state 47
    PEN_DOWN        shift and go to state 50
    PEN_UP          shift and go to state 51
    WHILE           shift and go to state 53
    IF              shift and go to state 54
    WRITE           shift and go to state 55
    READ            shift and go to state 56
    ID              shift and go to state 49
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11
    CENTER          shift and go to state 57
    FORWARD         shift and go to state 58
    RIGHT           shift and go to state 59
    LEFT            shift and go to state 60

    read                           shift and go to state 44
    stmnt                          shift and go to state 71
    empty                          shift and go to state 36
    returnf                        shift and go to state 37
    var_declaration_func           shift and go to state 38
    pen_func                       shift and go to state 39
    move_func                      shift and go to state 40
    while_stmnt                    shift and go to state 41
    if_stmnt                       shift and go to state 42
    write                          shift and go to state 43
    func_call                      shift and go to state 45
    var_assignation                shift and go to state 46
    var_type                       shift and go to state 48
    move_type                      shift and go to state 52

state 45

    (35) stmnt -> func_call . stmnt
    (26) stmnt -> . empty
    (27) stmnt -> . returnf stmnt
    (28) stmnt -> . var_declaration_func stmnt
    (29) stmnt -> . pen_func stmnt
    (30) stmnt -> . move_func stmnt
    (31) stmnt -> . while_stmnt stmnt
    (32) stmnt -> . if_stmnt stmnt
    (33) stmnt -> . write stmnt
    (34) stmnt -> . read stmnt
    (35) stmnt -> . func_call stmnt
    (36) stmnt -> . var_assignation stmnt
    (121) empty -> .
    (37) returnf -> . RETURN expression
    (38) var_declaration_func -> . var_type addvartype ID varid multiple_vars
    (117) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (118) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (112) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (104) while_stmnt -> . WHILE w1 con_expression w2 stmnt w3 END
    (97) if_stmnt -> . IF con_expression if1 stmnt if2 else_stmnt
    (96) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (88) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (81) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (40) var_assignation -> . ID e5 assign e6 expression q3
    (10) var_type -> . BOOL
    (11) var_type -> . WORD
    (12) var_type -> . NUMBER
    (113) move_type -> . CENTER
    (114) move_type -> . FORWARD
    (115) move_type -> . RIGHT
    (116) move_type -> . LEFT
    END             reduce using rule 121 (empty -> .)
    ELSE            reduce using rule 121 (empty -> .)
    RETURN          shift and go to state 47
    PEN_DOWN        shift and go to state 50
    PEN_UP          shift and go to state 51
    WHILE           shift and go to state 53
    IF              shift and go to state 54
    WRITE           shift and go to state 55
    READ            shift and go to state 56
    ID              shift and go to state 49
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11
    CENTER          shift and go to state 57
    FORWARD         shift and go to state 58
    RIGHT           shift and go to state 59
    LEFT            shift and go to state 60

    func_call                      shift and go to state 45
    stmnt                          shift and go to state 72
    empty                          shift and go to state 36
    returnf                        shift and go to state 37
    var_declaration_func           shift and go to state 38
    pen_func                       shift and go to state 39
    move_func                      shift and go to state 40
    while_stmnt                    shift and go to state 41
    if_stmnt                       shift and go to state 42
    write                          shift and go to state 43
    read                           shift and go to state 44
    var_assignation                shift and go to state 46
    var_type                       shift and go to state 48
    move_type                      shift and go to state 52

state 46

    (36) stmnt -> var_assignation . stmnt
    (26) stmnt -> . empty
    (27) stmnt -> . returnf stmnt
    (28) stmnt -> . var_declaration_func stmnt
    (29) stmnt -> . pen_func stmnt
    (30) stmnt -> . move_func stmnt
    (31) stmnt -> . while_stmnt stmnt
    (32) stmnt -> . if_stmnt stmnt
    (33) stmnt -> . write stmnt
    (34) stmnt -> . read stmnt
    (35) stmnt -> . func_call stmnt
    (36) stmnt -> . var_assignation stmnt
    (121) empty -> .
    (37) returnf -> . RETURN expression
    (38) var_declaration_func -> . var_type addvartype ID varid multiple_vars
    (117) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (118) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (112) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (104) while_stmnt -> . WHILE w1 con_expression w2 stmnt w3 END
    (97) if_stmnt -> . IF con_expression if1 stmnt if2 else_stmnt
    (96) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (88) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (81) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (40) var_assignation -> . ID e5 assign e6 expression q3
    (10) var_type -> . BOOL
    (11) var_type -> . WORD
    (12) var_type -> . NUMBER
    (113) move_type -> . CENTER
    (114) move_type -> . FORWARD
    (115) move_type -> . RIGHT
    (116) move_type -> . LEFT
    END             reduce using rule 121 (empty -> .)
    ELSE            reduce using rule 121 (empty -> .)
    RETURN          shift and go to state 47
    PEN_DOWN        shift and go to state 50
    PEN_UP          shift and go to state 51
    WHILE           shift and go to state 53
    IF              shift and go to state 54
    WRITE           shift and go to state 55
    READ            shift and go to state 56
    ID              shift and go to state 49
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11
    CENTER          shift and go to state 57
    FORWARD         shift and go to state 58
    RIGHT           shift and go to state 59
    LEFT            shift and go to state 60

    var_assignation                shift and go to state 46
    stmnt                          shift and go to state 73
    empty                          shift and go to state 36
    returnf                        shift and go to state 37
    var_declaration_func           shift and go to state 38
    pen_func                       shift and go to state 39
    move_func                      shift and go to state 40
    while_stmnt                    shift and go to state 41
    if_stmnt                       shift and go to state 42
    write                          shift and go to state 43
    read                           shift and go to state 44
    func_call                      shift and go to state 45
    var_type                       shift and go to state 48
    move_type                      shift and go to state 52

state 47

    (37) returnf -> RETURN . expression
    (51) expression -> . exp q4
    (52) expression -> . exp rel_op exp q4
    (55) exp -> . termino q1
    (56) exp -> . termino term_op e3 termino q1
    (61) termino -> . factor q2
    (62) termino -> . factor fact_op e2 expression q2
    (68) factor -> . var_cte e1
    (69) factor -> . open_pth expression close_pth
    (44) var_cte -> . func_call
    (45) var_cte -> . cte_bool
    (46) var_cte -> . CTE_STR
    (47) var_cte -> . CTE_NUM
    (48) var_cte -> . variable
    (71) open_pth -> . OPEN_PTH
    (81) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (49) cte_bool -> . FALSE
    (50) cte_bool -> . TRUE
    (89) variable -> . ID array
    CTE_STR         shift and go to state 82
    CTE_NUM         shift and go to state 83
    OPEN_PTH        shift and go to state 85
    ID              shift and go to state 86
    FALSE           shift and go to state 87
    TRUE            shift and go to state 88

    expression                     shift and go to state 74
    exp                            shift and go to state 75
    termino                        shift and go to state 76
    factor                         shift and go to state 77
    var_cte                        shift and go to state 78
    open_pth                       shift and go to state 79
    func_call                      shift and go to state 80
    cte_bool                       shift and go to state 81
    variable                       shift and go to state 84

state 48

    (38) var_declaration_func -> var_type . addvartype ID varid multiple_vars
    (6) addvartype -> .
    ID              reduce using rule 6 (addvartype -> .)

    addvartype                     shift and go to state 89

state 49

    (81) func_call -> ID . OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (40) var_assignation -> ID . e5 assign e6 expression q3
    (41) e5 -> .
    OPEN_PTH        shift and go to state 90
    ASSIGN          reduce using rule 41 (e5 -> .)

    e5                             shift and go to state 91

state 50

    (117) pen_func -> PEN_DOWN . OPEN_PTH CLOSE_PTH
    OPEN_PTH        shift and go to state 92


state 51

    (118) pen_func -> PEN_UP . OPEN_PTH CLOSE_PTH
    OPEN_PTH        shift and go to state 93


state 52

    (112) move_func -> move_type . OPEN_PTH func_call_param CLOSE_PTH
    OPEN_PTH        shift and go to state 94


state 53

    (104) while_stmnt -> WHILE . w1 con_expression w2 stmnt w3 END
    (105) w1 -> .
    CTE_STR         reduce using rule 105 (w1 -> .)
    CTE_NUM         reduce using rule 105 (w1 -> .)
    OPEN_PTH        reduce using rule 105 (w1 -> .)
    ID              reduce using rule 105 (w1 -> .)
    FALSE           reduce using rule 105 (w1 -> .)
    TRUE            reduce using rule 105 (w1 -> .)

    w1                             shift and go to state 95

state 54

    (97) if_stmnt -> IF . con_expression if1 stmnt if2 else_stmnt
    (108) con_expression -> . expression q5
    (109) con_expression -> . expression q5 log_op e7 expression q5
    (51) expression -> . exp q4
    (52) expression -> . exp rel_op exp q4
    (55) exp -> . termino q1
    (56) exp -> . termino term_op e3 termino q1
    (61) termino -> . factor q2
    (62) termino -> . factor fact_op e2 expression q2
    (68) factor -> . var_cte e1
    (69) factor -> . open_pth expression close_pth
    (44) var_cte -> . func_call
    (45) var_cte -> . cte_bool
    (46) var_cte -> . CTE_STR
    (47) var_cte -> . CTE_NUM
    (48) var_cte -> . variable
    (71) open_pth -> . OPEN_PTH
    (81) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (49) cte_bool -> . FALSE
    (50) cte_bool -> . TRUE
    (89) variable -> . ID array
    CTE_STR         shift and go to state 82
    CTE_NUM         shift and go to state 83
    OPEN_PTH        shift and go to state 85
    ID              shift and go to state 86
    FALSE           shift and go to state 87
    TRUE            shift and go to state 88

    con_expression                 shift and go to state 96
    expression                     shift and go to state 97
    exp                            shift and go to state 75
    termino                        shift and go to state 76
    factor                         shift and go to state 77
    var_cte                        shift and go to state 78
    open_pth                       shift and go to state 79
    func_call                      shift and go to state 80
    cte_bool                       shift and go to state 81
    variable                       shift and go to state 84

state 55

    (96) write -> WRITE . OPEN_PTH expression CLOSE_PTH
    OPEN_PTH        shift and go to state 98


state 56

    (88) read -> READ . OPEN_PTH variable multiple_vars CLOSE_PTH
    OPEN_PTH        shift and go to state 99


state 57

    (113) move_type -> CENTER .
    OPEN_PTH        reduce using rule 113 (move_type -> CENTER .)


state 58

    (114) move_type -> FORWARD .
    OPEN_PTH        reduce using rule 114 (move_type -> FORWARD .)


state 59

    (115) move_type -> RIGHT .
    OPEN_PTH        reduce using rule 115 (move_type -> RIGHT .)


state 60

    (116) move_type -> LEFT .
    OPEN_PTH        reduce using rule 116 (move_type -> LEFT .)


state 61

    (14) func_declaration -> FUNC resetvars func_type ID fd1 . OPEN_PTH parameter CLOSE_PTH stmnt vd1 END
    OPEN_PTH        shift and go to state 100


state 62

    (9) multiple_var -> COMMA ID varglobal . multiple_var
    (8) multiple_var -> . empty
    (9) multiple_var -> . COMMA ID varglobal multiple_var
    (121) empty -> .
    COMMA           shift and go to state 30
    BOOL            reduce using rule 121 (empty -> .)
    WORD            reduce using rule 121 (empty -> .)
    NUMBER          reduce using rule 121 (empty -> .)
    FUNC            reduce using rule 121 (empty -> .)
    MAIN            reduce using rule 121 (empty -> .)

    multiple_var                   shift and go to state 101
    empty                          shift and go to state 29

state 63

    (120) main -> MAIN fd1 resetvars stmnt vd1 . END
    END             shift and go to state 102


state 64

    (27) stmnt -> returnf stmnt .
    END             reduce using rule 27 (stmnt -> returnf stmnt .)
    ELSE            reduce using rule 27 (stmnt -> returnf stmnt .)


state 65

    (28) stmnt -> var_declaration_func stmnt .
    END             reduce using rule 28 (stmnt -> var_declaration_func stmnt .)
    ELSE            reduce using rule 28 (stmnt -> var_declaration_func stmnt .)


state 66

    (29) stmnt -> pen_func stmnt .
    END             reduce using rule 29 (stmnt -> pen_func stmnt .)
    ELSE            reduce using rule 29 (stmnt -> pen_func stmnt .)


state 67

    (30) stmnt -> move_func stmnt .
    END             reduce using rule 30 (stmnt -> move_func stmnt .)
    ELSE            reduce using rule 30 (stmnt -> move_func stmnt .)


state 68

    (31) stmnt -> while_stmnt stmnt .
    END             reduce using rule 31 (stmnt -> while_stmnt stmnt .)
    ELSE            reduce using rule 31 (stmnt -> while_stmnt stmnt .)


state 69

    (32) stmnt -> if_stmnt stmnt .
    END             reduce using rule 32 (stmnt -> if_stmnt stmnt .)
    ELSE            reduce using rule 32 (stmnt -> if_stmnt stmnt .)


state 70

    (33) stmnt -> write stmnt .
    END             reduce using rule 33 (stmnt -> write stmnt .)
    ELSE            reduce using rule 33 (stmnt -> write stmnt .)


state 71

    (34) stmnt -> read stmnt .
    END             reduce using rule 34 (stmnt -> read stmnt .)
    ELSE            reduce using rule 34 (stmnt -> read stmnt .)


state 72

    (35) stmnt -> func_call stmnt .
    END             reduce using rule 35 (stmnt -> func_call stmnt .)
    ELSE            reduce using rule 35 (stmnt -> func_call stmnt .)


state 73

    (36) stmnt -> var_assignation stmnt .
    END             reduce using rule 36 (stmnt -> var_assignation stmnt .)
    ELSE            reduce using rule 36 (stmnt -> var_assignation stmnt .)


state 74

    (37) returnf -> RETURN expression .
    RETURN          reduce using rule 37 (returnf -> RETURN expression .)
    PEN_DOWN        reduce using rule 37 (returnf -> RETURN expression .)
    PEN_UP          reduce using rule 37 (returnf -> RETURN expression .)
    WHILE           reduce using rule 37 (returnf -> RETURN expression .)
    IF              reduce using rule 37 (returnf -> RETURN expression .)
    WRITE           reduce using rule 37 (returnf -> RETURN expression .)
    READ            reduce using rule 37 (returnf -> RETURN expression .)
    ID              reduce using rule 37 (returnf -> RETURN expression .)
    BOOL            reduce using rule 37 (returnf -> RETURN expression .)
    WORD            reduce using rule 37 (returnf -> RETURN expression .)
    NUMBER          reduce using rule 37 (returnf -> RETURN expression .)
    CENTER          reduce using rule 37 (returnf -> RETURN expression .)
    FORWARD         reduce using rule 37 (returnf -> RETURN expression .)
    RIGHT           reduce using rule 37 (returnf -> RETURN expression .)
    LEFT            reduce using rule 37 (returnf -> RETURN expression .)
    END             reduce using rule 37 (returnf -> RETURN expression .)
    ELSE            reduce using rule 37 (returnf -> RETURN expression .)


state 75

    (51) expression -> exp . q4
    (52) expression -> exp . rel_op exp q4
    (53) q4 -> .
    (75) rel_op -> . EQUAL_TO
    (76) rel_op -> . MORE_OR_EQ_THAN
    (77) rel_op -> . LESS_OR_EQ_THAN
    (78) rel_op -> . DIFFERENT_TO
    (79) rel_op -> . MORE_THAN
    (80) rel_op -> . LESS_THAN
  ! shift/reduce conflict for EQUAL_TO resolved as shift
  ! shift/reduce conflict for MORE_OR_EQ_THAN resolved as shift
  ! shift/reduce conflict for LESS_OR_EQ_THAN resolved as shift
  ! shift/reduce conflict for DIFFERENT_TO resolved as shift
  ! shift/reduce conflict for MORE_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
    RETURN          reduce using rule 53 (q4 -> .)
    PEN_DOWN        reduce using rule 53 (q4 -> .)
    PEN_UP          reduce using rule 53 (q4 -> .)
    WHILE           reduce using rule 53 (q4 -> .)
    IF              reduce using rule 53 (q4 -> .)
    WRITE           reduce using rule 53 (q4 -> .)
    READ            reduce using rule 53 (q4 -> .)
    ID              reduce using rule 53 (q4 -> .)
    BOOL            reduce using rule 53 (q4 -> .)
    WORD            reduce using rule 53 (q4 -> .)
    NUMBER          reduce using rule 53 (q4 -> .)
    CENTER          reduce using rule 53 (q4 -> .)
    FORWARD         reduce using rule 53 (q4 -> .)
    RIGHT           reduce using rule 53 (q4 -> .)
    LEFT            reduce using rule 53 (q4 -> .)
    END             reduce using rule 53 (q4 -> .)
    ELSE            reduce using rule 53 (q4 -> .)
    OR              reduce using rule 53 (q4 -> .)
    AND             reduce using rule 53 (q4 -> .)
    CLOSE_PTH       reduce using rule 53 (q4 -> .)
    COMMA           reduce using rule 53 (q4 -> .)
    CLOSE_SQR       reduce using rule 53 (q4 -> .)
    SUB             reduce using rule 53 (q4 -> .)
    SUM             reduce using rule 53 (q4 -> .)
    EQUAL_TO        shift and go to state 105
    MORE_OR_EQ_THAN shift and go to state 106
    LESS_OR_EQ_THAN shift and go to state 107
    DIFFERENT_TO    shift and go to state 108
    MORE_THAN       shift and go to state 109
    LESS_THAN       shift and go to state 110

    q4                             shift and go to state 103
    rel_op                         shift and go to state 104

state 76

    (55) exp -> termino . q1
    (56) exp -> termino . term_op e3 termino q1
    (63) q1 -> .
    (59) term_op -> . SUB
    (60) term_op -> . SUM
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for SUM resolved as shift
    EQUAL_TO        reduce using rule 63 (q1 -> .)
    MORE_OR_EQ_THAN reduce using rule 63 (q1 -> .)
    LESS_OR_EQ_THAN reduce using rule 63 (q1 -> .)
    DIFFERENT_TO    reduce using rule 63 (q1 -> .)
    MORE_THAN       reduce using rule 63 (q1 -> .)
    LESS_THAN       reduce using rule 63 (q1 -> .)
    RETURN          reduce using rule 63 (q1 -> .)
    PEN_DOWN        reduce using rule 63 (q1 -> .)
    PEN_UP          reduce using rule 63 (q1 -> .)
    WHILE           reduce using rule 63 (q1 -> .)
    IF              reduce using rule 63 (q1 -> .)
    WRITE           reduce using rule 63 (q1 -> .)
    READ            reduce using rule 63 (q1 -> .)
    ID              reduce using rule 63 (q1 -> .)
    BOOL            reduce using rule 63 (q1 -> .)
    WORD            reduce using rule 63 (q1 -> .)
    NUMBER          reduce using rule 63 (q1 -> .)
    CENTER          reduce using rule 63 (q1 -> .)
    FORWARD         reduce using rule 63 (q1 -> .)
    RIGHT           reduce using rule 63 (q1 -> .)
    LEFT            reduce using rule 63 (q1 -> .)
    END             reduce using rule 63 (q1 -> .)
    ELSE            reduce using rule 63 (q1 -> .)
    OR              reduce using rule 63 (q1 -> .)
    AND             reduce using rule 63 (q1 -> .)
    CLOSE_PTH       reduce using rule 63 (q1 -> .)
    COMMA           reduce using rule 63 (q1 -> .)
    CLOSE_SQR       reduce using rule 63 (q1 -> .)
    SUB             shift and go to state 113
    SUM             shift and go to state 114

    q1                             shift and go to state 111
    term_op                        shift and go to state 112

state 77

    (61) termino -> factor . q2
    (62) termino -> factor . fact_op e2 expression q2
    (58) q2 -> .
    (66) fact_op -> . DIV
    (67) fact_op -> . MULT
    SUB             reduce using rule 58 (q2 -> .)
    SUM             reduce using rule 58 (q2 -> .)
    EQUAL_TO        reduce using rule 58 (q2 -> .)
    MORE_OR_EQ_THAN reduce using rule 58 (q2 -> .)
    LESS_OR_EQ_THAN reduce using rule 58 (q2 -> .)
    DIFFERENT_TO    reduce using rule 58 (q2 -> .)
    MORE_THAN       reduce using rule 58 (q2 -> .)
    LESS_THAN       reduce using rule 58 (q2 -> .)
    RETURN          reduce using rule 58 (q2 -> .)
    PEN_DOWN        reduce using rule 58 (q2 -> .)
    PEN_UP          reduce using rule 58 (q2 -> .)
    WHILE           reduce using rule 58 (q2 -> .)
    IF              reduce using rule 58 (q2 -> .)
    WRITE           reduce using rule 58 (q2 -> .)
    READ            reduce using rule 58 (q2 -> .)
    ID              reduce using rule 58 (q2 -> .)
    BOOL            reduce using rule 58 (q2 -> .)
    WORD            reduce using rule 58 (q2 -> .)
    NUMBER          reduce using rule 58 (q2 -> .)
    CENTER          reduce using rule 58 (q2 -> .)
    FORWARD         reduce using rule 58 (q2 -> .)
    RIGHT           reduce using rule 58 (q2 -> .)
    LEFT            reduce using rule 58 (q2 -> .)
    END             reduce using rule 58 (q2 -> .)
    ELSE            reduce using rule 58 (q2 -> .)
    OR              reduce using rule 58 (q2 -> .)
    AND             reduce using rule 58 (q2 -> .)
    CLOSE_PTH       reduce using rule 58 (q2 -> .)
    COMMA           reduce using rule 58 (q2 -> .)
    CLOSE_SQR       reduce using rule 58 (q2 -> .)
    DIV             shift and go to state 117
    MULT            shift and go to state 118

    q2                             shift and go to state 115
    fact_op                        shift and go to state 116

state 78

    (68) factor -> var_cte . e1
    (70) e1 -> .
    DIV             reduce using rule 70 (e1 -> .)
    MULT            reduce using rule 70 (e1 -> .)
    SUB             reduce using rule 70 (e1 -> .)
    SUM             reduce using rule 70 (e1 -> .)
    EQUAL_TO        reduce using rule 70 (e1 -> .)
    MORE_OR_EQ_THAN reduce using rule 70 (e1 -> .)
    LESS_OR_EQ_THAN reduce using rule 70 (e1 -> .)
    DIFFERENT_TO    reduce using rule 70 (e1 -> .)
    MORE_THAN       reduce using rule 70 (e1 -> .)
    LESS_THAN       reduce using rule 70 (e1 -> .)
    RETURN          reduce using rule 70 (e1 -> .)
    PEN_DOWN        reduce using rule 70 (e1 -> .)
    PEN_UP          reduce using rule 70 (e1 -> .)
    WHILE           reduce using rule 70 (e1 -> .)
    IF              reduce using rule 70 (e1 -> .)
    WRITE           reduce using rule 70 (e1 -> .)
    READ            reduce using rule 70 (e1 -> .)
    ID              reduce using rule 70 (e1 -> .)
    BOOL            reduce using rule 70 (e1 -> .)
    WORD            reduce using rule 70 (e1 -> .)
    NUMBER          reduce using rule 70 (e1 -> .)
    CENTER          reduce using rule 70 (e1 -> .)
    FORWARD         reduce using rule 70 (e1 -> .)
    RIGHT           reduce using rule 70 (e1 -> .)
    LEFT            reduce using rule 70 (e1 -> .)
    END             reduce using rule 70 (e1 -> .)
    ELSE            reduce using rule 70 (e1 -> .)
    OR              reduce using rule 70 (e1 -> .)
    AND             reduce using rule 70 (e1 -> .)
    CLOSE_PTH       reduce using rule 70 (e1 -> .)
    COMMA           reduce using rule 70 (e1 -> .)
    CLOSE_SQR       reduce using rule 70 (e1 -> .)

    e1                             shift and go to state 119

state 79

    (69) factor -> open_pth . expression close_pth
    (51) expression -> . exp q4
    (52) expression -> . exp rel_op exp q4
    (55) exp -> . termino q1
    (56) exp -> . termino term_op e3 termino q1
    (61) termino -> . factor q2
    (62) termino -> . factor fact_op e2 expression q2
    (68) factor -> . var_cte e1
    (69) factor -> . open_pth expression close_pth
    (44) var_cte -> . func_call
    (45) var_cte -> . cte_bool
    (46) var_cte -> . CTE_STR
    (47) var_cte -> . CTE_NUM
    (48) var_cte -> . variable
    (71) open_pth -> . OPEN_PTH
    (81) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (49) cte_bool -> . FALSE
    (50) cte_bool -> . TRUE
    (89) variable -> . ID array
    CTE_STR         shift and go to state 82
    CTE_NUM         shift and go to state 83
    OPEN_PTH        shift and go to state 85
    ID              shift and go to state 86
    FALSE           shift and go to state 87
    TRUE            shift and go to state 88

    open_pth                       shift and go to state 79
    expression                     shift and go to state 120
    exp                            shift and go to state 75
    termino                        shift and go to state 76
    factor                         shift and go to state 77
    var_cte                        shift and go to state 78
    func_call                      shift and go to state 80
    cte_bool                       shift and go to state 81
    variable                       shift and go to state 84

state 80

    (44) var_cte -> func_call .
    DIV             reduce using rule 44 (var_cte -> func_call .)
    MULT            reduce using rule 44 (var_cte -> func_call .)
    SUB             reduce using rule 44 (var_cte -> func_call .)
    SUM             reduce using rule 44 (var_cte -> func_call .)
    EQUAL_TO        reduce using rule 44 (var_cte -> func_call .)
    MORE_OR_EQ_THAN reduce using rule 44 (var_cte -> func_call .)
    LESS_OR_EQ_THAN reduce using rule 44 (var_cte -> func_call .)
    DIFFERENT_TO    reduce using rule 44 (var_cte -> func_call .)
    MORE_THAN       reduce using rule 44 (var_cte -> func_call .)
    LESS_THAN       reduce using rule 44 (var_cte -> func_call .)
    RETURN          reduce using rule 44 (var_cte -> func_call .)
    PEN_DOWN        reduce using rule 44 (var_cte -> func_call .)
    PEN_UP          reduce using rule 44 (var_cte -> func_call .)
    WHILE           reduce using rule 44 (var_cte -> func_call .)
    IF              reduce using rule 44 (var_cte -> func_call .)
    WRITE           reduce using rule 44 (var_cte -> func_call .)
    READ            reduce using rule 44 (var_cte -> func_call .)
    ID              reduce using rule 44 (var_cte -> func_call .)
    BOOL            reduce using rule 44 (var_cte -> func_call .)
    WORD            reduce using rule 44 (var_cte -> func_call .)
    NUMBER          reduce using rule 44 (var_cte -> func_call .)
    CENTER          reduce using rule 44 (var_cte -> func_call .)
    FORWARD         reduce using rule 44 (var_cte -> func_call .)
    RIGHT           reduce using rule 44 (var_cte -> func_call .)
    LEFT            reduce using rule 44 (var_cte -> func_call .)
    END             reduce using rule 44 (var_cte -> func_call .)
    ELSE            reduce using rule 44 (var_cte -> func_call .)
    OR              reduce using rule 44 (var_cte -> func_call .)
    AND             reduce using rule 44 (var_cte -> func_call .)
    CLOSE_PTH       reduce using rule 44 (var_cte -> func_call .)
    COMMA           reduce using rule 44 (var_cte -> func_call .)
    CLOSE_SQR       reduce using rule 44 (var_cte -> func_call .)


state 81

    (45) var_cte -> cte_bool .
    DIV             reduce using rule 45 (var_cte -> cte_bool .)
    MULT            reduce using rule 45 (var_cte -> cte_bool .)
    SUB             reduce using rule 45 (var_cte -> cte_bool .)
    SUM             reduce using rule 45 (var_cte -> cte_bool .)
    EQUAL_TO        reduce using rule 45 (var_cte -> cte_bool .)
    MORE_OR_EQ_THAN reduce using rule 45 (var_cte -> cte_bool .)
    LESS_OR_EQ_THAN reduce using rule 45 (var_cte -> cte_bool .)
    DIFFERENT_TO    reduce using rule 45 (var_cte -> cte_bool .)
    MORE_THAN       reduce using rule 45 (var_cte -> cte_bool .)
    LESS_THAN       reduce using rule 45 (var_cte -> cte_bool .)
    RETURN          reduce using rule 45 (var_cte -> cte_bool .)
    PEN_DOWN        reduce using rule 45 (var_cte -> cte_bool .)
    PEN_UP          reduce using rule 45 (var_cte -> cte_bool .)
    WHILE           reduce using rule 45 (var_cte -> cte_bool .)
    IF              reduce using rule 45 (var_cte -> cte_bool .)
    WRITE           reduce using rule 45 (var_cte -> cte_bool .)
    READ            reduce using rule 45 (var_cte -> cte_bool .)
    ID              reduce using rule 45 (var_cte -> cte_bool .)
    BOOL            reduce using rule 45 (var_cte -> cte_bool .)
    WORD            reduce using rule 45 (var_cte -> cte_bool .)
    NUMBER          reduce using rule 45 (var_cte -> cte_bool .)
    CENTER          reduce using rule 45 (var_cte -> cte_bool .)
    FORWARD         reduce using rule 45 (var_cte -> cte_bool .)
    RIGHT           reduce using rule 45 (var_cte -> cte_bool .)
    LEFT            reduce using rule 45 (var_cte -> cte_bool .)
    END             reduce using rule 45 (var_cte -> cte_bool .)
    ELSE            reduce using rule 45 (var_cte -> cte_bool .)
    OR              reduce using rule 45 (var_cte -> cte_bool .)
    AND             reduce using rule 45 (var_cte -> cte_bool .)
    CLOSE_PTH       reduce using rule 45 (var_cte -> cte_bool .)
    COMMA           reduce using rule 45 (var_cte -> cte_bool .)
    CLOSE_SQR       reduce using rule 45 (var_cte -> cte_bool .)


state 82

    (46) var_cte -> CTE_STR .
    DIV             reduce using rule 46 (var_cte -> CTE_STR .)
    MULT            reduce using rule 46 (var_cte -> CTE_STR .)
    SUB             reduce using rule 46 (var_cte -> CTE_STR .)
    SUM             reduce using rule 46 (var_cte -> CTE_STR .)
    EQUAL_TO        reduce using rule 46 (var_cte -> CTE_STR .)
    MORE_OR_EQ_THAN reduce using rule 46 (var_cte -> CTE_STR .)
    LESS_OR_EQ_THAN reduce using rule 46 (var_cte -> CTE_STR .)
    DIFFERENT_TO    reduce using rule 46 (var_cte -> CTE_STR .)
    MORE_THAN       reduce using rule 46 (var_cte -> CTE_STR .)
    LESS_THAN       reduce using rule 46 (var_cte -> CTE_STR .)
    RETURN          reduce using rule 46 (var_cte -> CTE_STR .)
    PEN_DOWN        reduce using rule 46 (var_cte -> CTE_STR .)
    PEN_UP          reduce using rule 46 (var_cte -> CTE_STR .)
    WHILE           reduce using rule 46 (var_cte -> CTE_STR .)
    IF              reduce using rule 46 (var_cte -> CTE_STR .)
    WRITE           reduce using rule 46 (var_cte -> CTE_STR .)
    READ            reduce using rule 46 (var_cte -> CTE_STR .)
    ID              reduce using rule 46 (var_cte -> CTE_STR .)
    BOOL            reduce using rule 46 (var_cte -> CTE_STR .)
    WORD            reduce using rule 46 (var_cte -> CTE_STR .)
    NUMBER          reduce using rule 46 (var_cte -> CTE_STR .)
    CENTER          reduce using rule 46 (var_cte -> CTE_STR .)
    FORWARD         reduce using rule 46 (var_cte -> CTE_STR .)
    RIGHT           reduce using rule 46 (var_cte -> CTE_STR .)
    LEFT            reduce using rule 46 (var_cte -> CTE_STR .)
    END             reduce using rule 46 (var_cte -> CTE_STR .)
    ELSE            reduce using rule 46 (var_cte -> CTE_STR .)
    OR              reduce using rule 46 (var_cte -> CTE_STR .)
    AND             reduce using rule 46 (var_cte -> CTE_STR .)
    CLOSE_PTH       reduce using rule 46 (var_cte -> CTE_STR .)
    COMMA           reduce using rule 46 (var_cte -> CTE_STR .)
    CLOSE_SQR       reduce using rule 46 (var_cte -> CTE_STR .)


state 83

    (47) var_cte -> CTE_NUM .
    DIV             reduce using rule 47 (var_cte -> CTE_NUM .)
    MULT            reduce using rule 47 (var_cte -> CTE_NUM .)
    SUB             reduce using rule 47 (var_cte -> CTE_NUM .)
    SUM             reduce using rule 47 (var_cte -> CTE_NUM .)
    EQUAL_TO        reduce using rule 47 (var_cte -> CTE_NUM .)
    MORE_OR_EQ_THAN reduce using rule 47 (var_cte -> CTE_NUM .)
    LESS_OR_EQ_THAN reduce using rule 47 (var_cte -> CTE_NUM .)
    DIFFERENT_TO    reduce using rule 47 (var_cte -> CTE_NUM .)
    MORE_THAN       reduce using rule 47 (var_cte -> CTE_NUM .)
    LESS_THAN       reduce using rule 47 (var_cte -> CTE_NUM .)
    RETURN          reduce using rule 47 (var_cte -> CTE_NUM .)
    PEN_DOWN        reduce using rule 47 (var_cte -> CTE_NUM .)
    PEN_UP          reduce using rule 47 (var_cte -> CTE_NUM .)
    WHILE           reduce using rule 47 (var_cte -> CTE_NUM .)
    IF              reduce using rule 47 (var_cte -> CTE_NUM .)
    WRITE           reduce using rule 47 (var_cte -> CTE_NUM .)
    READ            reduce using rule 47 (var_cte -> CTE_NUM .)
    ID              reduce using rule 47 (var_cte -> CTE_NUM .)
    BOOL            reduce using rule 47 (var_cte -> CTE_NUM .)
    WORD            reduce using rule 47 (var_cte -> CTE_NUM .)
    NUMBER          reduce using rule 47 (var_cte -> CTE_NUM .)
    CENTER          reduce using rule 47 (var_cte -> CTE_NUM .)
    FORWARD         reduce using rule 47 (var_cte -> CTE_NUM .)
    RIGHT           reduce using rule 47 (var_cte -> CTE_NUM .)
    LEFT            reduce using rule 47 (var_cte -> CTE_NUM .)
    END             reduce using rule 47 (var_cte -> CTE_NUM .)
    ELSE            reduce using rule 47 (var_cte -> CTE_NUM .)
    OR              reduce using rule 47 (var_cte -> CTE_NUM .)
    AND             reduce using rule 47 (var_cte -> CTE_NUM .)
    CLOSE_PTH       reduce using rule 47 (var_cte -> CTE_NUM .)
    COMMA           reduce using rule 47 (var_cte -> CTE_NUM .)
    CLOSE_SQR       reduce using rule 47 (var_cte -> CTE_NUM .)


state 84

    (48) var_cte -> variable .
    DIV             reduce using rule 48 (var_cte -> variable .)
    MULT            reduce using rule 48 (var_cte -> variable .)
    SUB             reduce using rule 48 (var_cte -> variable .)
    SUM             reduce using rule 48 (var_cte -> variable .)
    EQUAL_TO        reduce using rule 48 (var_cte -> variable .)
    MORE_OR_EQ_THAN reduce using rule 48 (var_cte -> variable .)
    LESS_OR_EQ_THAN reduce using rule 48 (var_cte -> variable .)
    DIFFERENT_TO    reduce using rule 48 (var_cte -> variable .)
    MORE_THAN       reduce using rule 48 (var_cte -> variable .)
    LESS_THAN       reduce using rule 48 (var_cte -> variable .)
    RETURN          reduce using rule 48 (var_cte -> variable .)
    PEN_DOWN        reduce using rule 48 (var_cte -> variable .)
    PEN_UP          reduce using rule 48 (var_cte -> variable .)
    WHILE           reduce using rule 48 (var_cte -> variable .)
    IF              reduce using rule 48 (var_cte -> variable .)
    WRITE           reduce using rule 48 (var_cte -> variable .)
    READ            reduce using rule 48 (var_cte -> variable .)
    ID              reduce using rule 48 (var_cte -> variable .)
    BOOL            reduce using rule 48 (var_cte -> variable .)
    WORD            reduce using rule 48 (var_cte -> variable .)
    NUMBER          reduce using rule 48 (var_cte -> variable .)
    CENTER          reduce using rule 48 (var_cte -> variable .)
    FORWARD         reduce using rule 48 (var_cte -> variable .)
    RIGHT           reduce using rule 48 (var_cte -> variable .)
    LEFT            reduce using rule 48 (var_cte -> variable .)
    END             reduce using rule 48 (var_cte -> variable .)
    ELSE            reduce using rule 48 (var_cte -> variable .)
    OR              reduce using rule 48 (var_cte -> variable .)
    AND             reduce using rule 48 (var_cte -> variable .)
    CLOSE_PTH       reduce using rule 48 (var_cte -> variable .)
    COMMA           reduce using rule 48 (var_cte -> variable .)
    CLOSE_SQR       reduce using rule 48 (var_cte -> variable .)


state 85

    (71) open_pth -> OPEN_PTH .
    CTE_STR         reduce using rule 71 (open_pth -> OPEN_PTH .)
    CTE_NUM         reduce using rule 71 (open_pth -> OPEN_PTH .)
    OPEN_PTH        reduce using rule 71 (open_pth -> OPEN_PTH .)
    ID              reduce using rule 71 (open_pth -> OPEN_PTH .)
    FALSE           reduce using rule 71 (open_pth -> OPEN_PTH .)
    TRUE            reduce using rule 71 (open_pth -> OPEN_PTH .)


state 86

    (81) func_call -> ID . OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (89) variable -> ID . array
    (90) array -> . empty
    (91) array -> . OPEN_SQR expression CLOSE_SQR matrix
    (121) empty -> .
    OPEN_PTH        shift and go to state 90
    OPEN_SQR        shift and go to state 123
    DIV             reduce using rule 121 (empty -> .)
    MULT            reduce using rule 121 (empty -> .)
    SUB             reduce using rule 121 (empty -> .)
    SUM             reduce using rule 121 (empty -> .)
    EQUAL_TO        reduce using rule 121 (empty -> .)
    MORE_OR_EQ_THAN reduce using rule 121 (empty -> .)
    LESS_OR_EQ_THAN reduce using rule 121 (empty -> .)
    DIFFERENT_TO    reduce using rule 121 (empty -> .)
    MORE_THAN       reduce using rule 121 (empty -> .)
    LESS_THAN       reduce using rule 121 (empty -> .)
    RETURN          reduce using rule 121 (empty -> .)
    PEN_DOWN        reduce using rule 121 (empty -> .)
    PEN_UP          reduce using rule 121 (empty -> .)
    WHILE           reduce using rule 121 (empty -> .)
    IF              reduce using rule 121 (empty -> .)
    WRITE           reduce using rule 121 (empty -> .)
    READ            reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)
    BOOL            reduce using rule 121 (empty -> .)
    WORD            reduce using rule 121 (empty -> .)
    NUMBER          reduce using rule 121 (empty -> .)
    CENTER          reduce using rule 121 (empty -> .)
    FORWARD         reduce using rule 121 (empty -> .)
    RIGHT           reduce using rule 121 (empty -> .)
    LEFT            reduce using rule 121 (empty -> .)
    END             reduce using rule 121 (empty -> .)
    ELSE            reduce using rule 121 (empty -> .)
    OR              reduce using rule 121 (empty -> .)
    AND             reduce using rule 121 (empty -> .)
    CLOSE_PTH       reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    CLOSE_SQR       reduce using rule 121 (empty -> .)

    array                          shift and go to state 121
    empty                          shift and go to state 122

state 87

    (49) cte_bool -> FALSE .
    DIV             reduce using rule 49 (cte_bool -> FALSE .)
    MULT            reduce using rule 49 (cte_bool -> FALSE .)
    SUB             reduce using rule 49 (cte_bool -> FALSE .)
    SUM             reduce using rule 49 (cte_bool -> FALSE .)
    EQUAL_TO        reduce using rule 49 (cte_bool -> FALSE .)
    MORE_OR_EQ_THAN reduce using rule 49 (cte_bool -> FALSE .)
    LESS_OR_EQ_THAN reduce using rule 49 (cte_bool -> FALSE .)
    DIFFERENT_TO    reduce using rule 49 (cte_bool -> FALSE .)
    MORE_THAN       reduce using rule 49 (cte_bool -> FALSE .)
    LESS_THAN       reduce using rule 49 (cte_bool -> FALSE .)
    RETURN          reduce using rule 49 (cte_bool -> FALSE .)
    PEN_DOWN        reduce using rule 49 (cte_bool -> FALSE .)
    PEN_UP          reduce using rule 49 (cte_bool -> FALSE .)
    WHILE           reduce using rule 49 (cte_bool -> FALSE .)
    IF              reduce using rule 49 (cte_bool -> FALSE .)
    WRITE           reduce using rule 49 (cte_bool -> FALSE .)
    READ            reduce using rule 49 (cte_bool -> FALSE .)
    ID              reduce using rule 49 (cte_bool -> FALSE .)
    BOOL            reduce using rule 49 (cte_bool -> FALSE .)
    WORD            reduce using rule 49 (cte_bool -> FALSE .)
    NUMBER          reduce using rule 49 (cte_bool -> FALSE .)
    CENTER          reduce using rule 49 (cte_bool -> FALSE .)
    FORWARD         reduce using rule 49 (cte_bool -> FALSE .)
    RIGHT           reduce using rule 49 (cte_bool -> FALSE .)
    LEFT            reduce using rule 49 (cte_bool -> FALSE .)
    END             reduce using rule 49 (cte_bool -> FALSE .)
    ELSE            reduce using rule 49 (cte_bool -> FALSE .)
    OR              reduce using rule 49 (cte_bool -> FALSE .)
    AND             reduce using rule 49 (cte_bool -> FALSE .)
    CLOSE_PTH       reduce using rule 49 (cte_bool -> FALSE .)
    COMMA           reduce using rule 49 (cte_bool -> FALSE .)
    CLOSE_SQR       reduce using rule 49 (cte_bool -> FALSE .)


state 88

    (50) cte_bool -> TRUE .
    DIV             reduce using rule 50 (cte_bool -> TRUE .)
    MULT            reduce using rule 50 (cte_bool -> TRUE .)
    SUB             reduce using rule 50 (cte_bool -> TRUE .)
    SUM             reduce using rule 50 (cte_bool -> TRUE .)
    EQUAL_TO        reduce using rule 50 (cte_bool -> TRUE .)
    MORE_OR_EQ_THAN reduce using rule 50 (cte_bool -> TRUE .)
    LESS_OR_EQ_THAN reduce using rule 50 (cte_bool -> TRUE .)
    DIFFERENT_TO    reduce using rule 50 (cte_bool -> TRUE .)
    MORE_THAN       reduce using rule 50 (cte_bool -> TRUE .)
    LESS_THAN       reduce using rule 50 (cte_bool -> TRUE .)
    RETURN          reduce using rule 50 (cte_bool -> TRUE .)
    PEN_DOWN        reduce using rule 50 (cte_bool -> TRUE .)
    PEN_UP          reduce using rule 50 (cte_bool -> TRUE .)
    WHILE           reduce using rule 50 (cte_bool -> TRUE .)
    IF              reduce using rule 50 (cte_bool -> TRUE .)
    WRITE           reduce using rule 50 (cte_bool -> TRUE .)
    READ            reduce using rule 50 (cte_bool -> TRUE .)
    ID              reduce using rule 50 (cte_bool -> TRUE .)
    BOOL            reduce using rule 50 (cte_bool -> TRUE .)
    WORD            reduce using rule 50 (cte_bool -> TRUE .)
    NUMBER          reduce using rule 50 (cte_bool -> TRUE .)
    CENTER          reduce using rule 50 (cte_bool -> TRUE .)
    FORWARD         reduce using rule 50 (cte_bool -> TRUE .)
    RIGHT           reduce using rule 50 (cte_bool -> TRUE .)
    LEFT            reduce using rule 50 (cte_bool -> TRUE .)
    END             reduce using rule 50 (cte_bool -> TRUE .)
    ELSE            reduce using rule 50 (cte_bool -> TRUE .)
    OR              reduce using rule 50 (cte_bool -> TRUE .)
    AND             reduce using rule 50 (cte_bool -> TRUE .)
    CLOSE_PTH       reduce using rule 50 (cte_bool -> TRUE .)
    COMMA           reduce using rule 50 (cte_bool -> TRUE .)
    CLOSE_SQR       reduce using rule 50 (cte_bool -> TRUE .)


state 89

    (38) var_declaration_func -> var_type addvartype . ID varid multiple_vars
    ID              shift and go to state 124


state 90

    (81) func_call -> ID OPEN_PTH . func1 func_call_param CLOSE_PTH func3
    (82) func1 -> .
    CTE_STR         reduce using rule 82 (func1 -> .)
    CTE_NUM         reduce using rule 82 (func1 -> .)
    OPEN_PTH        reduce using rule 82 (func1 -> .)
    ID              reduce using rule 82 (func1 -> .)
    FALSE           reduce using rule 82 (func1 -> .)
    TRUE            reduce using rule 82 (func1 -> .)

    func1                          shift and go to state 125

state 91

    (40) var_assignation -> ID e5 . assign e6 expression q3
    (43) assign -> . ASSIGN
    ASSIGN          shift and go to state 127

    assign                         shift and go to state 126

state 92

    (117) pen_func -> PEN_DOWN OPEN_PTH . CLOSE_PTH
    CLOSE_PTH       shift and go to state 128


state 93

    (118) pen_func -> PEN_UP OPEN_PTH . CLOSE_PTH
    CLOSE_PTH       shift and go to state 129


state 94

    (112) move_func -> move_type OPEN_PTH . func_call_param CLOSE_PTH
    (83) func_call_param -> . expression func2 multiple_fc_param
    (51) expression -> . exp q4
    (52) expression -> . exp rel_op exp q4
    (55) exp -> . termino q1
    (56) exp -> . termino term_op e3 termino q1
    (61) termino -> . factor q2
    (62) termino -> . factor fact_op e2 expression q2
    (68) factor -> . var_cte e1
    (69) factor -> . open_pth expression close_pth
    (44) var_cte -> . func_call
    (45) var_cte -> . cte_bool
    (46) var_cte -> . CTE_STR
    (47) var_cte -> . CTE_NUM
    (48) var_cte -> . variable
    (71) open_pth -> . OPEN_PTH
    (81) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (49) cte_bool -> . FALSE
    (50) cte_bool -> . TRUE
    (89) variable -> . ID array
    CTE_STR         shift and go to state 82
    CTE_NUM         shift and go to state 83
    OPEN_PTH        shift and go to state 85
    ID              shift and go to state 86
    FALSE           shift and go to state 87
    TRUE            shift and go to state 88

    func_call_param                shift and go to state 130
    expression                     shift and go to state 131
    exp                            shift and go to state 75
    termino                        shift and go to state 76
    factor                         shift and go to state 77
    var_cte                        shift and go to state 78
    open_pth                       shift and go to state 79
    func_call                      shift and go to state 80
    cte_bool                       shift and go to state 81
    variable                       shift and go to state 84

state 95

    (104) while_stmnt -> WHILE w1 . con_expression w2 stmnt w3 END
    (108) con_expression -> . expression q5
    (109) con_expression -> . expression q5 log_op e7 expression q5
    (51) expression -> . exp q4
    (52) expression -> . exp rel_op exp q4
    (55) exp -> . termino q1
    (56) exp -> . termino term_op e3 termino q1
    (61) termino -> . factor q2
    (62) termino -> . factor fact_op e2 expression q2
    (68) factor -> . var_cte e1
    (69) factor -> . open_pth expression close_pth
    (44) var_cte -> . func_call
    (45) var_cte -> . cte_bool
    (46) var_cte -> . CTE_STR
    (47) var_cte -> . CTE_NUM
    (48) var_cte -> . variable
    (71) open_pth -> . OPEN_PTH
    (81) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (49) cte_bool -> . FALSE
    (50) cte_bool -> . TRUE
    (89) variable -> . ID array
    CTE_STR         shift and go to state 82
    CTE_NUM         shift and go to state 83
    OPEN_PTH        shift and go to state 85
    ID              shift and go to state 86
    FALSE           shift and go to state 87
    TRUE            shift and go to state 88

    con_expression                 shift and go to state 132
    expression                     shift and go to state 97
    exp                            shift and go to state 75
    termino                        shift and go to state 76
    factor                         shift and go to state 77
    var_cte                        shift and go to state 78
    open_pth                       shift and go to state 79
    func_call                      shift and go to state 80
    cte_bool                       shift and go to state 81
    variable                       shift and go to state 84

state 96

    (97) if_stmnt -> IF con_expression . if1 stmnt if2 else_stmnt
    (98) if1 -> .
    RETURN          reduce using rule 98 (if1 -> .)
    PEN_DOWN        reduce using rule 98 (if1 -> .)
    PEN_UP          reduce using rule 98 (if1 -> .)
    WHILE           reduce using rule 98 (if1 -> .)
    IF              reduce using rule 98 (if1 -> .)
    WRITE           reduce using rule 98 (if1 -> .)
    READ            reduce using rule 98 (if1 -> .)
    ID              reduce using rule 98 (if1 -> .)
    BOOL            reduce using rule 98 (if1 -> .)
    WORD            reduce using rule 98 (if1 -> .)
    NUMBER          reduce using rule 98 (if1 -> .)
    CENTER          reduce using rule 98 (if1 -> .)
    FORWARD         reduce using rule 98 (if1 -> .)
    RIGHT           reduce using rule 98 (if1 -> .)
    LEFT            reduce using rule 98 (if1 -> .)
    END             reduce using rule 98 (if1 -> .)
    ELSE            reduce using rule 98 (if1 -> .)

    if1                            shift and go to state 133

state 97

    (108) con_expression -> expression . q5
    (109) con_expression -> expression . q5 log_op e7 expression q5
    (111) q5 -> .
    OR              reduce using rule 111 (q5 -> .)
    AND             reduce using rule 111 (q5 -> .)
    RETURN          reduce using rule 111 (q5 -> .)
    PEN_DOWN        reduce using rule 111 (q5 -> .)
    PEN_UP          reduce using rule 111 (q5 -> .)
    WHILE           reduce using rule 111 (q5 -> .)
    IF              reduce using rule 111 (q5 -> .)
    WRITE           reduce using rule 111 (q5 -> .)
    READ            reduce using rule 111 (q5 -> .)
    ID              reduce using rule 111 (q5 -> .)
    BOOL            reduce using rule 111 (q5 -> .)
    WORD            reduce using rule 111 (q5 -> .)
    NUMBER          reduce using rule 111 (q5 -> .)
    CENTER          reduce using rule 111 (q5 -> .)
    FORWARD         reduce using rule 111 (q5 -> .)
    RIGHT           reduce using rule 111 (q5 -> .)
    LEFT            reduce using rule 111 (q5 -> .)
    END             reduce using rule 111 (q5 -> .)
    ELSE            reduce using rule 111 (q5 -> .)

    q5                             shift and go to state 134

state 98

    (96) write -> WRITE OPEN_PTH . expression CLOSE_PTH
    (51) expression -> . exp q4
    (52) expression -> . exp rel_op exp q4
    (55) exp -> . termino q1
    (56) exp -> . termino term_op e3 termino q1
    (61) termino -> . factor q2
    (62) termino -> . factor fact_op e2 expression q2
    (68) factor -> . var_cte e1
    (69) factor -> . open_pth expression close_pth
    (44) var_cte -> . func_call
    (45) var_cte -> . cte_bool
    (46) var_cte -> . CTE_STR
    (47) var_cte -> . CTE_NUM
    (48) var_cte -> . variable
    (71) open_pth -> . OPEN_PTH
    (81) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (49) cte_bool -> . FALSE
    (50) cte_bool -> . TRUE
    (89) variable -> . ID array
    CTE_STR         shift and go to state 82
    CTE_NUM         shift and go to state 83
    OPEN_PTH        shift and go to state 85
    ID              shift and go to state 86
    FALSE           shift and go to state 87
    TRUE            shift and go to state 88

    expression                     shift and go to state 135
    exp                            shift and go to state 75
    termino                        shift and go to state 76
    factor                         shift and go to state 77
    var_cte                        shift and go to state 78
    open_pth                       shift and go to state 79
    func_call                      shift and go to state 80
    cte_bool                       shift and go to state 81
    variable                       shift and go to state 84

state 99

    (88) read -> READ OPEN_PTH . variable multiple_vars CLOSE_PTH
    (89) variable -> . ID array
    ID              shift and go to state 137

    variable                       shift and go to state 136

state 100

    (14) func_declaration -> FUNC resetvars func_type ID fd1 OPEN_PTH . parameter CLOSE_PTH stmnt vd1 END
    (22) parameter -> . empty
    (23) parameter -> . var_type addvartype ID varid multiple_parameters
    (121) empty -> .
    (10) var_type -> . BOOL
    (11) var_type -> . WORD
    (12) var_type -> . NUMBER
    CLOSE_PTH       reduce using rule 121 (empty -> .)
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11

    parameter                      shift and go to state 138
    empty                          shift and go to state 139
    var_type                       shift and go to state 140

state 101

    (9) multiple_var -> COMMA ID varglobal multiple_var .
    BOOL            reduce using rule 9 (multiple_var -> COMMA ID varglobal multiple_var .)
    WORD            reduce using rule 9 (multiple_var -> COMMA ID varglobal multiple_var .)
    NUMBER          reduce using rule 9 (multiple_var -> COMMA ID varglobal multiple_var .)
    FUNC            reduce using rule 9 (multiple_var -> COMMA ID varglobal multiple_var .)
    MAIN            reduce using rule 9 (multiple_var -> COMMA ID varglobal multiple_var .)


state 102

    (120) main -> MAIN fd1 resetvars stmnt vd1 END .
    $end            reduce using rule 120 (main -> MAIN fd1 resetvars stmnt vd1 END .)


state 103

    (51) expression -> exp q4 .
    RETURN          reduce using rule 51 (expression -> exp q4 .)
    PEN_DOWN        reduce using rule 51 (expression -> exp q4 .)
    PEN_UP          reduce using rule 51 (expression -> exp q4 .)
    WHILE           reduce using rule 51 (expression -> exp q4 .)
    IF              reduce using rule 51 (expression -> exp q4 .)
    WRITE           reduce using rule 51 (expression -> exp q4 .)
    READ            reduce using rule 51 (expression -> exp q4 .)
    ID              reduce using rule 51 (expression -> exp q4 .)
    BOOL            reduce using rule 51 (expression -> exp q4 .)
    WORD            reduce using rule 51 (expression -> exp q4 .)
    NUMBER          reduce using rule 51 (expression -> exp q4 .)
    CENTER          reduce using rule 51 (expression -> exp q4 .)
    FORWARD         reduce using rule 51 (expression -> exp q4 .)
    RIGHT           reduce using rule 51 (expression -> exp q4 .)
    LEFT            reduce using rule 51 (expression -> exp q4 .)
    END             reduce using rule 51 (expression -> exp q4 .)
    ELSE            reduce using rule 51 (expression -> exp q4 .)
    OR              reduce using rule 51 (expression -> exp q4 .)
    AND             reduce using rule 51 (expression -> exp q4 .)
    CLOSE_PTH       reduce using rule 51 (expression -> exp q4 .)
    COMMA           reduce using rule 51 (expression -> exp q4 .)
    CLOSE_SQR       reduce using rule 51 (expression -> exp q4 .)
    SUB             reduce using rule 51 (expression -> exp q4 .)
    SUM             reduce using rule 51 (expression -> exp q4 .)
    EQUAL_TO        reduce using rule 51 (expression -> exp q4 .)
    MORE_OR_EQ_THAN reduce using rule 51 (expression -> exp q4 .)
    LESS_OR_EQ_THAN reduce using rule 51 (expression -> exp q4 .)
    DIFFERENT_TO    reduce using rule 51 (expression -> exp q4 .)
    MORE_THAN       reduce using rule 51 (expression -> exp q4 .)
    LESS_THAN       reduce using rule 51 (expression -> exp q4 .)


state 104

    (52) expression -> exp rel_op . exp q4
    (55) exp -> . termino q1
    (56) exp -> . termino term_op e3 termino q1
    (61) termino -> . factor q2
    (62) termino -> . factor fact_op e2 expression q2
    (68) factor -> . var_cte e1
    (69) factor -> . open_pth expression close_pth
    (44) var_cte -> . func_call
    (45) var_cte -> . cte_bool
    (46) var_cte -> . CTE_STR
    (47) var_cte -> . CTE_NUM
    (48) var_cte -> . variable
    (71) open_pth -> . OPEN_PTH
    (81) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (49) cte_bool -> . FALSE
    (50) cte_bool -> . TRUE
    (89) variable -> . ID array
    CTE_STR         shift and go to state 82
    CTE_NUM         shift and go to state 83
    OPEN_PTH        shift and go to state 85
    ID              shift and go to state 86
    FALSE           shift and go to state 87
    TRUE            shift and go to state 88

    exp                            shift and go to state 141
    termino                        shift and go to state 76
    factor                         shift and go to state 77
    var_cte                        shift and go to state 78
    open_pth                       shift and go to state 79
    func_call                      shift and go to state 80
    cte_bool                       shift and go to state 81
    variable                       shift and go to state 84

state 105

    (75) rel_op -> EQUAL_TO .
    CTE_STR         reduce using rule 75 (rel_op -> EQUAL_TO .)
    CTE_NUM         reduce using rule 75 (rel_op -> EQUAL_TO .)
    OPEN_PTH        reduce using rule 75 (rel_op -> EQUAL_TO .)
    ID              reduce using rule 75 (rel_op -> EQUAL_TO .)
    FALSE           reduce using rule 75 (rel_op -> EQUAL_TO .)
    TRUE            reduce using rule 75 (rel_op -> EQUAL_TO .)


state 106

    (76) rel_op -> MORE_OR_EQ_THAN .
    CTE_STR         reduce using rule 76 (rel_op -> MORE_OR_EQ_THAN .)
    CTE_NUM         reduce using rule 76 (rel_op -> MORE_OR_EQ_THAN .)
    OPEN_PTH        reduce using rule 76 (rel_op -> MORE_OR_EQ_THAN .)
    ID              reduce using rule 76 (rel_op -> MORE_OR_EQ_THAN .)
    FALSE           reduce using rule 76 (rel_op -> MORE_OR_EQ_THAN .)
    TRUE            reduce using rule 76 (rel_op -> MORE_OR_EQ_THAN .)


state 107

    (77) rel_op -> LESS_OR_EQ_THAN .
    CTE_STR         reduce using rule 77 (rel_op -> LESS_OR_EQ_THAN .)
    CTE_NUM         reduce using rule 77 (rel_op -> LESS_OR_EQ_THAN .)
    OPEN_PTH        reduce using rule 77 (rel_op -> LESS_OR_EQ_THAN .)
    ID              reduce using rule 77 (rel_op -> LESS_OR_EQ_THAN .)
    FALSE           reduce using rule 77 (rel_op -> LESS_OR_EQ_THAN .)
    TRUE            reduce using rule 77 (rel_op -> LESS_OR_EQ_THAN .)


state 108

    (78) rel_op -> DIFFERENT_TO .
    CTE_STR         reduce using rule 78 (rel_op -> DIFFERENT_TO .)
    CTE_NUM         reduce using rule 78 (rel_op -> DIFFERENT_TO .)
    OPEN_PTH        reduce using rule 78 (rel_op -> DIFFERENT_TO .)
    ID              reduce using rule 78 (rel_op -> DIFFERENT_TO .)
    FALSE           reduce using rule 78 (rel_op -> DIFFERENT_TO .)
    TRUE            reduce using rule 78 (rel_op -> DIFFERENT_TO .)


state 109

    (79) rel_op -> MORE_THAN .
    CTE_STR         reduce using rule 79 (rel_op -> MORE_THAN .)
    CTE_NUM         reduce using rule 79 (rel_op -> MORE_THAN .)
    OPEN_PTH        reduce using rule 79 (rel_op -> MORE_THAN .)
    ID              reduce using rule 79 (rel_op -> MORE_THAN .)
    FALSE           reduce using rule 79 (rel_op -> MORE_THAN .)
    TRUE            reduce using rule 79 (rel_op -> MORE_THAN .)


state 110

    (80) rel_op -> LESS_THAN .
    CTE_STR         reduce using rule 80 (rel_op -> LESS_THAN .)
    CTE_NUM         reduce using rule 80 (rel_op -> LESS_THAN .)
    OPEN_PTH        reduce using rule 80 (rel_op -> LESS_THAN .)
    ID              reduce using rule 80 (rel_op -> LESS_THAN .)
    FALSE           reduce using rule 80 (rel_op -> LESS_THAN .)
    TRUE            reduce using rule 80 (rel_op -> LESS_THAN .)


state 111

    (55) exp -> termino q1 .
    EQUAL_TO        reduce using rule 55 (exp -> termino q1 .)
    MORE_OR_EQ_THAN reduce using rule 55 (exp -> termino q1 .)
    LESS_OR_EQ_THAN reduce using rule 55 (exp -> termino q1 .)
    DIFFERENT_TO    reduce using rule 55 (exp -> termino q1 .)
    MORE_THAN       reduce using rule 55 (exp -> termino q1 .)
    LESS_THAN       reduce using rule 55 (exp -> termino q1 .)
    RETURN          reduce using rule 55 (exp -> termino q1 .)
    PEN_DOWN        reduce using rule 55 (exp -> termino q1 .)
    PEN_UP          reduce using rule 55 (exp -> termino q1 .)
    WHILE           reduce using rule 55 (exp -> termino q1 .)
    IF              reduce using rule 55 (exp -> termino q1 .)
    WRITE           reduce using rule 55 (exp -> termino q1 .)
    READ            reduce using rule 55 (exp -> termino q1 .)
    ID              reduce using rule 55 (exp -> termino q1 .)
    BOOL            reduce using rule 55 (exp -> termino q1 .)
    WORD            reduce using rule 55 (exp -> termino q1 .)
    NUMBER          reduce using rule 55 (exp -> termino q1 .)
    CENTER          reduce using rule 55 (exp -> termino q1 .)
    FORWARD         reduce using rule 55 (exp -> termino q1 .)
    RIGHT           reduce using rule 55 (exp -> termino q1 .)
    LEFT            reduce using rule 55 (exp -> termino q1 .)
    END             reduce using rule 55 (exp -> termino q1 .)
    ELSE            reduce using rule 55 (exp -> termino q1 .)
    OR              reduce using rule 55 (exp -> termino q1 .)
    AND             reduce using rule 55 (exp -> termino q1 .)
    CLOSE_PTH       reduce using rule 55 (exp -> termino q1 .)
    COMMA           reduce using rule 55 (exp -> termino q1 .)
    SUB             reduce using rule 55 (exp -> termino q1 .)
    SUM             reduce using rule 55 (exp -> termino q1 .)
    CLOSE_SQR       reduce using rule 55 (exp -> termino q1 .)


state 112

    (56) exp -> termino term_op . e3 termino q1
    (57) e3 -> .
    CTE_STR         reduce using rule 57 (e3 -> .)
    CTE_NUM         reduce using rule 57 (e3 -> .)
    OPEN_PTH        reduce using rule 57 (e3 -> .)
    ID              reduce using rule 57 (e3 -> .)
    FALSE           reduce using rule 57 (e3 -> .)
    TRUE            reduce using rule 57 (e3 -> .)

    e3                             shift and go to state 142

state 113

    (59) term_op -> SUB .
    CTE_STR         reduce using rule 59 (term_op -> SUB .)
    CTE_NUM         reduce using rule 59 (term_op -> SUB .)
    OPEN_PTH        reduce using rule 59 (term_op -> SUB .)
    ID              reduce using rule 59 (term_op -> SUB .)
    FALSE           reduce using rule 59 (term_op -> SUB .)
    TRUE            reduce using rule 59 (term_op -> SUB .)


state 114

    (60) term_op -> SUM .
    CTE_STR         reduce using rule 60 (term_op -> SUM .)
    CTE_NUM         reduce using rule 60 (term_op -> SUM .)
    OPEN_PTH        reduce using rule 60 (term_op -> SUM .)
    ID              reduce using rule 60 (term_op -> SUM .)
    FALSE           reduce using rule 60 (term_op -> SUM .)
    TRUE            reduce using rule 60 (term_op -> SUM .)


state 115

    (61) termino -> factor q2 .
    SUB             reduce using rule 61 (termino -> factor q2 .)
    SUM             reduce using rule 61 (termino -> factor q2 .)
    EQUAL_TO        reduce using rule 61 (termino -> factor q2 .)
    MORE_OR_EQ_THAN reduce using rule 61 (termino -> factor q2 .)
    LESS_OR_EQ_THAN reduce using rule 61 (termino -> factor q2 .)
    DIFFERENT_TO    reduce using rule 61 (termino -> factor q2 .)
    MORE_THAN       reduce using rule 61 (termino -> factor q2 .)
    LESS_THAN       reduce using rule 61 (termino -> factor q2 .)
    RETURN          reduce using rule 61 (termino -> factor q2 .)
    PEN_DOWN        reduce using rule 61 (termino -> factor q2 .)
    PEN_UP          reduce using rule 61 (termino -> factor q2 .)
    WHILE           reduce using rule 61 (termino -> factor q2 .)
    IF              reduce using rule 61 (termino -> factor q2 .)
    WRITE           reduce using rule 61 (termino -> factor q2 .)
    READ            reduce using rule 61 (termino -> factor q2 .)
    ID              reduce using rule 61 (termino -> factor q2 .)
    BOOL            reduce using rule 61 (termino -> factor q2 .)
    WORD            reduce using rule 61 (termino -> factor q2 .)
    NUMBER          reduce using rule 61 (termino -> factor q2 .)
    CENTER          reduce using rule 61 (termino -> factor q2 .)
    FORWARD         reduce using rule 61 (termino -> factor q2 .)
    RIGHT           reduce using rule 61 (termino -> factor q2 .)
    LEFT            reduce using rule 61 (termino -> factor q2 .)
    END             reduce using rule 61 (termino -> factor q2 .)
    ELSE            reduce using rule 61 (termino -> factor q2 .)
    OR              reduce using rule 61 (termino -> factor q2 .)
    AND             reduce using rule 61 (termino -> factor q2 .)
    CLOSE_PTH       reduce using rule 61 (termino -> factor q2 .)
    COMMA           reduce using rule 61 (termino -> factor q2 .)
    CLOSE_SQR       reduce using rule 61 (termino -> factor q2 .)


state 116

    (62) termino -> factor fact_op . e2 expression q2
    (65) e2 -> .
    CTE_STR         reduce using rule 65 (e2 -> .)
    CTE_NUM         reduce using rule 65 (e2 -> .)
    OPEN_PTH        reduce using rule 65 (e2 -> .)
    ID              reduce using rule 65 (e2 -> .)
    FALSE           reduce using rule 65 (e2 -> .)
    TRUE            reduce using rule 65 (e2 -> .)

    e2                             shift and go to state 143

state 117

    (66) fact_op -> DIV .
    CTE_STR         reduce using rule 66 (fact_op -> DIV .)
    CTE_NUM         reduce using rule 66 (fact_op -> DIV .)
    OPEN_PTH        reduce using rule 66 (fact_op -> DIV .)
    ID              reduce using rule 66 (fact_op -> DIV .)
    FALSE           reduce using rule 66 (fact_op -> DIV .)
    TRUE            reduce using rule 66 (fact_op -> DIV .)


state 118

    (67) fact_op -> MULT .
    CTE_STR         reduce using rule 67 (fact_op -> MULT .)
    CTE_NUM         reduce using rule 67 (fact_op -> MULT .)
    OPEN_PTH        reduce using rule 67 (fact_op -> MULT .)
    ID              reduce using rule 67 (fact_op -> MULT .)
    FALSE           reduce using rule 67 (fact_op -> MULT .)
    TRUE            reduce using rule 67 (fact_op -> MULT .)


state 119

    (68) factor -> var_cte e1 .
    DIV             reduce using rule 68 (factor -> var_cte e1 .)
    MULT            reduce using rule 68 (factor -> var_cte e1 .)
    SUB             reduce using rule 68 (factor -> var_cte e1 .)
    SUM             reduce using rule 68 (factor -> var_cte e1 .)
    EQUAL_TO        reduce using rule 68 (factor -> var_cte e1 .)
    MORE_OR_EQ_THAN reduce using rule 68 (factor -> var_cte e1 .)
    LESS_OR_EQ_THAN reduce using rule 68 (factor -> var_cte e1 .)
    DIFFERENT_TO    reduce using rule 68 (factor -> var_cte e1 .)
    MORE_THAN       reduce using rule 68 (factor -> var_cte e1 .)
    LESS_THAN       reduce using rule 68 (factor -> var_cte e1 .)
    RETURN          reduce using rule 68 (factor -> var_cte e1 .)
    PEN_DOWN        reduce using rule 68 (factor -> var_cte e1 .)
    PEN_UP          reduce using rule 68 (factor -> var_cte e1 .)
    WHILE           reduce using rule 68 (factor -> var_cte e1 .)
    IF              reduce using rule 68 (factor -> var_cte e1 .)
    WRITE           reduce using rule 68 (factor -> var_cte e1 .)
    READ            reduce using rule 68 (factor -> var_cte e1 .)
    ID              reduce using rule 68 (factor -> var_cte e1 .)
    BOOL            reduce using rule 68 (factor -> var_cte e1 .)
    WORD            reduce using rule 68 (factor -> var_cte e1 .)
    NUMBER          reduce using rule 68 (factor -> var_cte e1 .)
    CENTER          reduce using rule 68 (factor -> var_cte e1 .)
    FORWARD         reduce using rule 68 (factor -> var_cte e1 .)
    RIGHT           reduce using rule 68 (factor -> var_cte e1 .)
    LEFT            reduce using rule 68 (factor -> var_cte e1 .)
    END             reduce using rule 68 (factor -> var_cte e1 .)
    ELSE            reduce using rule 68 (factor -> var_cte e1 .)
    OR              reduce using rule 68 (factor -> var_cte e1 .)
    AND             reduce using rule 68 (factor -> var_cte e1 .)
    CLOSE_PTH       reduce using rule 68 (factor -> var_cte e1 .)
    COMMA           reduce using rule 68 (factor -> var_cte e1 .)
    CLOSE_SQR       reduce using rule 68 (factor -> var_cte e1 .)


state 120

    (69) factor -> open_pth expression . close_pth
    (72) close_pth -> . CLOSE_PTH
    CLOSE_PTH       shift and go to state 145

    close_pth                      shift and go to state 144

state 121

    (89) variable -> ID array .
    DIV             reduce using rule 89 (variable -> ID array .)
    MULT            reduce using rule 89 (variable -> ID array .)
    SUB             reduce using rule 89 (variable -> ID array .)
    SUM             reduce using rule 89 (variable -> ID array .)
    EQUAL_TO        reduce using rule 89 (variable -> ID array .)
    MORE_OR_EQ_THAN reduce using rule 89 (variable -> ID array .)
    LESS_OR_EQ_THAN reduce using rule 89 (variable -> ID array .)
    DIFFERENT_TO    reduce using rule 89 (variable -> ID array .)
    MORE_THAN       reduce using rule 89 (variable -> ID array .)
    LESS_THAN       reduce using rule 89 (variable -> ID array .)
    RETURN          reduce using rule 89 (variable -> ID array .)
    PEN_DOWN        reduce using rule 89 (variable -> ID array .)
    PEN_UP          reduce using rule 89 (variable -> ID array .)
    WHILE           reduce using rule 89 (variable -> ID array .)
    IF              reduce using rule 89 (variable -> ID array .)
    WRITE           reduce using rule 89 (variable -> ID array .)
    READ            reduce using rule 89 (variable -> ID array .)
    ID              reduce using rule 89 (variable -> ID array .)
    BOOL            reduce using rule 89 (variable -> ID array .)
    WORD            reduce using rule 89 (variable -> ID array .)
    NUMBER          reduce using rule 89 (variable -> ID array .)
    CENTER          reduce using rule 89 (variable -> ID array .)
    FORWARD         reduce using rule 89 (variable -> ID array .)
    RIGHT           reduce using rule 89 (variable -> ID array .)
    LEFT            reduce using rule 89 (variable -> ID array .)
    END             reduce using rule 89 (variable -> ID array .)
    ELSE            reduce using rule 89 (variable -> ID array .)
    OR              reduce using rule 89 (variable -> ID array .)
    AND             reduce using rule 89 (variable -> ID array .)
    CLOSE_PTH       reduce using rule 89 (variable -> ID array .)
    COMMA           reduce using rule 89 (variable -> ID array .)
    CLOSE_SQR       reduce using rule 89 (variable -> ID array .)


state 122

    (90) array -> empty .
    DIV             reduce using rule 90 (array -> empty .)
    MULT            reduce using rule 90 (array -> empty .)
    SUB             reduce using rule 90 (array -> empty .)
    SUM             reduce using rule 90 (array -> empty .)
    EQUAL_TO        reduce using rule 90 (array -> empty .)
    MORE_OR_EQ_THAN reduce using rule 90 (array -> empty .)
    LESS_OR_EQ_THAN reduce using rule 90 (array -> empty .)
    DIFFERENT_TO    reduce using rule 90 (array -> empty .)
    MORE_THAN       reduce using rule 90 (array -> empty .)
    LESS_THAN       reduce using rule 90 (array -> empty .)
    RETURN          reduce using rule 90 (array -> empty .)
    PEN_DOWN        reduce using rule 90 (array -> empty .)
    PEN_UP          reduce using rule 90 (array -> empty .)
    WHILE           reduce using rule 90 (array -> empty .)
    IF              reduce using rule 90 (array -> empty .)
    WRITE           reduce using rule 90 (array -> empty .)
    READ            reduce using rule 90 (array -> empty .)
    ID              reduce using rule 90 (array -> empty .)
    BOOL            reduce using rule 90 (array -> empty .)
    WORD            reduce using rule 90 (array -> empty .)
    NUMBER          reduce using rule 90 (array -> empty .)
    CENTER          reduce using rule 90 (array -> empty .)
    FORWARD         reduce using rule 90 (array -> empty .)
    RIGHT           reduce using rule 90 (array -> empty .)
    LEFT            reduce using rule 90 (array -> empty .)
    END             reduce using rule 90 (array -> empty .)
    ELSE            reduce using rule 90 (array -> empty .)
    OR              reduce using rule 90 (array -> empty .)
    AND             reduce using rule 90 (array -> empty .)
    CLOSE_PTH       reduce using rule 90 (array -> empty .)
    COMMA           reduce using rule 90 (array -> empty .)
    CLOSE_SQR       reduce using rule 90 (array -> empty .)


state 123

    (91) array -> OPEN_SQR . expression CLOSE_SQR matrix
    (51) expression -> . exp q4
    (52) expression -> . exp rel_op exp q4
    (55) exp -> . termino q1
    (56) exp -> . termino term_op e3 termino q1
    (61) termino -> . factor q2
    (62) termino -> . factor fact_op e2 expression q2
    (68) factor -> . var_cte e1
    (69) factor -> . open_pth expression close_pth
    (44) var_cte -> . func_call
    (45) var_cte -> . cte_bool
    (46) var_cte -> . CTE_STR
    (47) var_cte -> . CTE_NUM
    (48) var_cte -> . variable
    (71) open_pth -> . OPEN_PTH
    (81) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (49) cte_bool -> . FALSE
    (50) cte_bool -> . TRUE
    (89) variable -> . ID array
    CTE_STR         shift and go to state 82
    CTE_NUM         shift and go to state 83
    OPEN_PTH        shift and go to state 85
    ID              shift and go to state 86
    FALSE           shift and go to state 87
    TRUE            shift and go to state 88

    expression                     shift and go to state 146
    exp                            shift and go to state 75
    termino                        shift and go to state 76
    factor                         shift and go to state 77
    var_cte                        shift and go to state 78
    open_pth                       shift and go to state 79
    func_call                      shift and go to state 80
    cte_bool                       shift and go to state 81
    variable                       shift and go to state 84

state 124

    (38) var_declaration_func -> var_type addvartype ID . varid multiple_vars
    (39) varid -> .
    COMMA           reduce using rule 39 (varid -> .)
    RETURN          reduce using rule 39 (varid -> .)
    PEN_DOWN        reduce using rule 39 (varid -> .)
    PEN_UP          reduce using rule 39 (varid -> .)
    WHILE           reduce using rule 39 (varid -> .)
    IF              reduce using rule 39 (varid -> .)
    WRITE           reduce using rule 39 (varid -> .)
    READ            reduce using rule 39 (varid -> .)
    ID              reduce using rule 39 (varid -> .)
    BOOL            reduce using rule 39 (varid -> .)
    WORD            reduce using rule 39 (varid -> .)
    NUMBER          reduce using rule 39 (varid -> .)
    CENTER          reduce using rule 39 (varid -> .)
    FORWARD         reduce using rule 39 (varid -> .)
    RIGHT           reduce using rule 39 (varid -> .)
    LEFT            reduce using rule 39 (varid -> .)
    END             reduce using rule 39 (varid -> .)
    ELSE            reduce using rule 39 (varid -> .)

    varid                          shift and go to state 147

state 125

    (81) func_call -> ID OPEN_PTH func1 . func_call_param CLOSE_PTH func3
    (83) func_call_param -> . expression func2 multiple_fc_param
    (51) expression -> . exp q4
    (52) expression -> . exp rel_op exp q4
    (55) exp -> . termino q1
    (56) exp -> . termino term_op e3 termino q1
    (61) termino -> . factor q2
    (62) termino -> . factor fact_op e2 expression q2
    (68) factor -> . var_cte e1
    (69) factor -> . open_pth expression close_pth
    (44) var_cte -> . func_call
    (45) var_cte -> . cte_bool
    (46) var_cte -> . CTE_STR
    (47) var_cte -> . CTE_NUM
    (48) var_cte -> . variable
    (71) open_pth -> . OPEN_PTH
    (81) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (49) cte_bool -> . FALSE
    (50) cte_bool -> . TRUE
    (89) variable -> . ID array
    CTE_STR         shift and go to state 82
    CTE_NUM         shift and go to state 83
    OPEN_PTH        shift and go to state 85
    ID              shift and go to state 86
    FALSE           shift and go to state 87
    TRUE            shift and go to state 88

    func_call_param                shift and go to state 148
    expression                     shift and go to state 131
    exp                            shift and go to state 75
    termino                        shift and go to state 76
    factor                         shift and go to state 77
    var_cte                        shift and go to state 78
    open_pth                       shift and go to state 79
    func_call                      shift and go to state 80
    cte_bool                       shift and go to state 81
    variable                       shift and go to state 84

state 126

    (40) var_assignation -> ID e5 assign . e6 expression q3
    (42) e6 -> .
    CTE_STR         reduce using rule 42 (e6 -> .)
    CTE_NUM         reduce using rule 42 (e6 -> .)
    OPEN_PTH        reduce using rule 42 (e6 -> .)
    ID              reduce using rule 42 (e6 -> .)
    FALSE           reduce using rule 42 (e6 -> .)
    TRUE            reduce using rule 42 (e6 -> .)

    e6                             shift and go to state 149

state 127

    (43) assign -> ASSIGN .
    CTE_STR         reduce using rule 43 (assign -> ASSIGN .)
    CTE_NUM         reduce using rule 43 (assign -> ASSIGN .)
    OPEN_PTH        reduce using rule 43 (assign -> ASSIGN .)
    ID              reduce using rule 43 (assign -> ASSIGN .)
    FALSE           reduce using rule 43 (assign -> ASSIGN .)
    TRUE            reduce using rule 43 (assign -> ASSIGN .)


state 128

    (117) pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .
    RETURN          reduce using rule 117 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    PEN_DOWN        reduce using rule 117 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    PEN_UP          reduce using rule 117 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    WHILE           reduce using rule 117 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    IF              reduce using rule 117 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    WRITE           reduce using rule 117 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    READ            reduce using rule 117 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    ID              reduce using rule 117 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    BOOL            reduce using rule 117 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    WORD            reduce using rule 117 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    NUMBER          reduce using rule 117 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    CENTER          reduce using rule 117 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    FORWARD         reduce using rule 117 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    RIGHT           reduce using rule 117 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    LEFT            reduce using rule 117 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    END             reduce using rule 117 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    ELSE            reduce using rule 117 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)


state 129

    (118) pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .
    RETURN          reduce using rule 118 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    PEN_DOWN        reduce using rule 118 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    PEN_UP          reduce using rule 118 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    WHILE           reduce using rule 118 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    IF              reduce using rule 118 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    WRITE           reduce using rule 118 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    READ            reduce using rule 118 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    ID              reduce using rule 118 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    BOOL            reduce using rule 118 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    WORD            reduce using rule 118 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    NUMBER          reduce using rule 118 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    CENTER          reduce using rule 118 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    FORWARD         reduce using rule 118 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    RIGHT           reduce using rule 118 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    LEFT            reduce using rule 118 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    END             reduce using rule 118 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    ELSE            reduce using rule 118 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)


state 130

    (112) move_func -> move_type OPEN_PTH func_call_param . CLOSE_PTH
    CLOSE_PTH       shift and go to state 150


state 131

    (83) func_call_param -> expression . func2 multiple_fc_param
    (84) func2 -> .
    COMMA           reduce using rule 84 (func2 -> .)
    CLOSE_PTH       reduce using rule 84 (func2 -> .)

    func2                          shift and go to state 151

state 132

    (104) while_stmnt -> WHILE w1 con_expression . w2 stmnt w3 END
    (106) w2 -> .
    RETURN          reduce using rule 106 (w2 -> .)
    PEN_DOWN        reduce using rule 106 (w2 -> .)
    PEN_UP          reduce using rule 106 (w2 -> .)
    WHILE           reduce using rule 106 (w2 -> .)
    IF              reduce using rule 106 (w2 -> .)
    WRITE           reduce using rule 106 (w2 -> .)
    READ            reduce using rule 106 (w2 -> .)
    ID              reduce using rule 106 (w2 -> .)
    BOOL            reduce using rule 106 (w2 -> .)
    WORD            reduce using rule 106 (w2 -> .)
    NUMBER          reduce using rule 106 (w2 -> .)
    CENTER          reduce using rule 106 (w2 -> .)
    FORWARD         reduce using rule 106 (w2 -> .)
    RIGHT           reduce using rule 106 (w2 -> .)
    LEFT            reduce using rule 106 (w2 -> .)
    END             reduce using rule 106 (w2 -> .)

    w2                             shift and go to state 152

state 133

    (97) if_stmnt -> IF con_expression if1 . stmnt if2 else_stmnt
    (26) stmnt -> . empty
    (27) stmnt -> . returnf stmnt
    (28) stmnt -> . var_declaration_func stmnt
    (29) stmnt -> . pen_func stmnt
    (30) stmnt -> . move_func stmnt
    (31) stmnt -> . while_stmnt stmnt
    (32) stmnt -> . if_stmnt stmnt
    (33) stmnt -> . write stmnt
    (34) stmnt -> . read stmnt
    (35) stmnt -> . func_call stmnt
    (36) stmnt -> . var_assignation stmnt
    (121) empty -> .
    (37) returnf -> . RETURN expression
    (38) var_declaration_func -> . var_type addvartype ID varid multiple_vars
    (117) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (118) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (112) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (104) while_stmnt -> . WHILE w1 con_expression w2 stmnt w3 END
    (97) if_stmnt -> . IF con_expression if1 stmnt if2 else_stmnt
    (96) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (88) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (81) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (40) var_assignation -> . ID e5 assign e6 expression q3
    (10) var_type -> . BOOL
    (11) var_type -> . WORD
    (12) var_type -> . NUMBER
    (113) move_type -> . CENTER
    (114) move_type -> . FORWARD
    (115) move_type -> . RIGHT
    (116) move_type -> . LEFT
    END             reduce using rule 121 (empty -> .)
    ELSE            reduce using rule 121 (empty -> .)
    RETURN          shift and go to state 47
    PEN_DOWN        shift and go to state 50
    PEN_UP          shift and go to state 51
    WHILE           shift and go to state 53
    IF              shift and go to state 54
    WRITE           shift and go to state 55
    READ            shift and go to state 56
    ID              shift and go to state 49
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11
    CENTER          shift and go to state 57
    FORWARD         shift and go to state 58
    RIGHT           shift and go to state 59
    LEFT            shift and go to state 60

    stmnt                          shift and go to state 153
    empty                          shift and go to state 36
    returnf                        shift and go to state 37
    var_declaration_func           shift and go to state 38
    pen_func                       shift and go to state 39
    move_func                      shift and go to state 40
    while_stmnt                    shift and go to state 41
    if_stmnt                       shift and go to state 42
    write                          shift and go to state 43
    read                           shift and go to state 44
    func_call                      shift and go to state 45
    var_assignation                shift and go to state 46
    var_type                       shift and go to state 48
    move_type                      shift and go to state 52

state 134

    (108) con_expression -> expression q5 .
    (109) con_expression -> expression q5 . log_op e7 expression q5
    (73) log_op -> . OR
    (74) log_op -> . AND
    RETURN          reduce using rule 108 (con_expression -> expression q5 .)
    PEN_DOWN        reduce using rule 108 (con_expression -> expression q5 .)
    PEN_UP          reduce using rule 108 (con_expression -> expression q5 .)
    WHILE           reduce using rule 108 (con_expression -> expression q5 .)
    IF              reduce using rule 108 (con_expression -> expression q5 .)
    WRITE           reduce using rule 108 (con_expression -> expression q5 .)
    READ            reduce using rule 108 (con_expression -> expression q5 .)
    ID              reduce using rule 108 (con_expression -> expression q5 .)
    BOOL            reduce using rule 108 (con_expression -> expression q5 .)
    WORD            reduce using rule 108 (con_expression -> expression q5 .)
    NUMBER          reduce using rule 108 (con_expression -> expression q5 .)
    CENTER          reduce using rule 108 (con_expression -> expression q5 .)
    FORWARD         reduce using rule 108 (con_expression -> expression q5 .)
    RIGHT           reduce using rule 108 (con_expression -> expression q5 .)
    LEFT            reduce using rule 108 (con_expression -> expression q5 .)
    END             reduce using rule 108 (con_expression -> expression q5 .)
    ELSE            reduce using rule 108 (con_expression -> expression q5 .)
    OR              shift and go to state 155
    AND             shift and go to state 156

    log_op                         shift and go to state 154

state 135

    (96) write -> WRITE OPEN_PTH expression . CLOSE_PTH
    CLOSE_PTH       shift and go to state 157


state 136

    (88) read -> READ OPEN_PTH variable . multiple_vars CLOSE_PTH
    (94) multiple_vars -> . empty
    (95) multiple_vars -> . COMMA variable varid
    (121) empty -> .
    COMMA           shift and go to state 160
    CLOSE_PTH       reduce using rule 121 (empty -> .)

    multiple_vars                  shift and go to state 158
    empty                          shift and go to state 159

state 137

    (89) variable -> ID . array
    (90) array -> . empty
    (91) array -> . OPEN_SQR expression CLOSE_SQR matrix
    (121) empty -> .
    OPEN_SQR        shift and go to state 123
    COMMA           reduce using rule 121 (empty -> .)
    CLOSE_PTH       reduce using rule 121 (empty -> .)
    RETURN          reduce using rule 121 (empty -> .)
    PEN_DOWN        reduce using rule 121 (empty -> .)
    PEN_UP          reduce using rule 121 (empty -> .)
    WHILE           reduce using rule 121 (empty -> .)
    IF              reduce using rule 121 (empty -> .)
    WRITE           reduce using rule 121 (empty -> .)
    READ            reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)
    BOOL            reduce using rule 121 (empty -> .)
    WORD            reduce using rule 121 (empty -> .)
    NUMBER          reduce using rule 121 (empty -> .)
    CENTER          reduce using rule 121 (empty -> .)
    FORWARD         reduce using rule 121 (empty -> .)
    RIGHT           reduce using rule 121 (empty -> .)
    LEFT            reduce using rule 121 (empty -> .)
    END             reduce using rule 121 (empty -> .)
    ELSE            reduce using rule 121 (empty -> .)

    array                          shift and go to state 121
    empty                          shift and go to state 122

state 138

    (14) func_declaration -> FUNC resetvars func_type ID fd1 OPEN_PTH parameter . CLOSE_PTH stmnt vd1 END
    CLOSE_PTH       shift and go to state 161


state 139

    (22) parameter -> empty .
    CLOSE_PTH       reduce using rule 22 (parameter -> empty .)


state 140

    (23) parameter -> var_type . addvartype ID varid multiple_parameters
    (6) addvartype -> .
    ID              reduce using rule 6 (addvartype -> .)

    addvartype                     shift and go to state 162

state 141

    (52) expression -> exp rel_op exp . q4
    (53) q4 -> .
    RETURN          reduce using rule 53 (q4 -> .)
    PEN_DOWN        reduce using rule 53 (q4 -> .)
    PEN_UP          reduce using rule 53 (q4 -> .)
    WHILE           reduce using rule 53 (q4 -> .)
    IF              reduce using rule 53 (q4 -> .)
    WRITE           reduce using rule 53 (q4 -> .)
    READ            reduce using rule 53 (q4 -> .)
    ID              reduce using rule 53 (q4 -> .)
    BOOL            reduce using rule 53 (q4 -> .)
    WORD            reduce using rule 53 (q4 -> .)
    NUMBER          reduce using rule 53 (q4 -> .)
    CENTER          reduce using rule 53 (q4 -> .)
    FORWARD         reduce using rule 53 (q4 -> .)
    RIGHT           reduce using rule 53 (q4 -> .)
    LEFT            reduce using rule 53 (q4 -> .)
    END             reduce using rule 53 (q4 -> .)
    ELSE            reduce using rule 53 (q4 -> .)
    OR              reduce using rule 53 (q4 -> .)
    AND             reduce using rule 53 (q4 -> .)
    CLOSE_PTH       reduce using rule 53 (q4 -> .)
    COMMA           reduce using rule 53 (q4 -> .)
    CLOSE_SQR       reduce using rule 53 (q4 -> .)
    SUB             reduce using rule 53 (q4 -> .)
    SUM             reduce using rule 53 (q4 -> .)
    EQUAL_TO        reduce using rule 53 (q4 -> .)
    MORE_OR_EQ_THAN reduce using rule 53 (q4 -> .)
    LESS_OR_EQ_THAN reduce using rule 53 (q4 -> .)
    DIFFERENT_TO    reduce using rule 53 (q4 -> .)
    MORE_THAN       reduce using rule 53 (q4 -> .)
    LESS_THAN       reduce using rule 53 (q4 -> .)

    q4                             shift and go to state 163

state 142

    (56) exp -> termino term_op e3 . termino q1
    (61) termino -> . factor q2
    (62) termino -> . factor fact_op e2 expression q2
    (68) factor -> . var_cte e1
    (69) factor -> . open_pth expression close_pth
    (44) var_cte -> . func_call
    (45) var_cte -> . cte_bool
    (46) var_cte -> . CTE_STR
    (47) var_cte -> . CTE_NUM
    (48) var_cte -> . variable
    (71) open_pth -> . OPEN_PTH
    (81) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (49) cte_bool -> . FALSE
    (50) cte_bool -> . TRUE
    (89) variable -> . ID array
    CTE_STR         shift and go to state 82
    CTE_NUM         shift and go to state 83
    OPEN_PTH        shift and go to state 85
    ID              shift and go to state 86
    FALSE           shift and go to state 87
    TRUE            shift and go to state 88

    termino                        shift and go to state 164
    factor                         shift and go to state 77
    var_cte                        shift and go to state 78
    open_pth                       shift and go to state 79
    func_call                      shift and go to state 80
    cte_bool                       shift and go to state 81
    variable                       shift and go to state 84

state 143

    (62) termino -> factor fact_op e2 . expression q2
    (51) expression -> . exp q4
    (52) expression -> . exp rel_op exp q4
    (55) exp -> . termino q1
    (56) exp -> . termino term_op e3 termino q1
    (61) termino -> . factor q2
    (62) termino -> . factor fact_op e2 expression q2
    (68) factor -> . var_cte e1
    (69) factor -> . open_pth expression close_pth
    (44) var_cte -> . func_call
    (45) var_cte -> . cte_bool
    (46) var_cte -> . CTE_STR
    (47) var_cte -> . CTE_NUM
    (48) var_cte -> . variable
    (71) open_pth -> . OPEN_PTH
    (81) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (49) cte_bool -> . FALSE
    (50) cte_bool -> . TRUE
    (89) variable -> . ID array
    CTE_STR         shift and go to state 82
    CTE_NUM         shift and go to state 83
    OPEN_PTH        shift and go to state 85
    ID              shift and go to state 86
    FALSE           shift and go to state 87
    TRUE            shift and go to state 88

    factor                         shift and go to state 77
    expression                     shift and go to state 165
    exp                            shift and go to state 75
    termino                        shift and go to state 76
    var_cte                        shift and go to state 78
    open_pth                       shift and go to state 79
    func_call                      shift and go to state 80
    cte_bool                       shift and go to state 81
    variable                       shift and go to state 84

state 144

    (69) factor -> open_pth expression close_pth .
    DIV             reduce using rule 69 (factor -> open_pth expression close_pth .)
    MULT            reduce using rule 69 (factor -> open_pth expression close_pth .)
    SUB             reduce using rule 69 (factor -> open_pth expression close_pth .)
    SUM             reduce using rule 69 (factor -> open_pth expression close_pth .)
    EQUAL_TO        reduce using rule 69 (factor -> open_pth expression close_pth .)
    MORE_OR_EQ_THAN reduce using rule 69 (factor -> open_pth expression close_pth .)
    LESS_OR_EQ_THAN reduce using rule 69 (factor -> open_pth expression close_pth .)
    DIFFERENT_TO    reduce using rule 69 (factor -> open_pth expression close_pth .)
    MORE_THAN       reduce using rule 69 (factor -> open_pth expression close_pth .)
    LESS_THAN       reduce using rule 69 (factor -> open_pth expression close_pth .)
    RETURN          reduce using rule 69 (factor -> open_pth expression close_pth .)
    PEN_DOWN        reduce using rule 69 (factor -> open_pth expression close_pth .)
    PEN_UP          reduce using rule 69 (factor -> open_pth expression close_pth .)
    WHILE           reduce using rule 69 (factor -> open_pth expression close_pth .)
    IF              reduce using rule 69 (factor -> open_pth expression close_pth .)
    WRITE           reduce using rule 69 (factor -> open_pth expression close_pth .)
    READ            reduce using rule 69 (factor -> open_pth expression close_pth .)
    ID              reduce using rule 69 (factor -> open_pth expression close_pth .)
    BOOL            reduce using rule 69 (factor -> open_pth expression close_pth .)
    WORD            reduce using rule 69 (factor -> open_pth expression close_pth .)
    NUMBER          reduce using rule 69 (factor -> open_pth expression close_pth .)
    CENTER          reduce using rule 69 (factor -> open_pth expression close_pth .)
    FORWARD         reduce using rule 69 (factor -> open_pth expression close_pth .)
    RIGHT           reduce using rule 69 (factor -> open_pth expression close_pth .)
    LEFT            reduce using rule 69 (factor -> open_pth expression close_pth .)
    END             reduce using rule 69 (factor -> open_pth expression close_pth .)
    ELSE            reduce using rule 69 (factor -> open_pth expression close_pth .)
    OR              reduce using rule 69 (factor -> open_pth expression close_pth .)
    AND             reduce using rule 69 (factor -> open_pth expression close_pth .)
    CLOSE_PTH       reduce using rule 69 (factor -> open_pth expression close_pth .)
    COMMA           reduce using rule 69 (factor -> open_pth expression close_pth .)
    CLOSE_SQR       reduce using rule 69 (factor -> open_pth expression close_pth .)


state 145

    (72) close_pth -> CLOSE_PTH .
    DIV             reduce using rule 72 (close_pth -> CLOSE_PTH .)
    MULT            reduce using rule 72 (close_pth -> CLOSE_PTH .)
    SUB             reduce using rule 72 (close_pth -> CLOSE_PTH .)
    SUM             reduce using rule 72 (close_pth -> CLOSE_PTH .)
    EQUAL_TO        reduce using rule 72 (close_pth -> CLOSE_PTH .)
    MORE_OR_EQ_THAN reduce using rule 72 (close_pth -> CLOSE_PTH .)
    LESS_OR_EQ_THAN reduce using rule 72 (close_pth -> CLOSE_PTH .)
    DIFFERENT_TO    reduce using rule 72 (close_pth -> CLOSE_PTH .)
    MORE_THAN       reduce using rule 72 (close_pth -> CLOSE_PTH .)
    LESS_THAN       reduce using rule 72 (close_pth -> CLOSE_PTH .)
    RETURN          reduce using rule 72 (close_pth -> CLOSE_PTH .)
    PEN_DOWN        reduce using rule 72 (close_pth -> CLOSE_PTH .)
    PEN_UP          reduce using rule 72 (close_pth -> CLOSE_PTH .)
    WHILE           reduce using rule 72 (close_pth -> CLOSE_PTH .)
    IF              reduce using rule 72 (close_pth -> CLOSE_PTH .)
    WRITE           reduce using rule 72 (close_pth -> CLOSE_PTH .)
    READ            reduce using rule 72 (close_pth -> CLOSE_PTH .)
    ID              reduce using rule 72 (close_pth -> CLOSE_PTH .)
    BOOL            reduce using rule 72 (close_pth -> CLOSE_PTH .)
    WORD            reduce using rule 72 (close_pth -> CLOSE_PTH .)
    NUMBER          reduce using rule 72 (close_pth -> CLOSE_PTH .)
    CENTER          reduce using rule 72 (close_pth -> CLOSE_PTH .)
    FORWARD         reduce using rule 72 (close_pth -> CLOSE_PTH .)
    RIGHT           reduce using rule 72 (close_pth -> CLOSE_PTH .)
    LEFT            reduce using rule 72 (close_pth -> CLOSE_PTH .)
    END             reduce using rule 72 (close_pth -> CLOSE_PTH .)
    ELSE            reduce using rule 72 (close_pth -> CLOSE_PTH .)
    OR              reduce using rule 72 (close_pth -> CLOSE_PTH .)
    AND             reduce using rule 72 (close_pth -> CLOSE_PTH .)
    CLOSE_PTH       reduce using rule 72 (close_pth -> CLOSE_PTH .)
    COMMA           reduce using rule 72 (close_pth -> CLOSE_PTH .)
    CLOSE_SQR       reduce using rule 72 (close_pth -> CLOSE_PTH .)


state 146

    (91) array -> OPEN_SQR expression . CLOSE_SQR matrix
    CLOSE_SQR       shift and go to state 166


state 147

    (38) var_declaration_func -> var_type addvartype ID varid . multiple_vars
    (94) multiple_vars -> . empty
    (95) multiple_vars -> . COMMA variable varid
    (121) empty -> .
    COMMA           shift and go to state 160
    RETURN          reduce using rule 121 (empty -> .)
    PEN_DOWN        reduce using rule 121 (empty -> .)
    PEN_UP          reduce using rule 121 (empty -> .)
    WHILE           reduce using rule 121 (empty -> .)
    IF              reduce using rule 121 (empty -> .)
    WRITE           reduce using rule 121 (empty -> .)
    READ            reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)
    BOOL            reduce using rule 121 (empty -> .)
    WORD            reduce using rule 121 (empty -> .)
    NUMBER          reduce using rule 121 (empty -> .)
    CENTER          reduce using rule 121 (empty -> .)
    FORWARD         reduce using rule 121 (empty -> .)
    RIGHT           reduce using rule 121 (empty -> .)
    LEFT            reduce using rule 121 (empty -> .)
    END             reduce using rule 121 (empty -> .)
    ELSE            reduce using rule 121 (empty -> .)

    multiple_vars                  shift and go to state 167
    empty                          shift and go to state 159

state 148

    (81) func_call -> ID OPEN_PTH func1 func_call_param . CLOSE_PTH func3
    CLOSE_PTH       shift and go to state 168


state 149

    (40) var_assignation -> ID e5 assign e6 . expression q3
    (51) expression -> . exp q4
    (52) expression -> . exp rel_op exp q4
    (55) exp -> . termino q1
    (56) exp -> . termino term_op e3 termino q1
    (61) termino -> . factor q2
    (62) termino -> . factor fact_op e2 expression q2
    (68) factor -> . var_cte e1
    (69) factor -> . open_pth expression close_pth
    (44) var_cte -> . func_call
    (45) var_cte -> . cte_bool
    (46) var_cte -> . CTE_STR
    (47) var_cte -> . CTE_NUM
    (48) var_cte -> . variable
    (71) open_pth -> . OPEN_PTH
    (81) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (49) cte_bool -> . FALSE
    (50) cte_bool -> . TRUE
    (89) variable -> . ID array
    CTE_STR         shift and go to state 82
    CTE_NUM         shift and go to state 83
    OPEN_PTH        shift and go to state 85
    ID              shift and go to state 86
    FALSE           shift and go to state 87
    TRUE            shift and go to state 88

    expression                     shift and go to state 169
    exp                            shift and go to state 75
    termino                        shift and go to state 76
    factor                         shift and go to state 77
    var_cte                        shift and go to state 78
    open_pth                       shift and go to state 79
    func_call                      shift and go to state 80
    cte_bool                       shift and go to state 81
    variable                       shift and go to state 84

state 150

    (112) move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .
    RETURN          reduce using rule 112 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    PEN_DOWN        reduce using rule 112 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    PEN_UP          reduce using rule 112 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    WHILE           reduce using rule 112 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    IF              reduce using rule 112 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    WRITE           reduce using rule 112 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    READ            reduce using rule 112 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    ID              reduce using rule 112 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    BOOL            reduce using rule 112 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    WORD            reduce using rule 112 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    NUMBER          reduce using rule 112 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    CENTER          reduce using rule 112 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    FORWARD         reduce using rule 112 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    RIGHT           reduce using rule 112 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    LEFT            reduce using rule 112 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    END             reduce using rule 112 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    ELSE            reduce using rule 112 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)


state 151

    (83) func_call_param -> expression func2 . multiple_fc_param
    (86) multiple_fc_param -> . empty
    (87) multiple_fc_param -> . COMMA func_call_param
    (121) empty -> .
    COMMA           shift and go to state 172
    CLOSE_PTH       reduce using rule 121 (empty -> .)

    multiple_fc_param              shift and go to state 170
    empty                          shift and go to state 171

state 152

    (104) while_stmnt -> WHILE w1 con_expression w2 . stmnt w3 END
    (26) stmnt -> . empty
    (27) stmnt -> . returnf stmnt
    (28) stmnt -> . var_declaration_func stmnt
    (29) stmnt -> . pen_func stmnt
    (30) stmnt -> . move_func stmnt
    (31) stmnt -> . while_stmnt stmnt
    (32) stmnt -> . if_stmnt stmnt
    (33) stmnt -> . write stmnt
    (34) stmnt -> . read stmnt
    (35) stmnt -> . func_call stmnt
    (36) stmnt -> . var_assignation stmnt
    (121) empty -> .
    (37) returnf -> . RETURN expression
    (38) var_declaration_func -> . var_type addvartype ID varid multiple_vars
    (117) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (118) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (112) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (104) while_stmnt -> . WHILE w1 con_expression w2 stmnt w3 END
    (97) if_stmnt -> . IF con_expression if1 stmnt if2 else_stmnt
    (96) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (88) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (81) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (40) var_assignation -> . ID e5 assign e6 expression q3
    (10) var_type -> . BOOL
    (11) var_type -> . WORD
    (12) var_type -> . NUMBER
    (113) move_type -> . CENTER
    (114) move_type -> . FORWARD
    (115) move_type -> . RIGHT
    (116) move_type -> . LEFT
    END             reduce using rule 121 (empty -> .)
    RETURN          shift and go to state 47
    PEN_DOWN        shift and go to state 50
    PEN_UP          shift and go to state 51
    WHILE           shift and go to state 53
    IF              shift and go to state 54
    WRITE           shift and go to state 55
    READ            shift and go to state 56
    ID              shift and go to state 49
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11
    CENTER          shift and go to state 57
    FORWARD         shift and go to state 58
    RIGHT           shift and go to state 59
    LEFT            shift and go to state 60

    stmnt                          shift and go to state 173
    empty                          shift and go to state 36
    returnf                        shift and go to state 37
    var_declaration_func           shift and go to state 38
    pen_func                       shift and go to state 39
    move_func                      shift and go to state 40
    while_stmnt                    shift and go to state 41
    if_stmnt                       shift and go to state 42
    write                          shift and go to state 43
    read                           shift and go to state 44
    func_call                      shift and go to state 45
    var_assignation                shift and go to state 46
    var_type                       shift and go to state 48
    move_type                      shift and go to state 52

state 153

    (97) if_stmnt -> IF con_expression if1 stmnt . if2 else_stmnt
    (99) if2 -> .
    END             reduce using rule 99 (if2 -> .)
    ELSE            reduce using rule 99 (if2 -> .)

    if2                            shift and go to state 174

state 154

    (109) con_expression -> expression q5 log_op . e7 expression q5
    (110) e7 -> .
    CTE_STR         reduce using rule 110 (e7 -> .)
    CTE_NUM         reduce using rule 110 (e7 -> .)
    OPEN_PTH        reduce using rule 110 (e7 -> .)
    ID              reduce using rule 110 (e7 -> .)
    FALSE           reduce using rule 110 (e7 -> .)
    TRUE            reduce using rule 110 (e7 -> .)

    e7                             shift and go to state 175

state 155

    (73) log_op -> OR .
    CTE_STR         reduce using rule 73 (log_op -> OR .)
    CTE_NUM         reduce using rule 73 (log_op -> OR .)
    OPEN_PTH        reduce using rule 73 (log_op -> OR .)
    ID              reduce using rule 73 (log_op -> OR .)
    FALSE           reduce using rule 73 (log_op -> OR .)
    TRUE            reduce using rule 73 (log_op -> OR .)


state 156

    (74) log_op -> AND .
    CTE_STR         reduce using rule 74 (log_op -> AND .)
    CTE_NUM         reduce using rule 74 (log_op -> AND .)
    OPEN_PTH        reduce using rule 74 (log_op -> AND .)
    ID              reduce using rule 74 (log_op -> AND .)
    FALSE           reduce using rule 74 (log_op -> AND .)
    TRUE            reduce using rule 74 (log_op -> AND .)


state 157

    (96) write -> WRITE OPEN_PTH expression CLOSE_PTH .
    RETURN          reduce using rule 96 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    PEN_DOWN        reduce using rule 96 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    PEN_UP          reduce using rule 96 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    WHILE           reduce using rule 96 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    IF              reduce using rule 96 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    WRITE           reduce using rule 96 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    READ            reduce using rule 96 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    ID              reduce using rule 96 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    BOOL            reduce using rule 96 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    WORD            reduce using rule 96 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    NUMBER          reduce using rule 96 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    CENTER          reduce using rule 96 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    FORWARD         reduce using rule 96 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    RIGHT           reduce using rule 96 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    LEFT            reduce using rule 96 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    END             reduce using rule 96 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    ELSE            reduce using rule 96 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)


state 158

    (88) read -> READ OPEN_PTH variable multiple_vars . CLOSE_PTH
    CLOSE_PTH       shift and go to state 176


state 159

    (94) multiple_vars -> empty .
    CLOSE_PTH       reduce using rule 94 (multiple_vars -> empty .)
    RETURN          reduce using rule 94 (multiple_vars -> empty .)
    PEN_DOWN        reduce using rule 94 (multiple_vars -> empty .)
    PEN_UP          reduce using rule 94 (multiple_vars -> empty .)
    WHILE           reduce using rule 94 (multiple_vars -> empty .)
    IF              reduce using rule 94 (multiple_vars -> empty .)
    WRITE           reduce using rule 94 (multiple_vars -> empty .)
    READ            reduce using rule 94 (multiple_vars -> empty .)
    ID              reduce using rule 94 (multiple_vars -> empty .)
    BOOL            reduce using rule 94 (multiple_vars -> empty .)
    WORD            reduce using rule 94 (multiple_vars -> empty .)
    NUMBER          reduce using rule 94 (multiple_vars -> empty .)
    CENTER          reduce using rule 94 (multiple_vars -> empty .)
    FORWARD         reduce using rule 94 (multiple_vars -> empty .)
    RIGHT           reduce using rule 94 (multiple_vars -> empty .)
    LEFT            reduce using rule 94 (multiple_vars -> empty .)
    END             reduce using rule 94 (multiple_vars -> empty .)
    ELSE            reduce using rule 94 (multiple_vars -> empty .)


state 160

    (95) multiple_vars -> COMMA . variable varid
    (89) variable -> . ID array
    ID              shift and go to state 137

    variable                       shift and go to state 177

state 161

    (14) func_declaration -> FUNC resetvars func_type ID fd1 OPEN_PTH parameter CLOSE_PTH . stmnt vd1 END
    (26) stmnt -> . empty
    (27) stmnt -> . returnf stmnt
    (28) stmnt -> . var_declaration_func stmnt
    (29) stmnt -> . pen_func stmnt
    (30) stmnt -> . move_func stmnt
    (31) stmnt -> . while_stmnt stmnt
    (32) stmnt -> . if_stmnt stmnt
    (33) stmnt -> . write stmnt
    (34) stmnt -> . read stmnt
    (35) stmnt -> . func_call stmnt
    (36) stmnt -> . var_assignation stmnt
    (121) empty -> .
    (37) returnf -> . RETURN expression
    (38) var_declaration_func -> . var_type addvartype ID varid multiple_vars
    (117) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (118) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (112) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (104) while_stmnt -> . WHILE w1 con_expression w2 stmnt w3 END
    (97) if_stmnt -> . IF con_expression if1 stmnt if2 else_stmnt
    (96) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (88) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (81) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (40) var_assignation -> . ID e5 assign e6 expression q3
    (10) var_type -> . BOOL
    (11) var_type -> . WORD
    (12) var_type -> . NUMBER
    (113) move_type -> . CENTER
    (114) move_type -> . FORWARD
    (115) move_type -> . RIGHT
    (116) move_type -> . LEFT
    END             reduce using rule 121 (empty -> .)
    RETURN          shift and go to state 47
    PEN_DOWN        shift and go to state 50
    PEN_UP          shift and go to state 51
    WHILE           shift and go to state 53
    IF              shift and go to state 54
    WRITE           shift and go to state 55
    READ            shift and go to state 56
    ID              shift and go to state 49
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11
    CENTER          shift and go to state 57
    FORWARD         shift and go to state 58
    RIGHT           shift and go to state 59
    LEFT            shift and go to state 60

    stmnt                          shift and go to state 178
    empty                          shift and go to state 36
    returnf                        shift and go to state 37
    var_declaration_func           shift and go to state 38
    pen_func                       shift and go to state 39
    move_func                      shift and go to state 40
    while_stmnt                    shift and go to state 41
    if_stmnt                       shift and go to state 42
    write                          shift and go to state 43
    read                           shift and go to state 44
    func_call                      shift and go to state 45
    var_assignation                shift and go to state 46
    var_type                       shift and go to state 48
    move_type                      shift and go to state 52

state 162

    (23) parameter -> var_type addvartype . ID varid multiple_parameters
    ID              shift and go to state 179


state 163

    (52) expression -> exp rel_op exp q4 .
    RETURN          reduce using rule 52 (expression -> exp rel_op exp q4 .)
    PEN_DOWN        reduce using rule 52 (expression -> exp rel_op exp q4 .)
    PEN_UP          reduce using rule 52 (expression -> exp rel_op exp q4 .)
    WHILE           reduce using rule 52 (expression -> exp rel_op exp q4 .)
    IF              reduce using rule 52 (expression -> exp rel_op exp q4 .)
    WRITE           reduce using rule 52 (expression -> exp rel_op exp q4 .)
    READ            reduce using rule 52 (expression -> exp rel_op exp q4 .)
    ID              reduce using rule 52 (expression -> exp rel_op exp q4 .)
    BOOL            reduce using rule 52 (expression -> exp rel_op exp q4 .)
    WORD            reduce using rule 52 (expression -> exp rel_op exp q4 .)
    NUMBER          reduce using rule 52 (expression -> exp rel_op exp q4 .)
    CENTER          reduce using rule 52 (expression -> exp rel_op exp q4 .)
    FORWARD         reduce using rule 52 (expression -> exp rel_op exp q4 .)
    RIGHT           reduce using rule 52 (expression -> exp rel_op exp q4 .)
    LEFT            reduce using rule 52 (expression -> exp rel_op exp q4 .)
    END             reduce using rule 52 (expression -> exp rel_op exp q4 .)
    ELSE            reduce using rule 52 (expression -> exp rel_op exp q4 .)
    OR              reduce using rule 52 (expression -> exp rel_op exp q4 .)
    AND             reduce using rule 52 (expression -> exp rel_op exp q4 .)
    CLOSE_PTH       reduce using rule 52 (expression -> exp rel_op exp q4 .)
    COMMA           reduce using rule 52 (expression -> exp rel_op exp q4 .)
    CLOSE_SQR       reduce using rule 52 (expression -> exp rel_op exp q4 .)
    SUB             reduce using rule 52 (expression -> exp rel_op exp q4 .)
    SUM             reduce using rule 52 (expression -> exp rel_op exp q4 .)
    EQUAL_TO        reduce using rule 52 (expression -> exp rel_op exp q4 .)
    MORE_OR_EQ_THAN reduce using rule 52 (expression -> exp rel_op exp q4 .)
    LESS_OR_EQ_THAN reduce using rule 52 (expression -> exp rel_op exp q4 .)
    DIFFERENT_TO    reduce using rule 52 (expression -> exp rel_op exp q4 .)
    MORE_THAN       reduce using rule 52 (expression -> exp rel_op exp q4 .)
    LESS_THAN       reduce using rule 52 (expression -> exp rel_op exp q4 .)


state 164

    (56) exp -> termino term_op e3 termino . q1
    (63) q1 -> .
    EQUAL_TO        reduce using rule 63 (q1 -> .)
    MORE_OR_EQ_THAN reduce using rule 63 (q1 -> .)
    LESS_OR_EQ_THAN reduce using rule 63 (q1 -> .)
    DIFFERENT_TO    reduce using rule 63 (q1 -> .)
    MORE_THAN       reduce using rule 63 (q1 -> .)
    LESS_THAN       reduce using rule 63 (q1 -> .)
    RETURN          reduce using rule 63 (q1 -> .)
    PEN_DOWN        reduce using rule 63 (q1 -> .)
    PEN_UP          reduce using rule 63 (q1 -> .)
    WHILE           reduce using rule 63 (q1 -> .)
    IF              reduce using rule 63 (q1 -> .)
    WRITE           reduce using rule 63 (q1 -> .)
    READ            reduce using rule 63 (q1 -> .)
    ID              reduce using rule 63 (q1 -> .)
    BOOL            reduce using rule 63 (q1 -> .)
    WORD            reduce using rule 63 (q1 -> .)
    NUMBER          reduce using rule 63 (q1 -> .)
    CENTER          reduce using rule 63 (q1 -> .)
    FORWARD         reduce using rule 63 (q1 -> .)
    RIGHT           reduce using rule 63 (q1 -> .)
    LEFT            reduce using rule 63 (q1 -> .)
    END             reduce using rule 63 (q1 -> .)
    ELSE            reduce using rule 63 (q1 -> .)
    OR              reduce using rule 63 (q1 -> .)
    AND             reduce using rule 63 (q1 -> .)
    CLOSE_PTH       reduce using rule 63 (q1 -> .)
    COMMA           reduce using rule 63 (q1 -> .)
    SUB             reduce using rule 63 (q1 -> .)
    SUM             reduce using rule 63 (q1 -> .)
    CLOSE_SQR       reduce using rule 63 (q1 -> .)

    q1                             shift and go to state 180

state 165

    (62) termino -> factor fact_op e2 expression . q2
    (58) q2 -> .
    SUB             reduce using rule 58 (q2 -> .)
    SUM             reduce using rule 58 (q2 -> .)
    EQUAL_TO        reduce using rule 58 (q2 -> .)
    MORE_OR_EQ_THAN reduce using rule 58 (q2 -> .)
    LESS_OR_EQ_THAN reduce using rule 58 (q2 -> .)
    DIFFERENT_TO    reduce using rule 58 (q2 -> .)
    MORE_THAN       reduce using rule 58 (q2 -> .)
    LESS_THAN       reduce using rule 58 (q2 -> .)
    RETURN          reduce using rule 58 (q2 -> .)
    PEN_DOWN        reduce using rule 58 (q2 -> .)
    PEN_UP          reduce using rule 58 (q2 -> .)
    WHILE           reduce using rule 58 (q2 -> .)
    IF              reduce using rule 58 (q2 -> .)
    WRITE           reduce using rule 58 (q2 -> .)
    READ            reduce using rule 58 (q2 -> .)
    ID              reduce using rule 58 (q2 -> .)
    BOOL            reduce using rule 58 (q2 -> .)
    WORD            reduce using rule 58 (q2 -> .)
    NUMBER          reduce using rule 58 (q2 -> .)
    CENTER          reduce using rule 58 (q2 -> .)
    FORWARD         reduce using rule 58 (q2 -> .)
    RIGHT           reduce using rule 58 (q2 -> .)
    LEFT            reduce using rule 58 (q2 -> .)
    END             reduce using rule 58 (q2 -> .)
    ELSE            reduce using rule 58 (q2 -> .)
    OR              reduce using rule 58 (q2 -> .)
    AND             reduce using rule 58 (q2 -> .)
    CLOSE_PTH       reduce using rule 58 (q2 -> .)
    COMMA           reduce using rule 58 (q2 -> .)
    CLOSE_SQR       reduce using rule 58 (q2 -> .)

    q2                             shift and go to state 181

state 166

    (91) array -> OPEN_SQR expression CLOSE_SQR . matrix
    (92) matrix -> . empty
    (93) matrix -> . OPEN_SQR expression CLOSE_SQR
    (121) empty -> .
    OPEN_SQR        shift and go to state 182
    DIV             reduce using rule 121 (empty -> .)
    MULT            reduce using rule 121 (empty -> .)
    SUB             reduce using rule 121 (empty -> .)
    SUM             reduce using rule 121 (empty -> .)
    EQUAL_TO        reduce using rule 121 (empty -> .)
    MORE_OR_EQ_THAN reduce using rule 121 (empty -> .)
    LESS_OR_EQ_THAN reduce using rule 121 (empty -> .)
    DIFFERENT_TO    reduce using rule 121 (empty -> .)
    MORE_THAN       reduce using rule 121 (empty -> .)
    LESS_THAN       reduce using rule 121 (empty -> .)
    RETURN          reduce using rule 121 (empty -> .)
    PEN_DOWN        reduce using rule 121 (empty -> .)
    PEN_UP          reduce using rule 121 (empty -> .)
    WHILE           reduce using rule 121 (empty -> .)
    IF              reduce using rule 121 (empty -> .)
    WRITE           reduce using rule 121 (empty -> .)
    READ            reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)
    BOOL            reduce using rule 121 (empty -> .)
    WORD            reduce using rule 121 (empty -> .)
    NUMBER          reduce using rule 121 (empty -> .)
    CENTER          reduce using rule 121 (empty -> .)
    FORWARD         reduce using rule 121 (empty -> .)
    RIGHT           reduce using rule 121 (empty -> .)
    LEFT            reduce using rule 121 (empty -> .)
    END             reduce using rule 121 (empty -> .)
    ELSE            reduce using rule 121 (empty -> .)
    OR              reduce using rule 121 (empty -> .)
    AND             reduce using rule 121 (empty -> .)
    CLOSE_PTH       reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    CLOSE_SQR       reduce using rule 121 (empty -> .)

    matrix                         shift and go to state 183
    empty                          shift and go to state 184

state 167

    (38) var_declaration_func -> var_type addvartype ID varid multiple_vars .
    RETURN          reduce using rule 38 (var_declaration_func -> var_type addvartype ID varid multiple_vars .)
    PEN_DOWN        reduce using rule 38 (var_declaration_func -> var_type addvartype ID varid multiple_vars .)
    PEN_UP          reduce using rule 38 (var_declaration_func -> var_type addvartype ID varid multiple_vars .)
    WHILE           reduce using rule 38 (var_declaration_func -> var_type addvartype ID varid multiple_vars .)
    IF              reduce using rule 38 (var_declaration_func -> var_type addvartype ID varid multiple_vars .)
    WRITE           reduce using rule 38 (var_declaration_func -> var_type addvartype ID varid multiple_vars .)
    READ            reduce using rule 38 (var_declaration_func -> var_type addvartype ID varid multiple_vars .)
    ID              reduce using rule 38 (var_declaration_func -> var_type addvartype ID varid multiple_vars .)
    BOOL            reduce using rule 38 (var_declaration_func -> var_type addvartype ID varid multiple_vars .)
    WORD            reduce using rule 38 (var_declaration_func -> var_type addvartype ID varid multiple_vars .)
    NUMBER          reduce using rule 38 (var_declaration_func -> var_type addvartype ID varid multiple_vars .)
    CENTER          reduce using rule 38 (var_declaration_func -> var_type addvartype ID varid multiple_vars .)
    FORWARD         reduce using rule 38 (var_declaration_func -> var_type addvartype ID varid multiple_vars .)
    RIGHT           reduce using rule 38 (var_declaration_func -> var_type addvartype ID varid multiple_vars .)
    LEFT            reduce using rule 38 (var_declaration_func -> var_type addvartype ID varid multiple_vars .)
    END             reduce using rule 38 (var_declaration_func -> var_type addvartype ID varid multiple_vars .)
    ELSE            reduce using rule 38 (var_declaration_func -> var_type addvartype ID varid multiple_vars .)


state 168

    (81) func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH . func3
    (85) func3 -> .
    RETURN          reduce using rule 85 (func3 -> .)
    PEN_DOWN        reduce using rule 85 (func3 -> .)
    PEN_UP          reduce using rule 85 (func3 -> .)
    WHILE           reduce using rule 85 (func3 -> .)
    IF              reduce using rule 85 (func3 -> .)
    WRITE           reduce using rule 85 (func3 -> .)
    READ            reduce using rule 85 (func3 -> .)
    ID              reduce using rule 85 (func3 -> .)
    BOOL            reduce using rule 85 (func3 -> .)
    WORD            reduce using rule 85 (func3 -> .)
    NUMBER          reduce using rule 85 (func3 -> .)
    CENTER          reduce using rule 85 (func3 -> .)
    FORWARD         reduce using rule 85 (func3 -> .)
    RIGHT           reduce using rule 85 (func3 -> .)
    LEFT            reduce using rule 85 (func3 -> .)
    END             reduce using rule 85 (func3 -> .)
    ELSE            reduce using rule 85 (func3 -> .)
    DIV             reduce using rule 85 (func3 -> .)
    MULT            reduce using rule 85 (func3 -> .)
    SUB             reduce using rule 85 (func3 -> .)
    SUM             reduce using rule 85 (func3 -> .)
    EQUAL_TO        reduce using rule 85 (func3 -> .)
    MORE_OR_EQ_THAN reduce using rule 85 (func3 -> .)
    LESS_OR_EQ_THAN reduce using rule 85 (func3 -> .)
    DIFFERENT_TO    reduce using rule 85 (func3 -> .)
    MORE_THAN       reduce using rule 85 (func3 -> .)
    LESS_THAN       reduce using rule 85 (func3 -> .)
    OR              reduce using rule 85 (func3 -> .)
    AND             reduce using rule 85 (func3 -> .)
    CLOSE_PTH       reduce using rule 85 (func3 -> .)
    COMMA           reduce using rule 85 (func3 -> .)
    CLOSE_SQR       reduce using rule 85 (func3 -> .)

    func3                          shift and go to state 185

state 169

    (40) var_assignation -> ID e5 assign e6 expression . q3
    (64) q3 -> .
    RETURN          reduce using rule 64 (q3 -> .)
    PEN_DOWN        reduce using rule 64 (q3 -> .)
    PEN_UP          reduce using rule 64 (q3 -> .)
    WHILE           reduce using rule 64 (q3 -> .)
    IF              reduce using rule 64 (q3 -> .)
    WRITE           reduce using rule 64 (q3 -> .)
    READ            reduce using rule 64 (q3 -> .)
    ID              reduce using rule 64 (q3 -> .)
    BOOL            reduce using rule 64 (q3 -> .)
    WORD            reduce using rule 64 (q3 -> .)
    NUMBER          reduce using rule 64 (q3 -> .)
    CENTER          reduce using rule 64 (q3 -> .)
    FORWARD         reduce using rule 64 (q3 -> .)
    RIGHT           reduce using rule 64 (q3 -> .)
    LEFT            reduce using rule 64 (q3 -> .)
    END             reduce using rule 64 (q3 -> .)
    ELSE            reduce using rule 64 (q3 -> .)

    q3                             shift and go to state 186

state 170

    (83) func_call_param -> expression func2 multiple_fc_param .
    CLOSE_PTH       reduce using rule 83 (func_call_param -> expression func2 multiple_fc_param .)


state 171

    (86) multiple_fc_param -> empty .
    CLOSE_PTH       reduce using rule 86 (multiple_fc_param -> empty .)


state 172

    (87) multiple_fc_param -> COMMA . func_call_param
    (83) func_call_param -> . expression func2 multiple_fc_param
    (51) expression -> . exp q4
    (52) expression -> . exp rel_op exp q4
    (55) exp -> . termino q1
    (56) exp -> . termino term_op e3 termino q1
    (61) termino -> . factor q2
    (62) termino -> . factor fact_op e2 expression q2
    (68) factor -> . var_cte e1
    (69) factor -> . open_pth expression close_pth
    (44) var_cte -> . func_call
    (45) var_cte -> . cte_bool
    (46) var_cte -> . CTE_STR
    (47) var_cte -> . CTE_NUM
    (48) var_cte -> . variable
    (71) open_pth -> . OPEN_PTH
    (81) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (49) cte_bool -> . FALSE
    (50) cte_bool -> . TRUE
    (89) variable -> . ID array
    CTE_STR         shift and go to state 82
    CTE_NUM         shift and go to state 83
    OPEN_PTH        shift and go to state 85
    ID              shift and go to state 86
    FALSE           shift and go to state 87
    TRUE            shift and go to state 88

    func_call_param                shift and go to state 187
    expression                     shift and go to state 131
    exp                            shift and go to state 75
    termino                        shift and go to state 76
    factor                         shift and go to state 77
    var_cte                        shift and go to state 78
    open_pth                       shift and go to state 79
    func_call                      shift and go to state 80
    cte_bool                       shift and go to state 81
    variable                       shift and go to state 84

state 173

    (104) while_stmnt -> WHILE w1 con_expression w2 stmnt . w3 END
    (107) w3 -> .
    END             reduce using rule 107 (w3 -> .)

    w3                             shift and go to state 188

state 174

    (97) if_stmnt -> IF con_expression if1 stmnt if2 . else_stmnt
    (100) else_stmnt -> . END
    (101) else_stmnt -> . ELSE if3 stmnt if4 END
    END             shift and go to state 190
    ELSE            shift and go to state 191

    else_stmnt                     shift and go to state 189

state 175

    (109) con_expression -> expression q5 log_op e7 . expression q5
    (51) expression -> . exp q4
    (52) expression -> . exp rel_op exp q4
    (55) exp -> . termino q1
    (56) exp -> . termino term_op e3 termino q1
    (61) termino -> . factor q2
    (62) termino -> . factor fact_op e2 expression q2
    (68) factor -> . var_cte e1
    (69) factor -> . open_pth expression close_pth
    (44) var_cte -> . func_call
    (45) var_cte -> . cte_bool
    (46) var_cte -> . CTE_STR
    (47) var_cte -> . CTE_NUM
    (48) var_cte -> . variable
    (71) open_pth -> . OPEN_PTH
    (81) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (49) cte_bool -> . FALSE
    (50) cte_bool -> . TRUE
    (89) variable -> . ID array
    CTE_STR         shift and go to state 82
    CTE_NUM         shift and go to state 83
    OPEN_PTH        shift and go to state 85
    ID              shift and go to state 86
    FALSE           shift and go to state 87
    TRUE            shift and go to state 88

    expression                     shift and go to state 192
    exp                            shift and go to state 75
    termino                        shift and go to state 76
    factor                         shift and go to state 77
    var_cte                        shift and go to state 78
    open_pth                       shift and go to state 79
    func_call                      shift and go to state 80
    cte_bool                       shift and go to state 81
    variable                       shift and go to state 84

state 176

    (88) read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .
    RETURN          reduce using rule 88 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    PEN_DOWN        reduce using rule 88 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    PEN_UP          reduce using rule 88 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    WHILE           reduce using rule 88 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    IF              reduce using rule 88 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    WRITE           reduce using rule 88 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    READ            reduce using rule 88 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    ID              reduce using rule 88 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    BOOL            reduce using rule 88 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    WORD            reduce using rule 88 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    NUMBER          reduce using rule 88 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    CENTER          reduce using rule 88 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    FORWARD         reduce using rule 88 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    RIGHT           reduce using rule 88 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    LEFT            reduce using rule 88 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    END             reduce using rule 88 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    ELSE            reduce using rule 88 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)


state 177

    (95) multiple_vars -> COMMA variable . varid
    (39) varid -> .
    CLOSE_PTH       reduce using rule 39 (varid -> .)
    RETURN          reduce using rule 39 (varid -> .)
    PEN_DOWN        reduce using rule 39 (varid -> .)
    PEN_UP          reduce using rule 39 (varid -> .)
    WHILE           reduce using rule 39 (varid -> .)
    IF              reduce using rule 39 (varid -> .)
    WRITE           reduce using rule 39 (varid -> .)
    READ            reduce using rule 39 (varid -> .)
    ID              reduce using rule 39 (varid -> .)
    BOOL            reduce using rule 39 (varid -> .)
    WORD            reduce using rule 39 (varid -> .)
    NUMBER          reduce using rule 39 (varid -> .)
    CENTER          reduce using rule 39 (varid -> .)
    FORWARD         reduce using rule 39 (varid -> .)
    RIGHT           reduce using rule 39 (varid -> .)
    LEFT            reduce using rule 39 (varid -> .)
    END             reduce using rule 39 (varid -> .)
    ELSE            reduce using rule 39 (varid -> .)

    varid                          shift and go to state 193

state 178

    (14) func_declaration -> FUNC resetvars func_type ID fd1 OPEN_PTH parameter CLOSE_PTH stmnt . vd1 END
    (17) vd1 -> .
    END             reduce using rule 17 (vd1 -> .)

    vd1                            shift and go to state 194

state 179

    (23) parameter -> var_type addvartype ID . varid multiple_parameters
    (39) varid -> .
    COMMA           reduce using rule 39 (varid -> .)
    CLOSE_PTH       reduce using rule 39 (varid -> .)

    varid                          shift and go to state 195

state 180

    (56) exp -> termino term_op e3 termino q1 .
    EQUAL_TO        reduce using rule 56 (exp -> termino term_op e3 termino q1 .)
    MORE_OR_EQ_THAN reduce using rule 56 (exp -> termino term_op e3 termino q1 .)
    LESS_OR_EQ_THAN reduce using rule 56 (exp -> termino term_op e3 termino q1 .)
    DIFFERENT_TO    reduce using rule 56 (exp -> termino term_op e3 termino q1 .)
    MORE_THAN       reduce using rule 56 (exp -> termino term_op e3 termino q1 .)
    LESS_THAN       reduce using rule 56 (exp -> termino term_op e3 termino q1 .)
    RETURN          reduce using rule 56 (exp -> termino term_op e3 termino q1 .)
    PEN_DOWN        reduce using rule 56 (exp -> termino term_op e3 termino q1 .)
    PEN_UP          reduce using rule 56 (exp -> termino term_op e3 termino q1 .)
    WHILE           reduce using rule 56 (exp -> termino term_op e3 termino q1 .)
    IF              reduce using rule 56 (exp -> termino term_op e3 termino q1 .)
    WRITE           reduce using rule 56 (exp -> termino term_op e3 termino q1 .)
    READ            reduce using rule 56 (exp -> termino term_op e3 termino q1 .)
    ID              reduce using rule 56 (exp -> termino term_op e3 termino q1 .)
    BOOL            reduce using rule 56 (exp -> termino term_op e3 termino q1 .)
    WORD            reduce using rule 56 (exp -> termino term_op e3 termino q1 .)
    NUMBER          reduce using rule 56 (exp -> termino term_op e3 termino q1 .)
    CENTER          reduce using rule 56 (exp -> termino term_op e3 termino q1 .)
    FORWARD         reduce using rule 56 (exp -> termino term_op e3 termino q1 .)
    RIGHT           reduce using rule 56 (exp -> termino term_op e3 termino q1 .)
    LEFT            reduce using rule 56 (exp -> termino term_op e3 termino q1 .)
    END             reduce using rule 56 (exp -> termino term_op e3 termino q1 .)
    ELSE            reduce using rule 56 (exp -> termino term_op e3 termino q1 .)
    OR              reduce using rule 56 (exp -> termino term_op e3 termino q1 .)
    AND             reduce using rule 56 (exp -> termino term_op e3 termino q1 .)
    CLOSE_PTH       reduce using rule 56 (exp -> termino term_op e3 termino q1 .)
    COMMA           reduce using rule 56 (exp -> termino term_op e3 termino q1 .)
    SUB             reduce using rule 56 (exp -> termino term_op e3 termino q1 .)
    SUM             reduce using rule 56 (exp -> termino term_op e3 termino q1 .)
    CLOSE_SQR       reduce using rule 56 (exp -> termino term_op e3 termino q1 .)


state 181

    (62) termino -> factor fact_op e2 expression q2 .
    SUB             reduce using rule 62 (termino -> factor fact_op e2 expression q2 .)
    SUM             reduce using rule 62 (termino -> factor fact_op e2 expression q2 .)
    EQUAL_TO        reduce using rule 62 (termino -> factor fact_op e2 expression q2 .)
    MORE_OR_EQ_THAN reduce using rule 62 (termino -> factor fact_op e2 expression q2 .)
    LESS_OR_EQ_THAN reduce using rule 62 (termino -> factor fact_op e2 expression q2 .)
    DIFFERENT_TO    reduce using rule 62 (termino -> factor fact_op e2 expression q2 .)
    MORE_THAN       reduce using rule 62 (termino -> factor fact_op e2 expression q2 .)
    LESS_THAN       reduce using rule 62 (termino -> factor fact_op e2 expression q2 .)
    RETURN          reduce using rule 62 (termino -> factor fact_op e2 expression q2 .)
    PEN_DOWN        reduce using rule 62 (termino -> factor fact_op e2 expression q2 .)
    PEN_UP          reduce using rule 62 (termino -> factor fact_op e2 expression q2 .)
    WHILE           reduce using rule 62 (termino -> factor fact_op e2 expression q2 .)
    IF              reduce using rule 62 (termino -> factor fact_op e2 expression q2 .)
    WRITE           reduce using rule 62 (termino -> factor fact_op e2 expression q2 .)
    READ            reduce using rule 62 (termino -> factor fact_op e2 expression q2 .)
    ID              reduce using rule 62 (termino -> factor fact_op e2 expression q2 .)
    BOOL            reduce using rule 62 (termino -> factor fact_op e2 expression q2 .)
    WORD            reduce using rule 62 (termino -> factor fact_op e2 expression q2 .)
    NUMBER          reduce using rule 62 (termino -> factor fact_op e2 expression q2 .)
    CENTER          reduce using rule 62 (termino -> factor fact_op e2 expression q2 .)
    FORWARD         reduce using rule 62 (termino -> factor fact_op e2 expression q2 .)
    RIGHT           reduce using rule 62 (termino -> factor fact_op e2 expression q2 .)
    LEFT            reduce using rule 62 (termino -> factor fact_op e2 expression q2 .)
    END             reduce using rule 62 (termino -> factor fact_op e2 expression q2 .)
    ELSE            reduce using rule 62 (termino -> factor fact_op e2 expression q2 .)
    OR              reduce using rule 62 (termino -> factor fact_op e2 expression q2 .)
    AND             reduce using rule 62 (termino -> factor fact_op e2 expression q2 .)
    CLOSE_PTH       reduce using rule 62 (termino -> factor fact_op e2 expression q2 .)
    COMMA           reduce using rule 62 (termino -> factor fact_op e2 expression q2 .)
    CLOSE_SQR       reduce using rule 62 (termino -> factor fact_op e2 expression q2 .)


state 182

    (93) matrix -> OPEN_SQR . expression CLOSE_SQR
    (51) expression -> . exp q4
    (52) expression -> . exp rel_op exp q4
    (55) exp -> . termino q1
    (56) exp -> . termino term_op e3 termino q1
    (61) termino -> . factor q2
    (62) termino -> . factor fact_op e2 expression q2
    (68) factor -> . var_cte e1
    (69) factor -> . open_pth expression close_pth
    (44) var_cte -> . func_call
    (45) var_cte -> . cte_bool
    (46) var_cte -> . CTE_STR
    (47) var_cte -> . CTE_NUM
    (48) var_cte -> . variable
    (71) open_pth -> . OPEN_PTH
    (81) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (49) cte_bool -> . FALSE
    (50) cte_bool -> . TRUE
    (89) variable -> . ID array
    CTE_STR         shift and go to state 82
    CTE_NUM         shift and go to state 83
    OPEN_PTH        shift and go to state 85
    ID              shift and go to state 86
    FALSE           shift and go to state 87
    TRUE            shift and go to state 88

    expression                     shift and go to state 196
    exp                            shift and go to state 75
    termino                        shift and go to state 76
    factor                         shift and go to state 77
    var_cte                        shift and go to state 78
    open_pth                       shift and go to state 79
    func_call                      shift and go to state 80
    cte_bool                       shift and go to state 81
    variable                       shift and go to state 84

state 183

    (91) array -> OPEN_SQR expression CLOSE_SQR matrix .
    DIV             reduce using rule 91 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    MULT            reduce using rule 91 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    SUB             reduce using rule 91 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    SUM             reduce using rule 91 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    EQUAL_TO        reduce using rule 91 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    MORE_OR_EQ_THAN reduce using rule 91 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    LESS_OR_EQ_THAN reduce using rule 91 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    DIFFERENT_TO    reduce using rule 91 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    MORE_THAN       reduce using rule 91 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    LESS_THAN       reduce using rule 91 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    RETURN          reduce using rule 91 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    PEN_DOWN        reduce using rule 91 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    PEN_UP          reduce using rule 91 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    WHILE           reduce using rule 91 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    IF              reduce using rule 91 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    WRITE           reduce using rule 91 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    READ            reduce using rule 91 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    ID              reduce using rule 91 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    BOOL            reduce using rule 91 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    WORD            reduce using rule 91 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    NUMBER          reduce using rule 91 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    CENTER          reduce using rule 91 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    FORWARD         reduce using rule 91 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    RIGHT           reduce using rule 91 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    LEFT            reduce using rule 91 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    END             reduce using rule 91 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    ELSE            reduce using rule 91 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    OR              reduce using rule 91 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    AND             reduce using rule 91 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    CLOSE_PTH       reduce using rule 91 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    COMMA           reduce using rule 91 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    CLOSE_SQR       reduce using rule 91 (array -> OPEN_SQR expression CLOSE_SQR matrix .)


state 184

    (92) matrix -> empty .
    DIV             reduce using rule 92 (matrix -> empty .)
    MULT            reduce using rule 92 (matrix -> empty .)
    SUB             reduce using rule 92 (matrix -> empty .)
    SUM             reduce using rule 92 (matrix -> empty .)
    EQUAL_TO        reduce using rule 92 (matrix -> empty .)
    MORE_OR_EQ_THAN reduce using rule 92 (matrix -> empty .)
    LESS_OR_EQ_THAN reduce using rule 92 (matrix -> empty .)
    DIFFERENT_TO    reduce using rule 92 (matrix -> empty .)
    MORE_THAN       reduce using rule 92 (matrix -> empty .)
    LESS_THAN       reduce using rule 92 (matrix -> empty .)
    RETURN          reduce using rule 92 (matrix -> empty .)
    PEN_DOWN        reduce using rule 92 (matrix -> empty .)
    PEN_UP          reduce using rule 92 (matrix -> empty .)
    WHILE           reduce using rule 92 (matrix -> empty .)
    IF              reduce using rule 92 (matrix -> empty .)
    WRITE           reduce using rule 92 (matrix -> empty .)
    READ            reduce using rule 92 (matrix -> empty .)
    ID              reduce using rule 92 (matrix -> empty .)
    BOOL            reduce using rule 92 (matrix -> empty .)
    WORD            reduce using rule 92 (matrix -> empty .)
    NUMBER          reduce using rule 92 (matrix -> empty .)
    CENTER          reduce using rule 92 (matrix -> empty .)
    FORWARD         reduce using rule 92 (matrix -> empty .)
    RIGHT           reduce using rule 92 (matrix -> empty .)
    LEFT            reduce using rule 92 (matrix -> empty .)
    END             reduce using rule 92 (matrix -> empty .)
    ELSE            reduce using rule 92 (matrix -> empty .)
    OR              reduce using rule 92 (matrix -> empty .)
    AND             reduce using rule 92 (matrix -> empty .)
    CLOSE_PTH       reduce using rule 92 (matrix -> empty .)
    COMMA           reduce using rule 92 (matrix -> empty .)
    CLOSE_SQR       reduce using rule 92 (matrix -> empty .)


state 185

    (81) func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .
    RETURN          reduce using rule 81 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    PEN_DOWN        reduce using rule 81 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    PEN_UP          reduce using rule 81 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    WHILE           reduce using rule 81 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    IF              reduce using rule 81 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    WRITE           reduce using rule 81 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    READ            reduce using rule 81 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    ID              reduce using rule 81 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    BOOL            reduce using rule 81 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    WORD            reduce using rule 81 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    NUMBER          reduce using rule 81 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    CENTER          reduce using rule 81 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    FORWARD         reduce using rule 81 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    RIGHT           reduce using rule 81 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    LEFT            reduce using rule 81 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    END             reduce using rule 81 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    ELSE            reduce using rule 81 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    DIV             reduce using rule 81 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    MULT            reduce using rule 81 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    SUB             reduce using rule 81 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    SUM             reduce using rule 81 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    EQUAL_TO        reduce using rule 81 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    MORE_OR_EQ_THAN reduce using rule 81 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    LESS_OR_EQ_THAN reduce using rule 81 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    DIFFERENT_TO    reduce using rule 81 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    MORE_THAN       reduce using rule 81 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    LESS_THAN       reduce using rule 81 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    OR              reduce using rule 81 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    AND             reduce using rule 81 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    CLOSE_PTH       reduce using rule 81 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    COMMA           reduce using rule 81 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    CLOSE_SQR       reduce using rule 81 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)


state 186

    (40) var_assignation -> ID e5 assign e6 expression q3 .
    RETURN          reduce using rule 40 (var_assignation -> ID e5 assign e6 expression q3 .)
    PEN_DOWN        reduce using rule 40 (var_assignation -> ID e5 assign e6 expression q3 .)
    PEN_UP          reduce using rule 40 (var_assignation -> ID e5 assign e6 expression q3 .)
    WHILE           reduce using rule 40 (var_assignation -> ID e5 assign e6 expression q3 .)
    IF              reduce using rule 40 (var_assignation -> ID e5 assign e6 expression q3 .)
    WRITE           reduce using rule 40 (var_assignation -> ID e5 assign e6 expression q3 .)
    READ            reduce using rule 40 (var_assignation -> ID e5 assign e6 expression q3 .)
    ID              reduce using rule 40 (var_assignation -> ID e5 assign e6 expression q3 .)
    BOOL            reduce using rule 40 (var_assignation -> ID e5 assign e6 expression q3 .)
    WORD            reduce using rule 40 (var_assignation -> ID e5 assign e6 expression q3 .)
    NUMBER          reduce using rule 40 (var_assignation -> ID e5 assign e6 expression q3 .)
    CENTER          reduce using rule 40 (var_assignation -> ID e5 assign e6 expression q3 .)
    FORWARD         reduce using rule 40 (var_assignation -> ID e5 assign e6 expression q3 .)
    RIGHT           reduce using rule 40 (var_assignation -> ID e5 assign e6 expression q3 .)
    LEFT            reduce using rule 40 (var_assignation -> ID e5 assign e6 expression q3 .)
    END             reduce using rule 40 (var_assignation -> ID e5 assign e6 expression q3 .)
    ELSE            reduce using rule 40 (var_assignation -> ID e5 assign e6 expression q3 .)


state 187

    (87) multiple_fc_param -> COMMA func_call_param .
    CLOSE_PTH       reduce using rule 87 (multiple_fc_param -> COMMA func_call_param .)


state 188

    (104) while_stmnt -> WHILE w1 con_expression w2 stmnt w3 . END
    END             shift and go to state 197


state 189

    (97) if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .
    RETURN          reduce using rule 97 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)
    PEN_DOWN        reduce using rule 97 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)
    PEN_UP          reduce using rule 97 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)
    WHILE           reduce using rule 97 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)
    IF              reduce using rule 97 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)
    WRITE           reduce using rule 97 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)
    READ            reduce using rule 97 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)
    ID              reduce using rule 97 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)
    BOOL            reduce using rule 97 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)
    WORD            reduce using rule 97 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)
    NUMBER          reduce using rule 97 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)
    CENTER          reduce using rule 97 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)
    FORWARD         reduce using rule 97 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)
    RIGHT           reduce using rule 97 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)
    LEFT            reduce using rule 97 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)
    END             reduce using rule 97 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)
    ELSE            reduce using rule 97 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)


state 190

    (100) else_stmnt -> END .
    RETURN          reduce using rule 100 (else_stmnt -> END .)
    PEN_DOWN        reduce using rule 100 (else_stmnt -> END .)
    PEN_UP          reduce using rule 100 (else_stmnt -> END .)
    WHILE           reduce using rule 100 (else_stmnt -> END .)
    IF              reduce using rule 100 (else_stmnt -> END .)
    WRITE           reduce using rule 100 (else_stmnt -> END .)
    READ            reduce using rule 100 (else_stmnt -> END .)
    ID              reduce using rule 100 (else_stmnt -> END .)
    BOOL            reduce using rule 100 (else_stmnt -> END .)
    WORD            reduce using rule 100 (else_stmnt -> END .)
    NUMBER          reduce using rule 100 (else_stmnt -> END .)
    CENTER          reduce using rule 100 (else_stmnt -> END .)
    FORWARD         reduce using rule 100 (else_stmnt -> END .)
    RIGHT           reduce using rule 100 (else_stmnt -> END .)
    LEFT            reduce using rule 100 (else_stmnt -> END .)
    END             reduce using rule 100 (else_stmnt -> END .)
    ELSE            reduce using rule 100 (else_stmnt -> END .)


state 191

    (101) else_stmnt -> ELSE . if3 stmnt if4 END
    (102) if3 -> .
    RETURN          reduce using rule 102 (if3 -> .)
    PEN_DOWN        reduce using rule 102 (if3 -> .)
    PEN_UP          reduce using rule 102 (if3 -> .)
    WHILE           reduce using rule 102 (if3 -> .)
    IF              reduce using rule 102 (if3 -> .)
    WRITE           reduce using rule 102 (if3 -> .)
    READ            reduce using rule 102 (if3 -> .)
    ID              reduce using rule 102 (if3 -> .)
    BOOL            reduce using rule 102 (if3 -> .)
    WORD            reduce using rule 102 (if3 -> .)
    NUMBER          reduce using rule 102 (if3 -> .)
    CENTER          reduce using rule 102 (if3 -> .)
    FORWARD         reduce using rule 102 (if3 -> .)
    RIGHT           reduce using rule 102 (if3 -> .)
    LEFT            reduce using rule 102 (if3 -> .)
    END             reduce using rule 102 (if3 -> .)

    if3                            shift and go to state 198

state 192

    (109) con_expression -> expression q5 log_op e7 expression . q5
    (111) q5 -> .
    RETURN          reduce using rule 111 (q5 -> .)
    PEN_DOWN        reduce using rule 111 (q5 -> .)
    PEN_UP          reduce using rule 111 (q5 -> .)
    WHILE           reduce using rule 111 (q5 -> .)
    IF              reduce using rule 111 (q5 -> .)
    WRITE           reduce using rule 111 (q5 -> .)
    READ            reduce using rule 111 (q5 -> .)
    ID              reduce using rule 111 (q5 -> .)
    BOOL            reduce using rule 111 (q5 -> .)
    WORD            reduce using rule 111 (q5 -> .)
    NUMBER          reduce using rule 111 (q5 -> .)
    CENTER          reduce using rule 111 (q5 -> .)
    FORWARD         reduce using rule 111 (q5 -> .)
    RIGHT           reduce using rule 111 (q5 -> .)
    LEFT            reduce using rule 111 (q5 -> .)
    END             reduce using rule 111 (q5 -> .)
    ELSE            reduce using rule 111 (q5 -> .)

    q5                             shift and go to state 199

state 193

    (95) multiple_vars -> COMMA variable varid .
    CLOSE_PTH       reduce using rule 95 (multiple_vars -> COMMA variable varid .)
    RETURN          reduce using rule 95 (multiple_vars -> COMMA variable varid .)
    PEN_DOWN        reduce using rule 95 (multiple_vars -> COMMA variable varid .)
    PEN_UP          reduce using rule 95 (multiple_vars -> COMMA variable varid .)
    WHILE           reduce using rule 95 (multiple_vars -> COMMA variable varid .)
    IF              reduce using rule 95 (multiple_vars -> COMMA variable varid .)
    WRITE           reduce using rule 95 (multiple_vars -> COMMA variable varid .)
    READ            reduce using rule 95 (multiple_vars -> COMMA variable varid .)
    ID              reduce using rule 95 (multiple_vars -> COMMA variable varid .)
    BOOL            reduce using rule 95 (multiple_vars -> COMMA variable varid .)
    WORD            reduce using rule 95 (multiple_vars -> COMMA variable varid .)
    NUMBER          reduce using rule 95 (multiple_vars -> COMMA variable varid .)
    CENTER          reduce using rule 95 (multiple_vars -> COMMA variable varid .)
    FORWARD         reduce using rule 95 (multiple_vars -> COMMA variable varid .)
    RIGHT           reduce using rule 95 (multiple_vars -> COMMA variable varid .)
    LEFT            reduce using rule 95 (multiple_vars -> COMMA variable varid .)
    END             reduce using rule 95 (multiple_vars -> COMMA variable varid .)
    ELSE            reduce using rule 95 (multiple_vars -> COMMA variable varid .)


state 194

    (14) func_declaration -> FUNC resetvars func_type ID fd1 OPEN_PTH parameter CLOSE_PTH stmnt vd1 . END
    END             shift and go to state 200


state 195

    (23) parameter -> var_type addvartype ID varid . multiple_parameters
    (24) multiple_parameters -> . empty
    (25) multiple_parameters -> . COMMA parameter
    (121) empty -> .
    COMMA           shift and go to state 203
    CLOSE_PTH       reduce using rule 121 (empty -> .)

    multiple_parameters            shift and go to state 201
    empty                          shift and go to state 202

state 196

    (93) matrix -> OPEN_SQR expression . CLOSE_SQR
    CLOSE_SQR       shift and go to state 204


state 197

    (104) while_stmnt -> WHILE w1 con_expression w2 stmnt w3 END .
    RETURN          reduce using rule 104 (while_stmnt -> WHILE w1 con_expression w2 stmnt w3 END .)
    PEN_DOWN        reduce using rule 104 (while_stmnt -> WHILE w1 con_expression w2 stmnt w3 END .)
    PEN_UP          reduce using rule 104 (while_stmnt -> WHILE w1 con_expression w2 stmnt w3 END .)
    WHILE           reduce using rule 104 (while_stmnt -> WHILE w1 con_expression w2 stmnt w3 END .)
    IF              reduce using rule 104 (while_stmnt -> WHILE w1 con_expression w2 stmnt w3 END .)
    WRITE           reduce using rule 104 (while_stmnt -> WHILE w1 con_expression w2 stmnt w3 END .)
    READ            reduce using rule 104 (while_stmnt -> WHILE w1 con_expression w2 stmnt w3 END .)
    ID              reduce using rule 104 (while_stmnt -> WHILE w1 con_expression w2 stmnt w3 END .)
    BOOL            reduce using rule 104 (while_stmnt -> WHILE w1 con_expression w2 stmnt w3 END .)
    WORD            reduce using rule 104 (while_stmnt -> WHILE w1 con_expression w2 stmnt w3 END .)
    NUMBER          reduce using rule 104 (while_stmnt -> WHILE w1 con_expression w2 stmnt w3 END .)
    CENTER          reduce using rule 104 (while_stmnt -> WHILE w1 con_expression w2 stmnt w3 END .)
    FORWARD         reduce using rule 104 (while_stmnt -> WHILE w1 con_expression w2 stmnt w3 END .)
    RIGHT           reduce using rule 104 (while_stmnt -> WHILE w1 con_expression w2 stmnt w3 END .)
    LEFT            reduce using rule 104 (while_stmnt -> WHILE w1 con_expression w2 stmnt w3 END .)
    END             reduce using rule 104 (while_stmnt -> WHILE w1 con_expression w2 stmnt w3 END .)
    ELSE            reduce using rule 104 (while_stmnt -> WHILE w1 con_expression w2 stmnt w3 END .)


state 198

    (101) else_stmnt -> ELSE if3 . stmnt if4 END
    (26) stmnt -> . empty
    (27) stmnt -> . returnf stmnt
    (28) stmnt -> . var_declaration_func stmnt
    (29) stmnt -> . pen_func stmnt
    (30) stmnt -> . move_func stmnt
    (31) stmnt -> . while_stmnt stmnt
    (32) stmnt -> . if_stmnt stmnt
    (33) stmnt -> . write stmnt
    (34) stmnt -> . read stmnt
    (35) stmnt -> . func_call stmnt
    (36) stmnt -> . var_assignation stmnt
    (121) empty -> .
    (37) returnf -> . RETURN expression
    (38) var_declaration_func -> . var_type addvartype ID varid multiple_vars
    (117) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (118) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (112) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (104) while_stmnt -> . WHILE w1 con_expression w2 stmnt w3 END
    (97) if_stmnt -> . IF con_expression if1 stmnt if2 else_stmnt
    (96) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (88) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (81) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (40) var_assignation -> . ID e5 assign e6 expression q3
    (10) var_type -> . BOOL
    (11) var_type -> . WORD
    (12) var_type -> . NUMBER
    (113) move_type -> . CENTER
    (114) move_type -> . FORWARD
    (115) move_type -> . RIGHT
    (116) move_type -> . LEFT
    END             reduce using rule 121 (empty -> .)
    RETURN          shift and go to state 47
    PEN_DOWN        shift and go to state 50
    PEN_UP          shift and go to state 51
    WHILE           shift and go to state 53
    IF              shift and go to state 54
    WRITE           shift and go to state 55
    READ            shift and go to state 56
    ID              shift and go to state 49
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11
    CENTER          shift and go to state 57
    FORWARD         shift and go to state 58
    RIGHT           shift and go to state 59
    LEFT            shift and go to state 60

    stmnt                          shift and go to state 205
    empty                          shift and go to state 36
    returnf                        shift and go to state 37
    var_declaration_func           shift and go to state 38
    pen_func                       shift and go to state 39
    move_func                      shift and go to state 40
    while_stmnt                    shift and go to state 41
    if_stmnt                       shift and go to state 42
    write                          shift and go to state 43
    read                           shift and go to state 44
    func_call                      shift and go to state 45
    var_assignation                shift and go to state 46
    var_type                       shift and go to state 48
    move_type                      shift and go to state 52

state 199

    (109) con_expression -> expression q5 log_op e7 expression q5 .
    RETURN          reduce using rule 109 (con_expression -> expression q5 log_op e7 expression q5 .)
    PEN_DOWN        reduce using rule 109 (con_expression -> expression q5 log_op e7 expression q5 .)
    PEN_UP          reduce using rule 109 (con_expression -> expression q5 log_op e7 expression q5 .)
    WHILE           reduce using rule 109 (con_expression -> expression q5 log_op e7 expression q5 .)
    IF              reduce using rule 109 (con_expression -> expression q5 log_op e7 expression q5 .)
    WRITE           reduce using rule 109 (con_expression -> expression q5 log_op e7 expression q5 .)
    READ            reduce using rule 109 (con_expression -> expression q5 log_op e7 expression q5 .)
    ID              reduce using rule 109 (con_expression -> expression q5 log_op e7 expression q5 .)
    BOOL            reduce using rule 109 (con_expression -> expression q5 log_op e7 expression q5 .)
    WORD            reduce using rule 109 (con_expression -> expression q5 log_op e7 expression q5 .)
    NUMBER          reduce using rule 109 (con_expression -> expression q5 log_op e7 expression q5 .)
    CENTER          reduce using rule 109 (con_expression -> expression q5 log_op e7 expression q5 .)
    FORWARD         reduce using rule 109 (con_expression -> expression q5 log_op e7 expression q5 .)
    RIGHT           reduce using rule 109 (con_expression -> expression q5 log_op e7 expression q5 .)
    LEFT            reduce using rule 109 (con_expression -> expression q5 log_op e7 expression q5 .)
    END             reduce using rule 109 (con_expression -> expression q5 log_op e7 expression q5 .)
    ELSE            reduce using rule 109 (con_expression -> expression q5 log_op e7 expression q5 .)


state 200

    (14) func_declaration -> FUNC resetvars func_type ID fd1 OPEN_PTH parameter CLOSE_PTH stmnt vd1 END .
    MAIN            reduce using rule 14 (func_declaration -> FUNC resetvars func_type ID fd1 OPEN_PTH parameter CLOSE_PTH stmnt vd1 END .)


state 201

    (23) parameter -> var_type addvartype ID varid multiple_parameters .
    CLOSE_PTH       reduce using rule 23 (parameter -> var_type addvartype ID varid multiple_parameters .)


state 202

    (24) multiple_parameters -> empty .
    CLOSE_PTH       reduce using rule 24 (multiple_parameters -> empty .)


state 203

    (25) multiple_parameters -> COMMA . parameter
    (22) parameter -> . empty
    (23) parameter -> . var_type addvartype ID varid multiple_parameters
    (121) empty -> .
    (10) var_type -> . BOOL
    (11) var_type -> . WORD
    (12) var_type -> . NUMBER
    CLOSE_PTH       reduce using rule 121 (empty -> .)
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11

    parameter                      shift and go to state 206
    empty                          shift and go to state 139
    var_type                       shift and go to state 140

state 204

    (93) matrix -> OPEN_SQR expression CLOSE_SQR .
    DIV             reduce using rule 93 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    MULT            reduce using rule 93 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    SUB             reduce using rule 93 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    SUM             reduce using rule 93 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    EQUAL_TO        reduce using rule 93 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    MORE_OR_EQ_THAN reduce using rule 93 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    LESS_OR_EQ_THAN reduce using rule 93 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    DIFFERENT_TO    reduce using rule 93 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    MORE_THAN       reduce using rule 93 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    LESS_THAN       reduce using rule 93 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    RETURN          reduce using rule 93 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    PEN_DOWN        reduce using rule 93 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    PEN_UP          reduce using rule 93 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    WHILE           reduce using rule 93 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    IF              reduce using rule 93 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    WRITE           reduce using rule 93 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    READ            reduce using rule 93 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    ID              reduce using rule 93 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    BOOL            reduce using rule 93 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    WORD            reduce using rule 93 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    NUMBER          reduce using rule 93 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    CENTER          reduce using rule 93 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    FORWARD         reduce using rule 93 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    RIGHT           reduce using rule 93 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    LEFT            reduce using rule 93 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    END             reduce using rule 93 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    ELSE            reduce using rule 93 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    OR              reduce using rule 93 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    AND             reduce using rule 93 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    CLOSE_PTH       reduce using rule 93 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    COMMA           reduce using rule 93 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    CLOSE_SQR       reduce using rule 93 (matrix -> OPEN_SQR expression CLOSE_SQR .)


state 205

    (101) else_stmnt -> ELSE if3 stmnt . if4 END
    (103) if4 -> .
    END             reduce using rule 103 (if4 -> .)

    if4                            shift and go to state 207

state 206

    (25) multiple_parameters -> COMMA parameter .
    CLOSE_PTH       reduce using rule 25 (multiple_parameters -> COMMA parameter .)


state 207

    (101) else_stmnt -> ELSE if3 stmnt if4 . END
    END             shift and go to state 208


state 208

    (101) else_stmnt -> ELSE if3 stmnt if4 END .
    RETURN          reduce using rule 101 (else_stmnt -> ELSE if3 stmnt if4 END .)
    PEN_DOWN        reduce using rule 101 (else_stmnt -> ELSE if3 stmnt if4 END .)
    PEN_UP          reduce using rule 101 (else_stmnt -> ELSE if3 stmnt if4 END .)
    WHILE           reduce using rule 101 (else_stmnt -> ELSE if3 stmnt if4 END .)
    IF              reduce using rule 101 (else_stmnt -> ELSE if3 stmnt if4 END .)
    WRITE           reduce using rule 101 (else_stmnt -> ELSE if3 stmnt if4 END .)
    READ            reduce using rule 101 (else_stmnt -> ELSE if3 stmnt if4 END .)
    ID              reduce using rule 101 (else_stmnt -> ELSE if3 stmnt if4 END .)
    BOOL            reduce using rule 101 (else_stmnt -> ELSE if3 stmnt if4 END .)
    WORD            reduce using rule 101 (else_stmnt -> ELSE if3 stmnt if4 END .)
    NUMBER          reduce using rule 101 (else_stmnt -> ELSE if3 stmnt if4 END .)
    CENTER          reduce using rule 101 (else_stmnt -> ELSE if3 stmnt if4 END .)
    FORWARD         reduce using rule 101 (else_stmnt -> ELSE if3 stmnt if4 END .)
    RIGHT           reduce using rule 101 (else_stmnt -> ELSE if3 stmnt if4 END .)
    LEFT            reduce using rule 101 (else_stmnt -> ELSE if3 stmnt if4 END .)
    END             reduce using rule 101 (else_stmnt -> ELSE if3 stmnt if4 END .)
    ELSE            reduce using rule 101 (else_stmnt -> ELSE if3 stmnt if4 END .)


Conflicts:

shift/reduce conflict for EQUAL_TO in state 75 resolved as shift
shift/reduce conflict for MORE_OR_EQ_THAN in state 75 resolved as shift
shift/reduce conflict for LESS_OR_EQ_THAN in state 75 resolved as shift
shift/reduce conflict for DIFFERENT_TO in state 75 resolved as shift
shift/reduce conflict for MORE_THAN in state 75 resolved as shift
shift/reduce conflict for LESS_THAN in state 75 resolved as shift
shift/reduce conflict for SUB in state 76 resolved as shift
shift/reduce conflict for SUM in state 76 resolved as shift