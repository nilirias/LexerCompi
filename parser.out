Grammar:

Rule 0     S' -> program
Rule 1     program -> DRAWING ID fd1 declaration
Rule 2     declaration -> var_declaration vd1 func_declaration main
Rule 3     var_declaration -> empty
Rule 4     var_declaration -> var_type addvartype ID varglobal multiple_var var_declaration
Rule 5     varglobal -> <empty>
Rule 6     addvartype -> <empty>
Rule 7     addvardic -> <empty>
Rule 8     multiple_var -> empty
Rule 9     multiple_var -> COMMA ID varglobal multiple_var
Rule 10    var_type -> BOOL
Rule 11    var_type -> WORD
Rule 12    var_type -> NUMBER
Rule 13    func_declaration -> empty
Rule 14    func_declaration -> FUNC resetvars func_type ID fd1 OPEN_PTH parameter CLOSE_PTH stmnt vd1 END
Rule 15    resetvars -> <empty>
Rule 16    fd1 -> <empty>
Rule 17    vd1 -> <empty>
Rule 18    func_type -> BOOL
Rule 19    func_type -> WORD
Rule 20    func_type -> NUMBER
Rule 21    func_type -> VOID
Rule 22    parameter -> empty
Rule 23    parameter -> var_type addvartype ID varid multiple_parameters
Rule 24    multiple_parameters -> empty
Rule 25    multiple_parameters -> COMMA parameter
Rule 26    stmnt -> empty
Rule 27    stmnt -> returnf stmnt
Rule 28    stmnt -> var_declaration_func stmnt
Rule 29    stmnt -> pen_func stmnt
Rule 30    stmnt -> move_func stmnt
Rule 31    stmnt -> while_stmnt stmnt
Rule 32    stmnt -> if_stmnt stmnt
Rule 33    stmnt -> write stmnt
Rule 34    stmnt -> read stmnt
Rule 35    stmnt -> func_call stmnt
Rule 36    stmnt -> var_assignation stmnt
Rule 37    returnf -> RETURN expression
Rule 38    var_declaration_func -> var_type addvartype ID varid multiple_vars
Rule 39    varid -> <empty>
Rule 40    var_assignation -> ID e5 assign e6 expression q3
Rule 41    e5 -> <empty>
Rule 42    e6 -> <empty>
Rule 43    assign -> ASSIGN
Rule 44    var_cte -> func_call
Rule 45    var_cte -> cte_bool bvarcte
Rule 46    var_cte -> CTE_STR svarcte
Rule 47    var_cte -> CTE_NUM nvarcte
Rule 48    var_cte -> variable
Rule 49    nvarcte -> <empty>
Rule 50    svarcte -> <empty>
Rule 51    bvarcte -> <empty>
Rule 52    cte_bool -> FALSE
Rule 53    cte_bool -> TRUE
Rule 54    expression -> func_call q4
Rule 55    expression -> exp q4
Rule 56    expression -> exp rel_op exp q4
Rule 57    q4 -> <empty>
Rule 58    exp -> termino q1
Rule 59    exp -> termino term_op e3 termino q1
Rule 60    e3 -> <empty>
Rule 61    q2 -> <empty>
Rule 62    term_op -> SUB
Rule 63    term_op -> SUM
Rule 64    termino -> factor q2
Rule 65    termino -> factor fact_op e2 factor q2
Rule 66    q1 -> <empty>
Rule 67    q3 -> <empty>
Rule 68    e2 -> <empty>
Rule 69    fact_op -> DIV
Rule 70    fact_op -> MULT
Rule 71    factor -> expression
Rule 72    factor -> var_cte e1
Rule 73    factor -> open_pth expression close_pth
Rule 74    e1 -> <empty>
Rule 75    open_pth -> OPEN_PTH
Rule 76    close_pth -> CLOSE_PTH
Rule 77    log_op -> OR
Rule 78    log_op -> AND
Rule 79    rel_op -> EQUAL_TO
Rule 80    rel_op -> MORE_OR_EQ_THAN
Rule 81    rel_op -> LESS_OR_EQ_THAN
Rule 82    rel_op -> DIFFERENT_TO
Rule 83    rel_op -> MORE_THAN
Rule 84    rel_op -> LESS_THAN
Rule 85    func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
Rule 86    func1 -> <empty>
Rule 87    func_call_param -> expression func2 multiple_fc_param
Rule 88    func2 -> <empty>
Rule 89    func3 -> <empty>
Rule 90    multiple_fc_param -> empty
Rule 91    multiple_fc_param -> COMMA func_call_param
Rule 92    read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH
Rule 93    variable -> ID array
Rule 94    array -> empty
Rule 95    array -> OPEN_SQR expression CLOSE_SQR matrix
Rule 96    matrix -> empty
Rule 97    matrix -> OPEN_SQR expression CLOSE_SQR
Rule 98    multiple_vars -> empty
Rule 99    multiple_vars -> COMMA variable varid multiple_vars
Rule 100   write -> WRITE OPEN_PTH expression CLOSE_PTH
Rule 101   if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt
Rule 102   if1 -> <empty>
Rule 103   if2 -> <empty>
Rule 104   else_stmnt -> END
Rule 105   else_stmnt -> ELSE if3 stmnt if4 END
Rule 106   if3 -> <empty>
Rule 107   if4 -> <empty>
Rule 108   while_stmnt -> WHILE w1 con_expression w2 stmnt w3 END
Rule 109   w1 -> <empty>
Rule 110   w2 -> <empty>
Rule 111   w3 -> <empty>
Rule 112   con_expression -> expression q5
Rule 113   con_expression -> expression q5 log_op e7 expression q5
Rule 114   e7 -> <empty>
Rule 115   q5 -> <empty>
Rule 116   move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH
Rule 117   move_type -> CENTER
Rule 118   move_type -> FORWARD
Rule 119   move_type -> RIGHT
Rule 120   move_type -> LEFT
Rule 121   pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH
Rule 122   pen_func -> PEN_UP OPEN_PTH CLOSE_PTH
Rule 123   md1 -> <empty>
Rule 124   main -> MAIN fd1 resetvars stmnt vd1 END
Rule 125   empty -> <empty>

Terminals, with rules where they appear:

AND                  : 78
ASSIGN               : 43
BOOL                 : 10 18
CENTER               : 117
CLOSE_PTH            : 14 76 85 92 100 116 121 122
CLOSE_SQR            : 95 97
COMMA                : 9 25 91 99
CTE_NUM              : 47
CTE_STR              : 46
DIFFERENT_TO         : 82
DIV                  : 69
DRAWING              : 1
ELSE                 : 105
END                  : 14 104 105 108 124
EQUAL_TO             : 79
FALSE                : 52
FORWARD              : 118
FUNC                 : 14
ID                   : 1 4 9 14 23 38 40 85 93
IF                   : 101
LEFT                 : 120
LESS_OR_EQ_THAN      : 81
LESS_THAN            : 84
MAIN                 : 124
MORE_OR_EQ_THAN      : 80
MORE_THAN            : 83
MULT                 : 70
NUMBER               : 12 20
OPEN_PTH             : 14 75 85 92 100 116 121 122
OPEN_SQR             : 95 97
OR                   : 77
PEN_DOWN             : 121
PEN_UP               : 122
READ                 : 92
RETURN               : 37
RIGHT                : 119
SUB                  : 62
SUM                  : 63
TRUE                 : 53
VOID                 : 21
WHILE                : 108
WORD                 : 11 19
WRITE                : 100
error                : 

Nonterminals, with rules where they appear:

addvardic            : 
addvartype           : 4 23 38
array                : 93
assign               : 40
bvarcte              : 45
close_pth            : 73
con_expression       : 101 108
cte_bool             : 45
declaration          : 1
e1                   : 72
e2                   : 65
e3                   : 59
e5                   : 40
e6                   : 40
e7                   : 113
else_stmnt           : 101
empty                : 3 8 13 22 24 26 90 94 96 98
exp                  : 55 56 56
expression           : 37 40 71 73 87 95 97 100 112 113 113
fact_op              : 65
factor               : 64 65 65
fd1                  : 1 14 124
func1                : 85
func2                : 87
func3                : 85
func_call            : 35 44 54
func_call_param      : 85 91 116
func_declaration     : 2
func_type            : 14
if1                  : 101
if2                  : 101
if3                  : 105
if4                  : 105
if_stmnt             : 32
log_op               : 113
main                 : 2
matrix               : 95
md1                  : 
move_func            : 30
move_type            : 116
multiple_fc_param    : 87
multiple_parameters  : 23
multiple_var         : 4 9
multiple_vars        : 38 92 99
nvarcte              : 47
open_pth             : 73
parameter            : 14 25
pen_func             : 29
program              : 0
q1                   : 58 59
q2                   : 64 65
q3                   : 40
q4                   : 54 55 56
q5                   : 112 113 113
read                 : 34
rel_op               : 56
resetvars            : 14 124
returnf              : 27
stmnt                : 14 27 28 29 30 31 32 33 34 35 36 101 105 108 124
svarcte              : 46
term_op              : 59
termino              : 58 59 59
var_assignation      : 36
var_cte              : 72
var_declaration      : 2 4
var_declaration_func : 28
var_type             : 4 23 38
varglobal            : 4 9
variable             : 48 92 99
varid                : 23 38 99
vd1                  : 2 14 124
w1                   : 108
w2                   : 108
w3                   : 108
while_stmnt          : 31
write                : 33


state 0

    (0) S' -> . program
    (1) program -> . DRAWING ID fd1 declaration
    DRAWING         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .


state 2

    (1) program -> DRAWING . ID fd1 declaration
    ID              shift and go to state 3


state 3

    (1) program -> DRAWING ID . fd1 declaration
    (16) fd1 -> .
    BOOL            reduce using rule 16 (fd1 -> .)
    WORD            reduce using rule 16 (fd1 -> .)
    NUMBER          reduce using rule 16 (fd1 -> .)
    FUNC            reduce using rule 16 (fd1 -> .)
    MAIN            reduce using rule 16 (fd1 -> .)

    fd1                            shift and go to state 4

state 4

    (1) program -> DRAWING ID fd1 . declaration
    (2) declaration -> . var_declaration vd1 func_declaration main
    (3) var_declaration -> . empty
    (4) var_declaration -> . var_type addvartype ID varglobal multiple_var var_declaration
    (125) empty -> .
    (10) var_type -> . BOOL
    (11) var_type -> . WORD
    (12) var_type -> . NUMBER
    FUNC            reduce using rule 125 (empty -> .)
    MAIN            reduce using rule 125 (empty -> .)
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11

    declaration                    shift and go to state 5
    var_declaration                shift and go to state 6
    empty                          shift and go to state 7
    var_type                       shift and go to state 8

state 5

    (1) program -> DRAWING ID fd1 declaration .
    $end            reduce using rule 1 (program -> DRAWING ID fd1 declaration .)


state 6

    (2) declaration -> var_declaration . vd1 func_declaration main
    (17) vd1 -> .
    FUNC            reduce using rule 17 (vd1 -> .)
    MAIN            reduce using rule 17 (vd1 -> .)

    vd1                            shift and go to state 12

state 7

    (3) var_declaration -> empty .
    FUNC            reduce using rule 3 (var_declaration -> empty .)
    MAIN            reduce using rule 3 (var_declaration -> empty .)


state 8

    (4) var_declaration -> var_type . addvartype ID varglobal multiple_var var_declaration
    (6) addvartype -> .
    ID              reduce using rule 6 (addvartype -> .)

    addvartype                     shift and go to state 13

state 9

    (10) var_type -> BOOL .
    ID              reduce using rule 10 (var_type -> BOOL .)


state 10

    (11) var_type -> WORD .
    ID              reduce using rule 11 (var_type -> WORD .)


state 11

    (12) var_type -> NUMBER .
    ID              reduce using rule 12 (var_type -> NUMBER .)


state 12

    (2) declaration -> var_declaration vd1 . func_declaration main
    (13) func_declaration -> . empty
    (14) func_declaration -> . FUNC resetvars func_type ID fd1 OPEN_PTH parameter CLOSE_PTH stmnt vd1 END
    (125) empty -> .
    FUNC            shift and go to state 16
    MAIN            reduce using rule 125 (empty -> .)

    func_declaration               shift and go to state 14
    empty                          shift and go to state 15

state 13

    (4) var_declaration -> var_type addvartype . ID varglobal multiple_var var_declaration
    ID              shift and go to state 17


state 14

    (2) declaration -> var_declaration vd1 func_declaration . main
    (124) main -> . MAIN fd1 resetvars stmnt vd1 END
    MAIN            shift and go to state 19

    main                           shift and go to state 18

state 15

    (13) func_declaration -> empty .
    MAIN            reduce using rule 13 (func_declaration -> empty .)


state 16

    (14) func_declaration -> FUNC . resetvars func_type ID fd1 OPEN_PTH parameter CLOSE_PTH stmnt vd1 END
    (15) resetvars -> .
    BOOL            reduce using rule 15 (resetvars -> .)
    WORD            reduce using rule 15 (resetvars -> .)
    NUMBER          reduce using rule 15 (resetvars -> .)
    VOID            reduce using rule 15 (resetvars -> .)

    resetvars                      shift and go to state 20

state 17

    (4) var_declaration -> var_type addvartype ID . varglobal multiple_var var_declaration
    (5) varglobal -> .
    COMMA           reduce using rule 5 (varglobal -> .)
    BOOL            reduce using rule 5 (varglobal -> .)
    WORD            reduce using rule 5 (varglobal -> .)
    NUMBER          reduce using rule 5 (varglobal -> .)
    FUNC            reduce using rule 5 (varglobal -> .)
    MAIN            reduce using rule 5 (varglobal -> .)

    varglobal                      shift and go to state 21

state 18

    (2) declaration -> var_declaration vd1 func_declaration main .
    $end            reduce using rule 2 (declaration -> var_declaration vd1 func_declaration main .)


state 19

    (124) main -> MAIN . fd1 resetvars stmnt vd1 END
    (16) fd1 -> .
    RETURN          reduce using rule 16 (fd1 -> .)
    PEN_DOWN        reduce using rule 16 (fd1 -> .)
    PEN_UP          reduce using rule 16 (fd1 -> .)
    WHILE           reduce using rule 16 (fd1 -> .)
    IF              reduce using rule 16 (fd1 -> .)
    WRITE           reduce using rule 16 (fd1 -> .)
    READ            reduce using rule 16 (fd1 -> .)
    ID              reduce using rule 16 (fd1 -> .)
    BOOL            reduce using rule 16 (fd1 -> .)
    WORD            reduce using rule 16 (fd1 -> .)
    NUMBER          reduce using rule 16 (fd1 -> .)
    CENTER          reduce using rule 16 (fd1 -> .)
    FORWARD         reduce using rule 16 (fd1 -> .)
    RIGHT           reduce using rule 16 (fd1 -> .)
    LEFT            reduce using rule 16 (fd1 -> .)
    END             reduce using rule 16 (fd1 -> .)

    fd1                            shift and go to state 22

state 20

    (14) func_declaration -> FUNC resetvars . func_type ID fd1 OPEN_PTH parameter CLOSE_PTH stmnt vd1 END
    (18) func_type -> . BOOL
    (19) func_type -> . WORD
    (20) func_type -> . NUMBER
    (21) func_type -> . VOID
    BOOL            shift and go to state 24
    WORD            shift and go to state 25
    NUMBER          shift and go to state 26
    VOID            shift and go to state 27

    func_type                      shift and go to state 23

state 21

    (4) var_declaration -> var_type addvartype ID varglobal . multiple_var var_declaration
    (8) multiple_var -> . empty
    (9) multiple_var -> . COMMA ID varglobal multiple_var
    (125) empty -> .
    COMMA           shift and go to state 30
    BOOL            reduce using rule 125 (empty -> .)
    WORD            reduce using rule 125 (empty -> .)
    NUMBER          reduce using rule 125 (empty -> .)
    FUNC            reduce using rule 125 (empty -> .)
    MAIN            reduce using rule 125 (empty -> .)

    multiple_var                   shift and go to state 28
    empty                          shift and go to state 29

state 22

    (124) main -> MAIN fd1 . resetvars stmnt vd1 END
    (15) resetvars -> .
    RETURN          reduce using rule 15 (resetvars -> .)
    PEN_DOWN        reduce using rule 15 (resetvars -> .)
    PEN_UP          reduce using rule 15 (resetvars -> .)
    WHILE           reduce using rule 15 (resetvars -> .)
    IF              reduce using rule 15 (resetvars -> .)
    WRITE           reduce using rule 15 (resetvars -> .)
    READ            reduce using rule 15 (resetvars -> .)
    ID              reduce using rule 15 (resetvars -> .)
    BOOL            reduce using rule 15 (resetvars -> .)
    WORD            reduce using rule 15 (resetvars -> .)
    NUMBER          reduce using rule 15 (resetvars -> .)
    CENTER          reduce using rule 15 (resetvars -> .)
    FORWARD         reduce using rule 15 (resetvars -> .)
    RIGHT           reduce using rule 15 (resetvars -> .)
    LEFT            reduce using rule 15 (resetvars -> .)
    END             reduce using rule 15 (resetvars -> .)

    resetvars                      shift and go to state 31

state 23

    (14) func_declaration -> FUNC resetvars func_type . ID fd1 OPEN_PTH parameter CLOSE_PTH stmnt vd1 END
    ID              shift and go to state 32


state 24

    (18) func_type -> BOOL .
    ID              reduce using rule 18 (func_type -> BOOL .)


state 25

    (19) func_type -> WORD .
    ID              reduce using rule 19 (func_type -> WORD .)


state 26

    (20) func_type -> NUMBER .
    ID              reduce using rule 20 (func_type -> NUMBER .)


state 27

    (21) func_type -> VOID .
    ID              reduce using rule 21 (func_type -> VOID .)


state 28

    (4) var_declaration -> var_type addvartype ID varglobal multiple_var . var_declaration
    (3) var_declaration -> . empty
    (4) var_declaration -> . var_type addvartype ID varglobal multiple_var var_declaration
    (125) empty -> .
    (10) var_type -> . BOOL
    (11) var_type -> . WORD
    (12) var_type -> . NUMBER
    FUNC            reduce using rule 125 (empty -> .)
    MAIN            reduce using rule 125 (empty -> .)
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11

    var_type                       shift and go to state 8
    var_declaration                shift and go to state 33
    empty                          shift and go to state 7

state 29

    (8) multiple_var -> empty .
    BOOL            reduce using rule 8 (multiple_var -> empty .)
    WORD            reduce using rule 8 (multiple_var -> empty .)
    NUMBER          reduce using rule 8 (multiple_var -> empty .)
    FUNC            reduce using rule 8 (multiple_var -> empty .)
    MAIN            reduce using rule 8 (multiple_var -> empty .)


state 30

    (9) multiple_var -> COMMA . ID varglobal multiple_var
    ID              shift and go to state 34


state 31

    (124) main -> MAIN fd1 resetvars . stmnt vd1 END
    (26) stmnt -> . empty
    (27) stmnt -> . returnf stmnt
    (28) stmnt -> . var_declaration_func stmnt
    (29) stmnt -> . pen_func stmnt
    (30) stmnt -> . move_func stmnt
    (31) stmnt -> . while_stmnt stmnt
    (32) stmnt -> . if_stmnt stmnt
    (33) stmnt -> . write stmnt
    (34) stmnt -> . read stmnt
    (35) stmnt -> . func_call stmnt
    (36) stmnt -> . var_assignation stmnt
    (125) empty -> .
    (37) returnf -> . RETURN expression
    (38) var_declaration_func -> . var_type addvartype ID varid multiple_vars
    (121) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (122) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (116) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (108) while_stmnt -> . WHILE w1 con_expression w2 stmnt w3 END
    (101) if_stmnt -> . IF con_expression if1 stmnt if2 else_stmnt
    (100) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (92) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (85) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (40) var_assignation -> . ID e5 assign e6 expression q3
    (10) var_type -> . BOOL
    (11) var_type -> . WORD
    (12) var_type -> . NUMBER
    (117) move_type -> . CENTER
    (118) move_type -> . FORWARD
    (119) move_type -> . RIGHT
    (120) move_type -> . LEFT
    END             reduce using rule 125 (empty -> .)
    RETURN          shift and go to state 47
    PEN_DOWN        shift and go to state 50
    PEN_UP          shift and go to state 51
    WHILE           shift and go to state 53
    IF              shift and go to state 54
    WRITE           shift and go to state 55
    READ            shift and go to state 56
    ID              shift and go to state 49
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11
    CENTER          shift and go to state 57
    FORWARD         shift and go to state 58
    RIGHT           shift and go to state 59
    LEFT            shift and go to state 60

    stmnt                          shift and go to state 35
    empty                          shift and go to state 36
    returnf                        shift and go to state 37
    var_declaration_func           shift and go to state 38
    pen_func                       shift and go to state 39
    move_func                      shift and go to state 40
    while_stmnt                    shift and go to state 41
    if_stmnt                       shift and go to state 42
    write                          shift and go to state 43
    read                           shift and go to state 44
    func_call                      shift and go to state 45
    var_assignation                shift and go to state 46
    var_type                       shift and go to state 48
    move_type                      shift and go to state 52

state 32

    (14) func_declaration -> FUNC resetvars func_type ID . fd1 OPEN_PTH parameter CLOSE_PTH stmnt vd1 END
    (16) fd1 -> .
    OPEN_PTH        reduce using rule 16 (fd1 -> .)

    fd1                            shift and go to state 61

state 33

    (4) var_declaration -> var_type addvartype ID varglobal multiple_var var_declaration .
    FUNC            reduce using rule 4 (var_declaration -> var_type addvartype ID varglobal multiple_var var_declaration .)
    MAIN            reduce using rule 4 (var_declaration -> var_type addvartype ID varglobal multiple_var var_declaration .)


state 34

    (9) multiple_var -> COMMA ID . varglobal multiple_var
    (5) varglobal -> .
    COMMA           reduce using rule 5 (varglobal -> .)
    BOOL            reduce using rule 5 (varglobal -> .)
    WORD            reduce using rule 5 (varglobal -> .)
    NUMBER          reduce using rule 5 (varglobal -> .)
    FUNC            reduce using rule 5 (varglobal -> .)
    MAIN            reduce using rule 5 (varglobal -> .)

    varglobal                      shift and go to state 62

state 35

    (124) main -> MAIN fd1 resetvars stmnt . vd1 END
    (17) vd1 -> .
    END             reduce using rule 17 (vd1 -> .)

    vd1                            shift and go to state 63

state 36

    (26) stmnt -> empty .
    END             reduce using rule 26 (stmnt -> empty .)
    ELSE            reduce using rule 26 (stmnt -> empty .)


state 37

    (27) stmnt -> returnf . stmnt
    (26) stmnt -> . empty
    (27) stmnt -> . returnf stmnt
    (28) stmnt -> . var_declaration_func stmnt
    (29) stmnt -> . pen_func stmnt
    (30) stmnt -> . move_func stmnt
    (31) stmnt -> . while_stmnt stmnt
    (32) stmnt -> . if_stmnt stmnt
    (33) stmnt -> . write stmnt
    (34) stmnt -> . read stmnt
    (35) stmnt -> . func_call stmnt
    (36) stmnt -> . var_assignation stmnt
    (125) empty -> .
    (37) returnf -> . RETURN expression
    (38) var_declaration_func -> . var_type addvartype ID varid multiple_vars
    (121) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (122) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (116) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (108) while_stmnt -> . WHILE w1 con_expression w2 stmnt w3 END
    (101) if_stmnt -> . IF con_expression if1 stmnt if2 else_stmnt
    (100) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (92) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (85) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (40) var_assignation -> . ID e5 assign e6 expression q3
    (10) var_type -> . BOOL
    (11) var_type -> . WORD
    (12) var_type -> . NUMBER
    (117) move_type -> . CENTER
    (118) move_type -> . FORWARD
    (119) move_type -> . RIGHT
    (120) move_type -> . LEFT
    END             reduce using rule 125 (empty -> .)
    ELSE            reduce using rule 125 (empty -> .)
    RETURN          shift and go to state 47
    PEN_DOWN        shift and go to state 50
    PEN_UP          shift and go to state 51
    WHILE           shift and go to state 53
    IF              shift and go to state 54
    WRITE           shift and go to state 55
    READ            shift and go to state 56
    ID              shift and go to state 49
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11
    CENTER          shift and go to state 57
    FORWARD         shift and go to state 58
    RIGHT           shift and go to state 59
    LEFT            shift and go to state 60

    returnf                        shift and go to state 37
    stmnt                          shift and go to state 64
    empty                          shift and go to state 36
    var_declaration_func           shift and go to state 38
    pen_func                       shift and go to state 39
    move_func                      shift and go to state 40
    while_stmnt                    shift and go to state 41
    if_stmnt                       shift and go to state 42
    write                          shift and go to state 43
    read                           shift and go to state 44
    func_call                      shift and go to state 45
    var_assignation                shift and go to state 46
    var_type                       shift and go to state 48
    move_type                      shift and go to state 52

state 38

    (28) stmnt -> var_declaration_func . stmnt
    (26) stmnt -> . empty
    (27) stmnt -> . returnf stmnt
    (28) stmnt -> . var_declaration_func stmnt
    (29) stmnt -> . pen_func stmnt
    (30) stmnt -> . move_func stmnt
    (31) stmnt -> . while_stmnt stmnt
    (32) stmnt -> . if_stmnt stmnt
    (33) stmnt -> . write stmnt
    (34) stmnt -> . read stmnt
    (35) stmnt -> . func_call stmnt
    (36) stmnt -> . var_assignation stmnt
    (125) empty -> .
    (37) returnf -> . RETURN expression
    (38) var_declaration_func -> . var_type addvartype ID varid multiple_vars
    (121) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (122) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (116) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (108) while_stmnt -> . WHILE w1 con_expression w2 stmnt w3 END
    (101) if_stmnt -> . IF con_expression if1 stmnt if2 else_stmnt
    (100) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (92) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (85) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (40) var_assignation -> . ID e5 assign e6 expression q3
    (10) var_type -> . BOOL
    (11) var_type -> . WORD
    (12) var_type -> . NUMBER
    (117) move_type -> . CENTER
    (118) move_type -> . FORWARD
    (119) move_type -> . RIGHT
    (120) move_type -> . LEFT
    END             reduce using rule 125 (empty -> .)
    ELSE            reduce using rule 125 (empty -> .)
    RETURN          shift and go to state 47
    PEN_DOWN        shift and go to state 50
    PEN_UP          shift and go to state 51
    WHILE           shift and go to state 53
    IF              shift and go to state 54
    WRITE           shift and go to state 55
    READ            shift and go to state 56
    ID              shift and go to state 49
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11
    CENTER          shift and go to state 57
    FORWARD         shift and go to state 58
    RIGHT           shift and go to state 59
    LEFT            shift and go to state 60

    var_declaration_func           shift and go to state 38
    stmnt                          shift and go to state 65
    empty                          shift and go to state 36
    returnf                        shift and go to state 37
    pen_func                       shift and go to state 39
    move_func                      shift and go to state 40
    while_stmnt                    shift and go to state 41
    if_stmnt                       shift and go to state 42
    write                          shift and go to state 43
    read                           shift and go to state 44
    func_call                      shift and go to state 45
    var_assignation                shift and go to state 46
    var_type                       shift and go to state 48
    move_type                      shift and go to state 52

state 39

    (29) stmnt -> pen_func . stmnt
    (26) stmnt -> . empty
    (27) stmnt -> . returnf stmnt
    (28) stmnt -> . var_declaration_func stmnt
    (29) stmnt -> . pen_func stmnt
    (30) stmnt -> . move_func stmnt
    (31) stmnt -> . while_stmnt stmnt
    (32) stmnt -> . if_stmnt stmnt
    (33) stmnt -> . write stmnt
    (34) stmnt -> . read stmnt
    (35) stmnt -> . func_call stmnt
    (36) stmnt -> . var_assignation stmnt
    (125) empty -> .
    (37) returnf -> . RETURN expression
    (38) var_declaration_func -> . var_type addvartype ID varid multiple_vars
    (121) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (122) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (116) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (108) while_stmnt -> . WHILE w1 con_expression w2 stmnt w3 END
    (101) if_stmnt -> . IF con_expression if1 stmnt if2 else_stmnt
    (100) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (92) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (85) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (40) var_assignation -> . ID e5 assign e6 expression q3
    (10) var_type -> . BOOL
    (11) var_type -> . WORD
    (12) var_type -> . NUMBER
    (117) move_type -> . CENTER
    (118) move_type -> . FORWARD
    (119) move_type -> . RIGHT
    (120) move_type -> . LEFT
    END             reduce using rule 125 (empty -> .)
    ELSE            reduce using rule 125 (empty -> .)
    RETURN          shift and go to state 47
    PEN_DOWN        shift and go to state 50
    PEN_UP          shift and go to state 51
    WHILE           shift and go to state 53
    IF              shift and go to state 54
    WRITE           shift and go to state 55
    READ            shift and go to state 56
    ID              shift and go to state 49
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11
    CENTER          shift and go to state 57
    FORWARD         shift and go to state 58
    RIGHT           shift and go to state 59
    LEFT            shift and go to state 60

    pen_func                       shift and go to state 39
    stmnt                          shift and go to state 66
    empty                          shift and go to state 36
    returnf                        shift and go to state 37
    var_declaration_func           shift and go to state 38
    move_func                      shift and go to state 40
    while_stmnt                    shift and go to state 41
    if_stmnt                       shift and go to state 42
    write                          shift and go to state 43
    read                           shift and go to state 44
    func_call                      shift and go to state 45
    var_assignation                shift and go to state 46
    var_type                       shift and go to state 48
    move_type                      shift and go to state 52

state 40

    (30) stmnt -> move_func . stmnt
    (26) stmnt -> . empty
    (27) stmnt -> . returnf stmnt
    (28) stmnt -> . var_declaration_func stmnt
    (29) stmnt -> . pen_func stmnt
    (30) stmnt -> . move_func stmnt
    (31) stmnt -> . while_stmnt stmnt
    (32) stmnt -> . if_stmnt stmnt
    (33) stmnt -> . write stmnt
    (34) stmnt -> . read stmnt
    (35) stmnt -> . func_call stmnt
    (36) stmnt -> . var_assignation stmnt
    (125) empty -> .
    (37) returnf -> . RETURN expression
    (38) var_declaration_func -> . var_type addvartype ID varid multiple_vars
    (121) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (122) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (116) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (108) while_stmnt -> . WHILE w1 con_expression w2 stmnt w3 END
    (101) if_stmnt -> . IF con_expression if1 stmnt if2 else_stmnt
    (100) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (92) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (85) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (40) var_assignation -> . ID e5 assign e6 expression q3
    (10) var_type -> . BOOL
    (11) var_type -> . WORD
    (12) var_type -> . NUMBER
    (117) move_type -> . CENTER
    (118) move_type -> . FORWARD
    (119) move_type -> . RIGHT
    (120) move_type -> . LEFT
    END             reduce using rule 125 (empty -> .)
    ELSE            reduce using rule 125 (empty -> .)
    RETURN          shift and go to state 47
    PEN_DOWN        shift and go to state 50
    PEN_UP          shift and go to state 51
    WHILE           shift and go to state 53
    IF              shift and go to state 54
    WRITE           shift and go to state 55
    READ            shift and go to state 56
    ID              shift and go to state 49
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11
    CENTER          shift and go to state 57
    FORWARD         shift and go to state 58
    RIGHT           shift and go to state 59
    LEFT            shift and go to state 60

    move_func                      shift and go to state 40
    stmnt                          shift and go to state 67
    empty                          shift and go to state 36
    returnf                        shift and go to state 37
    var_declaration_func           shift and go to state 38
    pen_func                       shift and go to state 39
    while_stmnt                    shift and go to state 41
    if_stmnt                       shift and go to state 42
    write                          shift and go to state 43
    read                           shift and go to state 44
    func_call                      shift and go to state 45
    var_assignation                shift and go to state 46
    var_type                       shift and go to state 48
    move_type                      shift and go to state 52

state 41

    (31) stmnt -> while_stmnt . stmnt
    (26) stmnt -> . empty
    (27) stmnt -> . returnf stmnt
    (28) stmnt -> . var_declaration_func stmnt
    (29) stmnt -> . pen_func stmnt
    (30) stmnt -> . move_func stmnt
    (31) stmnt -> . while_stmnt stmnt
    (32) stmnt -> . if_stmnt stmnt
    (33) stmnt -> . write stmnt
    (34) stmnt -> . read stmnt
    (35) stmnt -> . func_call stmnt
    (36) stmnt -> . var_assignation stmnt
    (125) empty -> .
    (37) returnf -> . RETURN expression
    (38) var_declaration_func -> . var_type addvartype ID varid multiple_vars
    (121) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (122) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (116) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (108) while_stmnt -> . WHILE w1 con_expression w2 stmnt w3 END
    (101) if_stmnt -> . IF con_expression if1 stmnt if2 else_stmnt
    (100) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (92) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (85) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (40) var_assignation -> . ID e5 assign e6 expression q3
    (10) var_type -> . BOOL
    (11) var_type -> . WORD
    (12) var_type -> . NUMBER
    (117) move_type -> . CENTER
    (118) move_type -> . FORWARD
    (119) move_type -> . RIGHT
    (120) move_type -> . LEFT
    END             reduce using rule 125 (empty -> .)
    ELSE            reduce using rule 125 (empty -> .)
    RETURN          shift and go to state 47
    PEN_DOWN        shift and go to state 50
    PEN_UP          shift and go to state 51
    WHILE           shift and go to state 53
    IF              shift and go to state 54
    WRITE           shift and go to state 55
    READ            shift and go to state 56
    ID              shift and go to state 49
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11
    CENTER          shift and go to state 57
    FORWARD         shift and go to state 58
    RIGHT           shift and go to state 59
    LEFT            shift and go to state 60

    while_stmnt                    shift and go to state 41
    stmnt                          shift and go to state 68
    empty                          shift and go to state 36
    returnf                        shift and go to state 37
    var_declaration_func           shift and go to state 38
    pen_func                       shift and go to state 39
    move_func                      shift and go to state 40
    if_stmnt                       shift and go to state 42
    write                          shift and go to state 43
    read                           shift and go to state 44
    func_call                      shift and go to state 45
    var_assignation                shift and go to state 46
    var_type                       shift and go to state 48
    move_type                      shift and go to state 52

state 42

    (32) stmnt -> if_stmnt . stmnt
    (26) stmnt -> . empty
    (27) stmnt -> . returnf stmnt
    (28) stmnt -> . var_declaration_func stmnt
    (29) stmnt -> . pen_func stmnt
    (30) stmnt -> . move_func stmnt
    (31) stmnt -> . while_stmnt stmnt
    (32) stmnt -> . if_stmnt stmnt
    (33) stmnt -> . write stmnt
    (34) stmnt -> . read stmnt
    (35) stmnt -> . func_call stmnt
    (36) stmnt -> . var_assignation stmnt
    (125) empty -> .
    (37) returnf -> . RETURN expression
    (38) var_declaration_func -> . var_type addvartype ID varid multiple_vars
    (121) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (122) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (116) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (108) while_stmnt -> . WHILE w1 con_expression w2 stmnt w3 END
    (101) if_stmnt -> . IF con_expression if1 stmnt if2 else_stmnt
    (100) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (92) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (85) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (40) var_assignation -> . ID e5 assign e6 expression q3
    (10) var_type -> . BOOL
    (11) var_type -> . WORD
    (12) var_type -> . NUMBER
    (117) move_type -> . CENTER
    (118) move_type -> . FORWARD
    (119) move_type -> . RIGHT
    (120) move_type -> . LEFT
    END             reduce using rule 125 (empty -> .)
    ELSE            reduce using rule 125 (empty -> .)
    RETURN          shift and go to state 47
    PEN_DOWN        shift and go to state 50
    PEN_UP          shift and go to state 51
    WHILE           shift and go to state 53
    IF              shift and go to state 54
    WRITE           shift and go to state 55
    READ            shift and go to state 56
    ID              shift and go to state 49
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11
    CENTER          shift and go to state 57
    FORWARD         shift and go to state 58
    RIGHT           shift and go to state 59
    LEFT            shift and go to state 60

    if_stmnt                       shift and go to state 42
    stmnt                          shift and go to state 69
    empty                          shift and go to state 36
    returnf                        shift and go to state 37
    var_declaration_func           shift and go to state 38
    pen_func                       shift and go to state 39
    move_func                      shift and go to state 40
    while_stmnt                    shift and go to state 41
    write                          shift and go to state 43
    read                           shift and go to state 44
    func_call                      shift and go to state 45
    var_assignation                shift and go to state 46
    var_type                       shift and go to state 48
    move_type                      shift and go to state 52

state 43

    (33) stmnt -> write . stmnt
    (26) stmnt -> . empty
    (27) stmnt -> . returnf stmnt
    (28) stmnt -> . var_declaration_func stmnt
    (29) stmnt -> . pen_func stmnt
    (30) stmnt -> . move_func stmnt
    (31) stmnt -> . while_stmnt stmnt
    (32) stmnt -> . if_stmnt stmnt
    (33) stmnt -> . write stmnt
    (34) stmnt -> . read stmnt
    (35) stmnt -> . func_call stmnt
    (36) stmnt -> . var_assignation stmnt
    (125) empty -> .
    (37) returnf -> . RETURN expression
    (38) var_declaration_func -> . var_type addvartype ID varid multiple_vars
    (121) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (122) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (116) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (108) while_stmnt -> . WHILE w1 con_expression w2 stmnt w3 END
    (101) if_stmnt -> . IF con_expression if1 stmnt if2 else_stmnt
    (100) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (92) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (85) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (40) var_assignation -> . ID e5 assign e6 expression q3
    (10) var_type -> . BOOL
    (11) var_type -> . WORD
    (12) var_type -> . NUMBER
    (117) move_type -> . CENTER
    (118) move_type -> . FORWARD
    (119) move_type -> . RIGHT
    (120) move_type -> . LEFT
    END             reduce using rule 125 (empty -> .)
    ELSE            reduce using rule 125 (empty -> .)
    RETURN          shift and go to state 47
    PEN_DOWN        shift and go to state 50
    PEN_UP          shift and go to state 51
    WHILE           shift and go to state 53
    IF              shift and go to state 54
    WRITE           shift and go to state 55
    READ            shift and go to state 56
    ID              shift and go to state 49
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11
    CENTER          shift and go to state 57
    FORWARD         shift and go to state 58
    RIGHT           shift and go to state 59
    LEFT            shift and go to state 60

    write                          shift and go to state 43
    stmnt                          shift and go to state 70
    empty                          shift and go to state 36
    returnf                        shift and go to state 37
    var_declaration_func           shift and go to state 38
    pen_func                       shift and go to state 39
    move_func                      shift and go to state 40
    while_stmnt                    shift and go to state 41
    if_stmnt                       shift and go to state 42
    read                           shift and go to state 44
    func_call                      shift and go to state 45
    var_assignation                shift and go to state 46
    var_type                       shift and go to state 48
    move_type                      shift and go to state 52

state 44

    (34) stmnt -> read . stmnt
    (26) stmnt -> . empty
    (27) stmnt -> . returnf stmnt
    (28) stmnt -> . var_declaration_func stmnt
    (29) stmnt -> . pen_func stmnt
    (30) stmnt -> . move_func stmnt
    (31) stmnt -> . while_stmnt stmnt
    (32) stmnt -> . if_stmnt stmnt
    (33) stmnt -> . write stmnt
    (34) stmnt -> . read stmnt
    (35) stmnt -> . func_call stmnt
    (36) stmnt -> . var_assignation stmnt
    (125) empty -> .
    (37) returnf -> . RETURN expression
    (38) var_declaration_func -> . var_type addvartype ID varid multiple_vars
    (121) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (122) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (116) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (108) while_stmnt -> . WHILE w1 con_expression w2 stmnt w3 END
    (101) if_stmnt -> . IF con_expression if1 stmnt if2 else_stmnt
    (100) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (92) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (85) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (40) var_assignation -> . ID e5 assign e6 expression q3
    (10) var_type -> . BOOL
    (11) var_type -> . WORD
    (12) var_type -> . NUMBER
    (117) move_type -> . CENTER
    (118) move_type -> . FORWARD
    (119) move_type -> . RIGHT
    (120) move_type -> . LEFT
    END             reduce using rule 125 (empty -> .)
    ELSE            reduce using rule 125 (empty -> .)
    RETURN          shift and go to state 47
    PEN_DOWN        shift and go to state 50
    PEN_UP          shift and go to state 51
    WHILE           shift and go to state 53
    IF              shift and go to state 54
    WRITE           shift and go to state 55
    READ            shift and go to state 56
    ID              shift and go to state 49
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11
    CENTER          shift and go to state 57
    FORWARD         shift and go to state 58
    RIGHT           shift and go to state 59
    LEFT            shift and go to state 60

    read                           shift and go to state 44
    stmnt                          shift and go to state 71
    empty                          shift and go to state 36
    returnf                        shift and go to state 37
    var_declaration_func           shift and go to state 38
    pen_func                       shift and go to state 39
    move_func                      shift and go to state 40
    while_stmnt                    shift and go to state 41
    if_stmnt                       shift and go to state 42
    write                          shift and go to state 43
    func_call                      shift and go to state 45
    var_assignation                shift and go to state 46
    var_type                       shift and go to state 48
    move_type                      shift and go to state 52

state 45

    (35) stmnt -> func_call . stmnt
    (26) stmnt -> . empty
    (27) stmnt -> . returnf stmnt
    (28) stmnt -> . var_declaration_func stmnt
    (29) stmnt -> . pen_func stmnt
    (30) stmnt -> . move_func stmnt
    (31) stmnt -> . while_stmnt stmnt
    (32) stmnt -> . if_stmnt stmnt
    (33) stmnt -> . write stmnt
    (34) stmnt -> . read stmnt
    (35) stmnt -> . func_call stmnt
    (36) stmnt -> . var_assignation stmnt
    (125) empty -> .
    (37) returnf -> . RETURN expression
    (38) var_declaration_func -> . var_type addvartype ID varid multiple_vars
    (121) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (122) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (116) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (108) while_stmnt -> . WHILE w1 con_expression w2 stmnt w3 END
    (101) if_stmnt -> . IF con_expression if1 stmnt if2 else_stmnt
    (100) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (92) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (85) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (40) var_assignation -> . ID e5 assign e6 expression q3
    (10) var_type -> . BOOL
    (11) var_type -> . WORD
    (12) var_type -> . NUMBER
    (117) move_type -> . CENTER
    (118) move_type -> . FORWARD
    (119) move_type -> . RIGHT
    (120) move_type -> . LEFT
    END             reduce using rule 125 (empty -> .)
    ELSE            reduce using rule 125 (empty -> .)
    RETURN          shift and go to state 47
    PEN_DOWN        shift and go to state 50
    PEN_UP          shift and go to state 51
    WHILE           shift and go to state 53
    IF              shift and go to state 54
    WRITE           shift and go to state 55
    READ            shift and go to state 56
    ID              shift and go to state 49
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11
    CENTER          shift and go to state 57
    FORWARD         shift and go to state 58
    RIGHT           shift and go to state 59
    LEFT            shift and go to state 60

    func_call                      shift and go to state 45
    stmnt                          shift and go to state 72
    empty                          shift and go to state 36
    returnf                        shift and go to state 37
    var_declaration_func           shift and go to state 38
    pen_func                       shift and go to state 39
    move_func                      shift and go to state 40
    while_stmnt                    shift and go to state 41
    if_stmnt                       shift and go to state 42
    write                          shift and go to state 43
    read                           shift and go to state 44
    var_assignation                shift and go to state 46
    var_type                       shift and go to state 48
    move_type                      shift and go to state 52

state 46

    (36) stmnt -> var_assignation . stmnt
    (26) stmnt -> . empty
    (27) stmnt -> . returnf stmnt
    (28) stmnt -> . var_declaration_func stmnt
    (29) stmnt -> . pen_func stmnt
    (30) stmnt -> . move_func stmnt
    (31) stmnt -> . while_stmnt stmnt
    (32) stmnt -> . if_stmnt stmnt
    (33) stmnt -> . write stmnt
    (34) stmnt -> . read stmnt
    (35) stmnt -> . func_call stmnt
    (36) stmnt -> . var_assignation stmnt
    (125) empty -> .
    (37) returnf -> . RETURN expression
    (38) var_declaration_func -> . var_type addvartype ID varid multiple_vars
    (121) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (122) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (116) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (108) while_stmnt -> . WHILE w1 con_expression w2 stmnt w3 END
    (101) if_stmnt -> . IF con_expression if1 stmnt if2 else_stmnt
    (100) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (92) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (85) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (40) var_assignation -> . ID e5 assign e6 expression q3
    (10) var_type -> . BOOL
    (11) var_type -> . WORD
    (12) var_type -> . NUMBER
    (117) move_type -> . CENTER
    (118) move_type -> . FORWARD
    (119) move_type -> . RIGHT
    (120) move_type -> . LEFT
    END             reduce using rule 125 (empty -> .)
    ELSE            reduce using rule 125 (empty -> .)
    RETURN          shift and go to state 47
    PEN_DOWN        shift and go to state 50
    PEN_UP          shift and go to state 51
    WHILE           shift and go to state 53
    IF              shift and go to state 54
    WRITE           shift and go to state 55
    READ            shift and go to state 56
    ID              shift and go to state 49
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11
    CENTER          shift and go to state 57
    FORWARD         shift and go to state 58
    RIGHT           shift and go to state 59
    LEFT            shift and go to state 60

    var_assignation                shift and go to state 46
    stmnt                          shift and go to state 73
    empty                          shift and go to state 36
    returnf                        shift and go to state 37
    var_declaration_func           shift and go to state 38
    pen_func                       shift and go to state 39
    move_func                      shift and go to state 40
    while_stmnt                    shift and go to state 41
    if_stmnt                       shift and go to state 42
    write                          shift and go to state 43
    read                           shift and go to state 44
    func_call                      shift and go to state 45
    var_type                       shift and go to state 48
    move_type                      shift and go to state 52

state 47

    (37) returnf -> RETURN . expression
    (54) expression -> . func_call q4
    (55) expression -> . exp q4
    (56) expression -> . exp rel_op exp q4
    (85) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (58) exp -> . termino q1
    (59) exp -> . termino term_op e3 termino q1
    (64) termino -> . factor q2
    (65) termino -> . factor fact_op e2 factor q2
    (71) factor -> . expression
    (72) factor -> . var_cte e1
    (73) factor -> . open_pth expression close_pth
    (44) var_cte -> . func_call
    (45) var_cte -> . cte_bool bvarcte
    (46) var_cte -> . CTE_STR svarcte
    (47) var_cte -> . CTE_NUM nvarcte
    (48) var_cte -> . variable
    (75) open_pth -> . OPEN_PTH
    (52) cte_bool -> . FALSE
    (53) cte_bool -> . TRUE
    (93) variable -> . ID array
    ID              shift and go to state 77
    CTE_STR         shift and go to state 84
    CTE_NUM         shift and go to state 85
    OPEN_PTH        shift and go to state 78
    FALSE           shift and go to state 87
    TRUE            shift and go to state 88

    expression                     shift and go to state 74
    func_call                      shift and go to state 75
    exp                            shift and go to state 76
    termino                        shift and go to state 79
    factor                         shift and go to state 80
    var_cte                        shift and go to state 81
    open_pth                       shift and go to state 82
    cte_bool                       shift and go to state 83
    variable                       shift and go to state 86

state 48

    (38) var_declaration_func -> var_type . addvartype ID varid multiple_vars
    (6) addvartype -> .
    ID              reduce using rule 6 (addvartype -> .)

    addvartype                     shift and go to state 89

state 49

    (85) func_call -> ID . OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (40) var_assignation -> ID . e5 assign e6 expression q3
    (41) e5 -> .
    OPEN_PTH        shift and go to state 90
    ASSIGN          reduce using rule 41 (e5 -> .)

    e5                             shift and go to state 91

state 50

    (121) pen_func -> PEN_DOWN . OPEN_PTH CLOSE_PTH
    OPEN_PTH        shift and go to state 92


state 51

    (122) pen_func -> PEN_UP . OPEN_PTH CLOSE_PTH
    OPEN_PTH        shift and go to state 93


state 52

    (116) move_func -> move_type . OPEN_PTH func_call_param CLOSE_PTH
    OPEN_PTH        shift and go to state 94


state 53

    (108) while_stmnt -> WHILE . w1 con_expression w2 stmnt w3 END
    (109) w1 -> .
    ID              reduce using rule 109 (w1 -> .)
    CTE_STR         reduce using rule 109 (w1 -> .)
    CTE_NUM         reduce using rule 109 (w1 -> .)
    OPEN_PTH        reduce using rule 109 (w1 -> .)
    FALSE           reduce using rule 109 (w1 -> .)
    TRUE            reduce using rule 109 (w1 -> .)

    w1                             shift and go to state 95

state 54

    (101) if_stmnt -> IF . con_expression if1 stmnt if2 else_stmnt
    (112) con_expression -> . expression q5
    (113) con_expression -> . expression q5 log_op e7 expression q5
    (54) expression -> . func_call q4
    (55) expression -> . exp q4
    (56) expression -> . exp rel_op exp q4
    (85) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (58) exp -> . termino q1
    (59) exp -> . termino term_op e3 termino q1
    (64) termino -> . factor q2
    (65) termino -> . factor fact_op e2 factor q2
    (71) factor -> . expression
    (72) factor -> . var_cte e1
    (73) factor -> . open_pth expression close_pth
    (44) var_cte -> . func_call
    (45) var_cte -> . cte_bool bvarcte
    (46) var_cte -> . CTE_STR svarcte
    (47) var_cte -> . CTE_NUM nvarcte
    (48) var_cte -> . variable
    (75) open_pth -> . OPEN_PTH
    (52) cte_bool -> . FALSE
    (53) cte_bool -> . TRUE
    (93) variable -> . ID array
    ID              shift and go to state 77
    CTE_STR         shift and go to state 84
    CTE_NUM         shift and go to state 85
    OPEN_PTH        shift and go to state 78
    FALSE           shift and go to state 87
    TRUE            shift and go to state 88

    con_expression                 shift and go to state 96
    expression                     shift and go to state 97
    func_call                      shift and go to state 75
    exp                            shift and go to state 76
    termino                        shift and go to state 79
    factor                         shift and go to state 80
    var_cte                        shift and go to state 81
    open_pth                       shift and go to state 82
    cte_bool                       shift and go to state 83
    variable                       shift and go to state 86

state 55

    (100) write -> WRITE . OPEN_PTH expression CLOSE_PTH
    OPEN_PTH        shift and go to state 98


state 56

    (92) read -> READ . OPEN_PTH variable multiple_vars CLOSE_PTH
    OPEN_PTH        shift and go to state 99


state 57

    (117) move_type -> CENTER .
    OPEN_PTH        reduce using rule 117 (move_type -> CENTER .)


state 58

    (118) move_type -> FORWARD .
    OPEN_PTH        reduce using rule 118 (move_type -> FORWARD .)


state 59

    (119) move_type -> RIGHT .
    OPEN_PTH        reduce using rule 119 (move_type -> RIGHT .)


state 60

    (120) move_type -> LEFT .
    OPEN_PTH        reduce using rule 120 (move_type -> LEFT .)


state 61

    (14) func_declaration -> FUNC resetvars func_type ID fd1 . OPEN_PTH parameter CLOSE_PTH stmnt vd1 END
    OPEN_PTH        shift and go to state 100


state 62

    (9) multiple_var -> COMMA ID varglobal . multiple_var
    (8) multiple_var -> . empty
    (9) multiple_var -> . COMMA ID varglobal multiple_var
    (125) empty -> .
    COMMA           shift and go to state 30
    BOOL            reduce using rule 125 (empty -> .)
    WORD            reduce using rule 125 (empty -> .)
    NUMBER          reduce using rule 125 (empty -> .)
    FUNC            reduce using rule 125 (empty -> .)
    MAIN            reduce using rule 125 (empty -> .)

    multiple_var                   shift and go to state 101
    empty                          shift and go to state 29

state 63

    (124) main -> MAIN fd1 resetvars stmnt vd1 . END
    END             shift and go to state 102


state 64

    (27) stmnt -> returnf stmnt .
    END             reduce using rule 27 (stmnt -> returnf stmnt .)
    ELSE            reduce using rule 27 (stmnt -> returnf stmnt .)


state 65

    (28) stmnt -> var_declaration_func stmnt .
    END             reduce using rule 28 (stmnt -> var_declaration_func stmnt .)
    ELSE            reduce using rule 28 (stmnt -> var_declaration_func stmnt .)


state 66

    (29) stmnt -> pen_func stmnt .
    END             reduce using rule 29 (stmnt -> pen_func stmnt .)
    ELSE            reduce using rule 29 (stmnt -> pen_func stmnt .)


state 67

    (30) stmnt -> move_func stmnt .
    END             reduce using rule 30 (stmnt -> move_func stmnt .)
    ELSE            reduce using rule 30 (stmnt -> move_func stmnt .)


state 68

    (31) stmnt -> while_stmnt stmnt .
    END             reduce using rule 31 (stmnt -> while_stmnt stmnt .)
    ELSE            reduce using rule 31 (stmnt -> while_stmnt stmnt .)


state 69

    (32) stmnt -> if_stmnt stmnt .
    END             reduce using rule 32 (stmnt -> if_stmnt stmnt .)
    ELSE            reduce using rule 32 (stmnt -> if_stmnt stmnt .)


state 70

    (33) stmnt -> write stmnt .
    END             reduce using rule 33 (stmnt -> write stmnt .)
    ELSE            reduce using rule 33 (stmnt -> write stmnt .)


state 71

    (34) stmnt -> read stmnt .
    END             reduce using rule 34 (stmnt -> read stmnt .)
    ELSE            reduce using rule 34 (stmnt -> read stmnt .)


state 72

    (35) stmnt -> func_call stmnt .
    END             reduce using rule 35 (stmnt -> func_call stmnt .)
    ELSE            reduce using rule 35 (stmnt -> func_call stmnt .)


state 73

    (36) stmnt -> var_assignation stmnt .
    END             reduce using rule 36 (stmnt -> var_assignation stmnt .)
    ELSE            reduce using rule 36 (stmnt -> var_assignation stmnt .)


state 74

    (37) returnf -> RETURN expression .
    (71) factor -> expression .
  ! reduce/reduce conflict for RETURN resolved using rule 37 (returnf -> RETURN expression .)
  ! reduce/reduce conflict for PEN_DOWN resolved using rule 37 (returnf -> RETURN expression .)
  ! reduce/reduce conflict for PEN_UP resolved using rule 37 (returnf -> RETURN expression .)
  ! reduce/reduce conflict for WHILE resolved using rule 37 (returnf -> RETURN expression .)
  ! reduce/reduce conflict for IF resolved using rule 37 (returnf -> RETURN expression .)
  ! reduce/reduce conflict for WRITE resolved using rule 37 (returnf -> RETURN expression .)
  ! reduce/reduce conflict for READ resolved using rule 37 (returnf -> RETURN expression .)
  ! reduce/reduce conflict for ID resolved using rule 37 (returnf -> RETURN expression .)
  ! reduce/reduce conflict for BOOL resolved using rule 37 (returnf -> RETURN expression .)
  ! reduce/reduce conflict for WORD resolved using rule 37 (returnf -> RETURN expression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 37 (returnf -> RETURN expression .)
  ! reduce/reduce conflict for CENTER resolved using rule 37 (returnf -> RETURN expression .)
  ! reduce/reduce conflict for FORWARD resolved using rule 37 (returnf -> RETURN expression .)
  ! reduce/reduce conflict for RIGHT resolved using rule 37 (returnf -> RETURN expression .)
  ! reduce/reduce conflict for LEFT resolved using rule 37 (returnf -> RETURN expression .)
  ! reduce/reduce conflict for END resolved using rule 37 (returnf -> RETURN expression .)
  ! reduce/reduce conflict for ELSE resolved using rule 37 (returnf -> RETURN expression .)
    RETURN          reduce using rule 37 (returnf -> RETURN expression .)
    PEN_DOWN        reduce using rule 37 (returnf -> RETURN expression .)
    PEN_UP          reduce using rule 37 (returnf -> RETURN expression .)
    WHILE           reduce using rule 37 (returnf -> RETURN expression .)
    IF              reduce using rule 37 (returnf -> RETURN expression .)
    WRITE           reduce using rule 37 (returnf -> RETURN expression .)
    READ            reduce using rule 37 (returnf -> RETURN expression .)
    ID              reduce using rule 37 (returnf -> RETURN expression .)
    BOOL            reduce using rule 37 (returnf -> RETURN expression .)
    WORD            reduce using rule 37 (returnf -> RETURN expression .)
    NUMBER          reduce using rule 37 (returnf -> RETURN expression .)
    CENTER          reduce using rule 37 (returnf -> RETURN expression .)
    FORWARD         reduce using rule 37 (returnf -> RETURN expression .)
    RIGHT           reduce using rule 37 (returnf -> RETURN expression .)
    LEFT            reduce using rule 37 (returnf -> RETURN expression .)
    END             reduce using rule 37 (returnf -> RETURN expression .)
    ELSE            reduce using rule 37 (returnf -> RETURN expression .)
    DIV             reduce using rule 71 (factor -> expression .)
    MULT            reduce using rule 71 (factor -> expression .)
    SUB             reduce using rule 71 (factor -> expression .)
    SUM             reduce using rule 71 (factor -> expression .)
    EQUAL_TO        reduce using rule 71 (factor -> expression .)
    MORE_OR_EQ_THAN reduce using rule 71 (factor -> expression .)
    LESS_OR_EQ_THAN reduce using rule 71 (factor -> expression .)
    DIFFERENT_TO    reduce using rule 71 (factor -> expression .)
    MORE_THAN       reduce using rule 71 (factor -> expression .)
    LESS_THAN       reduce using rule 71 (factor -> expression .)


state 75

    (54) expression -> func_call . q4
    (44) var_cte -> func_call .
    (57) q4 -> .
  ! reduce/reduce conflict for RETURN resolved using rule 44 (var_cte -> func_call .)
  ! reduce/reduce conflict for PEN_DOWN resolved using rule 44 (var_cte -> func_call .)
  ! reduce/reduce conflict for PEN_UP resolved using rule 44 (var_cte -> func_call .)
  ! reduce/reduce conflict for WHILE resolved using rule 44 (var_cte -> func_call .)
  ! reduce/reduce conflict for IF resolved using rule 44 (var_cte -> func_call .)
  ! reduce/reduce conflict for WRITE resolved using rule 44 (var_cte -> func_call .)
  ! reduce/reduce conflict for READ resolved using rule 44 (var_cte -> func_call .)
  ! reduce/reduce conflict for ID resolved using rule 44 (var_cte -> func_call .)
  ! reduce/reduce conflict for BOOL resolved using rule 44 (var_cte -> func_call .)
  ! reduce/reduce conflict for WORD resolved using rule 44 (var_cte -> func_call .)
  ! reduce/reduce conflict for NUMBER resolved using rule 44 (var_cte -> func_call .)
  ! reduce/reduce conflict for CENTER resolved using rule 44 (var_cte -> func_call .)
  ! reduce/reduce conflict for FORWARD resolved using rule 44 (var_cte -> func_call .)
  ! reduce/reduce conflict for RIGHT resolved using rule 44 (var_cte -> func_call .)
  ! reduce/reduce conflict for LEFT resolved using rule 44 (var_cte -> func_call .)
  ! reduce/reduce conflict for END resolved using rule 44 (var_cte -> func_call .)
  ! reduce/reduce conflict for ELSE resolved using rule 44 (var_cte -> func_call .)
  ! reduce/reduce conflict for DIV resolved using rule 44 (var_cte -> func_call .)
  ! reduce/reduce conflict for MULT resolved using rule 44 (var_cte -> func_call .)
  ! reduce/reduce conflict for SUB resolved using rule 44 (var_cte -> func_call .)
  ! reduce/reduce conflict for SUM resolved using rule 44 (var_cte -> func_call .)
  ! reduce/reduce conflict for EQUAL_TO resolved using rule 44 (var_cte -> func_call .)
  ! reduce/reduce conflict for MORE_OR_EQ_THAN resolved using rule 44 (var_cte -> func_call .)
  ! reduce/reduce conflict for LESS_OR_EQ_THAN resolved using rule 44 (var_cte -> func_call .)
  ! reduce/reduce conflict for DIFFERENT_TO resolved using rule 44 (var_cte -> func_call .)
  ! reduce/reduce conflict for MORE_THAN resolved using rule 44 (var_cte -> func_call .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 44 (var_cte -> func_call .)
  ! reduce/reduce conflict for OR resolved using rule 44 (var_cte -> func_call .)
  ! reduce/reduce conflict for AND resolved using rule 44 (var_cte -> func_call .)
  ! reduce/reduce conflict for CLOSE_PTH resolved using rule 44 (var_cte -> func_call .)
  ! reduce/reduce conflict for COMMA resolved using rule 44 (var_cte -> func_call .)
  ! reduce/reduce conflict for CLOSE_SQR resolved using rule 44 (var_cte -> func_call .)
    RETURN          reduce using rule 44 (var_cte -> func_call .)
    PEN_DOWN        reduce using rule 44 (var_cte -> func_call .)
    PEN_UP          reduce using rule 44 (var_cte -> func_call .)
    WHILE           reduce using rule 44 (var_cte -> func_call .)
    IF              reduce using rule 44 (var_cte -> func_call .)
    WRITE           reduce using rule 44 (var_cte -> func_call .)
    READ            reduce using rule 44 (var_cte -> func_call .)
    ID              reduce using rule 44 (var_cte -> func_call .)
    BOOL            reduce using rule 44 (var_cte -> func_call .)
    WORD            reduce using rule 44 (var_cte -> func_call .)
    NUMBER          reduce using rule 44 (var_cte -> func_call .)
    CENTER          reduce using rule 44 (var_cte -> func_call .)
    FORWARD         reduce using rule 44 (var_cte -> func_call .)
    RIGHT           reduce using rule 44 (var_cte -> func_call .)
    LEFT            reduce using rule 44 (var_cte -> func_call .)
    END             reduce using rule 44 (var_cte -> func_call .)
    ELSE            reduce using rule 44 (var_cte -> func_call .)
    DIV             reduce using rule 44 (var_cte -> func_call .)
    MULT            reduce using rule 44 (var_cte -> func_call .)
    SUB             reduce using rule 44 (var_cte -> func_call .)
    SUM             reduce using rule 44 (var_cte -> func_call .)
    EQUAL_TO        reduce using rule 44 (var_cte -> func_call .)
    MORE_OR_EQ_THAN reduce using rule 44 (var_cte -> func_call .)
    LESS_OR_EQ_THAN reduce using rule 44 (var_cte -> func_call .)
    DIFFERENT_TO    reduce using rule 44 (var_cte -> func_call .)
    MORE_THAN       reduce using rule 44 (var_cte -> func_call .)
    LESS_THAN       reduce using rule 44 (var_cte -> func_call .)
    OR              reduce using rule 44 (var_cte -> func_call .)
    AND             reduce using rule 44 (var_cte -> func_call .)
    CLOSE_PTH       reduce using rule 44 (var_cte -> func_call .)
    COMMA           reduce using rule 44 (var_cte -> func_call .)
    CLOSE_SQR       reduce using rule 44 (var_cte -> func_call .)

    q4                             shift and go to state 103

state 76

    (55) expression -> exp . q4
    (56) expression -> exp . rel_op exp q4
    (57) q4 -> .
    (79) rel_op -> . EQUAL_TO
    (80) rel_op -> . MORE_OR_EQ_THAN
    (81) rel_op -> . LESS_OR_EQ_THAN
    (82) rel_op -> . DIFFERENT_TO
    (83) rel_op -> . MORE_THAN
    (84) rel_op -> . LESS_THAN
  ! shift/reduce conflict for EQUAL_TO resolved as shift
  ! shift/reduce conflict for MORE_OR_EQ_THAN resolved as shift
  ! shift/reduce conflict for LESS_OR_EQ_THAN resolved as shift
  ! shift/reduce conflict for DIFFERENT_TO resolved as shift
  ! shift/reduce conflict for MORE_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
    RETURN          reduce using rule 57 (q4 -> .)
    PEN_DOWN        reduce using rule 57 (q4 -> .)
    PEN_UP          reduce using rule 57 (q4 -> .)
    WHILE           reduce using rule 57 (q4 -> .)
    IF              reduce using rule 57 (q4 -> .)
    WRITE           reduce using rule 57 (q4 -> .)
    READ            reduce using rule 57 (q4 -> .)
    ID              reduce using rule 57 (q4 -> .)
    BOOL            reduce using rule 57 (q4 -> .)
    WORD            reduce using rule 57 (q4 -> .)
    NUMBER          reduce using rule 57 (q4 -> .)
    CENTER          reduce using rule 57 (q4 -> .)
    FORWARD         reduce using rule 57 (q4 -> .)
    RIGHT           reduce using rule 57 (q4 -> .)
    LEFT            reduce using rule 57 (q4 -> .)
    END             reduce using rule 57 (q4 -> .)
    ELSE            reduce using rule 57 (q4 -> .)
    DIV             reduce using rule 57 (q4 -> .)
    MULT            reduce using rule 57 (q4 -> .)
    SUB             reduce using rule 57 (q4 -> .)
    SUM             reduce using rule 57 (q4 -> .)
    OR              reduce using rule 57 (q4 -> .)
    AND             reduce using rule 57 (q4 -> .)
    CLOSE_PTH       reduce using rule 57 (q4 -> .)
    COMMA           reduce using rule 57 (q4 -> .)
    CLOSE_SQR       reduce using rule 57 (q4 -> .)
    EQUAL_TO        shift and go to state 106
    MORE_OR_EQ_THAN shift and go to state 107
    LESS_OR_EQ_THAN shift and go to state 108
    DIFFERENT_TO    shift and go to state 109
    MORE_THAN       shift and go to state 110
    LESS_THAN       shift and go to state 111

    q4                             shift and go to state 104
    rel_op                         shift and go to state 105

state 77

    (85) func_call -> ID . OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (93) variable -> ID . array
    (94) array -> . empty
    (95) array -> . OPEN_SQR expression CLOSE_SQR matrix
    (125) empty -> .
    OPEN_PTH        shift and go to state 90
    OPEN_SQR        shift and go to state 114
    RETURN          reduce using rule 125 (empty -> .)
    PEN_DOWN        reduce using rule 125 (empty -> .)
    PEN_UP          reduce using rule 125 (empty -> .)
    WHILE           reduce using rule 125 (empty -> .)
    IF              reduce using rule 125 (empty -> .)
    WRITE           reduce using rule 125 (empty -> .)
    READ            reduce using rule 125 (empty -> .)
    ID              reduce using rule 125 (empty -> .)
    BOOL            reduce using rule 125 (empty -> .)
    WORD            reduce using rule 125 (empty -> .)
    NUMBER          reduce using rule 125 (empty -> .)
    CENTER          reduce using rule 125 (empty -> .)
    FORWARD         reduce using rule 125 (empty -> .)
    RIGHT           reduce using rule 125 (empty -> .)
    LEFT            reduce using rule 125 (empty -> .)
    END             reduce using rule 125 (empty -> .)
    ELSE            reduce using rule 125 (empty -> .)
    DIV             reduce using rule 125 (empty -> .)
    MULT            reduce using rule 125 (empty -> .)
    SUB             reduce using rule 125 (empty -> .)
    SUM             reduce using rule 125 (empty -> .)
    EQUAL_TO        reduce using rule 125 (empty -> .)
    MORE_OR_EQ_THAN reduce using rule 125 (empty -> .)
    LESS_OR_EQ_THAN reduce using rule 125 (empty -> .)
    DIFFERENT_TO    reduce using rule 125 (empty -> .)
    MORE_THAN       reduce using rule 125 (empty -> .)
    LESS_THAN       reduce using rule 125 (empty -> .)
    OR              reduce using rule 125 (empty -> .)
    AND             reduce using rule 125 (empty -> .)
    CLOSE_PTH       reduce using rule 125 (empty -> .)
    COMMA           reduce using rule 125 (empty -> .)
    CLOSE_SQR       reduce using rule 125 (empty -> .)

    array                          shift and go to state 112
    empty                          shift and go to state 113

state 78

    (75) open_pth -> OPEN_PTH .
    ID              reduce using rule 75 (open_pth -> OPEN_PTH .)
    CTE_STR         reduce using rule 75 (open_pth -> OPEN_PTH .)
    CTE_NUM         reduce using rule 75 (open_pth -> OPEN_PTH .)
    OPEN_PTH        reduce using rule 75 (open_pth -> OPEN_PTH .)
    FALSE           reduce using rule 75 (open_pth -> OPEN_PTH .)
    TRUE            reduce using rule 75 (open_pth -> OPEN_PTH .)


state 79

    (58) exp -> termino . q1
    (59) exp -> termino . term_op e3 termino q1
    (66) q1 -> .
    (62) term_op -> . SUB
    (63) term_op -> . SUM
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for SUM resolved as shift
    RETURN          reduce using rule 66 (q1 -> .)
    PEN_DOWN        reduce using rule 66 (q1 -> .)
    PEN_UP          reduce using rule 66 (q1 -> .)
    WHILE           reduce using rule 66 (q1 -> .)
    IF              reduce using rule 66 (q1 -> .)
    WRITE           reduce using rule 66 (q1 -> .)
    READ            reduce using rule 66 (q1 -> .)
    ID              reduce using rule 66 (q1 -> .)
    BOOL            reduce using rule 66 (q1 -> .)
    WORD            reduce using rule 66 (q1 -> .)
    NUMBER          reduce using rule 66 (q1 -> .)
    CENTER          reduce using rule 66 (q1 -> .)
    FORWARD         reduce using rule 66 (q1 -> .)
    RIGHT           reduce using rule 66 (q1 -> .)
    LEFT            reduce using rule 66 (q1 -> .)
    END             reduce using rule 66 (q1 -> .)
    ELSE            reduce using rule 66 (q1 -> .)
    DIV             reduce using rule 66 (q1 -> .)
    MULT            reduce using rule 66 (q1 -> .)
    EQUAL_TO        reduce using rule 66 (q1 -> .)
    MORE_OR_EQ_THAN reduce using rule 66 (q1 -> .)
    LESS_OR_EQ_THAN reduce using rule 66 (q1 -> .)
    DIFFERENT_TO    reduce using rule 66 (q1 -> .)
    MORE_THAN       reduce using rule 66 (q1 -> .)
    LESS_THAN       reduce using rule 66 (q1 -> .)
    OR              reduce using rule 66 (q1 -> .)
    AND             reduce using rule 66 (q1 -> .)
    CLOSE_PTH       reduce using rule 66 (q1 -> .)
    COMMA           reduce using rule 66 (q1 -> .)
    CLOSE_SQR       reduce using rule 66 (q1 -> .)
    SUB             shift and go to state 117
    SUM             shift and go to state 118

    q1                             shift and go to state 115
    term_op                        shift and go to state 116

state 80

    (64) termino -> factor . q2
    (65) termino -> factor . fact_op e2 factor q2
    (61) q2 -> .
    (69) fact_op -> . DIV
    (70) fact_op -> . MULT
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
    RETURN          reduce using rule 61 (q2 -> .)
    PEN_DOWN        reduce using rule 61 (q2 -> .)
    PEN_UP          reduce using rule 61 (q2 -> .)
    WHILE           reduce using rule 61 (q2 -> .)
    IF              reduce using rule 61 (q2 -> .)
    WRITE           reduce using rule 61 (q2 -> .)
    READ            reduce using rule 61 (q2 -> .)
    ID              reduce using rule 61 (q2 -> .)
    BOOL            reduce using rule 61 (q2 -> .)
    WORD            reduce using rule 61 (q2 -> .)
    NUMBER          reduce using rule 61 (q2 -> .)
    CENTER          reduce using rule 61 (q2 -> .)
    FORWARD         reduce using rule 61 (q2 -> .)
    RIGHT           reduce using rule 61 (q2 -> .)
    LEFT            reduce using rule 61 (q2 -> .)
    END             reduce using rule 61 (q2 -> .)
    ELSE            reduce using rule 61 (q2 -> .)
    SUB             reduce using rule 61 (q2 -> .)
    SUM             reduce using rule 61 (q2 -> .)
    EQUAL_TO        reduce using rule 61 (q2 -> .)
    MORE_OR_EQ_THAN reduce using rule 61 (q2 -> .)
    LESS_OR_EQ_THAN reduce using rule 61 (q2 -> .)
    DIFFERENT_TO    reduce using rule 61 (q2 -> .)
    MORE_THAN       reduce using rule 61 (q2 -> .)
    LESS_THAN       reduce using rule 61 (q2 -> .)
    OR              reduce using rule 61 (q2 -> .)
    AND             reduce using rule 61 (q2 -> .)
    CLOSE_PTH       reduce using rule 61 (q2 -> .)
    COMMA           reduce using rule 61 (q2 -> .)
    CLOSE_SQR       reduce using rule 61 (q2 -> .)
    DIV             shift and go to state 121
    MULT            shift and go to state 122

    q2                             shift and go to state 119
    fact_op                        shift and go to state 120

state 81

    (72) factor -> var_cte . e1
    (74) e1 -> .
    RETURN          reduce using rule 74 (e1 -> .)
    PEN_DOWN        reduce using rule 74 (e1 -> .)
    PEN_UP          reduce using rule 74 (e1 -> .)
    WHILE           reduce using rule 74 (e1 -> .)
    IF              reduce using rule 74 (e1 -> .)
    WRITE           reduce using rule 74 (e1 -> .)
    READ            reduce using rule 74 (e1 -> .)
    ID              reduce using rule 74 (e1 -> .)
    BOOL            reduce using rule 74 (e1 -> .)
    WORD            reduce using rule 74 (e1 -> .)
    NUMBER          reduce using rule 74 (e1 -> .)
    CENTER          reduce using rule 74 (e1 -> .)
    FORWARD         reduce using rule 74 (e1 -> .)
    RIGHT           reduce using rule 74 (e1 -> .)
    LEFT            reduce using rule 74 (e1 -> .)
    END             reduce using rule 74 (e1 -> .)
    ELSE            reduce using rule 74 (e1 -> .)
    DIV             reduce using rule 74 (e1 -> .)
    MULT            reduce using rule 74 (e1 -> .)
    SUB             reduce using rule 74 (e1 -> .)
    SUM             reduce using rule 74 (e1 -> .)
    EQUAL_TO        reduce using rule 74 (e1 -> .)
    MORE_OR_EQ_THAN reduce using rule 74 (e1 -> .)
    LESS_OR_EQ_THAN reduce using rule 74 (e1 -> .)
    DIFFERENT_TO    reduce using rule 74 (e1 -> .)
    MORE_THAN       reduce using rule 74 (e1 -> .)
    LESS_THAN       reduce using rule 74 (e1 -> .)
    OR              reduce using rule 74 (e1 -> .)
    AND             reduce using rule 74 (e1 -> .)
    CLOSE_PTH       reduce using rule 74 (e1 -> .)
    COMMA           reduce using rule 74 (e1 -> .)
    CLOSE_SQR       reduce using rule 74 (e1 -> .)

    e1                             shift and go to state 123

state 82

    (73) factor -> open_pth . expression close_pth
    (54) expression -> . func_call q4
    (55) expression -> . exp q4
    (56) expression -> . exp rel_op exp q4
    (85) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (58) exp -> . termino q1
    (59) exp -> . termino term_op e3 termino q1
    (64) termino -> . factor q2
    (65) termino -> . factor fact_op e2 factor q2
    (71) factor -> . expression
    (72) factor -> . var_cte e1
    (73) factor -> . open_pth expression close_pth
    (44) var_cte -> . func_call
    (45) var_cte -> . cte_bool bvarcte
    (46) var_cte -> . CTE_STR svarcte
    (47) var_cte -> . CTE_NUM nvarcte
    (48) var_cte -> . variable
    (75) open_pth -> . OPEN_PTH
    (52) cte_bool -> . FALSE
    (53) cte_bool -> . TRUE
    (93) variable -> . ID array
    ID              shift and go to state 77
    CTE_STR         shift and go to state 84
    CTE_NUM         shift and go to state 85
    OPEN_PTH        shift and go to state 78
    FALSE           shift and go to state 87
    TRUE            shift and go to state 88

    open_pth                       shift and go to state 82
    expression                     shift and go to state 124
    func_call                      shift and go to state 75
    exp                            shift and go to state 76
    termino                        shift and go to state 79
    factor                         shift and go to state 80
    var_cte                        shift and go to state 81
    cte_bool                       shift and go to state 83
    variable                       shift and go to state 86

state 83

    (45) var_cte -> cte_bool . bvarcte
    (51) bvarcte -> .
    RETURN          reduce using rule 51 (bvarcte -> .)
    PEN_DOWN        reduce using rule 51 (bvarcte -> .)
    PEN_UP          reduce using rule 51 (bvarcte -> .)
    WHILE           reduce using rule 51 (bvarcte -> .)
    IF              reduce using rule 51 (bvarcte -> .)
    WRITE           reduce using rule 51 (bvarcte -> .)
    READ            reduce using rule 51 (bvarcte -> .)
    ID              reduce using rule 51 (bvarcte -> .)
    BOOL            reduce using rule 51 (bvarcte -> .)
    WORD            reduce using rule 51 (bvarcte -> .)
    NUMBER          reduce using rule 51 (bvarcte -> .)
    CENTER          reduce using rule 51 (bvarcte -> .)
    FORWARD         reduce using rule 51 (bvarcte -> .)
    RIGHT           reduce using rule 51 (bvarcte -> .)
    LEFT            reduce using rule 51 (bvarcte -> .)
    END             reduce using rule 51 (bvarcte -> .)
    ELSE            reduce using rule 51 (bvarcte -> .)
    DIV             reduce using rule 51 (bvarcte -> .)
    MULT            reduce using rule 51 (bvarcte -> .)
    SUB             reduce using rule 51 (bvarcte -> .)
    SUM             reduce using rule 51 (bvarcte -> .)
    EQUAL_TO        reduce using rule 51 (bvarcte -> .)
    MORE_OR_EQ_THAN reduce using rule 51 (bvarcte -> .)
    LESS_OR_EQ_THAN reduce using rule 51 (bvarcte -> .)
    DIFFERENT_TO    reduce using rule 51 (bvarcte -> .)
    MORE_THAN       reduce using rule 51 (bvarcte -> .)
    LESS_THAN       reduce using rule 51 (bvarcte -> .)
    OR              reduce using rule 51 (bvarcte -> .)
    AND             reduce using rule 51 (bvarcte -> .)
    CLOSE_PTH       reduce using rule 51 (bvarcte -> .)
    COMMA           reduce using rule 51 (bvarcte -> .)
    CLOSE_SQR       reduce using rule 51 (bvarcte -> .)

    bvarcte                        shift and go to state 125

state 84

    (46) var_cte -> CTE_STR . svarcte
    (50) svarcte -> .
    RETURN          reduce using rule 50 (svarcte -> .)
    PEN_DOWN        reduce using rule 50 (svarcte -> .)
    PEN_UP          reduce using rule 50 (svarcte -> .)
    WHILE           reduce using rule 50 (svarcte -> .)
    IF              reduce using rule 50 (svarcte -> .)
    WRITE           reduce using rule 50 (svarcte -> .)
    READ            reduce using rule 50 (svarcte -> .)
    ID              reduce using rule 50 (svarcte -> .)
    BOOL            reduce using rule 50 (svarcte -> .)
    WORD            reduce using rule 50 (svarcte -> .)
    NUMBER          reduce using rule 50 (svarcte -> .)
    CENTER          reduce using rule 50 (svarcte -> .)
    FORWARD         reduce using rule 50 (svarcte -> .)
    RIGHT           reduce using rule 50 (svarcte -> .)
    LEFT            reduce using rule 50 (svarcte -> .)
    END             reduce using rule 50 (svarcte -> .)
    ELSE            reduce using rule 50 (svarcte -> .)
    DIV             reduce using rule 50 (svarcte -> .)
    MULT            reduce using rule 50 (svarcte -> .)
    SUB             reduce using rule 50 (svarcte -> .)
    SUM             reduce using rule 50 (svarcte -> .)
    EQUAL_TO        reduce using rule 50 (svarcte -> .)
    MORE_OR_EQ_THAN reduce using rule 50 (svarcte -> .)
    LESS_OR_EQ_THAN reduce using rule 50 (svarcte -> .)
    DIFFERENT_TO    reduce using rule 50 (svarcte -> .)
    MORE_THAN       reduce using rule 50 (svarcte -> .)
    LESS_THAN       reduce using rule 50 (svarcte -> .)
    OR              reduce using rule 50 (svarcte -> .)
    AND             reduce using rule 50 (svarcte -> .)
    CLOSE_PTH       reduce using rule 50 (svarcte -> .)
    COMMA           reduce using rule 50 (svarcte -> .)
    CLOSE_SQR       reduce using rule 50 (svarcte -> .)

    svarcte                        shift and go to state 126

state 85

    (47) var_cte -> CTE_NUM . nvarcte
    (49) nvarcte -> .
    RETURN          reduce using rule 49 (nvarcte -> .)
    PEN_DOWN        reduce using rule 49 (nvarcte -> .)
    PEN_UP          reduce using rule 49 (nvarcte -> .)
    WHILE           reduce using rule 49 (nvarcte -> .)
    IF              reduce using rule 49 (nvarcte -> .)
    WRITE           reduce using rule 49 (nvarcte -> .)
    READ            reduce using rule 49 (nvarcte -> .)
    ID              reduce using rule 49 (nvarcte -> .)
    BOOL            reduce using rule 49 (nvarcte -> .)
    WORD            reduce using rule 49 (nvarcte -> .)
    NUMBER          reduce using rule 49 (nvarcte -> .)
    CENTER          reduce using rule 49 (nvarcte -> .)
    FORWARD         reduce using rule 49 (nvarcte -> .)
    RIGHT           reduce using rule 49 (nvarcte -> .)
    LEFT            reduce using rule 49 (nvarcte -> .)
    END             reduce using rule 49 (nvarcte -> .)
    ELSE            reduce using rule 49 (nvarcte -> .)
    DIV             reduce using rule 49 (nvarcte -> .)
    MULT            reduce using rule 49 (nvarcte -> .)
    SUB             reduce using rule 49 (nvarcte -> .)
    SUM             reduce using rule 49 (nvarcte -> .)
    EQUAL_TO        reduce using rule 49 (nvarcte -> .)
    MORE_OR_EQ_THAN reduce using rule 49 (nvarcte -> .)
    LESS_OR_EQ_THAN reduce using rule 49 (nvarcte -> .)
    DIFFERENT_TO    reduce using rule 49 (nvarcte -> .)
    MORE_THAN       reduce using rule 49 (nvarcte -> .)
    LESS_THAN       reduce using rule 49 (nvarcte -> .)
    OR              reduce using rule 49 (nvarcte -> .)
    AND             reduce using rule 49 (nvarcte -> .)
    CLOSE_PTH       reduce using rule 49 (nvarcte -> .)
    COMMA           reduce using rule 49 (nvarcte -> .)
    CLOSE_SQR       reduce using rule 49 (nvarcte -> .)

    nvarcte                        shift and go to state 127

state 86

    (48) var_cte -> variable .
    RETURN          reduce using rule 48 (var_cte -> variable .)
    PEN_DOWN        reduce using rule 48 (var_cte -> variable .)
    PEN_UP          reduce using rule 48 (var_cte -> variable .)
    WHILE           reduce using rule 48 (var_cte -> variable .)
    IF              reduce using rule 48 (var_cte -> variable .)
    WRITE           reduce using rule 48 (var_cte -> variable .)
    READ            reduce using rule 48 (var_cte -> variable .)
    ID              reduce using rule 48 (var_cte -> variable .)
    BOOL            reduce using rule 48 (var_cte -> variable .)
    WORD            reduce using rule 48 (var_cte -> variable .)
    NUMBER          reduce using rule 48 (var_cte -> variable .)
    CENTER          reduce using rule 48 (var_cte -> variable .)
    FORWARD         reduce using rule 48 (var_cte -> variable .)
    RIGHT           reduce using rule 48 (var_cte -> variable .)
    LEFT            reduce using rule 48 (var_cte -> variable .)
    END             reduce using rule 48 (var_cte -> variable .)
    ELSE            reduce using rule 48 (var_cte -> variable .)
    DIV             reduce using rule 48 (var_cte -> variable .)
    MULT            reduce using rule 48 (var_cte -> variable .)
    SUB             reduce using rule 48 (var_cte -> variable .)
    SUM             reduce using rule 48 (var_cte -> variable .)
    EQUAL_TO        reduce using rule 48 (var_cte -> variable .)
    MORE_OR_EQ_THAN reduce using rule 48 (var_cte -> variable .)
    LESS_OR_EQ_THAN reduce using rule 48 (var_cte -> variable .)
    DIFFERENT_TO    reduce using rule 48 (var_cte -> variable .)
    MORE_THAN       reduce using rule 48 (var_cte -> variable .)
    LESS_THAN       reduce using rule 48 (var_cte -> variable .)
    OR              reduce using rule 48 (var_cte -> variable .)
    AND             reduce using rule 48 (var_cte -> variable .)
    CLOSE_PTH       reduce using rule 48 (var_cte -> variable .)
    COMMA           reduce using rule 48 (var_cte -> variable .)
    CLOSE_SQR       reduce using rule 48 (var_cte -> variable .)


state 87

    (52) cte_bool -> FALSE .
    RETURN          reduce using rule 52 (cte_bool -> FALSE .)
    PEN_DOWN        reduce using rule 52 (cte_bool -> FALSE .)
    PEN_UP          reduce using rule 52 (cte_bool -> FALSE .)
    WHILE           reduce using rule 52 (cte_bool -> FALSE .)
    IF              reduce using rule 52 (cte_bool -> FALSE .)
    WRITE           reduce using rule 52 (cte_bool -> FALSE .)
    READ            reduce using rule 52 (cte_bool -> FALSE .)
    ID              reduce using rule 52 (cte_bool -> FALSE .)
    BOOL            reduce using rule 52 (cte_bool -> FALSE .)
    WORD            reduce using rule 52 (cte_bool -> FALSE .)
    NUMBER          reduce using rule 52 (cte_bool -> FALSE .)
    CENTER          reduce using rule 52 (cte_bool -> FALSE .)
    FORWARD         reduce using rule 52 (cte_bool -> FALSE .)
    RIGHT           reduce using rule 52 (cte_bool -> FALSE .)
    LEFT            reduce using rule 52 (cte_bool -> FALSE .)
    END             reduce using rule 52 (cte_bool -> FALSE .)
    ELSE            reduce using rule 52 (cte_bool -> FALSE .)
    DIV             reduce using rule 52 (cte_bool -> FALSE .)
    MULT            reduce using rule 52 (cte_bool -> FALSE .)
    SUB             reduce using rule 52 (cte_bool -> FALSE .)
    SUM             reduce using rule 52 (cte_bool -> FALSE .)
    EQUAL_TO        reduce using rule 52 (cte_bool -> FALSE .)
    MORE_OR_EQ_THAN reduce using rule 52 (cte_bool -> FALSE .)
    LESS_OR_EQ_THAN reduce using rule 52 (cte_bool -> FALSE .)
    DIFFERENT_TO    reduce using rule 52 (cte_bool -> FALSE .)
    MORE_THAN       reduce using rule 52 (cte_bool -> FALSE .)
    LESS_THAN       reduce using rule 52 (cte_bool -> FALSE .)
    OR              reduce using rule 52 (cte_bool -> FALSE .)
    AND             reduce using rule 52 (cte_bool -> FALSE .)
    CLOSE_PTH       reduce using rule 52 (cte_bool -> FALSE .)
    COMMA           reduce using rule 52 (cte_bool -> FALSE .)
    CLOSE_SQR       reduce using rule 52 (cte_bool -> FALSE .)


state 88

    (53) cte_bool -> TRUE .
    RETURN          reduce using rule 53 (cte_bool -> TRUE .)
    PEN_DOWN        reduce using rule 53 (cte_bool -> TRUE .)
    PEN_UP          reduce using rule 53 (cte_bool -> TRUE .)
    WHILE           reduce using rule 53 (cte_bool -> TRUE .)
    IF              reduce using rule 53 (cte_bool -> TRUE .)
    WRITE           reduce using rule 53 (cte_bool -> TRUE .)
    READ            reduce using rule 53 (cte_bool -> TRUE .)
    ID              reduce using rule 53 (cte_bool -> TRUE .)
    BOOL            reduce using rule 53 (cte_bool -> TRUE .)
    WORD            reduce using rule 53 (cte_bool -> TRUE .)
    NUMBER          reduce using rule 53 (cte_bool -> TRUE .)
    CENTER          reduce using rule 53 (cte_bool -> TRUE .)
    FORWARD         reduce using rule 53 (cte_bool -> TRUE .)
    RIGHT           reduce using rule 53 (cte_bool -> TRUE .)
    LEFT            reduce using rule 53 (cte_bool -> TRUE .)
    END             reduce using rule 53 (cte_bool -> TRUE .)
    ELSE            reduce using rule 53 (cte_bool -> TRUE .)
    DIV             reduce using rule 53 (cte_bool -> TRUE .)
    MULT            reduce using rule 53 (cte_bool -> TRUE .)
    SUB             reduce using rule 53 (cte_bool -> TRUE .)
    SUM             reduce using rule 53 (cte_bool -> TRUE .)
    EQUAL_TO        reduce using rule 53 (cte_bool -> TRUE .)
    MORE_OR_EQ_THAN reduce using rule 53 (cte_bool -> TRUE .)
    LESS_OR_EQ_THAN reduce using rule 53 (cte_bool -> TRUE .)
    DIFFERENT_TO    reduce using rule 53 (cte_bool -> TRUE .)
    MORE_THAN       reduce using rule 53 (cte_bool -> TRUE .)
    LESS_THAN       reduce using rule 53 (cte_bool -> TRUE .)
    OR              reduce using rule 53 (cte_bool -> TRUE .)
    AND             reduce using rule 53 (cte_bool -> TRUE .)
    CLOSE_PTH       reduce using rule 53 (cte_bool -> TRUE .)
    COMMA           reduce using rule 53 (cte_bool -> TRUE .)
    CLOSE_SQR       reduce using rule 53 (cte_bool -> TRUE .)


state 89

    (38) var_declaration_func -> var_type addvartype . ID varid multiple_vars
    ID              shift and go to state 128


state 90

    (85) func_call -> ID OPEN_PTH . func1 func_call_param CLOSE_PTH func3
    (86) func1 -> .
    ID              reduce using rule 86 (func1 -> .)
    CTE_STR         reduce using rule 86 (func1 -> .)
    CTE_NUM         reduce using rule 86 (func1 -> .)
    OPEN_PTH        reduce using rule 86 (func1 -> .)
    FALSE           reduce using rule 86 (func1 -> .)
    TRUE            reduce using rule 86 (func1 -> .)

    func1                          shift and go to state 129

state 91

    (40) var_assignation -> ID e5 . assign e6 expression q3
    (43) assign -> . ASSIGN
    ASSIGN          shift and go to state 131

    assign                         shift and go to state 130

state 92

    (121) pen_func -> PEN_DOWN OPEN_PTH . CLOSE_PTH
    CLOSE_PTH       shift and go to state 132


state 93

    (122) pen_func -> PEN_UP OPEN_PTH . CLOSE_PTH
    CLOSE_PTH       shift and go to state 133


state 94

    (116) move_func -> move_type OPEN_PTH . func_call_param CLOSE_PTH
    (87) func_call_param -> . expression func2 multiple_fc_param
    (54) expression -> . func_call q4
    (55) expression -> . exp q4
    (56) expression -> . exp rel_op exp q4
    (85) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (58) exp -> . termino q1
    (59) exp -> . termino term_op e3 termino q1
    (64) termino -> . factor q2
    (65) termino -> . factor fact_op e2 factor q2
    (71) factor -> . expression
    (72) factor -> . var_cte e1
    (73) factor -> . open_pth expression close_pth
    (44) var_cte -> . func_call
    (45) var_cte -> . cte_bool bvarcte
    (46) var_cte -> . CTE_STR svarcte
    (47) var_cte -> . CTE_NUM nvarcte
    (48) var_cte -> . variable
    (75) open_pth -> . OPEN_PTH
    (52) cte_bool -> . FALSE
    (53) cte_bool -> . TRUE
    (93) variable -> . ID array
    ID              shift and go to state 77
    CTE_STR         shift and go to state 84
    CTE_NUM         shift and go to state 85
    OPEN_PTH        shift and go to state 78
    FALSE           shift and go to state 87
    TRUE            shift and go to state 88

    func_call_param                shift and go to state 134
    expression                     shift and go to state 135
    func_call                      shift and go to state 75
    exp                            shift and go to state 76
    termino                        shift and go to state 79
    factor                         shift and go to state 80
    var_cte                        shift and go to state 81
    open_pth                       shift and go to state 82
    cte_bool                       shift and go to state 83
    variable                       shift and go to state 86

state 95

    (108) while_stmnt -> WHILE w1 . con_expression w2 stmnt w3 END
    (112) con_expression -> . expression q5
    (113) con_expression -> . expression q5 log_op e7 expression q5
    (54) expression -> . func_call q4
    (55) expression -> . exp q4
    (56) expression -> . exp rel_op exp q4
    (85) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (58) exp -> . termino q1
    (59) exp -> . termino term_op e3 termino q1
    (64) termino -> . factor q2
    (65) termino -> . factor fact_op e2 factor q2
    (71) factor -> . expression
    (72) factor -> . var_cte e1
    (73) factor -> . open_pth expression close_pth
    (44) var_cte -> . func_call
    (45) var_cte -> . cte_bool bvarcte
    (46) var_cte -> . CTE_STR svarcte
    (47) var_cte -> . CTE_NUM nvarcte
    (48) var_cte -> . variable
    (75) open_pth -> . OPEN_PTH
    (52) cte_bool -> . FALSE
    (53) cte_bool -> . TRUE
    (93) variable -> . ID array
    ID              shift and go to state 77
    CTE_STR         shift and go to state 84
    CTE_NUM         shift and go to state 85
    OPEN_PTH        shift and go to state 78
    FALSE           shift and go to state 87
    TRUE            shift and go to state 88

    con_expression                 shift and go to state 136
    expression                     shift and go to state 97
    func_call                      shift and go to state 75
    exp                            shift and go to state 76
    termino                        shift and go to state 79
    factor                         shift and go to state 80
    var_cte                        shift and go to state 81
    open_pth                       shift and go to state 82
    cte_bool                       shift and go to state 83
    variable                       shift and go to state 86

state 96

    (101) if_stmnt -> IF con_expression . if1 stmnt if2 else_stmnt
    (102) if1 -> .
    RETURN          reduce using rule 102 (if1 -> .)
    PEN_DOWN        reduce using rule 102 (if1 -> .)
    PEN_UP          reduce using rule 102 (if1 -> .)
    WHILE           reduce using rule 102 (if1 -> .)
    IF              reduce using rule 102 (if1 -> .)
    WRITE           reduce using rule 102 (if1 -> .)
    READ            reduce using rule 102 (if1 -> .)
    ID              reduce using rule 102 (if1 -> .)
    BOOL            reduce using rule 102 (if1 -> .)
    WORD            reduce using rule 102 (if1 -> .)
    NUMBER          reduce using rule 102 (if1 -> .)
    CENTER          reduce using rule 102 (if1 -> .)
    FORWARD         reduce using rule 102 (if1 -> .)
    RIGHT           reduce using rule 102 (if1 -> .)
    LEFT            reduce using rule 102 (if1 -> .)
    END             reduce using rule 102 (if1 -> .)
    ELSE            reduce using rule 102 (if1 -> .)

    if1                            shift and go to state 137

state 97

    (112) con_expression -> expression . q5
    (113) con_expression -> expression . q5 log_op e7 expression q5
    (71) factor -> expression .
    (115) q5 -> .
  ! reduce/reduce conflict for OR resolved using rule 71 (factor -> expression .)
  ! reduce/reduce conflict for AND resolved using rule 71 (factor -> expression .)
  ! reduce/reduce conflict for RETURN resolved using rule 71 (factor -> expression .)
  ! reduce/reduce conflict for PEN_DOWN resolved using rule 71 (factor -> expression .)
  ! reduce/reduce conflict for PEN_UP resolved using rule 71 (factor -> expression .)
  ! reduce/reduce conflict for WHILE resolved using rule 71 (factor -> expression .)
  ! reduce/reduce conflict for IF resolved using rule 71 (factor -> expression .)
  ! reduce/reduce conflict for WRITE resolved using rule 71 (factor -> expression .)
  ! reduce/reduce conflict for READ resolved using rule 71 (factor -> expression .)
  ! reduce/reduce conflict for ID resolved using rule 71 (factor -> expression .)
  ! reduce/reduce conflict for BOOL resolved using rule 71 (factor -> expression .)
  ! reduce/reduce conflict for WORD resolved using rule 71 (factor -> expression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 71 (factor -> expression .)
  ! reduce/reduce conflict for CENTER resolved using rule 71 (factor -> expression .)
  ! reduce/reduce conflict for FORWARD resolved using rule 71 (factor -> expression .)
  ! reduce/reduce conflict for RIGHT resolved using rule 71 (factor -> expression .)
  ! reduce/reduce conflict for LEFT resolved using rule 71 (factor -> expression .)
  ! reduce/reduce conflict for END resolved using rule 71 (factor -> expression .)
  ! reduce/reduce conflict for ELSE resolved using rule 71 (factor -> expression .)
    OR              reduce using rule 71 (factor -> expression .)
    AND             reduce using rule 71 (factor -> expression .)
    RETURN          reduce using rule 71 (factor -> expression .)
    PEN_DOWN        reduce using rule 71 (factor -> expression .)
    PEN_UP          reduce using rule 71 (factor -> expression .)
    WHILE           reduce using rule 71 (factor -> expression .)
    IF              reduce using rule 71 (factor -> expression .)
    WRITE           reduce using rule 71 (factor -> expression .)
    READ            reduce using rule 71 (factor -> expression .)
    ID              reduce using rule 71 (factor -> expression .)
    BOOL            reduce using rule 71 (factor -> expression .)
    WORD            reduce using rule 71 (factor -> expression .)
    NUMBER          reduce using rule 71 (factor -> expression .)
    CENTER          reduce using rule 71 (factor -> expression .)
    FORWARD         reduce using rule 71 (factor -> expression .)
    RIGHT           reduce using rule 71 (factor -> expression .)
    LEFT            reduce using rule 71 (factor -> expression .)
    END             reduce using rule 71 (factor -> expression .)
    ELSE            reduce using rule 71 (factor -> expression .)
    DIV             reduce using rule 71 (factor -> expression .)
    MULT            reduce using rule 71 (factor -> expression .)
    SUB             reduce using rule 71 (factor -> expression .)
    SUM             reduce using rule 71 (factor -> expression .)
    EQUAL_TO        reduce using rule 71 (factor -> expression .)
    MORE_OR_EQ_THAN reduce using rule 71 (factor -> expression .)
    LESS_OR_EQ_THAN reduce using rule 71 (factor -> expression .)
    DIFFERENT_TO    reduce using rule 71 (factor -> expression .)
    MORE_THAN       reduce using rule 71 (factor -> expression .)
    LESS_THAN       reduce using rule 71 (factor -> expression .)

    q5                             shift and go to state 138

state 98

    (100) write -> WRITE OPEN_PTH . expression CLOSE_PTH
    (54) expression -> . func_call q4
    (55) expression -> . exp q4
    (56) expression -> . exp rel_op exp q4
    (85) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (58) exp -> . termino q1
    (59) exp -> . termino term_op e3 termino q1
    (64) termino -> . factor q2
    (65) termino -> . factor fact_op e2 factor q2
    (71) factor -> . expression
    (72) factor -> . var_cte e1
    (73) factor -> . open_pth expression close_pth
    (44) var_cte -> . func_call
    (45) var_cte -> . cte_bool bvarcte
    (46) var_cte -> . CTE_STR svarcte
    (47) var_cte -> . CTE_NUM nvarcte
    (48) var_cte -> . variable
    (75) open_pth -> . OPEN_PTH
    (52) cte_bool -> . FALSE
    (53) cte_bool -> . TRUE
    (93) variable -> . ID array
    ID              shift and go to state 77
    CTE_STR         shift and go to state 84
    CTE_NUM         shift and go to state 85
    OPEN_PTH        shift and go to state 78
    FALSE           shift and go to state 87
    TRUE            shift and go to state 88

    expression                     shift and go to state 139
    func_call                      shift and go to state 75
    exp                            shift and go to state 76
    termino                        shift and go to state 79
    factor                         shift and go to state 80
    var_cte                        shift and go to state 81
    open_pth                       shift and go to state 82
    cte_bool                       shift and go to state 83
    variable                       shift and go to state 86

state 99

    (92) read -> READ OPEN_PTH . variable multiple_vars CLOSE_PTH
    (93) variable -> . ID array
    ID              shift and go to state 141

    variable                       shift and go to state 140

state 100

    (14) func_declaration -> FUNC resetvars func_type ID fd1 OPEN_PTH . parameter CLOSE_PTH stmnt vd1 END
    (22) parameter -> . empty
    (23) parameter -> . var_type addvartype ID varid multiple_parameters
    (125) empty -> .
    (10) var_type -> . BOOL
    (11) var_type -> . WORD
    (12) var_type -> . NUMBER
    CLOSE_PTH       reduce using rule 125 (empty -> .)
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11

    parameter                      shift and go to state 142
    empty                          shift and go to state 143
    var_type                       shift and go to state 144

state 101

    (9) multiple_var -> COMMA ID varglobal multiple_var .
    BOOL            reduce using rule 9 (multiple_var -> COMMA ID varglobal multiple_var .)
    WORD            reduce using rule 9 (multiple_var -> COMMA ID varglobal multiple_var .)
    NUMBER          reduce using rule 9 (multiple_var -> COMMA ID varglobal multiple_var .)
    FUNC            reduce using rule 9 (multiple_var -> COMMA ID varglobal multiple_var .)
    MAIN            reduce using rule 9 (multiple_var -> COMMA ID varglobal multiple_var .)


state 102

    (124) main -> MAIN fd1 resetvars stmnt vd1 END .
    $end            reduce using rule 124 (main -> MAIN fd1 resetvars stmnt vd1 END .)


state 103

    (54) expression -> func_call q4 .
    RETURN          reduce using rule 54 (expression -> func_call q4 .)
    PEN_DOWN        reduce using rule 54 (expression -> func_call q4 .)
    PEN_UP          reduce using rule 54 (expression -> func_call q4 .)
    WHILE           reduce using rule 54 (expression -> func_call q4 .)
    IF              reduce using rule 54 (expression -> func_call q4 .)
    WRITE           reduce using rule 54 (expression -> func_call q4 .)
    READ            reduce using rule 54 (expression -> func_call q4 .)
    ID              reduce using rule 54 (expression -> func_call q4 .)
    BOOL            reduce using rule 54 (expression -> func_call q4 .)
    WORD            reduce using rule 54 (expression -> func_call q4 .)
    NUMBER          reduce using rule 54 (expression -> func_call q4 .)
    CENTER          reduce using rule 54 (expression -> func_call q4 .)
    FORWARD         reduce using rule 54 (expression -> func_call q4 .)
    RIGHT           reduce using rule 54 (expression -> func_call q4 .)
    LEFT            reduce using rule 54 (expression -> func_call q4 .)
    END             reduce using rule 54 (expression -> func_call q4 .)
    ELSE            reduce using rule 54 (expression -> func_call q4 .)
    DIV             reduce using rule 54 (expression -> func_call q4 .)
    MULT            reduce using rule 54 (expression -> func_call q4 .)
    SUB             reduce using rule 54 (expression -> func_call q4 .)
    SUM             reduce using rule 54 (expression -> func_call q4 .)
    EQUAL_TO        reduce using rule 54 (expression -> func_call q4 .)
    MORE_OR_EQ_THAN reduce using rule 54 (expression -> func_call q4 .)
    LESS_OR_EQ_THAN reduce using rule 54 (expression -> func_call q4 .)
    DIFFERENT_TO    reduce using rule 54 (expression -> func_call q4 .)
    MORE_THAN       reduce using rule 54 (expression -> func_call q4 .)
    LESS_THAN       reduce using rule 54 (expression -> func_call q4 .)
    OR              reduce using rule 54 (expression -> func_call q4 .)
    AND             reduce using rule 54 (expression -> func_call q4 .)
    CLOSE_PTH       reduce using rule 54 (expression -> func_call q4 .)
    COMMA           reduce using rule 54 (expression -> func_call q4 .)
    CLOSE_SQR       reduce using rule 54 (expression -> func_call q4 .)


state 104

    (55) expression -> exp q4 .
    RETURN          reduce using rule 55 (expression -> exp q4 .)
    PEN_DOWN        reduce using rule 55 (expression -> exp q4 .)
    PEN_UP          reduce using rule 55 (expression -> exp q4 .)
    WHILE           reduce using rule 55 (expression -> exp q4 .)
    IF              reduce using rule 55 (expression -> exp q4 .)
    WRITE           reduce using rule 55 (expression -> exp q4 .)
    READ            reduce using rule 55 (expression -> exp q4 .)
    ID              reduce using rule 55 (expression -> exp q4 .)
    BOOL            reduce using rule 55 (expression -> exp q4 .)
    WORD            reduce using rule 55 (expression -> exp q4 .)
    NUMBER          reduce using rule 55 (expression -> exp q4 .)
    CENTER          reduce using rule 55 (expression -> exp q4 .)
    FORWARD         reduce using rule 55 (expression -> exp q4 .)
    RIGHT           reduce using rule 55 (expression -> exp q4 .)
    LEFT            reduce using rule 55 (expression -> exp q4 .)
    END             reduce using rule 55 (expression -> exp q4 .)
    ELSE            reduce using rule 55 (expression -> exp q4 .)
    DIV             reduce using rule 55 (expression -> exp q4 .)
    MULT            reduce using rule 55 (expression -> exp q4 .)
    SUB             reduce using rule 55 (expression -> exp q4 .)
    SUM             reduce using rule 55 (expression -> exp q4 .)
    EQUAL_TO        reduce using rule 55 (expression -> exp q4 .)
    MORE_OR_EQ_THAN reduce using rule 55 (expression -> exp q4 .)
    LESS_OR_EQ_THAN reduce using rule 55 (expression -> exp q4 .)
    DIFFERENT_TO    reduce using rule 55 (expression -> exp q4 .)
    MORE_THAN       reduce using rule 55 (expression -> exp q4 .)
    LESS_THAN       reduce using rule 55 (expression -> exp q4 .)
    OR              reduce using rule 55 (expression -> exp q4 .)
    AND             reduce using rule 55 (expression -> exp q4 .)
    CLOSE_PTH       reduce using rule 55 (expression -> exp q4 .)
    COMMA           reduce using rule 55 (expression -> exp q4 .)
    CLOSE_SQR       reduce using rule 55 (expression -> exp q4 .)


state 105

    (56) expression -> exp rel_op . exp q4
    (58) exp -> . termino q1
    (59) exp -> . termino term_op e3 termino q1
    (64) termino -> . factor q2
    (65) termino -> . factor fact_op e2 factor q2
    (71) factor -> . expression
    (72) factor -> . var_cte e1
    (73) factor -> . open_pth expression close_pth
    (54) expression -> . func_call q4
    (55) expression -> . exp q4
    (56) expression -> . exp rel_op exp q4
    (44) var_cte -> . func_call
    (45) var_cte -> . cte_bool bvarcte
    (46) var_cte -> . CTE_STR svarcte
    (47) var_cte -> . CTE_NUM nvarcte
    (48) var_cte -> . variable
    (75) open_pth -> . OPEN_PTH
    (85) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (52) cte_bool -> . FALSE
    (53) cte_bool -> . TRUE
    (93) variable -> . ID array
    CTE_STR         shift and go to state 84
    CTE_NUM         shift and go to state 85
    OPEN_PTH        shift and go to state 78
    ID              shift and go to state 77
    FALSE           shift and go to state 87
    TRUE            shift and go to state 88

    exp                            shift and go to state 145
    termino                        shift and go to state 79
    factor                         shift and go to state 80
    expression                     shift and go to state 146
    var_cte                        shift and go to state 81
    open_pth                       shift and go to state 82
    func_call                      shift and go to state 75
    cte_bool                       shift and go to state 83
    variable                       shift and go to state 86

state 106

    (79) rel_op -> EQUAL_TO .
    CTE_STR         reduce using rule 79 (rel_op -> EQUAL_TO .)
    CTE_NUM         reduce using rule 79 (rel_op -> EQUAL_TO .)
    OPEN_PTH        reduce using rule 79 (rel_op -> EQUAL_TO .)
    ID              reduce using rule 79 (rel_op -> EQUAL_TO .)
    FALSE           reduce using rule 79 (rel_op -> EQUAL_TO .)
    TRUE            reduce using rule 79 (rel_op -> EQUAL_TO .)


state 107

    (80) rel_op -> MORE_OR_EQ_THAN .
    CTE_STR         reduce using rule 80 (rel_op -> MORE_OR_EQ_THAN .)
    CTE_NUM         reduce using rule 80 (rel_op -> MORE_OR_EQ_THAN .)
    OPEN_PTH        reduce using rule 80 (rel_op -> MORE_OR_EQ_THAN .)
    ID              reduce using rule 80 (rel_op -> MORE_OR_EQ_THAN .)
    FALSE           reduce using rule 80 (rel_op -> MORE_OR_EQ_THAN .)
    TRUE            reduce using rule 80 (rel_op -> MORE_OR_EQ_THAN .)


state 108

    (81) rel_op -> LESS_OR_EQ_THAN .
    CTE_STR         reduce using rule 81 (rel_op -> LESS_OR_EQ_THAN .)
    CTE_NUM         reduce using rule 81 (rel_op -> LESS_OR_EQ_THAN .)
    OPEN_PTH        reduce using rule 81 (rel_op -> LESS_OR_EQ_THAN .)
    ID              reduce using rule 81 (rel_op -> LESS_OR_EQ_THAN .)
    FALSE           reduce using rule 81 (rel_op -> LESS_OR_EQ_THAN .)
    TRUE            reduce using rule 81 (rel_op -> LESS_OR_EQ_THAN .)


state 109

    (82) rel_op -> DIFFERENT_TO .
    CTE_STR         reduce using rule 82 (rel_op -> DIFFERENT_TO .)
    CTE_NUM         reduce using rule 82 (rel_op -> DIFFERENT_TO .)
    OPEN_PTH        reduce using rule 82 (rel_op -> DIFFERENT_TO .)
    ID              reduce using rule 82 (rel_op -> DIFFERENT_TO .)
    FALSE           reduce using rule 82 (rel_op -> DIFFERENT_TO .)
    TRUE            reduce using rule 82 (rel_op -> DIFFERENT_TO .)


state 110

    (83) rel_op -> MORE_THAN .
    CTE_STR         reduce using rule 83 (rel_op -> MORE_THAN .)
    CTE_NUM         reduce using rule 83 (rel_op -> MORE_THAN .)
    OPEN_PTH        reduce using rule 83 (rel_op -> MORE_THAN .)
    ID              reduce using rule 83 (rel_op -> MORE_THAN .)
    FALSE           reduce using rule 83 (rel_op -> MORE_THAN .)
    TRUE            reduce using rule 83 (rel_op -> MORE_THAN .)


state 111

    (84) rel_op -> LESS_THAN .
    CTE_STR         reduce using rule 84 (rel_op -> LESS_THAN .)
    CTE_NUM         reduce using rule 84 (rel_op -> LESS_THAN .)
    OPEN_PTH        reduce using rule 84 (rel_op -> LESS_THAN .)
    ID              reduce using rule 84 (rel_op -> LESS_THAN .)
    FALSE           reduce using rule 84 (rel_op -> LESS_THAN .)
    TRUE            reduce using rule 84 (rel_op -> LESS_THAN .)


state 112

    (93) variable -> ID array .
    RETURN          reduce using rule 93 (variable -> ID array .)
    PEN_DOWN        reduce using rule 93 (variable -> ID array .)
    PEN_UP          reduce using rule 93 (variable -> ID array .)
    WHILE           reduce using rule 93 (variable -> ID array .)
    IF              reduce using rule 93 (variable -> ID array .)
    WRITE           reduce using rule 93 (variable -> ID array .)
    READ            reduce using rule 93 (variable -> ID array .)
    ID              reduce using rule 93 (variable -> ID array .)
    BOOL            reduce using rule 93 (variable -> ID array .)
    WORD            reduce using rule 93 (variable -> ID array .)
    NUMBER          reduce using rule 93 (variable -> ID array .)
    CENTER          reduce using rule 93 (variable -> ID array .)
    FORWARD         reduce using rule 93 (variable -> ID array .)
    RIGHT           reduce using rule 93 (variable -> ID array .)
    LEFT            reduce using rule 93 (variable -> ID array .)
    END             reduce using rule 93 (variable -> ID array .)
    ELSE            reduce using rule 93 (variable -> ID array .)
    DIV             reduce using rule 93 (variable -> ID array .)
    MULT            reduce using rule 93 (variable -> ID array .)
    SUB             reduce using rule 93 (variable -> ID array .)
    SUM             reduce using rule 93 (variable -> ID array .)
    EQUAL_TO        reduce using rule 93 (variable -> ID array .)
    MORE_OR_EQ_THAN reduce using rule 93 (variable -> ID array .)
    LESS_OR_EQ_THAN reduce using rule 93 (variable -> ID array .)
    DIFFERENT_TO    reduce using rule 93 (variable -> ID array .)
    MORE_THAN       reduce using rule 93 (variable -> ID array .)
    LESS_THAN       reduce using rule 93 (variable -> ID array .)
    OR              reduce using rule 93 (variable -> ID array .)
    AND             reduce using rule 93 (variable -> ID array .)
    CLOSE_PTH       reduce using rule 93 (variable -> ID array .)
    COMMA           reduce using rule 93 (variable -> ID array .)
    CLOSE_SQR       reduce using rule 93 (variable -> ID array .)


state 113

    (94) array -> empty .
    RETURN          reduce using rule 94 (array -> empty .)
    PEN_DOWN        reduce using rule 94 (array -> empty .)
    PEN_UP          reduce using rule 94 (array -> empty .)
    WHILE           reduce using rule 94 (array -> empty .)
    IF              reduce using rule 94 (array -> empty .)
    WRITE           reduce using rule 94 (array -> empty .)
    READ            reduce using rule 94 (array -> empty .)
    ID              reduce using rule 94 (array -> empty .)
    BOOL            reduce using rule 94 (array -> empty .)
    WORD            reduce using rule 94 (array -> empty .)
    NUMBER          reduce using rule 94 (array -> empty .)
    CENTER          reduce using rule 94 (array -> empty .)
    FORWARD         reduce using rule 94 (array -> empty .)
    RIGHT           reduce using rule 94 (array -> empty .)
    LEFT            reduce using rule 94 (array -> empty .)
    END             reduce using rule 94 (array -> empty .)
    ELSE            reduce using rule 94 (array -> empty .)
    DIV             reduce using rule 94 (array -> empty .)
    MULT            reduce using rule 94 (array -> empty .)
    SUB             reduce using rule 94 (array -> empty .)
    SUM             reduce using rule 94 (array -> empty .)
    EQUAL_TO        reduce using rule 94 (array -> empty .)
    MORE_OR_EQ_THAN reduce using rule 94 (array -> empty .)
    LESS_OR_EQ_THAN reduce using rule 94 (array -> empty .)
    DIFFERENT_TO    reduce using rule 94 (array -> empty .)
    MORE_THAN       reduce using rule 94 (array -> empty .)
    LESS_THAN       reduce using rule 94 (array -> empty .)
    OR              reduce using rule 94 (array -> empty .)
    AND             reduce using rule 94 (array -> empty .)
    CLOSE_PTH       reduce using rule 94 (array -> empty .)
    COMMA           reduce using rule 94 (array -> empty .)
    CLOSE_SQR       reduce using rule 94 (array -> empty .)


state 114

    (95) array -> OPEN_SQR . expression CLOSE_SQR matrix
    (54) expression -> . func_call q4
    (55) expression -> . exp q4
    (56) expression -> . exp rel_op exp q4
    (85) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (58) exp -> . termino q1
    (59) exp -> . termino term_op e3 termino q1
    (64) termino -> . factor q2
    (65) termino -> . factor fact_op e2 factor q2
    (71) factor -> . expression
    (72) factor -> . var_cte e1
    (73) factor -> . open_pth expression close_pth
    (44) var_cte -> . func_call
    (45) var_cte -> . cte_bool bvarcte
    (46) var_cte -> . CTE_STR svarcte
    (47) var_cte -> . CTE_NUM nvarcte
    (48) var_cte -> . variable
    (75) open_pth -> . OPEN_PTH
    (52) cte_bool -> . FALSE
    (53) cte_bool -> . TRUE
    (93) variable -> . ID array
    ID              shift and go to state 77
    CTE_STR         shift and go to state 84
    CTE_NUM         shift and go to state 85
    OPEN_PTH        shift and go to state 78
    FALSE           shift and go to state 87
    TRUE            shift and go to state 88

    expression                     shift and go to state 147
    func_call                      shift and go to state 75
    exp                            shift and go to state 76
    termino                        shift and go to state 79
    factor                         shift and go to state 80
    var_cte                        shift and go to state 81
    open_pth                       shift and go to state 82
    cte_bool                       shift and go to state 83
    variable                       shift and go to state 86

state 115

    (58) exp -> termino q1 .
    RETURN          reduce using rule 58 (exp -> termino q1 .)
    PEN_DOWN        reduce using rule 58 (exp -> termino q1 .)
    PEN_UP          reduce using rule 58 (exp -> termino q1 .)
    WHILE           reduce using rule 58 (exp -> termino q1 .)
    IF              reduce using rule 58 (exp -> termino q1 .)
    WRITE           reduce using rule 58 (exp -> termino q1 .)
    READ            reduce using rule 58 (exp -> termino q1 .)
    ID              reduce using rule 58 (exp -> termino q1 .)
    BOOL            reduce using rule 58 (exp -> termino q1 .)
    WORD            reduce using rule 58 (exp -> termino q1 .)
    NUMBER          reduce using rule 58 (exp -> termino q1 .)
    CENTER          reduce using rule 58 (exp -> termino q1 .)
    FORWARD         reduce using rule 58 (exp -> termino q1 .)
    RIGHT           reduce using rule 58 (exp -> termino q1 .)
    LEFT            reduce using rule 58 (exp -> termino q1 .)
    END             reduce using rule 58 (exp -> termino q1 .)
    ELSE            reduce using rule 58 (exp -> termino q1 .)
    DIV             reduce using rule 58 (exp -> termino q1 .)
    MULT            reduce using rule 58 (exp -> termino q1 .)
    SUB             reduce using rule 58 (exp -> termino q1 .)
    SUM             reduce using rule 58 (exp -> termino q1 .)
    EQUAL_TO        reduce using rule 58 (exp -> termino q1 .)
    MORE_OR_EQ_THAN reduce using rule 58 (exp -> termino q1 .)
    LESS_OR_EQ_THAN reduce using rule 58 (exp -> termino q1 .)
    DIFFERENT_TO    reduce using rule 58 (exp -> termino q1 .)
    MORE_THAN       reduce using rule 58 (exp -> termino q1 .)
    LESS_THAN       reduce using rule 58 (exp -> termino q1 .)
    OR              reduce using rule 58 (exp -> termino q1 .)
    AND             reduce using rule 58 (exp -> termino q1 .)
    CLOSE_PTH       reduce using rule 58 (exp -> termino q1 .)
    COMMA           reduce using rule 58 (exp -> termino q1 .)
    CLOSE_SQR       reduce using rule 58 (exp -> termino q1 .)


state 116

    (59) exp -> termino term_op . e3 termino q1
    (60) e3 -> .
    CTE_STR         reduce using rule 60 (e3 -> .)
    CTE_NUM         reduce using rule 60 (e3 -> .)
    OPEN_PTH        reduce using rule 60 (e3 -> .)
    ID              reduce using rule 60 (e3 -> .)
    FALSE           reduce using rule 60 (e3 -> .)
    TRUE            reduce using rule 60 (e3 -> .)

    e3                             shift and go to state 148

state 117

    (62) term_op -> SUB .
    CTE_STR         reduce using rule 62 (term_op -> SUB .)
    CTE_NUM         reduce using rule 62 (term_op -> SUB .)
    OPEN_PTH        reduce using rule 62 (term_op -> SUB .)
    ID              reduce using rule 62 (term_op -> SUB .)
    FALSE           reduce using rule 62 (term_op -> SUB .)
    TRUE            reduce using rule 62 (term_op -> SUB .)


state 118

    (63) term_op -> SUM .
    CTE_STR         reduce using rule 63 (term_op -> SUM .)
    CTE_NUM         reduce using rule 63 (term_op -> SUM .)
    OPEN_PTH        reduce using rule 63 (term_op -> SUM .)
    ID              reduce using rule 63 (term_op -> SUM .)
    FALSE           reduce using rule 63 (term_op -> SUM .)
    TRUE            reduce using rule 63 (term_op -> SUM .)


state 119

    (64) termino -> factor q2 .
    RETURN          reduce using rule 64 (termino -> factor q2 .)
    PEN_DOWN        reduce using rule 64 (termino -> factor q2 .)
    PEN_UP          reduce using rule 64 (termino -> factor q2 .)
    WHILE           reduce using rule 64 (termino -> factor q2 .)
    IF              reduce using rule 64 (termino -> factor q2 .)
    WRITE           reduce using rule 64 (termino -> factor q2 .)
    READ            reduce using rule 64 (termino -> factor q2 .)
    ID              reduce using rule 64 (termino -> factor q2 .)
    BOOL            reduce using rule 64 (termino -> factor q2 .)
    WORD            reduce using rule 64 (termino -> factor q2 .)
    NUMBER          reduce using rule 64 (termino -> factor q2 .)
    CENTER          reduce using rule 64 (termino -> factor q2 .)
    FORWARD         reduce using rule 64 (termino -> factor q2 .)
    RIGHT           reduce using rule 64 (termino -> factor q2 .)
    LEFT            reduce using rule 64 (termino -> factor q2 .)
    END             reduce using rule 64 (termino -> factor q2 .)
    ELSE            reduce using rule 64 (termino -> factor q2 .)
    DIV             reduce using rule 64 (termino -> factor q2 .)
    MULT            reduce using rule 64 (termino -> factor q2 .)
    SUB             reduce using rule 64 (termino -> factor q2 .)
    SUM             reduce using rule 64 (termino -> factor q2 .)
    EQUAL_TO        reduce using rule 64 (termino -> factor q2 .)
    MORE_OR_EQ_THAN reduce using rule 64 (termino -> factor q2 .)
    LESS_OR_EQ_THAN reduce using rule 64 (termino -> factor q2 .)
    DIFFERENT_TO    reduce using rule 64 (termino -> factor q2 .)
    MORE_THAN       reduce using rule 64 (termino -> factor q2 .)
    LESS_THAN       reduce using rule 64 (termino -> factor q2 .)
    OR              reduce using rule 64 (termino -> factor q2 .)
    AND             reduce using rule 64 (termino -> factor q2 .)
    CLOSE_PTH       reduce using rule 64 (termino -> factor q2 .)
    COMMA           reduce using rule 64 (termino -> factor q2 .)
    CLOSE_SQR       reduce using rule 64 (termino -> factor q2 .)


state 120

    (65) termino -> factor fact_op . e2 factor q2
    (68) e2 -> .
    CTE_STR         reduce using rule 68 (e2 -> .)
    CTE_NUM         reduce using rule 68 (e2 -> .)
    OPEN_PTH        reduce using rule 68 (e2 -> .)
    ID              reduce using rule 68 (e2 -> .)
    FALSE           reduce using rule 68 (e2 -> .)
    TRUE            reduce using rule 68 (e2 -> .)

    e2                             shift and go to state 149

state 121

    (69) fact_op -> DIV .
    CTE_STR         reduce using rule 69 (fact_op -> DIV .)
    CTE_NUM         reduce using rule 69 (fact_op -> DIV .)
    OPEN_PTH        reduce using rule 69 (fact_op -> DIV .)
    ID              reduce using rule 69 (fact_op -> DIV .)
    FALSE           reduce using rule 69 (fact_op -> DIV .)
    TRUE            reduce using rule 69 (fact_op -> DIV .)


state 122

    (70) fact_op -> MULT .
    CTE_STR         reduce using rule 70 (fact_op -> MULT .)
    CTE_NUM         reduce using rule 70 (fact_op -> MULT .)
    OPEN_PTH        reduce using rule 70 (fact_op -> MULT .)
    ID              reduce using rule 70 (fact_op -> MULT .)
    FALSE           reduce using rule 70 (fact_op -> MULT .)
    TRUE            reduce using rule 70 (fact_op -> MULT .)


state 123

    (72) factor -> var_cte e1 .
    RETURN          reduce using rule 72 (factor -> var_cte e1 .)
    PEN_DOWN        reduce using rule 72 (factor -> var_cte e1 .)
    PEN_UP          reduce using rule 72 (factor -> var_cte e1 .)
    WHILE           reduce using rule 72 (factor -> var_cte e1 .)
    IF              reduce using rule 72 (factor -> var_cte e1 .)
    WRITE           reduce using rule 72 (factor -> var_cte e1 .)
    READ            reduce using rule 72 (factor -> var_cte e1 .)
    ID              reduce using rule 72 (factor -> var_cte e1 .)
    BOOL            reduce using rule 72 (factor -> var_cte e1 .)
    WORD            reduce using rule 72 (factor -> var_cte e1 .)
    NUMBER          reduce using rule 72 (factor -> var_cte e1 .)
    CENTER          reduce using rule 72 (factor -> var_cte e1 .)
    FORWARD         reduce using rule 72 (factor -> var_cte e1 .)
    RIGHT           reduce using rule 72 (factor -> var_cte e1 .)
    LEFT            reduce using rule 72 (factor -> var_cte e1 .)
    END             reduce using rule 72 (factor -> var_cte e1 .)
    ELSE            reduce using rule 72 (factor -> var_cte e1 .)
    DIV             reduce using rule 72 (factor -> var_cte e1 .)
    MULT            reduce using rule 72 (factor -> var_cte e1 .)
    SUB             reduce using rule 72 (factor -> var_cte e1 .)
    SUM             reduce using rule 72 (factor -> var_cte e1 .)
    EQUAL_TO        reduce using rule 72 (factor -> var_cte e1 .)
    MORE_OR_EQ_THAN reduce using rule 72 (factor -> var_cte e1 .)
    LESS_OR_EQ_THAN reduce using rule 72 (factor -> var_cte e1 .)
    DIFFERENT_TO    reduce using rule 72 (factor -> var_cte e1 .)
    MORE_THAN       reduce using rule 72 (factor -> var_cte e1 .)
    LESS_THAN       reduce using rule 72 (factor -> var_cte e1 .)
    OR              reduce using rule 72 (factor -> var_cte e1 .)
    AND             reduce using rule 72 (factor -> var_cte e1 .)
    CLOSE_PTH       reduce using rule 72 (factor -> var_cte e1 .)
    COMMA           reduce using rule 72 (factor -> var_cte e1 .)
    CLOSE_SQR       reduce using rule 72 (factor -> var_cte e1 .)


state 124

    (73) factor -> open_pth expression . close_pth
    (71) factor -> expression .
    (76) close_pth -> . CLOSE_PTH
  ! shift/reduce conflict for CLOSE_PTH resolved as shift
    DIV             reduce using rule 71 (factor -> expression .)
    MULT            reduce using rule 71 (factor -> expression .)
    SUB             reduce using rule 71 (factor -> expression .)
    SUM             reduce using rule 71 (factor -> expression .)
    EQUAL_TO        reduce using rule 71 (factor -> expression .)
    MORE_OR_EQ_THAN reduce using rule 71 (factor -> expression .)
    LESS_OR_EQ_THAN reduce using rule 71 (factor -> expression .)
    DIFFERENT_TO    reduce using rule 71 (factor -> expression .)
    MORE_THAN       reduce using rule 71 (factor -> expression .)
    LESS_THAN       reduce using rule 71 (factor -> expression .)
    CLOSE_PTH       shift and go to state 151

    close_pth                      shift and go to state 150

state 125

    (45) var_cte -> cte_bool bvarcte .
    RETURN          reduce using rule 45 (var_cte -> cte_bool bvarcte .)
    PEN_DOWN        reduce using rule 45 (var_cte -> cte_bool bvarcte .)
    PEN_UP          reduce using rule 45 (var_cte -> cte_bool bvarcte .)
    WHILE           reduce using rule 45 (var_cte -> cte_bool bvarcte .)
    IF              reduce using rule 45 (var_cte -> cte_bool bvarcte .)
    WRITE           reduce using rule 45 (var_cte -> cte_bool bvarcte .)
    READ            reduce using rule 45 (var_cte -> cte_bool bvarcte .)
    ID              reduce using rule 45 (var_cte -> cte_bool bvarcte .)
    BOOL            reduce using rule 45 (var_cte -> cte_bool bvarcte .)
    WORD            reduce using rule 45 (var_cte -> cte_bool bvarcte .)
    NUMBER          reduce using rule 45 (var_cte -> cte_bool bvarcte .)
    CENTER          reduce using rule 45 (var_cte -> cte_bool bvarcte .)
    FORWARD         reduce using rule 45 (var_cte -> cte_bool bvarcte .)
    RIGHT           reduce using rule 45 (var_cte -> cte_bool bvarcte .)
    LEFT            reduce using rule 45 (var_cte -> cte_bool bvarcte .)
    END             reduce using rule 45 (var_cte -> cte_bool bvarcte .)
    ELSE            reduce using rule 45 (var_cte -> cte_bool bvarcte .)
    DIV             reduce using rule 45 (var_cte -> cte_bool bvarcte .)
    MULT            reduce using rule 45 (var_cte -> cte_bool bvarcte .)
    SUB             reduce using rule 45 (var_cte -> cte_bool bvarcte .)
    SUM             reduce using rule 45 (var_cte -> cte_bool bvarcte .)
    EQUAL_TO        reduce using rule 45 (var_cte -> cte_bool bvarcte .)
    MORE_OR_EQ_THAN reduce using rule 45 (var_cte -> cte_bool bvarcte .)
    LESS_OR_EQ_THAN reduce using rule 45 (var_cte -> cte_bool bvarcte .)
    DIFFERENT_TO    reduce using rule 45 (var_cte -> cte_bool bvarcte .)
    MORE_THAN       reduce using rule 45 (var_cte -> cte_bool bvarcte .)
    LESS_THAN       reduce using rule 45 (var_cte -> cte_bool bvarcte .)
    OR              reduce using rule 45 (var_cte -> cte_bool bvarcte .)
    AND             reduce using rule 45 (var_cte -> cte_bool bvarcte .)
    CLOSE_PTH       reduce using rule 45 (var_cte -> cte_bool bvarcte .)
    COMMA           reduce using rule 45 (var_cte -> cte_bool bvarcte .)
    CLOSE_SQR       reduce using rule 45 (var_cte -> cte_bool bvarcte .)


state 126

    (46) var_cte -> CTE_STR svarcte .
    RETURN          reduce using rule 46 (var_cte -> CTE_STR svarcte .)
    PEN_DOWN        reduce using rule 46 (var_cte -> CTE_STR svarcte .)
    PEN_UP          reduce using rule 46 (var_cte -> CTE_STR svarcte .)
    WHILE           reduce using rule 46 (var_cte -> CTE_STR svarcte .)
    IF              reduce using rule 46 (var_cte -> CTE_STR svarcte .)
    WRITE           reduce using rule 46 (var_cte -> CTE_STR svarcte .)
    READ            reduce using rule 46 (var_cte -> CTE_STR svarcte .)
    ID              reduce using rule 46 (var_cte -> CTE_STR svarcte .)
    BOOL            reduce using rule 46 (var_cte -> CTE_STR svarcte .)
    WORD            reduce using rule 46 (var_cte -> CTE_STR svarcte .)
    NUMBER          reduce using rule 46 (var_cte -> CTE_STR svarcte .)
    CENTER          reduce using rule 46 (var_cte -> CTE_STR svarcte .)
    FORWARD         reduce using rule 46 (var_cte -> CTE_STR svarcte .)
    RIGHT           reduce using rule 46 (var_cte -> CTE_STR svarcte .)
    LEFT            reduce using rule 46 (var_cte -> CTE_STR svarcte .)
    END             reduce using rule 46 (var_cte -> CTE_STR svarcte .)
    ELSE            reduce using rule 46 (var_cte -> CTE_STR svarcte .)
    DIV             reduce using rule 46 (var_cte -> CTE_STR svarcte .)
    MULT            reduce using rule 46 (var_cte -> CTE_STR svarcte .)
    SUB             reduce using rule 46 (var_cte -> CTE_STR svarcte .)
    SUM             reduce using rule 46 (var_cte -> CTE_STR svarcte .)
    EQUAL_TO        reduce using rule 46 (var_cte -> CTE_STR svarcte .)
    MORE_OR_EQ_THAN reduce using rule 46 (var_cte -> CTE_STR svarcte .)
    LESS_OR_EQ_THAN reduce using rule 46 (var_cte -> CTE_STR svarcte .)
    DIFFERENT_TO    reduce using rule 46 (var_cte -> CTE_STR svarcte .)
    MORE_THAN       reduce using rule 46 (var_cte -> CTE_STR svarcte .)
    LESS_THAN       reduce using rule 46 (var_cte -> CTE_STR svarcte .)
    OR              reduce using rule 46 (var_cte -> CTE_STR svarcte .)
    AND             reduce using rule 46 (var_cte -> CTE_STR svarcte .)
    CLOSE_PTH       reduce using rule 46 (var_cte -> CTE_STR svarcte .)
    COMMA           reduce using rule 46 (var_cte -> CTE_STR svarcte .)
    CLOSE_SQR       reduce using rule 46 (var_cte -> CTE_STR svarcte .)


state 127

    (47) var_cte -> CTE_NUM nvarcte .
    RETURN          reduce using rule 47 (var_cte -> CTE_NUM nvarcte .)
    PEN_DOWN        reduce using rule 47 (var_cte -> CTE_NUM nvarcte .)
    PEN_UP          reduce using rule 47 (var_cte -> CTE_NUM nvarcte .)
    WHILE           reduce using rule 47 (var_cte -> CTE_NUM nvarcte .)
    IF              reduce using rule 47 (var_cte -> CTE_NUM nvarcte .)
    WRITE           reduce using rule 47 (var_cte -> CTE_NUM nvarcte .)
    READ            reduce using rule 47 (var_cte -> CTE_NUM nvarcte .)
    ID              reduce using rule 47 (var_cte -> CTE_NUM nvarcte .)
    BOOL            reduce using rule 47 (var_cte -> CTE_NUM nvarcte .)
    WORD            reduce using rule 47 (var_cte -> CTE_NUM nvarcte .)
    NUMBER          reduce using rule 47 (var_cte -> CTE_NUM nvarcte .)
    CENTER          reduce using rule 47 (var_cte -> CTE_NUM nvarcte .)
    FORWARD         reduce using rule 47 (var_cte -> CTE_NUM nvarcte .)
    RIGHT           reduce using rule 47 (var_cte -> CTE_NUM nvarcte .)
    LEFT            reduce using rule 47 (var_cte -> CTE_NUM nvarcte .)
    END             reduce using rule 47 (var_cte -> CTE_NUM nvarcte .)
    ELSE            reduce using rule 47 (var_cte -> CTE_NUM nvarcte .)
    DIV             reduce using rule 47 (var_cte -> CTE_NUM nvarcte .)
    MULT            reduce using rule 47 (var_cte -> CTE_NUM nvarcte .)
    SUB             reduce using rule 47 (var_cte -> CTE_NUM nvarcte .)
    SUM             reduce using rule 47 (var_cte -> CTE_NUM nvarcte .)
    EQUAL_TO        reduce using rule 47 (var_cte -> CTE_NUM nvarcte .)
    MORE_OR_EQ_THAN reduce using rule 47 (var_cte -> CTE_NUM nvarcte .)
    LESS_OR_EQ_THAN reduce using rule 47 (var_cte -> CTE_NUM nvarcte .)
    DIFFERENT_TO    reduce using rule 47 (var_cte -> CTE_NUM nvarcte .)
    MORE_THAN       reduce using rule 47 (var_cte -> CTE_NUM nvarcte .)
    LESS_THAN       reduce using rule 47 (var_cte -> CTE_NUM nvarcte .)
    OR              reduce using rule 47 (var_cte -> CTE_NUM nvarcte .)
    AND             reduce using rule 47 (var_cte -> CTE_NUM nvarcte .)
    CLOSE_PTH       reduce using rule 47 (var_cte -> CTE_NUM nvarcte .)
    COMMA           reduce using rule 47 (var_cte -> CTE_NUM nvarcte .)
    CLOSE_SQR       reduce using rule 47 (var_cte -> CTE_NUM nvarcte .)


state 128

    (38) var_declaration_func -> var_type addvartype ID . varid multiple_vars
    (39) varid -> .
    COMMA           reduce using rule 39 (varid -> .)
    RETURN          reduce using rule 39 (varid -> .)
    PEN_DOWN        reduce using rule 39 (varid -> .)
    PEN_UP          reduce using rule 39 (varid -> .)
    WHILE           reduce using rule 39 (varid -> .)
    IF              reduce using rule 39 (varid -> .)
    WRITE           reduce using rule 39 (varid -> .)
    READ            reduce using rule 39 (varid -> .)
    ID              reduce using rule 39 (varid -> .)
    BOOL            reduce using rule 39 (varid -> .)
    WORD            reduce using rule 39 (varid -> .)
    NUMBER          reduce using rule 39 (varid -> .)
    CENTER          reduce using rule 39 (varid -> .)
    FORWARD         reduce using rule 39 (varid -> .)
    RIGHT           reduce using rule 39 (varid -> .)
    LEFT            reduce using rule 39 (varid -> .)
    END             reduce using rule 39 (varid -> .)
    ELSE            reduce using rule 39 (varid -> .)

    varid                          shift and go to state 152

state 129

    (85) func_call -> ID OPEN_PTH func1 . func_call_param CLOSE_PTH func3
    (87) func_call_param -> . expression func2 multiple_fc_param
    (54) expression -> . func_call q4
    (55) expression -> . exp q4
    (56) expression -> . exp rel_op exp q4
    (85) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (58) exp -> . termino q1
    (59) exp -> . termino term_op e3 termino q1
    (64) termino -> . factor q2
    (65) termino -> . factor fact_op e2 factor q2
    (71) factor -> . expression
    (72) factor -> . var_cte e1
    (73) factor -> . open_pth expression close_pth
    (44) var_cte -> . func_call
    (45) var_cte -> . cte_bool bvarcte
    (46) var_cte -> . CTE_STR svarcte
    (47) var_cte -> . CTE_NUM nvarcte
    (48) var_cte -> . variable
    (75) open_pth -> . OPEN_PTH
    (52) cte_bool -> . FALSE
    (53) cte_bool -> . TRUE
    (93) variable -> . ID array
    ID              shift and go to state 77
    CTE_STR         shift and go to state 84
    CTE_NUM         shift and go to state 85
    OPEN_PTH        shift and go to state 78
    FALSE           shift and go to state 87
    TRUE            shift and go to state 88

    func_call_param                shift and go to state 153
    expression                     shift and go to state 135
    func_call                      shift and go to state 75
    exp                            shift and go to state 76
    termino                        shift and go to state 79
    factor                         shift and go to state 80
    var_cte                        shift and go to state 81
    open_pth                       shift and go to state 82
    cte_bool                       shift and go to state 83
    variable                       shift and go to state 86

state 130

    (40) var_assignation -> ID e5 assign . e6 expression q3
    (42) e6 -> .
    ID              reduce using rule 42 (e6 -> .)
    CTE_STR         reduce using rule 42 (e6 -> .)
    CTE_NUM         reduce using rule 42 (e6 -> .)
    OPEN_PTH        reduce using rule 42 (e6 -> .)
    FALSE           reduce using rule 42 (e6 -> .)
    TRUE            reduce using rule 42 (e6 -> .)

    e6                             shift and go to state 154

state 131

    (43) assign -> ASSIGN .
    ID              reduce using rule 43 (assign -> ASSIGN .)
    CTE_STR         reduce using rule 43 (assign -> ASSIGN .)
    CTE_NUM         reduce using rule 43 (assign -> ASSIGN .)
    OPEN_PTH        reduce using rule 43 (assign -> ASSIGN .)
    FALSE           reduce using rule 43 (assign -> ASSIGN .)
    TRUE            reduce using rule 43 (assign -> ASSIGN .)


state 132

    (121) pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .
    RETURN          reduce using rule 121 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    PEN_DOWN        reduce using rule 121 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    PEN_UP          reduce using rule 121 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    WHILE           reduce using rule 121 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    IF              reduce using rule 121 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    WRITE           reduce using rule 121 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    READ            reduce using rule 121 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    ID              reduce using rule 121 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    BOOL            reduce using rule 121 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    WORD            reduce using rule 121 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    NUMBER          reduce using rule 121 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    CENTER          reduce using rule 121 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    FORWARD         reduce using rule 121 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    RIGHT           reduce using rule 121 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    LEFT            reduce using rule 121 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    END             reduce using rule 121 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    ELSE            reduce using rule 121 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)


state 133

    (122) pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .
    RETURN          reduce using rule 122 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    PEN_DOWN        reduce using rule 122 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    PEN_UP          reduce using rule 122 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    WHILE           reduce using rule 122 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    IF              reduce using rule 122 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    WRITE           reduce using rule 122 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    READ            reduce using rule 122 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    ID              reduce using rule 122 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    BOOL            reduce using rule 122 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    WORD            reduce using rule 122 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    NUMBER          reduce using rule 122 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    CENTER          reduce using rule 122 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    FORWARD         reduce using rule 122 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    RIGHT           reduce using rule 122 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    LEFT            reduce using rule 122 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    END             reduce using rule 122 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    ELSE            reduce using rule 122 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)


state 134

    (116) move_func -> move_type OPEN_PTH func_call_param . CLOSE_PTH
    CLOSE_PTH       shift and go to state 155


state 135

    (87) func_call_param -> expression . func2 multiple_fc_param
    (71) factor -> expression .
    (88) func2 -> .
  ! reduce/reduce conflict for COMMA resolved using rule 71 (factor -> expression .)
  ! reduce/reduce conflict for CLOSE_PTH resolved using rule 71 (factor -> expression .)
    COMMA           reduce using rule 71 (factor -> expression .)
    CLOSE_PTH       reduce using rule 71 (factor -> expression .)
    DIV             reduce using rule 71 (factor -> expression .)
    MULT            reduce using rule 71 (factor -> expression .)
    SUB             reduce using rule 71 (factor -> expression .)
    SUM             reduce using rule 71 (factor -> expression .)
    EQUAL_TO        reduce using rule 71 (factor -> expression .)
    MORE_OR_EQ_THAN reduce using rule 71 (factor -> expression .)
    LESS_OR_EQ_THAN reduce using rule 71 (factor -> expression .)
    DIFFERENT_TO    reduce using rule 71 (factor -> expression .)
    MORE_THAN       reduce using rule 71 (factor -> expression .)
    LESS_THAN       reduce using rule 71 (factor -> expression .)

    func2                          shift and go to state 156

state 136

    (108) while_stmnt -> WHILE w1 con_expression . w2 stmnt w3 END
    (110) w2 -> .
    RETURN          reduce using rule 110 (w2 -> .)
    PEN_DOWN        reduce using rule 110 (w2 -> .)
    PEN_UP          reduce using rule 110 (w2 -> .)
    WHILE           reduce using rule 110 (w2 -> .)
    IF              reduce using rule 110 (w2 -> .)
    WRITE           reduce using rule 110 (w2 -> .)
    READ            reduce using rule 110 (w2 -> .)
    ID              reduce using rule 110 (w2 -> .)
    BOOL            reduce using rule 110 (w2 -> .)
    WORD            reduce using rule 110 (w2 -> .)
    NUMBER          reduce using rule 110 (w2 -> .)
    CENTER          reduce using rule 110 (w2 -> .)
    FORWARD         reduce using rule 110 (w2 -> .)
    RIGHT           reduce using rule 110 (w2 -> .)
    LEFT            reduce using rule 110 (w2 -> .)
    END             reduce using rule 110 (w2 -> .)

    w2                             shift and go to state 157

state 137

    (101) if_stmnt -> IF con_expression if1 . stmnt if2 else_stmnt
    (26) stmnt -> . empty
    (27) stmnt -> . returnf stmnt
    (28) stmnt -> . var_declaration_func stmnt
    (29) stmnt -> . pen_func stmnt
    (30) stmnt -> . move_func stmnt
    (31) stmnt -> . while_stmnt stmnt
    (32) stmnt -> . if_stmnt stmnt
    (33) stmnt -> . write stmnt
    (34) stmnt -> . read stmnt
    (35) stmnt -> . func_call stmnt
    (36) stmnt -> . var_assignation stmnt
    (125) empty -> .
    (37) returnf -> . RETURN expression
    (38) var_declaration_func -> . var_type addvartype ID varid multiple_vars
    (121) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (122) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (116) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (108) while_stmnt -> . WHILE w1 con_expression w2 stmnt w3 END
    (101) if_stmnt -> . IF con_expression if1 stmnt if2 else_stmnt
    (100) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (92) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (85) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (40) var_assignation -> . ID e5 assign e6 expression q3
    (10) var_type -> . BOOL
    (11) var_type -> . WORD
    (12) var_type -> . NUMBER
    (117) move_type -> . CENTER
    (118) move_type -> . FORWARD
    (119) move_type -> . RIGHT
    (120) move_type -> . LEFT
    END             reduce using rule 125 (empty -> .)
    ELSE            reduce using rule 125 (empty -> .)
    RETURN          shift and go to state 47
    PEN_DOWN        shift and go to state 50
    PEN_UP          shift and go to state 51
    WHILE           shift and go to state 53
    IF              shift and go to state 54
    WRITE           shift and go to state 55
    READ            shift and go to state 56
    ID              shift and go to state 49
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11
    CENTER          shift and go to state 57
    FORWARD         shift and go to state 58
    RIGHT           shift and go to state 59
    LEFT            shift and go to state 60

    stmnt                          shift and go to state 158
    empty                          shift and go to state 36
    returnf                        shift and go to state 37
    var_declaration_func           shift and go to state 38
    pen_func                       shift and go to state 39
    move_func                      shift and go to state 40
    while_stmnt                    shift and go to state 41
    if_stmnt                       shift and go to state 42
    write                          shift and go to state 43
    read                           shift and go to state 44
    func_call                      shift and go to state 45
    var_assignation                shift and go to state 46
    var_type                       shift and go to state 48
    move_type                      shift and go to state 52

state 138

    (112) con_expression -> expression q5 .
    (113) con_expression -> expression q5 . log_op e7 expression q5
    (77) log_op -> . OR
    (78) log_op -> . AND
    RETURN          reduce using rule 112 (con_expression -> expression q5 .)
    PEN_DOWN        reduce using rule 112 (con_expression -> expression q5 .)
    PEN_UP          reduce using rule 112 (con_expression -> expression q5 .)
    WHILE           reduce using rule 112 (con_expression -> expression q5 .)
    IF              reduce using rule 112 (con_expression -> expression q5 .)
    WRITE           reduce using rule 112 (con_expression -> expression q5 .)
    READ            reduce using rule 112 (con_expression -> expression q5 .)
    ID              reduce using rule 112 (con_expression -> expression q5 .)
    BOOL            reduce using rule 112 (con_expression -> expression q5 .)
    WORD            reduce using rule 112 (con_expression -> expression q5 .)
    NUMBER          reduce using rule 112 (con_expression -> expression q5 .)
    CENTER          reduce using rule 112 (con_expression -> expression q5 .)
    FORWARD         reduce using rule 112 (con_expression -> expression q5 .)
    RIGHT           reduce using rule 112 (con_expression -> expression q5 .)
    LEFT            reduce using rule 112 (con_expression -> expression q5 .)
    END             reduce using rule 112 (con_expression -> expression q5 .)
    ELSE            reduce using rule 112 (con_expression -> expression q5 .)
    OR              shift and go to state 160
    AND             shift and go to state 161

    log_op                         shift and go to state 159

state 139

    (100) write -> WRITE OPEN_PTH expression . CLOSE_PTH
    (71) factor -> expression .
  ! shift/reduce conflict for CLOSE_PTH resolved as shift
    CLOSE_PTH       shift and go to state 162
    DIV             reduce using rule 71 (factor -> expression .)
    MULT            reduce using rule 71 (factor -> expression .)
    SUB             reduce using rule 71 (factor -> expression .)
    SUM             reduce using rule 71 (factor -> expression .)
    EQUAL_TO        reduce using rule 71 (factor -> expression .)
    MORE_OR_EQ_THAN reduce using rule 71 (factor -> expression .)
    LESS_OR_EQ_THAN reduce using rule 71 (factor -> expression .)
    DIFFERENT_TO    reduce using rule 71 (factor -> expression .)
    MORE_THAN       reduce using rule 71 (factor -> expression .)
    LESS_THAN       reduce using rule 71 (factor -> expression .)


state 140

    (92) read -> READ OPEN_PTH variable . multiple_vars CLOSE_PTH
    (98) multiple_vars -> . empty
    (99) multiple_vars -> . COMMA variable varid multiple_vars
    (125) empty -> .
    COMMA           shift and go to state 165
    CLOSE_PTH       reduce using rule 125 (empty -> .)

    multiple_vars                  shift and go to state 163
    empty                          shift and go to state 164

state 141

    (93) variable -> ID . array
    (94) array -> . empty
    (95) array -> . OPEN_SQR expression CLOSE_SQR matrix
    (125) empty -> .
    OPEN_SQR        shift and go to state 114
    COMMA           reduce using rule 125 (empty -> .)
    CLOSE_PTH       reduce using rule 125 (empty -> .)
    RETURN          reduce using rule 125 (empty -> .)
    PEN_DOWN        reduce using rule 125 (empty -> .)
    PEN_UP          reduce using rule 125 (empty -> .)
    WHILE           reduce using rule 125 (empty -> .)
    IF              reduce using rule 125 (empty -> .)
    WRITE           reduce using rule 125 (empty -> .)
    READ            reduce using rule 125 (empty -> .)
    ID              reduce using rule 125 (empty -> .)
    BOOL            reduce using rule 125 (empty -> .)
    WORD            reduce using rule 125 (empty -> .)
    NUMBER          reduce using rule 125 (empty -> .)
    CENTER          reduce using rule 125 (empty -> .)
    FORWARD         reduce using rule 125 (empty -> .)
    RIGHT           reduce using rule 125 (empty -> .)
    LEFT            reduce using rule 125 (empty -> .)
    END             reduce using rule 125 (empty -> .)
    ELSE            reduce using rule 125 (empty -> .)

    array                          shift and go to state 112
    empty                          shift and go to state 113

state 142

    (14) func_declaration -> FUNC resetvars func_type ID fd1 OPEN_PTH parameter . CLOSE_PTH stmnt vd1 END
    CLOSE_PTH       shift and go to state 166


state 143

    (22) parameter -> empty .
    CLOSE_PTH       reduce using rule 22 (parameter -> empty .)


state 144

    (23) parameter -> var_type . addvartype ID varid multiple_parameters
    (6) addvartype -> .
    ID              reduce using rule 6 (addvartype -> .)

    addvartype                     shift and go to state 167

state 145

    (56) expression -> exp rel_op exp . q4
    (55) expression -> exp . q4
    (56) expression -> exp . rel_op exp q4
    (57) q4 -> .
    (79) rel_op -> . EQUAL_TO
    (80) rel_op -> . MORE_OR_EQ_THAN
    (81) rel_op -> . LESS_OR_EQ_THAN
    (82) rel_op -> . DIFFERENT_TO
    (83) rel_op -> . MORE_THAN
    (84) rel_op -> . LESS_THAN
  ! shift/reduce conflict for EQUAL_TO resolved as shift
  ! shift/reduce conflict for MORE_OR_EQ_THAN resolved as shift
  ! shift/reduce conflict for LESS_OR_EQ_THAN resolved as shift
  ! shift/reduce conflict for DIFFERENT_TO resolved as shift
  ! shift/reduce conflict for MORE_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
    RETURN          reduce using rule 57 (q4 -> .)
    PEN_DOWN        reduce using rule 57 (q4 -> .)
    PEN_UP          reduce using rule 57 (q4 -> .)
    WHILE           reduce using rule 57 (q4 -> .)
    IF              reduce using rule 57 (q4 -> .)
    WRITE           reduce using rule 57 (q4 -> .)
    READ            reduce using rule 57 (q4 -> .)
    ID              reduce using rule 57 (q4 -> .)
    BOOL            reduce using rule 57 (q4 -> .)
    WORD            reduce using rule 57 (q4 -> .)
    NUMBER          reduce using rule 57 (q4 -> .)
    CENTER          reduce using rule 57 (q4 -> .)
    FORWARD         reduce using rule 57 (q4 -> .)
    RIGHT           reduce using rule 57 (q4 -> .)
    LEFT            reduce using rule 57 (q4 -> .)
    END             reduce using rule 57 (q4 -> .)
    ELSE            reduce using rule 57 (q4 -> .)
    DIV             reduce using rule 57 (q4 -> .)
    MULT            reduce using rule 57 (q4 -> .)
    SUB             reduce using rule 57 (q4 -> .)
    SUM             reduce using rule 57 (q4 -> .)
    OR              reduce using rule 57 (q4 -> .)
    AND             reduce using rule 57 (q4 -> .)
    CLOSE_PTH       reduce using rule 57 (q4 -> .)
    COMMA           reduce using rule 57 (q4 -> .)
    CLOSE_SQR       reduce using rule 57 (q4 -> .)
    EQUAL_TO        shift and go to state 106
    MORE_OR_EQ_THAN shift and go to state 107
    LESS_OR_EQ_THAN shift and go to state 108
    DIFFERENT_TO    shift and go to state 109
    MORE_THAN       shift and go to state 110
    LESS_THAN       shift and go to state 111

    rel_op                         shift and go to state 105
    q4                             shift and go to state 168

state 146

    (71) factor -> expression .
    DIV             reduce using rule 71 (factor -> expression .)
    MULT            reduce using rule 71 (factor -> expression .)
    SUB             reduce using rule 71 (factor -> expression .)
    SUM             reduce using rule 71 (factor -> expression .)
    EQUAL_TO        reduce using rule 71 (factor -> expression .)
    MORE_OR_EQ_THAN reduce using rule 71 (factor -> expression .)
    LESS_OR_EQ_THAN reduce using rule 71 (factor -> expression .)
    DIFFERENT_TO    reduce using rule 71 (factor -> expression .)
    MORE_THAN       reduce using rule 71 (factor -> expression .)
    LESS_THAN       reduce using rule 71 (factor -> expression .)
    RETURN          reduce using rule 71 (factor -> expression .)
    PEN_DOWN        reduce using rule 71 (factor -> expression .)
    PEN_UP          reduce using rule 71 (factor -> expression .)
    WHILE           reduce using rule 71 (factor -> expression .)
    IF              reduce using rule 71 (factor -> expression .)
    WRITE           reduce using rule 71 (factor -> expression .)
    READ            reduce using rule 71 (factor -> expression .)
    ID              reduce using rule 71 (factor -> expression .)
    BOOL            reduce using rule 71 (factor -> expression .)
    WORD            reduce using rule 71 (factor -> expression .)
    NUMBER          reduce using rule 71 (factor -> expression .)
    CENTER          reduce using rule 71 (factor -> expression .)
    FORWARD         reduce using rule 71 (factor -> expression .)
    RIGHT           reduce using rule 71 (factor -> expression .)
    LEFT            reduce using rule 71 (factor -> expression .)
    END             reduce using rule 71 (factor -> expression .)
    ELSE            reduce using rule 71 (factor -> expression .)
    OR              reduce using rule 71 (factor -> expression .)
    AND             reduce using rule 71 (factor -> expression .)
    CLOSE_PTH       reduce using rule 71 (factor -> expression .)
    COMMA           reduce using rule 71 (factor -> expression .)
    CLOSE_SQR       reduce using rule 71 (factor -> expression .)


state 147

    (95) array -> OPEN_SQR expression . CLOSE_SQR matrix
    (71) factor -> expression .
  ! shift/reduce conflict for CLOSE_SQR resolved as shift
    CLOSE_SQR       shift and go to state 169
    DIV             reduce using rule 71 (factor -> expression .)
    MULT            reduce using rule 71 (factor -> expression .)
    SUB             reduce using rule 71 (factor -> expression .)
    SUM             reduce using rule 71 (factor -> expression .)
    EQUAL_TO        reduce using rule 71 (factor -> expression .)
    MORE_OR_EQ_THAN reduce using rule 71 (factor -> expression .)
    LESS_OR_EQ_THAN reduce using rule 71 (factor -> expression .)
    DIFFERENT_TO    reduce using rule 71 (factor -> expression .)
    MORE_THAN       reduce using rule 71 (factor -> expression .)
    LESS_THAN       reduce using rule 71 (factor -> expression .)


state 148

    (59) exp -> termino term_op e3 . termino q1
    (64) termino -> . factor q2
    (65) termino -> . factor fact_op e2 factor q2
    (71) factor -> . expression
    (72) factor -> . var_cte e1
    (73) factor -> . open_pth expression close_pth
    (54) expression -> . func_call q4
    (55) expression -> . exp q4
    (56) expression -> . exp rel_op exp q4
    (44) var_cte -> . func_call
    (45) var_cte -> . cte_bool bvarcte
    (46) var_cte -> . CTE_STR svarcte
    (47) var_cte -> . CTE_NUM nvarcte
    (48) var_cte -> . variable
    (75) open_pth -> . OPEN_PTH
    (85) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (58) exp -> . termino q1
    (59) exp -> . termino term_op e3 termino q1
    (52) cte_bool -> . FALSE
    (53) cte_bool -> . TRUE
    (93) variable -> . ID array
    CTE_STR         shift and go to state 84
    CTE_NUM         shift and go to state 85
    OPEN_PTH        shift and go to state 78
    ID              shift and go to state 77
    FALSE           shift and go to state 87
    TRUE            shift and go to state 88

    termino                        shift and go to state 170
    factor                         shift and go to state 80
    expression                     shift and go to state 146
    var_cte                        shift and go to state 81
    open_pth                       shift and go to state 82
    func_call                      shift and go to state 75
    exp                            shift and go to state 76
    cte_bool                       shift and go to state 83
    variable                       shift and go to state 86

state 149

    (65) termino -> factor fact_op e2 . factor q2
    (71) factor -> . expression
    (72) factor -> . var_cte e1
    (73) factor -> . open_pth expression close_pth
    (54) expression -> . func_call q4
    (55) expression -> . exp q4
    (56) expression -> . exp rel_op exp q4
    (44) var_cte -> . func_call
    (45) var_cte -> . cte_bool bvarcte
    (46) var_cte -> . CTE_STR svarcte
    (47) var_cte -> . CTE_NUM nvarcte
    (48) var_cte -> . variable
    (75) open_pth -> . OPEN_PTH
    (85) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (58) exp -> . termino q1
    (59) exp -> . termino term_op e3 termino q1
    (52) cte_bool -> . FALSE
    (53) cte_bool -> . TRUE
    (93) variable -> . ID array
    (64) termino -> . factor q2
    (65) termino -> . factor fact_op e2 factor q2
    CTE_STR         shift and go to state 84
    CTE_NUM         shift and go to state 85
    OPEN_PTH        shift and go to state 78
    ID              shift and go to state 77
    FALSE           shift and go to state 87
    TRUE            shift and go to state 88

    factor                         shift and go to state 171
    expression                     shift and go to state 146
    var_cte                        shift and go to state 81
    open_pth                       shift and go to state 82
    func_call                      shift and go to state 75
    exp                            shift and go to state 76
    cte_bool                       shift and go to state 83
    variable                       shift and go to state 86
    termino                        shift and go to state 79

state 150

    (73) factor -> open_pth expression close_pth .
    RETURN          reduce using rule 73 (factor -> open_pth expression close_pth .)
    PEN_DOWN        reduce using rule 73 (factor -> open_pth expression close_pth .)
    PEN_UP          reduce using rule 73 (factor -> open_pth expression close_pth .)
    WHILE           reduce using rule 73 (factor -> open_pth expression close_pth .)
    IF              reduce using rule 73 (factor -> open_pth expression close_pth .)
    WRITE           reduce using rule 73 (factor -> open_pth expression close_pth .)
    READ            reduce using rule 73 (factor -> open_pth expression close_pth .)
    ID              reduce using rule 73 (factor -> open_pth expression close_pth .)
    BOOL            reduce using rule 73 (factor -> open_pth expression close_pth .)
    WORD            reduce using rule 73 (factor -> open_pth expression close_pth .)
    NUMBER          reduce using rule 73 (factor -> open_pth expression close_pth .)
    CENTER          reduce using rule 73 (factor -> open_pth expression close_pth .)
    FORWARD         reduce using rule 73 (factor -> open_pth expression close_pth .)
    RIGHT           reduce using rule 73 (factor -> open_pth expression close_pth .)
    LEFT            reduce using rule 73 (factor -> open_pth expression close_pth .)
    END             reduce using rule 73 (factor -> open_pth expression close_pth .)
    ELSE            reduce using rule 73 (factor -> open_pth expression close_pth .)
    DIV             reduce using rule 73 (factor -> open_pth expression close_pth .)
    MULT            reduce using rule 73 (factor -> open_pth expression close_pth .)
    SUB             reduce using rule 73 (factor -> open_pth expression close_pth .)
    SUM             reduce using rule 73 (factor -> open_pth expression close_pth .)
    EQUAL_TO        reduce using rule 73 (factor -> open_pth expression close_pth .)
    MORE_OR_EQ_THAN reduce using rule 73 (factor -> open_pth expression close_pth .)
    LESS_OR_EQ_THAN reduce using rule 73 (factor -> open_pth expression close_pth .)
    DIFFERENT_TO    reduce using rule 73 (factor -> open_pth expression close_pth .)
    MORE_THAN       reduce using rule 73 (factor -> open_pth expression close_pth .)
    LESS_THAN       reduce using rule 73 (factor -> open_pth expression close_pth .)
    OR              reduce using rule 73 (factor -> open_pth expression close_pth .)
    AND             reduce using rule 73 (factor -> open_pth expression close_pth .)
    CLOSE_PTH       reduce using rule 73 (factor -> open_pth expression close_pth .)
    COMMA           reduce using rule 73 (factor -> open_pth expression close_pth .)
    CLOSE_SQR       reduce using rule 73 (factor -> open_pth expression close_pth .)


state 151

    (76) close_pth -> CLOSE_PTH .
    RETURN          reduce using rule 76 (close_pth -> CLOSE_PTH .)
    PEN_DOWN        reduce using rule 76 (close_pth -> CLOSE_PTH .)
    PEN_UP          reduce using rule 76 (close_pth -> CLOSE_PTH .)
    WHILE           reduce using rule 76 (close_pth -> CLOSE_PTH .)
    IF              reduce using rule 76 (close_pth -> CLOSE_PTH .)
    WRITE           reduce using rule 76 (close_pth -> CLOSE_PTH .)
    READ            reduce using rule 76 (close_pth -> CLOSE_PTH .)
    ID              reduce using rule 76 (close_pth -> CLOSE_PTH .)
    BOOL            reduce using rule 76 (close_pth -> CLOSE_PTH .)
    WORD            reduce using rule 76 (close_pth -> CLOSE_PTH .)
    NUMBER          reduce using rule 76 (close_pth -> CLOSE_PTH .)
    CENTER          reduce using rule 76 (close_pth -> CLOSE_PTH .)
    FORWARD         reduce using rule 76 (close_pth -> CLOSE_PTH .)
    RIGHT           reduce using rule 76 (close_pth -> CLOSE_PTH .)
    LEFT            reduce using rule 76 (close_pth -> CLOSE_PTH .)
    END             reduce using rule 76 (close_pth -> CLOSE_PTH .)
    ELSE            reduce using rule 76 (close_pth -> CLOSE_PTH .)
    DIV             reduce using rule 76 (close_pth -> CLOSE_PTH .)
    MULT            reduce using rule 76 (close_pth -> CLOSE_PTH .)
    SUB             reduce using rule 76 (close_pth -> CLOSE_PTH .)
    SUM             reduce using rule 76 (close_pth -> CLOSE_PTH .)
    EQUAL_TO        reduce using rule 76 (close_pth -> CLOSE_PTH .)
    MORE_OR_EQ_THAN reduce using rule 76 (close_pth -> CLOSE_PTH .)
    LESS_OR_EQ_THAN reduce using rule 76 (close_pth -> CLOSE_PTH .)
    DIFFERENT_TO    reduce using rule 76 (close_pth -> CLOSE_PTH .)
    MORE_THAN       reduce using rule 76 (close_pth -> CLOSE_PTH .)
    LESS_THAN       reduce using rule 76 (close_pth -> CLOSE_PTH .)
    OR              reduce using rule 76 (close_pth -> CLOSE_PTH .)
    AND             reduce using rule 76 (close_pth -> CLOSE_PTH .)
    CLOSE_PTH       reduce using rule 76 (close_pth -> CLOSE_PTH .)
    COMMA           reduce using rule 76 (close_pth -> CLOSE_PTH .)
    CLOSE_SQR       reduce using rule 76 (close_pth -> CLOSE_PTH .)


state 152

    (38) var_declaration_func -> var_type addvartype ID varid . multiple_vars
    (98) multiple_vars -> . empty
    (99) multiple_vars -> . COMMA variable varid multiple_vars
    (125) empty -> .
    COMMA           shift and go to state 165
    RETURN          reduce using rule 125 (empty -> .)
    PEN_DOWN        reduce using rule 125 (empty -> .)
    PEN_UP          reduce using rule 125 (empty -> .)
    WHILE           reduce using rule 125 (empty -> .)
    IF              reduce using rule 125 (empty -> .)
    WRITE           reduce using rule 125 (empty -> .)
    READ            reduce using rule 125 (empty -> .)
    ID              reduce using rule 125 (empty -> .)
    BOOL            reduce using rule 125 (empty -> .)
    WORD            reduce using rule 125 (empty -> .)
    NUMBER          reduce using rule 125 (empty -> .)
    CENTER          reduce using rule 125 (empty -> .)
    FORWARD         reduce using rule 125 (empty -> .)
    RIGHT           reduce using rule 125 (empty -> .)
    LEFT            reduce using rule 125 (empty -> .)
    END             reduce using rule 125 (empty -> .)
    ELSE            reduce using rule 125 (empty -> .)

    multiple_vars                  shift and go to state 172
    empty                          shift and go to state 164

state 153

    (85) func_call -> ID OPEN_PTH func1 func_call_param . CLOSE_PTH func3
    CLOSE_PTH       shift and go to state 173


state 154

    (40) var_assignation -> ID e5 assign e6 . expression q3
    (54) expression -> . func_call q4
    (55) expression -> . exp q4
    (56) expression -> . exp rel_op exp q4
    (85) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (58) exp -> . termino q1
    (59) exp -> . termino term_op e3 termino q1
    (64) termino -> . factor q2
    (65) termino -> . factor fact_op e2 factor q2
    (71) factor -> . expression
    (72) factor -> . var_cte e1
    (73) factor -> . open_pth expression close_pth
    (44) var_cte -> . func_call
    (45) var_cte -> . cte_bool bvarcte
    (46) var_cte -> . CTE_STR svarcte
    (47) var_cte -> . CTE_NUM nvarcte
    (48) var_cte -> . variable
    (75) open_pth -> . OPEN_PTH
    (52) cte_bool -> . FALSE
    (53) cte_bool -> . TRUE
    (93) variable -> . ID array
    ID              shift and go to state 77
    CTE_STR         shift and go to state 84
    CTE_NUM         shift and go to state 85
    OPEN_PTH        shift and go to state 78
    FALSE           shift and go to state 87
    TRUE            shift and go to state 88

    expression                     shift and go to state 174
    func_call                      shift and go to state 75
    exp                            shift and go to state 76
    termino                        shift and go to state 79
    factor                         shift and go to state 80
    var_cte                        shift and go to state 81
    open_pth                       shift and go to state 82
    cte_bool                       shift and go to state 83
    variable                       shift and go to state 86

state 155

    (116) move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .
    RETURN          reduce using rule 116 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    PEN_DOWN        reduce using rule 116 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    PEN_UP          reduce using rule 116 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    WHILE           reduce using rule 116 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    IF              reduce using rule 116 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    WRITE           reduce using rule 116 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    READ            reduce using rule 116 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    ID              reduce using rule 116 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    BOOL            reduce using rule 116 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    WORD            reduce using rule 116 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    NUMBER          reduce using rule 116 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    CENTER          reduce using rule 116 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    FORWARD         reduce using rule 116 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    RIGHT           reduce using rule 116 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    LEFT            reduce using rule 116 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    END             reduce using rule 116 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    ELSE            reduce using rule 116 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)


state 156

    (87) func_call_param -> expression func2 . multiple_fc_param
    (90) multiple_fc_param -> . empty
    (91) multiple_fc_param -> . COMMA func_call_param
    (125) empty -> .
    COMMA           shift and go to state 177
    CLOSE_PTH       reduce using rule 125 (empty -> .)

    multiple_fc_param              shift and go to state 175
    empty                          shift and go to state 176

state 157

    (108) while_stmnt -> WHILE w1 con_expression w2 . stmnt w3 END
    (26) stmnt -> . empty
    (27) stmnt -> . returnf stmnt
    (28) stmnt -> . var_declaration_func stmnt
    (29) stmnt -> . pen_func stmnt
    (30) stmnt -> . move_func stmnt
    (31) stmnt -> . while_stmnt stmnt
    (32) stmnt -> . if_stmnt stmnt
    (33) stmnt -> . write stmnt
    (34) stmnt -> . read stmnt
    (35) stmnt -> . func_call stmnt
    (36) stmnt -> . var_assignation stmnt
    (125) empty -> .
    (37) returnf -> . RETURN expression
    (38) var_declaration_func -> . var_type addvartype ID varid multiple_vars
    (121) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (122) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (116) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (108) while_stmnt -> . WHILE w1 con_expression w2 stmnt w3 END
    (101) if_stmnt -> . IF con_expression if1 stmnt if2 else_stmnt
    (100) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (92) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (85) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (40) var_assignation -> . ID e5 assign e6 expression q3
    (10) var_type -> . BOOL
    (11) var_type -> . WORD
    (12) var_type -> . NUMBER
    (117) move_type -> . CENTER
    (118) move_type -> . FORWARD
    (119) move_type -> . RIGHT
    (120) move_type -> . LEFT
    END             reduce using rule 125 (empty -> .)
    RETURN          shift and go to state 47
    PEN_DOWN        shift and go to state 50
    PEN_UP          shift and go to state 51
    WHILE           shift and go to state 53
    IF              shift and go to state 54
    WRITE           shift and go to state 55
    READ            shift and go to state 56
    ID              shift and go to state 49
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11
    CENTER          shift and go to state 57
    FORWARD         shift and go to state 58
    RIGHT           shift and go to state 59
    LEFT            shift and go to state 60

    stmnt                          shift and go to state 178
    empty                          shift and go to state 36
    returnf                        shift and go to state 37
    var_declaration_func           shift and go to state 38
    pen_func                       shift and go to state 39
    move_func                      shift and go to state 40
    while_stmnt                    shift and go to state 41
    if_stmnt                       shift and go to state 42
    write                          shift and go to state 43
    read                           shift and go to state 44
    func_call                      shift and go to state 45
    var_assignation                shift and go to state 46
    var_type                       shift and go to state 48
    move_type                      shift and go to state 52

state 158

    (101) if_stmnt -> IF con_expression if1 stmnt . if2 else_stmnt
    (103) if2 -> .
    END             reduce using rule 103 (if2 -> .)
    ELSE            reduce using rule 103 (if2 -> .)

    if2                            shift and go to state 179

state 159

    (113) con_expression -> expression q5 log_op . e7 expression q5
    (114) e7 -> .
    ID              reduce using rule 114 (e7 -> .)
    CTE_STR         reduce using rule 114 (e7 -> .)
    CTE_NUM         reduce using rule 114 (e7 -> .)
    OPEN_PTH        reduce using rule 114 (e7 -> .)
    FALSE           reduce using rule 114 (e7 -> .)
    TRUE            reduce using rule 114 (e7 -> .)

    e7                             shift and go to state 180

state 160

    (77) log_op -> OR .
    ID              reduce using rule 77 (log_op -> OR .)
    CTE_STR         reduce using rule 77 (log_op -> OR .)
    CTE_NUM         reduce using rule 77 (log_op -> OR .)
    OPEN_PTH        reduce using rule 77 (log_op -> OR .)
    FALSE           reduce using rule 77 (log_op -> OR .)
    TRUE            reduce using rule 77 (log_op -> OR .)


state 161

    (78) log_op -> AND .
    ID              reduce using rule 78 (log_op -> AND .)
    CTE_STR         reduce using rule 78 (log_op -> AND .)
    CTE_NUM         reduce using rule 78 (log_op -> AND .)
    OPEN_PTH        reduce using rule 78 (log_op -> AND .)
    FALSE           reduce using rule 78 (log_op -> AND .)
    TRUE            reduce using rule 78 (log_op -> AND .)


state 162

    (100) write -> WRITE OPEN_PTH expression CLOSE_PTH .
    RETURN          reduce using rule 100 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    PEN_DOWN        reduce using rule 100 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    PEN_UP          reduce using rule 100 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    WHILE           reduce using rule 100 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    IF              reduce using rule 100 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    WRITE           reduce using rule 100 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    READ            reduce using rule 100 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    ID              reduce using rule 100 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    BOOL            reduce using rule 100 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    WORD            reduce using rule 100 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    NUMBER          reduce using rule 100 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    CENTER          reduce using rule 100 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    FORWARD         reduce using rule 100 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    RIGHT           reduce using rule 100 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    LEFT            reduce using rule 100 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    END             reduce using rule 100 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    ELSE            reduce using rule 100 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)


state 163

    (92) read -> READ OPEN_PTH variable multiple_vars . CLOSE_PTH
    CLOSE_PTH       shift and go to state 181


state 164

    (98) multiple_vars -> empty .
    CLOSE_PTH       reduce using rule 98 (multiple_vars -> empty .)
    RETURN          reduce using rule 98 (multiple_vars -> empty .)
    PEN_DOWN        reduce using rule 98 (multiple_vars -> empty .)
    PEN_UP          reduce using rule 98 (multiple_vars -> empty .)
    WHILE           reduce using rule 98 (multiple_vars -> empty .)
    IF              reduce using rule 98 (multiple_vars -> empty .)
    WRITE           reduce using rule 98 (multiple_vars -> empty .)
    READ            reduce using rule 98 (multiple_vars -> empty .)
    ID              reduce using rule 98 (multiple_vars -> empty .)
    BOOL            reduce using rule 98 (multiple_vars -> empty .)
    WORD            reduce using rule 98 (multiple_vars -> empty .)
    NUMBER          reduce using rule 98 (multiple_vars -> empty .)
    CENTER          reduce using rule 98 (multiple_vars -> empty .)
    FORWARD         reduce using rule 98 (multiple_vars -> empty .)
    RIGHT           reduce using rule 98 (multiple_vars -> empty .)
    LEFT            reduce using rule 98 (multiple_vars -> empty .)
    END             reduce using rule 98 (multiple_vars -> empty .)
    ELSE            reduce using rule 98 (multiple_vars -> empty .)


state 165

    (99) multiple_vars -> COMMA . variable varid multiple_vars
    (93) variable -> . ID array
    ID              shift and go to state 141

    variable                       shift and go to state 182

state 166

    (14) func_declaration -> FUNC resetvars func_type ID fd1 OPEN_PTH parameter CLOSE_PTH . stmnt vd1 END
    (26) stmnt -> . empty
    (27) stmnt -> . returnf stmnt
    (28) stmnt -> . var_declaration_func stmnt
    (29) stmnt -> . pen_func stmnt
    (30) stmnt -> . move_func stmnt
    (31) stmnt -> . while_stmnt stmnt
    (32) stmnt -> . if_stmnt stmnt
    (33) stmnt -> . write stmnt
    (34) stmnt -> . read stmnt
    (35) stmnt -> . func_call stmnt
    (36) stmnt -> . var_assignation stmnt
    (125) empty -> .
    (37) returnf -> . RETURN expression
    (38) var_declaration_func -> . var_type addvartype ID varid multiple_vars
    (121) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (122) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (116) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (108) while_stmnt -> . WHILE w1 con_expression w2 stmnt w3 END
    (101) if_stmnt -> . IF con_expression if1 stmnt if2 else_stmnt
    (100) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (92) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (85) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (40) var_assignation -> . ID e5 assign e6 expression q3
    (10) var_type -> . BOOL
    (11) var_type -> . WORD
    (12) var_type -> . NUMBER
    (117) move_type -> . CENTER
    (118) move_type -> . FORWARD
    (119) move_type -> . RIGHT
    (120) move_type -> . LEFT
    END             reduce using rule 125 (empty -> .)
    RETURN          shift and go to state 47
    PEN_DOWN        shift and go to state 50
    PEN_UP          shift and go to state 51
    WHILE           shift and go to state 53
    IF              shift and go to state 54
    WRITE           shift and go to state 55
    READ            shift and go to state 56
    ID              shift and go to state 49
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11
    CENTER          shift and go to state 57
    FORWARD         shift and go to state 58
    RIGHT           shift and go to state 59
    LEFT            shift and go to state 60

    stmnt                          shift and go to state 183
    empty                          shift and go to state 36
    returnf                        shift and go to state 37
    var_declaration_func           shift and go to state 38
    pen_func                       shift and go to state 39
    move_func                      shift and go to state 40
    while_stmnt                    shift and go to state 41
    if_stmnt                       shift and go to state 42
    write                          shift and go to state 43
    read                           shift and go to state 44
    func_call                      shift and go to state 45
    var_assignation                shift and go to state 46
    var_type                       shift and go to state 48
    move_type                      shift and go to state 52

state 167

    (23) parameter -> var_type addvartype . ID varid multiple_parameters
    ID              shift and go to state 184


state 168

    (56) expression -> exp rel_op exp q4 .
    (55) expression -> exp q4 .
  ! reduce/reduce conflict for DIV resolved using rule 56 (expression -> exp rel_op exp q4 .)
  ! reduce/reduce conflict for MULT resolved using rule 56 (expression -> exp rel_op exp q4 .)
  ! reduce/reduce conflict for SUB resolved using rule 56 (expression -> exp rel_op exp q4 .)
  ! reduce/reduce conflict for SUM resolved using rule 56 (expression -> exp rel_op exp q4 .)
  ! reduce/reduce conflict for EQUAL_TO resolved using rule 56 (expression -> exp rel_op exp q4 .)
  ! reduce/reduce conflict for MORE_OR_EQ_THAN resolved using rule 56 (expression -> exp rel_op exp q4 .)
  ! reduce/reduce conflict for LESS_OR_EQ_THAN resolved using rule 56 (expression -> exp rel_op exp q4 .)
  ! reduce/reduce conflict for DIFFERENT_TO resolved using rule 56 (expression -> exp rel_op exp q4 .)
  ! reduce/reduce conflict for MORE_THAN resolved using rule 56 (expression -> exp rel_op exp q4 .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 56 (expression -> exp rel_op exp q4 .)
  ! reduce/reduce conflict for RETURN resolved using rule 56 (expression -> exp rel_op exp q4 .)
  ! reduce/reduce conflict for PEN_DOWN resolved using rule 56 (expression -> exp rel_op exp q4 .)
  ! reduce/reduce conflict for PEN_UP resolved using rule 56 (expression -> exp rel_op exp q4 .)
  ! reduce/reduce conflict for WHILE resolved using rule 56 (expression -> exp rel_op exp q4 .)
  ! reduce/reduce conflict for IF resolved using rule 56 (expression -> exp rel_op exp q4 .)
  ! reduce/reduce conflict for WRITE resolved using rule 56 (expression -> exp rel_op exp q4 .)
  ! reduce/reduce conflict for READ resolved using rule 56 (expression -> exp rel_op exp q4 .)
  ! reduce/reduce conflict for ID resolved using rule 56 (expression -> exp rel_op exp q4 .)
  ! reduce/reduce conflict for BOOL resolved using rule 56 (expression -> exp rel_op exp q4 .)
  ! reduce/reduce conflict for WORD resolved using rule 56 (expression -> exp rel_op exp q4 .)
  ! reduce/reduce conflict for NUMBER resolved using rule 56 (expression -> exp rel_op exp q4 .)
  ! reduce/reduce conflict for CENTER resolved using rule 56 (expression -> exp rel_op exp q4 .)
  ! reduce/reduce conflict for FORWARD resolved using rule 56 (expression -> exp rel_op exp q4 .)
  ! reduce/reduce conflict for RIGHT resolved using rule 56 (expression -> exp rel_op exp q4 .)
  ! reduce/reduce conflict for LEFT resolved using rule 56 (expression -> exp rel_op exp q4 .)
  ! reduce/reduce conflict for END resolved using rule 56 (expression -> exp rel_op exp q4 .)
  ! reduce/reduce conflict for ELSE resolved using rule 56 (expression -> exp rel_op exp q4 .)
  ! reduce/reduce conflict for OR resolved using rule 56 (expression -> exp rel_op exp q4 .)
  ! reduce/reduce conflict for AND resolved using rule 56 (expression -> exp rel_op exp q4 .)
  ! reduce/reduce conflict for CLOSE_PTH resolved using rule 56 (expression -> exp rel_op exp q4 .)
  ! reduce/reduce conflict for COMMA resolved using rule 56 (expression -> exp rel_op exp q4 .)
  ! reduce/reduce conflict for CLOSE_SQR resolved using rule 56 (expression -> exp rel_op exp q4 .)
    RETURN          reduce using rule 56 (expression -> exp rel_op exp q4 .)
    PEN_DOWN        reduce using rule 56 (expression -> exp rel_op exp q4 .)
    PEN_UP          reduce using rule 56 (expression -> exp rel_op exp q4 .)
    WHILE           reduce using rule 56 (expression -> exp rel_op exp q4 .)
    IF              reduce using rule 56 (expression -> exp rel_op exp q4 .)
    WRITE           reduce using rule 56 (expression -> exp rel_op exp q4 .)
    READ            reduce using rule 56 (expression -> exp rel_op exp q4 .)
    ID              reduce using rule 56 (expression -> exp rel_op exp q4 .)
    BOOL            reduce using rule 56 (expression -> exp rel_op exp q4 .)
    WORD            reduce using rule 56 (expression -> exp rel_op exp q4 .)
    NUMBER          reduce using rule 56 (expression -> exp rel_op exp q4 .)
    CENTER          reduce using rule 56 (expression -> exp rel_op exp q4 .)
    FORWARD         reduce using rule 56 (expression -> exp rel_op exp q4 .)
    RIGHT           reduce using rule 56 (expression -> exp rel_op exp q4 .)
    LEFT            reduce using rule 56 (expression -> exp rel_op exp q4 .)
    END             reduce using rule 56 (expression -> exp rel_op exp q4 .)
    ELSE            reduce using rule 56 (expression -> exp rel_op exp q4 .)
    DIV             reduce using rule 56 (expression -> exp rel_op exp q4 .)
    MULT            reduce using rule 56 (expression -> exp rel_op exp q4 .)
    SUB             reduce using rule 56 (expression -> exp rel_op exp q4 .)
    SUM             reduce using rule 56 (expression -> exp rel_op exp q4 .)
    EQUAL_TO        reduce using rule 56 (expression -> exp rel_op exp q4 .)
    MORE_OR_EQ_THAN reduce using rule 56 (expression -> exp rel_op exp q4 .)
    LESS_OR_EQ_THAN reduce using rule 56 (expression -> exp rel_op exp q4 .)
    DIFFERENT_TO    reduce using rule 56 (expression -> exp rel_op exp q4 .)
    MORE_THAN       reduce using rule 56 (expression -> exp rel_op exp q4 .)
    LESS_THAN       reduce using rule 56 (expression -> exp rel_op exp q4 .)
    OR              reduce using rule 56 (expression -> exp rel_op exp q4 .)
    AND             reduce using rule 56 (expression -> exp rel_op exp q4 .)
    CLOSE_PTH       reduce using rule 56 (expression -> exp rel_op exp q4 .)
    COMMA           reduce using rule 56 (expression -> exp rel_op exp q4 .)
    CLOSE_SQR       reduce using rule 56 (expression -> exp rel_op exp q4 .)


state 169

    (95) array -> OPEN_SQR expression CLOSE_SQR . matrix
    (96) matrix -> . empty
    (97) matrix -> . OPEN_SQR expression CLOSE_SQR
    (125) empty -> .
    OPEN_SQR        shift and go to state 185
    RETURN          reduce using rule 125 (empty -> .)
    PEN_DOWN        reduce using rule 125 (empty -> .)
    PEN_UP          reduce using rule 125 (empty -> .)
    WHILE           reduce using rule 125 (empty -> .)
    IF              reduce using rule 125 (empty -> .)
    WRITE           reduce using rule 125 (empty -> .)
    READ            reduce using rule 125 (empty -> .)
    ID              reduce using rule 125 (empty -> .)
    BOOL            reduce using rule 125 (empty -> .)
    WORD            reduce using rule 125 (empty -> .)
    NUMBER          reduce using rule 125 (empty -> .)
    CENTER          reduce using rule 125 (empty -> .)
    FORWARD         reduce using rule 125 (empty -> .)
    RIGHT           reduce using rule 125 (empty -> .)
    LEFT            reduce using rule 125 (empty -> .)
    END             reduce using rule 125 (empty -> .)
    ELSE            reduce using rule 125 (empty -> .)
    DIV             reduce using rule 125 (empty -> .)
    MULT            reduce using rule 125 (empty -> .)
    SUB             reduce using rule 125 (empty -> .)
    SUM             reduce using rule 125 (empty -> .)
    EQUAL_TO        reduce using rule 125 (empty -> .)
    MORE_OR_EQ_THAN reduce using rule 125 (empty -> .)
    LESS_OR_EQ_THAN reduce using rule 125 (empty -> .)
    DIFFERENT_TO    reduce using rule 125 (empty -> .)
    MORE_THAN       reduce using rule 125 (empty -> .)
    LESS_THAN       reduce using rule 125 (empty -> .)
    OR              reduce using rule 125 (empty -> .)
    AND             reduce using rule 125 (empty -> .)
    CLOSE_PTH       reduce using rule 125 (empty -> .)
    COMMA           reduce using rule 125 (empty -> .)
    CLOSE_SQR       reduce using rule 125 (empty -> .)

    matrix                         shift and go to state 186
    empty                          shift and go to state 187

state 170

    (59) exp -> termino term_op e3 termino . q1
    (58) exp -> termino . q1
    (59) exp -> termino . term_op e3 termino q1
    (66) q1 -> .
    (62) term_op -> . SUB
    (63) term_op -> . SUM
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for SUM resolved as shift
    RETURN          reduce using rule 66 (q1 -> .)
    PEN_DOWN        reduce using rule 66 (q1 -> .)
    PEN_UP          reduce using rule 66 (q1 -> .)
    WHILE           reduce using rule 66 (q1 -> .)
    IF              reduce using rule 66 (q1 -> .)
    WRITE           reduce using rule 66 (q1 -> .)
    READ            reduce using rule 66 (q1 -> .)
    ID              reduce using rule 66 (q1 -> .)
    BOOL            reduce using rule 66 (q1 -> .)
    WORD            reduce using rule 66 (q1 -> .)
    NUMBER          reduce using rule 66 (q1 -> .)
    CENTER          reduce using rule 66 (q1 -> .)
    FORWARD         reduce using rule 66 (q1 -> .)
    RIGHT           reduce using rule 66 (q1 -> .)
    LEFT            reduce using rule 66 (q1 -> .)
    END             reduce using rule 66 (q1 -> .)
    ELSE            reduce using rule 66 (q1 -> .)
    DIV             reduce using rule 66 (q1 -> .)
    MULT            reduce using rule 66 (q1 -> .)
    EQUAL_TO        reduce using rule 66 (q1 -> .)
    MORE_OR_EQ_THAN reduce using rule 66 (q1 -> .)
    LESS_OR_EQ_THAN reduce using rule 66 (q1 -> .)
    DIFFERENT_TO    reduce using rule 66 (q1 -> .)
    MORE_THAN       reduce using rule 66 (q1 -> .)
    LESS_THAN       reduce using rule 66 (q1 -> .)
    OR              reduce using rule 66 (q1 -> .)
    AND             reduce using rule 66 (q1 -> .)
    CLOSE_PTH       reduce using rule 66 (q1 -> .)
    COMMA           reduce using rule 66 (q1 -> .)
    CLOSE_SQR       reduce using rule 66 (q1 -> .)
    SUB             shift and go to state 117
    SUM             shift and go to state 118

    term_op                        shift and go to state 116
    q1                             shift and go to state 188

state 171

    (65) termino -> factor fact_op e2 factor . q2
    (64) termino -> factor . q2
    (65) termino -> factor . fact_op e2 factor q2
    (61) q2 -> .
    (69) fact_op -> . DIV
    (70) fact_op -> . MULT
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
    RETURN          reduce using rule 61 (q2 -> .)
    PEN_DOWN        reduce using rule 61 (q2 -> .)
    PEN_UP          reduce using rule 61 (q2 -> .)
    WHILE           reduce using rule 61 (q2 -> .)
    IF              reduce using rule 61 (q2 -> .)
    WRITE           reduce using rule 61 (q2 -> .)
    READ            reduce using rule 61 (q2 -> .)
    ID              reduce using rule 61 (q2 -> .)
    BOOL            reduce using rule 61 (q2 -> .)
    WORD            reduce using rule 61 (q2 -> .)
    NUMBER          reduce using rule 61 (q2 -> .)
    CENTER          reduce using rule 61 (q2 -> .)
    FORWARD         reduce using rule 61 (q2 -> .)
    RIGHT           reduce using rule 61 (q2 -> .)
    LEFT            reduce using rule 61 (q2 -> .)
    END             reduce using rule 61 (q2 -> .)
    ELSE            reduce using rule 61 (q2 -> .)
    SUB             reduce using rule 61 (q2 -> .)
    SUM             reduce using rule 61 (q2 -> .)
    EQUAL_TO        reduce using rule 61 (q2 -> .)
    MORE_OR_EQ_THAN reduce using rule 61 (q2 -> .)
    LESS_OR_EQ_THAN reduce using rule 61 (q2 -> .)
    DIFFERENT_TO    reduce using rule 61 (q2 -> .)
    MORE_THAN       reduce using rule 61 (q2 -> .)
    LESS_THAN       reduce using rule 61 (q2 -> .)
    OR              reduce using rule 61 (q2 -> .)
    AND             reduce using rule 61 (q2 -> .)
    CLOSE_PTH       reduce using rule 61 (q2 -> .)
    COMMA           reduce using rule 61 (q2 -> .)
    CLOSE_SQR       reduce using rule 61 (q2 -> .)
    DIV             shift and go to state 121
    MULT            shift and go to state 122

    fact_op                        shift and go to state 120
    q2                             shift and go to state 189

state 172

    (38) var_declaration_func -> var_type addvartype ID varid multiple_vars .
    RETURN          reduce using rule 38 (var_declaration_func -> var_type addvartype ID varid multiple_vars .)
    PEN_DOWN        reduce using rule 38 (var_declaration_func -> var_type addvartype ID varid multiple_vars .)
    PEN_UP          reduce using rule 38 (var_declaration_func -> var_type addvartype ID varid multiple_vars .)
    WHILE           reduce using rule 38 (var_declaration_func -> var_type addvartype ID varid multiple_vars .)
    IF              reduce using rule 38 (var_declaration_func -> var_type addvartype ID varid multiple_vars .)
    WRITE           reduce using rule 38 (var_declaration_func -> var_type addvartype ID varid multiple_vars .)
    READ            reduce using rule 38 (var_declaration_func -> var_type addvartype ID varid multiple_vars .)
    ID              reduce using rule 38 (var_declaration_func -> var_type addvartype ID varid multiple_vars .)
    BOOL            reduce using rule 38 (var_declaration_func -> var_type addvartype ID varid multiple_vars .)
    WORD            reduce using rule 38 (var_declaration_func -> var_type addvartype ID varid multiple_vars .)
    NUMBER          reduce using rule 38 (var_declaration_func -> var_type addvartype ID varid multiple_vars .)
    CENTER          reduce using rule 38 (var_declaration_func -> var_type addvartype ID varid multiple_vars .)
    FORWARD         reduce using rule 38 (var_declaration_func -> var_type addvartype ID varid multiple_vars .)
    RIGHT           reduce using rule 38 (var_declaration_func -> var_type addvartype ID varid multiple_vars .)
    LEFT            reduce using rule 38 (var_declaration_func -> var_type addvartype ID varid multiple_vars .)
    END             reduce using rule 38 (var_declaration_func -> var_type addvartype ID varid multiple_vars .)
    ELSE            reduce using rule 38 (var_declaration_func -> var_type addvartype ID varid multiple_vars .)


state 173

    (85) func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH . func3
    (89) func3 -> .
    RETURN          reduce using rule 89 (func3 -> .)
    PEN_DOWN        reduce using rule 89 (func3 -> .)
    PEN_UP          reduce using rule 89 (func3 -> .)
    WHILE           reduce using rule 89 (func3 -> .)
    IF              reduce using rule 89 (func3 -> .)
    WRITE           reduce using rule 89 (func3 -> .)
    READ            reduce using rule 89 (func3 -> .)
    ID              reduce using rule 89 (func3 -> .)
    BOOL            reduce using rule 89 (func3 -> .)
    WORD            reduce using rule 89 (func3 -> .)
    NUMBER          reduce using rule 89 (func3 -> .)
    CENTER          reduce using rule 89 (func3 -> .)
    FORWARD         reduce using rule 89 (func3 -> .)
    RIGHT           reduce using rule 89 (func3 -> .)
    LEFT            reduce using rule 89 (func3 -> .)
    END             reduce using rule 89 (func3 -> .)
    ELSE            reduce using rule 89 (func3 -> .)
    DIV             reduce using rule 89 (func3 -> .)
    MULT            reduce using rule 89 (func3 -> .)
    SUB             reduce using rule 89 (func3 -> .)
    SUM             reduce using rule 89 (func3 -> .)
    EQUAL_TO        reduce using rule 89 (func3 -> .)
    MORE_OR_EQ_THAN reduce using rule 89 (func3 -> .)
    LESS_OR_EQ_THAN reduce using rule 89 (func3 -> .)
    DIFFERENT_TO    reduce using rule 89 (func3 -> .)
    MORE_THAN       reduce using rule 89 (func3 -> .)
    LESS_THAN       reduce using rule 89 (func3 -> .)
    OR              reduce using rule 89 (func3 -> .)
    AND             reduce using rule 89 (func3 -> .)
    CLOSE_PTH       reduce using rule 89 (func3 -> .)
    COMMA           reduce using rule 89 (func3 -> .)
    CLOSE_SQR       reduce using rule 89 (func3 -> .)

    func3                          shift and go to state 190

state 174

    (40) var_assignation -> ID e5 assign e6 expression . q3
    (71) factor -> expression .
    (67) q3 -> .
  ! reduce/reduce conflict for RETURN resolved using rule 67 (q3 -> .)
  ! reduce/reduce conflict for PEN_DOWN resolved using rule 67 (q3 -> .)
  ! reduce/reduce conflict for PEN_UP resolved using rule 67 (q3 -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 67 (q3 -> .)
  ! reduce/reduce conflict for IF resolved using rule 67 (q3 -> .)
  ! reduce/reduce conflict for WRITE resolved using rule 67 (q3 -> .)
  ! reduce/reduce conflict for READ resolved using rule 67 (q3 -> .)
  ! reduce/reduce conflict for ID resolved using rule 67 (q3 -> .)
  ! reduce/reduce conflict for BOOL resolved using rule 67 (q3 -> .)
  ! reduce/reduce conflict for WORD resolved using rule 67 (q3 -> .)
  ! reduce/reduce conflict for NUMBER resolved using rule 67 (q3 -> .)
  ! reduce/reduce conflict for CENTER resolved using rule 67 (q3 -> .)
  ! reduce/reduce conflict for FORWARD resolved using rule 67 (q3 -> .)
  ! reduce/reduce conflict for RIGHT resolved using rule 67 (q3 -> .)
  ! reduce/reduce conflict for LEFT resolved using rule 67 (q3 -> .)
  ! reduce/reduce conflict for END resolved using rule 67 (q3 -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 67 (q3 -> .)
    SUB             reduce using rule 71 (factor -> expression .)
    SUM             reduce using rule 71 (factor -> expression .)
    EQUAL_TO        reduce using rule 71 (factor -> expression .)
    MORE_OR_EQ_THAN reduce using rule 71 (factor -> expression .)
    LESS_OR_EQ_THAN reduce using rule 71 (factor -> expression .)
    DIFFERENT_TO    reduce using rule 71 (factor -> expression .)
    MORE_THAN       reduce using rule 71 (factor -> expression .)
    LESS_THAN       reduce using rule 71 (factor -> expression .)
    DIV             reduce using rule 71 (factor -> expression .)
    MULT            reduce using rule 71 (factor -> expression .)
    RETURN          reduce using rule 67 (q3 -> .)
    PEN_DOWN        reduce using rule 67 (q3 -> .)
    PEN_UP          reduce using rule 67 (q3 -> .)
    WHILE           reduce using rule 67 (q3 -> .)
    IF              reduce using rule 67 (q3 -> .)
    WRITE           reduce using rule 67 (q3 -> .)
    READ            reduce using rule 67 (q3 -> .)
    ID              reduce using rule 67 (q3 -> .)
    BOOL            reduce using rule 67 (q3 -> .)
    WORD            reduce using rule 67 (q3 -> .)
    NUMBER          reduce using rule 67 (q3 -> .)
    CENTER          reduce using rule 67 (q3 -> .)
    FORWARD         reduce using rule 67 (q3 -> .)
    RIGHT           reduce using rule 67 (q3 -> .)
    LEFT            reduce using rule 67 (q3 -> .)
    END             reduce using rule 67 (q3 -> .)
    ELSE            reduce using rule 67 (q3 -> .)

    q3                             shift and go to state 191

state 175

    (87) func_call_param -> expression func2 multiple_fc_param .
    CLOSE_PTH       reduce using rule 87 (func_call_param -> expression func2 multiple_fc_param .)


state 176

    (90) multiple_fc_param -> empty .
    CLOSE_PTH       reduce using rule 90 (multiple_fc_param -> empty .)


state 177

    (91) multiple_fc_param -> COMMA . func_call_param
    (87) func_call_param -> . expression func2 multiple_fc_param
    (54) expression -> . func_call q4
    (55) expression -> . exp q4
    (56) expression -> . exp rel_op exp q4
    (85) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (58) exp -> . termino q1
    (59) exp -> . termino term_op e3 termino q1
    (64) termino -> . factor q2
    (65) termino -> . factor fact_op e2 factor q2
    (71) factor -> . expression
    (72) factor -> . var_cte e1
    (73) factor -> . open_pth expression close_pth
    (44) var_cte -> . func_call
    (45) var_cte -> . cte_bool bvarcte
    (46) var_cte -> . CTE_STR svarcte
    (47) var_cte -> . CTE_NUM nvarcte
    (48) var_cte -> . variable
    (75) open_pth -> . OPEN_PTH
    (52) cte_bool -> . FALSE
    (53) cte_bool -> . TRUE
    (93) variable -> . ID array
    ID              shift and go to state 77
    CTE_STR         shift and go to state 84
    CTE_NUM         shift and go to state 85
    OPEN_PTH        shift and go to state 78
    FALSE           shift and go to state 87
    TRUE            shift and go to state 88

    func_call_param                shift and go to state 192
    expression                     shift and go to state 135
    func_call                      shift and go to state 75
    exp                            shift and go to state 76
    termino                        shift and go to state 79
    factor                         shift and go to state 80
    var_cte                        shift and go to state 81
    open_pth                       shift and go to state 82
    cte_bool                       shift and go to state 83
    variable                       shift and go to state 86

state 178

    (108) while_stmnt -> WHILE w1 con_expression w2 stmnt . w3 END
    (111) w3 -> .
    END             reduce using rule 111 (w3 -> .)

    w3                             shift and go to state 193

state 179

    (101) if_stmnt -> IF con_expression if1 stmnt if2 . else_stmnt
    (104) else_stmnt -> . END
    (105) else_stmnt -> . ELSE if3 stmnt if4 END
    END             shift and go to state 195
    ELSE            shift and go to state 196

    else_stmnt                     shift and go to state 194

state 180

    (113) con_expression -> expression q5 log_op e7 . expression q5
    (54) expression -> . func_call q4
    (55) expression -> . exp q4
    (56) expression -> . exp rel_op exp q4
    (85) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (58) exp -> . termino q1
    (59) exp -> . termino term_op e3 termino q1
    (64) termino -> . factor q2
    (65) termino -> . factor fact_op e2 factor q2
    (71) factor -> . expression
    (72) factor -> . var_cte e1
    (73) factor -> . open_pth expression close_pth
    (44) var_cte -> . func_call
    (45) var_cte -> . cte_bool bvarcte
    (46) var_cte -> . CTE_STR svarcte
    (47) var_cte -> . CTE_NUM nvarcte
    (48) var_cte -> . variable
    (75) open_pth -> . OPEN_PTH
    (52) cte_bool -> . FALSE
    (53) cte_bool -> . TRUE
    (93) variable -> . ID array
    ID              shift and go to state 77
    CTE_STR         shift and go to state 84
    CTE_NUM         shift and go to state 85
    OPEN_PTH        shift and go to state 78
    FALSE           shift and go to state 87
    TRUE            shift and go to state 88

    expression                     shift and go to state 197
    func_call                      shift and go to state 75
    exp                            shift and go to state 76
    termino                        shift and go to state 79
    factor                         shift and go to state 80
    var_cte                        shift and go to state 81
    open_pth                       shift and go to state 82
    cte_bool                       shift and go to state 83
    variable                       shift and go to state 86

state 181

    (92) read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .
    RETURN          reduce using rule 92 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    PEN_DOWN        reduce using rule 92 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    PEN_UP          reduce using rule 92 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    WHILE           reduce using rule 92 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    IF              reduce using rule 92 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    WRITE           reduce using rule 92 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    READ            reduce using rule 92 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    ID              reduce using rule 92 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    BOOL            reduce using rule 92 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    WORD            reduce using rule 92 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    NUMBER          reduce using rule 92 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    CENTER          reduce using rule 92 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    FORWARD         reduce using rule 92 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    RIGHT           reduce using rule 92 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    LEFT            reduce using rule 92 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    END             reduce using rule 92 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    ELSE            reduce using rule 92 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)


state 182

    (99) multiple_vars -> COMMA variable . varid multiple_vars
    (39) varid -> .
    COMMA           reduce using rule 39 (varid -> .)
    CLOSE_PTH       reduce using rule 39 (varid -> .)
    RETURN          reduce using rule 39 (varid -> .)
    PEN_DOWN        reduce using rule 39 (varid -> .)
    PEN_UP          reduce using rule 39 (varid -> .)
    WHILE           reduce using rule 39 (varid -> .)
    IF              reduce using rule 39 (varid -> .)
    WRITE           reduce using rule 39 (varid -> .)
    READ            reduce using rule 39 (varid -> .)
    ID              reduce using rule 39 (varid -> .)
    BOOL            reduce using rule 39 (varid -> .)
    WORD            reduce using rule 39 (varid -> .)
    NUMBER          reduce using rule 39 (varid -> .)
    CENTER          reduce using rule 39 (varid -> .)
    FORWARD         reduce using rule 39 (varid -> .)
    RIGHT           reduce using rule 39 (varid -> .)
    LEFT            reduce using rule 39 (varid -> .)
    END             reduce using rule 39 (varid -> .)
    ELSE            reduce using rule 39 (varid -> .)

    varid                          shift and go to state 198

state 183

    (14) func_declaration -> FUNC resetvars func_type ID fd1 OPEN_PTH parameter CLOSE_PTH stmnt . vd1 END
    (17) vd1 -> .
    END             reduce using rule 17 (vd1 -> .)

    vd1                            shift and go to state 199

state 184

    (23) parameter -> var_type addvartype ID . varid multiple_parameters
    (39) varid -> .
    COMMA           reduce using rule 39 (varid -> .)
    CLOSE_PTH       reduce using rule 39 (varid -> .)

    varid                          shift and go to state 200

state 185

    (97) matrix -> OPEN_SQR . expression CLOSE_SQR
    (54) expression -> . func_call q4
    (55) expression -> . exp q4
    (56) expression -> . exp rel_op exp q4
    (85) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (58) exp -> . termino q1
    (59) exp -> . termino term_op e3 termino q1
    (64) termino -> . factor q2
    (65) termino -> . factor fact_op e2 factor q2
    (71) factor -> . expression
    (72) factor -> . var_cte e1
    (73) factor -> . open_pth expression close_pth
    (44) var_cte -> . func_call
    (45) var_cte -> . cte_bool bvarcte
    (46) var_cte -> . CTE_STR svarcte
    (47) var_cte -> . CTE_NUM nvarcte
    (48) var_cte -> . variable
    (75) open_pth -> . OPEN_PTH
    (52) cte_bool -> . FALSE
    (53) cte_bool -> . TRUE
    (93) variable -> . ID array
    ID              shift and go to state 77
    CTE_STR         shift and go to state 84
    CTE_NUM         shift and go to state 85
    OPEN_PTH        shift and go to state 78
    FALSE           shift and go to state 87
    TRUE            shift and go to state 88

    expression                     shift and go to state 201
    func_call                      shift and go to state 75
    exp                            shift and go to state 76
    termino                        shift and go to state 79
    factor                         shift and go to state 80
    var_cte                        shift and go to state 81
    open_pth                       shift and go to state 82
    cte_bool                       shift and go to state 83
    variable                       shift and go to state 86

state 186

    (95) array -> OPEN_SQR expression CLOSE_SQR matrix .
    RETURN          reduce using rule 95 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    PEN_DOWN        reduce using rule 95 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    PEN_UP          reduce using rule 95 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    WHILE           reduce using rule 95 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    IF              reduce using rule 95 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    WRITE           reduce using rule 95 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    READ            reduce using rule 95 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    ID              reduce using rule 95 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    BOOL            reduce using rule 95 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    WORD            reduce using rule 95 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    NUMBER          reduce using rule 95 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    CENTER          reduce using rule 95 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    FORWARD         reduce using rule 95 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    RIGHT           reduce using rule 95 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    LEFT            reduce using rule 95 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    END             reduce using rule 95 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    ELSE            reduce using rule 95 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    DIV             reduce using rule 95 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    MULT            reduce using rule 95 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    SUB             reduce using rule 95 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    SUM             reduce using rule 95 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    EQUAL_TO        reduce using rule 95 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    MORE_OR_EQ_THAN reduce using rule 95 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    LESS_OR_EQ_THAN reduce using rule 95 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    DIFFERENT_TO    reduce using rule 95 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    MORE_THAN       reduce using rule 95 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    LESS_THAN       reduce using rule 95 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    OR              reduce using rule 95 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    AND             reduce using rule 95 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    CLOSE_PTH       reduce using rule 95 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    COMMA           reduce using rule 95 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    CLOSE_SQR       reduce using rule 95 (array -> OPEN_SQR expression CLOSE_SQR matrix .)


state 187

    (96) matrix -> empty .
    RETURN          reduce using rule 96 (matrix -> empty .)
    PEN_DOWN        reduce using rule 96 (matrix -> empty .)
    PEN_UP          reduce using rule 96 (matrix -> empty .)
    WHILE           reduce using rule 96 (matrix -> empty .)
    IF              reduce using rule 96 (matrix -> empty .)
    WRITE           reduce using rule 96 (matrix -> empty .)
    READ            reduce using rule 96 (matrix -> empty .)
    ID              reduce using rule 96 (matrix -> empty .)
    BOOL            reduce using rule 96 (matrix -> empty .)
    WORD            reduce using rule 96 (matrix -> empty .)
    NUMBER          reduce using rule 96 (matrix -> empty .)
    CENTER          reduce using rule 96 (matrix -> empty .)
    FORWARD         reduce using rule 96 (matrix -> empty .)
    RIGHT           reduce using rule 96 (matrix -> empty .)
    LEFT            reduce using rule 96 (matrix -> empty .)
    END             reduce using rule 96 (matrix -> empty .)
    ELSE            reduce using rule 96 (matrix -> empty .)
    DIV             reduce using rule 96 (matrix -> empty .)
    MULT            reduce using rule 96 (matrix -> empty .)
    SUB             reduce using rule 96 (matrix -> empty .)
    SUM             reduce using rule 96 (matrix -> empty .)
    EQUAL_TO        reduce using rule 96 (matrix -> empty .)
    MORE_OR_EQ_THAN reduce using rule 96 (matrix -> empty .)
    LESS_OR_EQ_THAN reduce using rule 96 (matrix -> empty .)
    DIFFERENT_TO    reduce using rule 96 (matrix -> empty .)
    MORE_THAN       reduce using rule 96 (matrix -> empty .)
    LESS_THAN       reduce using rule 96 (matrix -> empty .)
    OR              reduce using rule 96 (matrix -> empty .)
    AND             reduce using rule 96 (matrix -> empty .)
    CLOSE_PTH       reduce using rule 96 (matrix -> empty .)
    COMMA           reduce using rule 96 (matrix -> empty .)
    CLOSE_SQR       reduce using rule 96 (matrix -> empty .)


state 188

    (59) exp -> termino term_op e3 termino q1 .
    (58) exp -> termino q1 .
  ! reduce/reduce conflict for DIV resolved using rule 59 (exp -> termino term_op e3 termino q1 .)
  ! reduce/reduce conflict for MULT resolved using rule 59 (exp -> termino term_op e3 termino q1 .)
  ! reduce/reduce conflict for SUB resolved using rule 59 (exp -> termino term_op e3 termino q1 .)
  ! reduce/reduce conflict for SUM resolved using rule 59 (exp -> termino term_op e3 termino q1 .)
  ! reduce/reduce conflict for EQUAL_TO resolved using rule 59 (exp -> termino term_op e3 termino q1 .)
  ! reduce/reduce conflict for MORE_OR_EQ_THAN resolved using rule 59 (exp -> termino term_op e3 termino q1 .)
  ! reduce/reduce conflict for LESS_OR_EQ_THAN resolved using rule 59 (exp -> termino term_op e3 termino q1 .)
  ! reduce/reduce conflict for DIFFERENT_TO resolved using rule 59 (exp -> termino term_op e3 termino q1 .)
  ! reduce/reduce conflict for MORE_THAN resolved using rule 59 (exp -> termino term_op e3 termino q1 .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 59 (exp -> termino term_op e3 termino q1 .)
  ! reduce/reduce conflict for RETURN resolved using rule 59 (exp -> termino term_op e3 termino q1 .)
  ! reduce/reduce conflict for PEN_DOWN resolved using rule 59 (exp -> termino term_op e3 termino q1 .)
  ! reduce/reduce conflict for PEN_UP resolved using rule 59 (exp -> termino term_op e3 termino q1 .)
  ! reduce/reduce conflict for WHILE resolved using rule 59 (exp -> termino term_op e3 termino q1 .)
  ! reduce/reduce conflict for IF resolved using rule 59 (exp -> termino term_op e3 termino q1 .)
  ! reduce/reduce conflict for WRITE resolved using rule 59 (exp -> termino term_op e3 termino q1 .)
  ! reduce/reduce conflict for READ resolved using rule 59 (exp -> termino term_op e3 termino q1 .)
  ! reduce/reduce conflict for ID resolved using rule 59 (exp -> termino term_op e3 termino q1 .)
  ! reduce/reduce conflict for BOOL resolved using rule 59 (exp -> termino term_op e3 termino q1 .)
  ! reduce/reduce conflict for WORD resolved using rule 59 (exp -> termino term_op e3 termino q1 .)
  ! reduce/reduce conflict for NUMBER resolved using rule 59 (exp -> termino term_op e3 termino q1 .)
  ! reduce/reduce conflict for CENTER resolved using rule 59 (exp -> termino term_op e3 termino q1 .)
  ! reduce/reduce conflict for FORWARD resolved using rule 59 (exp -> termino term_op e3 termino q1 .)
  ! reduce/reduce conflict for RIGHT resolved using rule 59 (exp -> termino term_op e3 termino q1 .)
  ! reduce/reduce conflict for LEFT resolved using rule 59 (exp -> termino term_op e3 termino q1 .)
  ! reduce/reduce conflict for END resolved using rule 59 (exp -> termino term_op e3 termino q1 .)
  ! reduce/reduce conflict for ELSE resolved using rule 59 (exp -> termino term_op e3 termino q1 .)
  ! reduce/reduce conflict for OR resolved using rule 59 (exp -> termino term_op e3 termino q1 .)
  ! reduce/reduce conflict for AND resolved using rule 59 (exp -> termino term_op e3 termino q1 .)
  ! reduce/reduce conflict for CLOSE_PTH resolved using rule 59 (exp -> termino term_op e3 termino q1 .)
  ! reduce/reduce conflict for COMMA resolved using rule 59 (exp -> termino term_op e3 termino q1 .)
  ! reduce/reduce conflict for CLOSE_SQR resolved using rule 59 (exp -> termino term_op e3 termino q1 .)
    RETURN          reduce using rule 59 (exp -> termino term_op e3 termino q1 .)
    PEN_DOWN        reduce using rule 59 (exp -> termino term_op e3 termino q1 .)
    PEN_UP          reduce using rule 59 (exp -> termino term_op e3 termino q1 .)
    WHILE           reduce using rule 59 (exp -> termino term_op e3 termino q1 .)
    IF              reduce using rule 59 (exp -> termino term_op e3 termino q1 .)
    WRITE           reduce using rule 59 (exp -> termino term_op e3 termino q1 .)
    READ            reduce using rule 59 (exp -> termino term_op e3 termino q1 .)
    ID              reduce using rule 59 (exp -> termino term_op e3 termino q1 .)
    BOOL            reduce using rule 59 (exp -> termino term_op e3 termino q1 .)
    WORD            reduce using rule 59 (exp -> termino term_op e3 termino q1 .)
    NUMBER          reduce using rule 59 (exp -> termino term_op e3 termino q1 .)
    CENTER          reduce using rule 59 (exp -> termino term_op e3 termino q1 .)
    FORWARD         reduce using rule 59 (exp -> termino term_op e3 termino q1 .)
    RIGHT           reduce using rule 59 (exp -> termino term_op e3 termino q1 .)
    LEFT            reduce using rule 59 (exp -> termino term_op e3 termino q1 .)
    END             reduce using rule 59 (exp -> termino term_op e3 termino q1 .)
    ELSE            reduce using rule 59 (exp -> termino term_op e3 termino q1 .)
    DIV             reduce using rule 59 (exp -> termino term_op e3 termino q1 .)
    MULT            reduce using rule 59 (exp -> termino term_op e3 termino q1 .)
    SUB             reduce using rule 59 (exp -> termino term_op e3 termino q1 .)
    SUM             reduce using rule 59 (exp -> termino term_op e3 termino q1 .)
    EQUAL_TO        reduce using rule 59 (exp -> termino term_op e3 termino q1 .)
    MORE_OR_EQ_THAN reduce using rule 59 (exp -> termino term_op e3 termino q1 .)
    LESS_OR_EQ_THAN reduce using rule 59 (exp -> termino term_op e3 termino q1 .)
    DIFFERENT_TO    reduce using rule 59 (exp -> termino term_op e3 termino q1 .)
    MORE_THAN       reduce using rule 59 (exp -> termino term_op e3 termino q1 .)
    LESS_THAN       reduce using rule 59 (exp -> termino term_op e3 termino q1 .)
    OR              reduce using rule 59 (exp -> termino term_op e3 termino q1 .)
    AND             reduce using rule 59 (exp -> termino term_op e3 termino q1 .)
    CLOSE_PTH       reduce using rule 59 (exp -> termino term_op e3 termino q1 .)
    COMMA           reduce using rule 59 (exp -> termino term_op e3 termino q1 .)
    CLOSE_SQR       reduce using rule 59 (exp -> termino term_op e3 termino q1 .)


state 189

    (65) termino -> factor fact_op e2 factor q2 .
    (64) termino -> factor q2 .
  ! reduce/reduce conflict for DIV resolved using rule 65 (termino -> factor fact_op e2 factor q2 .)
  ! reduce/reduce conflict for MULT resolved using rule 65 (termino -> factor fact_op e2 factor q2 .)
  ! reduce/reduce conflict for SUB resolved using rule 65 (termino -> factor fact_op e2 factor q2 .)
  ! reduce/reduce conflict for SUM resolved using rule 65 (termino -> factor fact_op e2 factor q2 .)
  ! reduce/reduce conflict for EQUAL_TO resolved using rule 65 (termino -> factor fact_op e2 factor q2 .)
  ! reduce/reduce conflict for MORE_OR_EQ_THAN resolved using rule 65 (termino -> factor fact_op e2 factor q2 .)
  ! reduce/reduce conflict for LESS_OR_EQ_THAN resolved using rule 65 (termino -> factor fact_op e2 factor q2 .)
  ! reduce/reduce conflict for DIFFERENT_TO resolved using rule 65 (termino -> factor fact_op e2 factor q2 .)
  ! reduce/reduce conflict for MORE_THAN resolved using rule 65 (termino -> factor fact_op e2 factor q2 .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 65 (termino -> factor fact_op e2 factor q2 .)
  ! reduce/reduce conflict for RETURN resolved using rule 65 (termino -> factor fact_op e2 factor q2 .)
  ! reduce/reduce conflict for PEN_DOWN resolved using rule 65 (termino -> factor fact_op e2 factor q2 .)
  ! reduce/reduce conflict for PEN_UP resolved using rule 65 (termino -> factor fact_op e2 factor q2 .)
  ! reduce/reduce conflict for WHILE resolved using rule 65 (termino -> factor fact_op e2 factor q2 .)
  ! reduce/reduce conflict for IF resolved using rule 65 (termino -> factor fact_op e2 factor q2 .)
  ! reduce/reduce conflict for WRITE resolved using rule 65 (termino -> factor fact_op e2 factor q2 .)
  ! reduce/reduce conflict for READ resolved using rule 65 (termino -> factor fact_op e2 factor q2 .)
  ! reduce/reduce conflict for ID resolved using rule 65 (termino -> factor fact_op e2 factor q2 .)
  ! reduce/reduce conflict for BOOL resolved using rule 65 (termino -> factor fact_op e2 factor q2 .)
  ! reduce/reduce conflict for WORD resolved using rule 65 (termino -> factor fact_op e2 factor q2 .)
  ! reduce/reduce conflict for NUMBER resolved using rule 65 (termino -> factor fact_op e2 factor q2 .)
  ! reduce/reduce conflict for CENTER resolved using rule 65 (termino -> factor fact_op e2 factor q2 .)
  ! reduce/reduce conflict for FORWARD resolved using rule 65 (termino -> factor fact_op e2 factor q2 .)
  ! reduce/reduce conflict for RIGHT resolved using rule 65 (termino -> factor fact_op e2 factor q2 .)
  ! reduce/reduce conflict for LEFT resolved using rule 65 (termino -> factor fact_op e2 factor q2 .)
  ! reduce/reduce conflict for END resolved using rule 65 (termino -> factor fact_op e2 factor q2 .)
  ! reduce/reduce conflict for ELSE resolved using rule 65 (termino -> factor fact_op e2 factor q2 .)
  ! reduce/reduce conflict for OR resolved using rule 65 (termino -> factor fact_op e2 factor q2 .)
  ! reduce/reduce conflict for AND resolved using rule 65 (termino -> factor fact_op e2 factor q2 .)
  ! reduce/reduce conflict for CLOSE_PTH resolved using rule 65 (termino -> factor fact_op e2 factor q2 .)
  ! reduce/reduce conflict for COMMA resolved using rule 65 (termino -> factor fact_op e2 factor q2 .)
  ! reduce/reduce conflict for CLOSE_SQR resolved using rule 65 (termino -> factor fact_op e2 factor q2 .)
    RETURN          reduce using rule 65 (termino -> factor fact_op e2 factor q2 .)
    PEN_DOWN        reduce using rule 65 (termino -> factor fact_op e2 factor q2 .)
    PEN_UP          reduce using rule 65 (termino -> factor fact_op e2 factor q2 .)
    WHILE           reduce using rule 65 (termino -> factor fact_op e2 factor q2 .)
    IF              reduce using rule 65 (termino -> factor fact_op e2 factor q2 .)
    WRITE           reduce using rule 65 (termino -> factor fact_op e2 factor q2 .)
    READ            reduce using rule 65 (termino -> factor fact_op e2 factor q2 .)
    ID              reduce using rule 65 (termino -> factor fact_op e2 factor q2 .)
    BOOL            reduce using rule 65 (termino -> factor fact_op e2 factor q2 .)
    WORD            reduce using rule 65 (termino -> factor fact_op e2 factor q2 .)
    NUMBER          reduce using rule 65 (termino -> factor fact_op e2 factor q2 .)
    CENTER          reduce using rule 65 (termino -> factor fact_op e2 factor q2 .)
    FORWARD         reduce using rule 65 (termino -> factor fact_op e2 factor q2 .)
    RIGHT           reduce using rule 65 (termino -> factor fact_op e2 factor q2 .)
    LEFT            reduce using rule 65 (termino -> factor fact_op e2 factor q2 .)
    END             reduce using rule 65 (termino -> factor fact_op e2 factor q2 .)
    ELSE            reduce using rule 65 (termino -> factor fact_op e2 factor q2 .)
    DIV             reduce using rule 65 (termino -> factor fact_op e2 factor q2 .)
    MULT            reduce using rule 65 (termino -> factor fact_op e2 factor q2 .)
    SUB             reduce using rule 65 (termino -> factor fact_op e2 factor q2 .)
    SUM             reduce using rule 65 (termino -> factor fact_op e2 factor q2 .)
    EQUAL_TO        reduce using rule 65 (termino -> factor fact_op e2 factor q2 .)
    MORE_OR_EQ_THAN reduce using rule 65 (termino -> factor fact_op e2 factor q2 .)
    LESS_OR_EQ_THAN reduce using rule 65 (termino -> factor fact_op e2 factor q2 .)
    DIFFERENT_TO    reduce using rule 65 (termino -> factor fact_op e2 factor q2 .)
    MORE_THAN       reduce using rule 65 (termino -> factor fact_op e2 factor q2 .)
    LESS_THAN       reduce using rule 65 (termino -> factor fact_op e2 factor q2 .)
    OR              reduce using rule 65 (termino -> factor fact_op e2 factor q2 .)
    AND             reduce using rule 65 (termino -> factor fact_op e2 factor q2 .)
    CLOSE_PTH       reduce using rule 65 (termino -> factor fact_op e2 factor q2 .)
    COMMA           reduce using rule 65 (termino -> factor fact_op e2 factor q2 .)
    CLOSE_SQR       reduce using rule 65 (termino -> factor fact_op e2 factor q2 .)


state 190

    (85) func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .
    RETURN          reduce using rule 85 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    PEN_DOWN        reduce using rule 85 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    PEN_UP          reduce using rule 85 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    WHILE           reduce using rule 85 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    IF              reduce using rule 85 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    WRITE           reduce using rule 85 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    READ            reduce using rule 85 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    ID              reduce using rule 85 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    BOOL            reduce using rule 85 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    WORD            reduce using rule 85 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    NUMBER          reduce using rule 85 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    CENTER          reduce using rule 85 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    FORWARD         reduce using rule 85 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    RIGHT           reduce using rule 85 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    LEFT            reduce using rule 85 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    END             reduce using rule 85 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    ELSE            reduce using rule 85 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    DIV             reduce using rule 85 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    MULT            reduce using rule 85 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    SUB             reduce using rule 85 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    SUM             reduce using rule 85 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    EQUAL_TO        reduce using rule 85 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    MORE_OR_EQ_THAN reduce using rule 85 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    LESS_OR_EQ_THAN reduce using rule 85 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    DIFFERENT_TO    reduce using rule 85 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    MORE_THAN       reduce using rule 85 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    LESS_THAN       reduce using rule 85 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    OR              reduce using rule 85 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    AND             reduce using rule 85 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    CLOSE_PTH       reduce using rule 85 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    COMMA           reduce using rule 85 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)
    CLOSE_SQR       reduce using rule 85 (func_call -> ID OPEN_PTH func1 func_call_param CLOSE_PTH func3 .)


state 191

    (40) var_assignation -> ID e5 assign e6 expression q3 .
    RETURN          reduce using rule 40 (var_assignation -> ID e5 assign e6 expression q3 .)
    PEN_DOWN        reduce using rule 40 (var_assignation -> ID e5 assign e6 expression q3 .)
    PEN_UP          reduce using rule 40 (var_assignation -> ID e5 assign e6 expression q3 .)
    WHILE           reduce using rule 40 (var_assignation -> ID e5 assign e6 expression q3 .)
    IF              reduce using rule 40 (var_assignation -> ID e5 assign e6 expression q3 .)
    WRITE           reduce using rule 40 (var_assignation -> ID e5 assign e6 expression q3 .)
    READ            reduce using rule 40 (var_assignation -> ID e5 assign e6 expression q3 .)
    ID              reduce using rule 40 (var_assignation -> ID e5 assign e6 expression q3 .)
    BOOL            reduce using rule 40 (var_assignation -> ID e5 assign e6 expression q3 .)
    WORD            reduce using rule 40 (var_assignation -> ID e5 assign e6 expression q3 .)
    NUMBER          reduce using rule 40 (var_assignation -> ID e5 assign e6 expression q3 .)
    CENTER          reduce using rule 40 (var_assignation -> ID e5 assign e6 expression q3 .)
    FORWARD         reduce using rule 40 (var_assignation -> ID e5 assign e6 expression q3 .)
    RIGHT           reduce using rule 40 (var_assignation -> ID e5 assign e6 expression q3 .)
    LEFT            reduce using rule 40 (var_assignation -> ID e5 assign e6 expression q3 .)
    END             reduce using rule 40 (var_assignation -> ID e5 assign e6 expression q3 .)
    ELSE            reduce using rule 40 (var_assignation -> ID e5 assign e6 expression q3 .)


state 192

    (91) multiple_fc_param -> COMMA func_call_param .
    CLOSE_PTH       reduce using rule 91 (multiple_fc_param -> COMMA func_call_param .)


state 193

    (108) while_stmnt -> WHILE w1 con_expression w2 stmnt w3 . END
    END             shift and go to state 202


state 194

    (101) if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .
    RETURN          reduce using rule 101 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)
    PEN_DOWN        reduce using rule 101 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)
    PEN_UP          reduce using rule 101 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)
    WHILE           reduce using rule 101 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)
    IF              reduce using rule 101 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)
    WRITE           reduce using rule 101 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)
    READ            reduce using rule 101 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)
    ID              reduce using rule 101 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)
    BOOL            reduce using rule 101 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)
    WORD            reduce using rule 101 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)
    NUMBER          reduce using rule 101 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)
    CENTER          reduce using rule 101 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)
    FORWARD         reduce using rule 101 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)
    RIGHT           reduce using rule 101 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)
    LEFT            reduce using rule 101 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)
    END             reduce using rule 101 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)
    ELSE            reduce using rule 101 (if_stmnt -> IF con_expression if1 stmnt if2 else_stmnt .)


state 195

    (104) else_stmnt -> END .
    RETURN          reduce using rule 104 (else_stmnt -> END .)
    PEN_DOWN        reduce using rule 104 (else_stmnt -> END .)
    PEN_UP          reduce using rule 104 (else_stmnt -> END .)
    WHILE           reduce using rule 104 (else_stmnt -> END .)
    IF              reduce using rule 104 (else_stmnt -> END .)
    WRITE           reduce using rule 104 (else_stmnt -> END .)
    READ            reduce using rule 104 (else_stmnt -> END .)
    ID              reduce using rule 104 (else_stmnt -> END .)
    BOOL            reduce using rule 104 (else_stmnt -> END .)
    WORD            reduce using rule 104 (else_stmnt -> END .)
    NUMBER          reduce using rule 104 (else_stmnt -> END .)
    CENTER          reduce using rule 104 (else_stmnt -> END .)
    FORWARD         reduce using rule 104 (else_stmnt -> END .)
    RIGHT           reduce using rule 104 (else_stmnt -> END .)
    LEFT            reduce using rule 104 (else_stmnt -> END .)
    END             reduce using rule 104 (else_stmnt -> END .)
    ELSE            reduce using rule 104 (else_stmnt -> END .)


state 196

    (105) else_stmnt -> ELSE . if3 stmnt if4 END
    (106) if3 -> .
    RETURN          reduce using rule 106 (if3 -> .)
    PEN_DOWN        reduce using rule 106 (if3 -> .)
    PEN_UP          reduce using rule 106 (if3 -> .)
    WHILE           reduce using rule 106 (if3 -> .)
    IF              reduce using rule 106 (if3 -> .)
    WRITE           reduce using rule 106 (if3 -> .)
    READ            reduce using rule 106 (if3 -> .)
    ID              reduce using rule 106 (if3 -> .)
    BOOL            reduce using rule 106 (if3 -> .)
    WORD            reduce using rule 106 (if3 -> .)
    NUMBER          reduce using rule 106 (if3 -> .)
    CENTER          reduce using rule 106 (if3 -> .)
    FORWARD         reduce using rule 106 (if3 -> .)
    RIGHT           reduce using rule 106 (if3 -> .)
    LEFT            reduce using rule 106 (if3 -> .)
    END             reduce using rule 106 (if3 -> .)

    if3                            shift and go to state 203

state 197

    (113) con_expression -> expression q5 log_op e7 expression . q5
    (71) factor -> expression .
    (115) q5 -> .
  ! reduce/reduce conflict for RETURN resolved using rule 71 (factor -> expression .)
  ! reduce/reduce conflict for PEN_DOWN resolved using rule 71 (factor -> expression .)
  ! reduce/reduce conflict for PEN_UP resolved using rule 71 (factor -> expression .)
  ! reduce/reduce conflict for WHILE resolved using rule 71 (factor -> expression .)
  ! reduce/reduce conflict for IF resolved using rule 71 (factor -> expression .)
  ! reduce/reduce conflict for WRITE resolved using rule 71 (factor -> expression .)
  ! reduce/reduce conflict for READ resolved using rule 71 (factor -> expression .)
  ! reduce/reduce conflict for ID resolved using rule 71 (factor -> expression .)
  ! reduce/reduce conflict for BOOL resolved using rule 71 (factor -> expression .)
  ! reduce/reduce conflict for WORD resolved using rule 71 (factor -> expression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 71 (factor -> expression .)
  ! reduce/reduce conflict for CENTER resolved using rule 71 (factor -> expression .)
  ! reduce/reduce conflict for FORWARD resolved using rule 71 (factor -> expression .)
  ! reduce/reduce conflict for RIGHT resolved using rule 71 (factor -> expression .)
  ! reduce/reduce conflict for LEFT resolved using rule 71 (factor -> expression .)
  ! reduce/reduce conflict for END resolved using rule 71 (factor -> expression .)
  ! reduce/reduce conflict for ELSE resolved using rule 71 (factor -> expression .)
    SUB             reduce using rule 71 (factor -> expression .)
    SUM             reduce using rule 71 (factor -> expression .)
    EQUAL_TO        reduce using rule 71 (factor -> expression .)
    MORE_OR_EQ_THAN reduce using rule 71 (factor -> expression .)
    LESS_OR_EQ_THAN reduce using rule 71 (factor -> expression .)
    DIFFERENT_TO    reduce using rule 71 (factor -> expression .)
    MORE_THAN       reduce using rule 71 (factor -> expression .)
    LESS_THAN       reduce using rule 71 (factor -> expression .)
    RETURN          reduce using rule 71 (factor -> expression .)
    PEN_DOWN        reduce using rule 71 (factor -> expression .)
    PEN_UP          reduce using rule 71 (factor -> expression .)
    WHILE           reduce using rule 71 (factor -> expression .)
    IF              reduce using rule 71 (factor -> expression .)
    WRITE           reduce using rule 71 (factor -> expression .)
    READ            reduce using rule 71 (factor -> expression .)
    ID              reduce using rule 71 (factor -> expression .)
    BOOL            reduce using rule 71 (factor -> expression .)
    WORD            reduce using rule 71 (factor -> expression .)
    NUMBER          reduce using rule 71 (factor -> expression .)
    CENTER          reduce using rule 71 (factor -> expression .)
    FORWARD         reduce using rule 71 (factor -> expression .)
    RIGHT           reduce using rule 71 (factor -> expression .)
    LEFT            reduce using rule 71 (factor -> expression .)
    END             reduce using rule 71 (factor -> expression .)
    ELSE            reduce using rule 71 (factor -> expression .)
    DIV             reduce using rule 71 (factor -> expression .)
    MULT            reduce using rule 71 (factor -> expression .)

    q5                             shift and go to state 204

state 198

    (99) multiple_vars -> COMMA variable varid . multiple_vars
    (98) multiple_vars -> . empty
    (99) multiple_vars -> . COMMA variable varid multiple_vars
    (125) empty -> .
    COMMA           shift and go to state 165
    CLOSE_PTH       reduce using rule 125 (empty -> .)
    RETURN          reduce using rule 125 (empty -> .)
    PEN_DOWN        reduce using rule 125 (empty -> .)
    PEN_UP          reduce using rule 125 (empty -> .)
    WHILE           reduce using rule 125 (empty -> .)
    IF              reduce using rule 125 (empty -> .)
    WRITE           reduce using rule 125 (empty -> .)
    READ            reduce using rule 125 (empty -> .)
    ID              reduce using rule 125 (empty -> .)
    BOOL            reduce using rule 125 (empty -> .)
    WORD            reduce using rule 125 (empty -> .)
    NUMBER          reduce using rule 125 (empty -> .)
    CENTER          reduce using rule 125 (empty -> .)
    FORWARD         reduce using rule 125 (empty -> .)
    RIGHT           reduce using rule 125 (empty -> .)
    LEFT            reduce using rule 125 (empty -> .)
    END             reduce using rule 125 (empty -> .)
    ELSE            reduce using rule 125 (empty -> .)

    multiple_vars                  shift and go to state 205
    empty                          shift and go to state 164

state 199

    (14) func_declaration -> FUNC resetvars func_type ID fd1 OPEN_PTH parameter CLOSE_PTH stmnt vd1 . END
    END             shift and go to state 206


state 200

    (23) parameter -> var_type addvartype ID varid . multiple_parameters
    (24) multiple_parameters -> . empty
    (25) multiple_parameters -> . COMMA parameter
    (125) empty -> .
    COMMA           shift and go to state 209
    CLOSE_PTH       reduce using rule 125 (empty -> .)

    multiple_parameters            shift and go to state 207
    empty                          shift and go to state 208

state 201

    (97) matrix -> OPEN_SQR expression . CLOSE_SQR
    (71) factor -> expression .
  ! shift/reduce conflict for CLOSE_SQR resolved as shift
    CLOSE_SQR       shift and go to state 210
    SUB             reduce using rule 71 (factor -> expression .)
    SUM             reduce using rule 71 (factor -> expression .)
    EQUAL_TO        reduce using rule 71 (factor -> expression .)
    MORE_OR_EQ_THAN reduce using rule 71 (factor -> expression .)
    LESS_OR_EQ_THAN reduce using rule 71 (factor -> expression .)
    DIFFERENT_TO    reduce using rule 71 (factor -> expression .)
    MORE_THAN       reduce using rule 71 (factor -> expression .)
    LESS_THAN       reduce using rule 71 (factor -> expression .)
    DIV             reduce using rule 71 (factor -> expression .)
    MULT            reduce using rule 71 (factor -> expression .)


state 202

    (108) while_stmnt -> WHILE w1 con_expression w2 stmnt w3 END .
    RETURN          reduce using rule 108 (while_stmnt -> WHILE w1 con_expression w2 stmnt w3 END .)
    PEN_DOWN        reduce using rule 108 (while_stmnt -> WHILE w1 con_expression w2 stmnt w3 END .)
    PEN_UP          reduce using rule 108 (while_stmnt -> WHILE w1 con_expression w2 stmnt w3 END .)
    WHILE           reduce using rule 108 (while_stmnt -> WHILE w1 con_expression w2 stmnt w3 END .)
    IF              reduce using rule 108 (while_stmnt -> WHILE w1 con_expression w2 stmnt w3 END .)
    WRITE           reduce using rule 108 (while_stmnt -> WHILE w1 con_expression w2 stmnt w3 END .)
    READ            reduce using rule 108 (while_stmnt -> WHILE w1 con_expression w2 stmnt w3 END .)
    ID              reduce using rule 108 (while_stmnt -> WHILE w1 con_expression w2 stmnt w3 END .)
    BOOL            reduce using rule 108 (while_stmnt -> WHILE w1 con_expression w2 stmnt w3 END .)
    WORD            reduce using rule 108 (while_stmnt -> WHILE w1 con_expression w2 stmnt w3 END .)
    NUMBER          reduce using rule 108 (while_stmnt -> WHILE w1 con_expression w2 stmnt w3 END .)
    CENTER          reduce using rule 108 (while_stmnt -> WHILE w1 con_expression w2 stmnt w3 END .)
    FORWARD         reduce using rule 108 (while_stmnt -> WHILE w1 con_expression w2 stmnt w3 END .)
    RIGHT           reduce using rule 108 (while_stmnt -> WHILE w1 con_expression w2 stmnt w3 END .)
    LEFT            reduce using rule 108 (while_stmnt -> WHILE w1 con_expression w2 stmnt w3 END .)
    END             reduce using rule 108 (while_stmnt -> WHILE w1 con_expression w2 stmnt w3 END .)
    ELSE            reduce using rule 108 (while_stmnt -> WHILE w1 con_expression w2 stmnt w3 END .)


state 203

    (105) else_stmnt -> ELSE if3 . stmnt if4 END
    (26) stmnt -> . empty
    (27) stmnt -> . returnf stmnt
    (28) stmnt -> . var_declaration_func stmnt
    (29) stmnt -> . pen_func stmnt
    (30) stmnt -> . move_func stmnt
    (31) stmnt -> . while_stmnt stmnt
    (32) stmnt -> . if_stmnt stmnt
    (33) stmnt -> . write stmnt
    (34) stmnt -> . read stmnt
    (35) stmnt -> . func_call stmnt
    (36) stmnt -> . var_assignation stmnt
    (125) empty -> .
    (37) returnf -> . RETURN expression
    (38) var_declaration_func -> . var_type addvartype ID varid multiple_vars
    (121) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (122) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (116) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (108) while_stmnt -> . WHILE w1 con_expression w2 stmnt w3 END
    (101) if_stmnt -> . IF con_expression if1 stmnt if2 else_stmnt
    (100) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (92) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (85) func_call -> . ID OPEN_PTH func1 func_call_param CLOSE_PTH func3
    (40) var_assignation -> . ID e5 assign e6 expression q3
    (10) var_type -> . BOOL
    (11) var_type -> . WORD
    (12) var_type -> . NUMBER
    (117) move_type -> . CENTER
    (118) move_type -> . FORWARD
    (119) move_type -> . RIGHT
    (120) move_type -> . LEFT
    END             reduce using rule 125 (empty -> .)
    RETURN          shift and go to state 47
    PEN_DOWN        shift and go to state 50
    PEN_UP          shift and go to state 51
    WHILE           shift and go to state 53
    IF              shift and go to state 54
    WRITE           shift and go to state 55
    READ            shift and go to state 56
    ID              shift and go to state 49
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11
    CENTER          shift and go to state 57
    FORWARD         shift and go to state 58
    RIGHT           shift and go to state 59
    LEFT            shift and go to state 60

    stmnt                          shift and go to state 211
    empty                          shift and go to state 36
    returnf                        shift and go to state 37
    var_declaration_func           shift and go to state 38
    pen_func                       shift and go to state 39
    move_func                      shift and go to state 40
    while_stmnt                    shift and go to state 41
    if_stmnt                       shift and go to state 42
    write                          shift and go to state 43
    read                           shift and go to state 44
    func_call                      shift and go to state 45
    var_assignation                shift and go to state 46
    var_type                       shift and go to state 48
    move_type                      shift and go to state 52

state 204

    (113) con_expression -> expression q5 log_op e7 expression q5 .
    RETURN          reduce using rule 113 (con_expression -> expression q5 log_op e7 expression q5 .)
    PEN_DOWN        reduce using rule 113 (con_expression -> expression q5 log_op e7 expression q5 .)
    PEN_UP          reduce using rule 113 (con_expression -> expression q5 log_op e7 expression q5 .)
    WHILE           reduce using rule 113 (con_expression -> expression q5 log_op e7 expression q5 .)
    IF              reduce using rule 113 (con_expression -> expression q5 log_op e7 expression q5 .)
    WRITE           reduce using rule 113 (con_expression -> expression q5 log_op e7 expression q5 .)
    READ            reduce using rule 113 (con_expression -> expression q5 log_op e7 expression q5 .)
    ID              reduce using rule 113 (con_expression -> expression q5 log_op e7 expression q5 .)
    BOOL            reduce using rule 113 (con_expression -> expression q5 log_op e7 expression q5 .)
    WORD            reduce using rule 113 (con_expression -> expression q5 log_op e7 expression q5 .)
    NUMBER          reduce using rule 113 (con_expression -> expression q5 log_op e7 expression q5 .)
    CENTER          reduce using rule 113 (con_expression -> expression q5 log_op e7 expression q5 .)
    FORWARD         reduce using rule 113 (con_expression -> expression q5 log_op e7 expression q5 .)
    RIGHT           reduce using rule 113 (con_expression -> expression q5 log_op e7 expression q5 .)
    LEFT            reduce using rule 113 (con_expression -> expression q5 log_op e7 expression q5 .)
    END             reduce using rule 113 (con_expression -> expression q5 log_op e7 expression q5 .)
    ELSE            reduce using rule 113 (con_expression -> expression q5 log_op e7 expression q5 .)


state 205

    (99) multiple_vars -> COMMA variable varid multiple_vars .
    CLOSE_PTH       reduce using rule 99 (multiple_vars -> COMMA variable varid multiple_vars .)
    RETURN          reduce using rule 99 (multiple_vars -> COMMA variable varid multiple_vars .)
    PEN_DOWN        reduce using rule 99 (multiple_vars -> COMMA variable varid multiple_vars .)
    PEN_UP          reduce using rule 99 (multiple_vars -> COMMA variable varid multiple_vars .)
    WHILE           reduce using rule 99 (multiple_vars -> COMMA variable varid multiple_vars .)
    IF              reduce using rule 99 (multiple_vars -> COMMA variable varid multiple_vars .)
    WRITE           reduce using rule 99 (multiple_vars -> COMMA variable varid multiple_vars .)
    READ            reduce using rule 99 (multiple_vars -> COMMA variable varid multiple_vars .)
    ID              reduce using rule 99 (multiple_vars -> COMMA variable varid multiple_vars .)
    BOOL            reduce using rule 99 (multiple_vars -> COMMA variable varid multiple_vars .)
    WORD            reduce using rule 99 (multiple_vars -> COMMA variable varid multiple_vars .)
    NUMBER          reduce using rule 99 (multiple_vars -> COMMA variable varid multiple_vars .)
    CENTER          reduce using rule 99 (multiple_vars -> COMMA variable varid multiple_vars .)
    FORWARD         reduce using rule 99 (multiple_vars -> COMMA variable varid multiple_vars .)
    RIGHT           reduce using rule 99 (multiple_vars -> COMMA variable varid multiple_vars .)
    LEFT            reduce using rule 99 (multiple_vars -> COMMA variable varid multiple_vars .)
    END             reduce using rule 99 (multiple_vars -> COMMA variable varid multiple_vars .)
    ELSE            reduce using rule 99 (multiple_vars -> COMMA variable varid multiple_vars .)


state 206

    (14) func_declaration -> FUNC resetvars func_type ID fd1 OPEN_PTH parameter CLOSE_PTH stmnt vd1 END .
    MAIN            reduce using rule 14 (func_declaration -> FUNC resetvars func_type ID fd1 OPEN_PTH parameter CLOSE_PTH stmnt vd1 END .)


state 207

    (23) parameter -> var_type addvartype ID varid multiple_parameters .
    CLOSE_PTH       reduce using rule 23 (parameter -> var_type addvartype ID varid multiple_parameters .)


state 208

    (24) multiple_parameters -> empty .
    CLOSE_PTH       reduce using rule 24 (multiple_parameters -> empty .)


state 209

    (25) multiple_parameters -> COMMA . parameter
    (22) parameter -> . empty
    (23) parameter -> . var_type addvartype ID varid multiple_parameters
    (125) empty -> .
    (10) var_type -> . BOOL
    (11) var_type -> . WORD
    (12) var_type -> . NUMBER
    CLOSE_PTH       reduce using rule 125 (empty -> .)
    BOOL            shift and go to state 9
    WORD            shift and go to state 10
    NUMBER          shift and go to state 11

    parameter                      shift and go to state 212
    empty                          shift and go to state 143
    var_type                       shift and go to state 144

state 210

    (97) matrix -> OPEN_SQR expression CLOSE_SQR .
    RETURN          reduce using rule 97 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    PEN_DOWN        reduce using rule 97 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    PEN_UP          reduce using rule 97 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    WHILE           reduce using rule 97 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    IF              reduce using rule 97 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    WRITE           reduce using rule 97 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    READ            reduce using rule 97 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    ID              reduce using rule 97 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    BOOL            reduce using rule 97 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    WORD            reduce using rule 97 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    NUMBER          reduce using rule 97 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    CENTER          reduce using rule 97 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    FORWARD         reduce using rule 97 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    RIGHT           reduce using rule 97 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    LEFT            reduce using rule 97 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    END             reduce using rule 97 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    ELSE            reduce using rule 97 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    DIV             reduce using rule 97 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    MULT            reduce using rule 97 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    SUB             reduce using rule 97 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    SUM             reduce using rule 97 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    EQUAL_TO        reduce using rule 97 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    MORE_OR_EQ_THAN reduce using rule 97 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    LESS_OR_EQ_THAN reduce using rule 97 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    DIFFERENT_TO    reduce using rule 97 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    MORE_THAN       reduce using rule 97 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    LESS_THAN       reduce using rule 97 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    OR              reduce using rule 97 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    AND             reduce using rule 97 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    CLOSE_PTH       reduce using rule 97 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    COMMA           reduce using rule 97 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    CLOSE_SQR       reduce using rule 97 (matrix -> OPEN_SQR expression CLOSE_SQR .)


state 211

    (105) else_stmnt -> ELSE if3 stmnt . if4 END
    (107) if4 -> .
    END             reduce using rule 107 (if4 -> .)

    if4                            shift and go to state 213

state 212

    (25) multiple_parameters -> COMMA parameter .
    CLOSE_PTH       reduce using rule 25 (multiple_parameters -> COMMA parameter .)


state 213

    (105) else_stmnt -> ELSE if3 stmnt if4 . END
    END             shift and go to state 214


state 214

    (105) else_stmnt -> ELSE if3 stmnt if4 END .
    RETURN          reduce using rule 105 (else_stmnt -> ELSE if3 stmnt if4 END .)
    PEN_DOWN        reduce using rule 105 (else_stmnt -> ELSE if3 stmnt if4 END .)
    PEN_UP          reduce using rule 105 (else_stmnt -> ELSE if3 stmnt if4 END .)
    WHILE           reduce using rule 105 (else_stmnt -> ELSE if3 stmnt if4 END .)
    IF              reduce using rule 105 (else_stmnt -> ELSE if3 stmnt if4 END .)
    WRITE           reduce using rule 105 (else_stmnt -> ELSE if3 stmnt if4 END .)
    READ            reduce using rule 105 (else_stmnt -> ELSE if3 stmnt if4 END .)
    ID              reduce using rule 105 (else_stmnt -> ELSE if3 stmnt if4 END .)
    BOOL            reduce using rule 105 (else_stmnt -> ELSE if3 stmnt if4 END .)
    WORD            reduce using rule 105 (else_stmnt -> ELSE if3 stmnt if4 END .)
    NUMBER          reduce using rule 105 (else_stmnt -> ELSE if3 stmnt if4 END .)
    CENTER          reduce using rule 105 (else_stmnt -> ELSE if3 stmnt if4 END .)
    FORWARD         reduce using rule 105 (else_stmnt -> ELSE if3 stmnt if4 END .)
    RIGHT           reduce using rule 105 (else_stmnt -> ELSE if3 stmnt if4 END .)
    LEFT            reduce using rule 105 (else_stmnt -> ELSE if3 stmnt if4 END .)
    END             reduce using rule 105 (else_stmnt -> ELSE if3 stmnt if4 END .)
    ELSE            reduce using rule 105 (else_stmnt -> ELSE if3 stmnt if4 END .)


Conflicts:

shift/reduce conflict for EQUAL_TO in state 76 resolved as shift
shift/reduce conflict for MORE_OR_EQ_THAN in state 76 resolved as shift
shift/reduce conflict for LESS_OR_EQ_THAN in state 76 resolved as shift
shift/reduce conflict for DIFFERENT_TO in state 76 resolved as shift
shift/reduce conflict for MORE_THAN in state 76 resolved as shift
shift/reduce conflict for LESS_THAN in state 76 resolved as shift
shift/reduce conflict for SUB in state 79 resolved as shift
shift/reduce conflict for SUM in state 79 resolved as shift
shift/reduce conflict for DIV in state 80 resolved as shift
shift/reduce conflict for MULT in state 80 resolved as shift
shift/reduce conflict for CLOSE_PTH in state 124 resolved as shift
shift/reduce conflict for CLOSE_PTH in state 139 resolved as shift
shift/reduce conflict for EQUAL_TO in state 145 resolved as shift
shift/reduce conflict for MORE_OR_EQ_THAN in state 145 resolved as shift
shift/reduce conflict for LESS_OR_EQ_THAN in state 145 resolved as shift
shift/reduce conflict for DIFFERENT_TO in state 145 resolved as shift
shift/reduce conflict for MORE_THAN in state 145 resolved as shift
shift/reduce conflict for LESS_THAN in state 145 resolved as shift
shift/reduce conflict for CLOSE_SQR in state 147 resolved as shift
shift/reduce conflict for SUB in state 170 resolved as shift
shift/reduce conflict for SUM in state 170 resolved as shift
shift/reduce conflict for DIV in state 171 resolved as shift
shift/reduce conflict for MULT in state 171 resolved as shift
shift/reduce conflict for CLOSE_SQR in state 201 resolved as shift
reduce/reduce conflict in state 74 resolved using rule returnf -> RETURN expression
rejected rule (factor -> expression) in state 74
reduce/reduce conflict in state 75 resolved using rule var_cte -> func_call
rejected rule (q4 -> <empty>) in state 75
reduce/reduce conflict in state 97 resolved using rule factor -> expression
rejected rule (q5 -> <empty>) in state 97
reduce/reduce conflict in state 135 resolved using rule factor -> expression
rejected rule (func2 -> <empty>) in state 135
reduce/reduce conflict in state 168 resolved using rule expression -> exp rel_op exp q4
rejected rule (expression -> exp q4) in state 168
reduce/reduce conflict in state 174 resolved using rule q3 -> <empty>
rejected rule (factor -> expression) in state 174
reduce/reduce conflict in state 188 resolved using rule exp -> termino term_op e3 termino q1
rejected rule (exp -> termino q1) in state 188
reduce/reduce conflict in state 189 resolved using rule termino -> factor fact_op e2 factor q2
rejected rule (termino -> factor q2) in state 189
reduce/reduce conflict in state 197 resolved using rule factor -> expression
rejected rule (q5 -> <empty>) in state 197
Rule (q5 -> <empty>) is never reduced
Rule (func2 -> <empty>) is never reduced