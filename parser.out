Grammar:

Rule 0     S' -> program
Rule 1     program -> DRAWING ID declaration
Rule 2     declaration -> var_declaration func_declaration main
Rule 3     var_declaration -> var_type ID multiple_var
Rule 4     multiple_var -> empty
Rule 5     multiple_var -> COMMA ID multiple_var
Rule 6     var_type -> BOOL
Rule 7     var_type -> WORD
Rule 8     var_type -> NUMBER
Rule 9     func_declaration -> empty
Rule 10    func_declaration -> func_type FUNC ID OPEN_PTH parameter CLOSE_PTH stmnt END
Rule 11    func_type -> BOOL
Rule 12    func_type -> WORD
Rule 13    func_type -> NUMBER
Rule 14    func_type -> VOID
Rule 15    parameter -> empty
Rule 16    parameter -> var_type ID multiple_parameters
Rule 17    multiple_parameters -> empty
Rule 18    multiple_parameters -> COMMA parameter
Rule 19    stmnt -> empty
Rule 20    stmnt -> var_declaration_func stmnt
Rule 21    stmnt -> pen_func stmnt
Rule 22    stmnt -> move_func stmnt
Rule 23    stmnt -> while_stmnt stmnt
Rule 24    stmnt -> if_stmnt stmnt
Rule 25    stmnt -> write stmnt
Rule 26    stmnt -> read stmnt
Rule 27    stmnt -> func_call stmnt
Rule 28    stmnt -> var_assignation stmnt
Rule 29    var_declaration_func -> var_type ID multiple_vars
Rule 30    var_assignation -> ID assign expression
Rule 31    assign -> ASSIGN
Rule 32    var_cte -> func_call
Rule 33    var_cte -> cte_bool
Rule 34    var_cte -> CTE_STR
Rule 35    var_cte -> CTE_NUM
Rule 36    var_cte -> variable
Rule 37    cte_bool -> FALSE
Rule 38    cte_bool -> TRUE
Rule 39    expression -> exp
Rule 40    expression -> exp rel_op exp
Rule 41    exp -> termino
Rule 42    exp -> termino term_op termino
Rule 43    term_op -> SUB
Rule 44    term_op -> SUM
Rule 45    termino -> factor
Rule 46    termino -> factor fact_op factor
Rule 47    fact_op -> DIV
Rule 48    fact_op -> MULT
Rule 49    factor -> SUB var_cte
Rule 50    factor -> SUM var_cte
Rule 51    factor -> var_cte
Rule 52    factor -> OPEN_PTH expression CLOSE_PTH
Rule 53    log_op -> OR
Rule 54    log_op -> AND
Rule 55    rel_op -> EQUAL_TO
Rule 56    rel_op -> MORE_OR_EQ_THAN
Rule 57    rel_op -> LESS_OR_EQ_THAN
Rule 58    rel_op -> DIFFERENT_TO
Rule 59    rel_op -> MORE_THAN
Rule 60    rel_op -> LESS_THAN
Rule 61    func_call -> ID OPEN_PTH func_call_param CLOSE_PTH
Rule 62    func_call_param -> expression multiple_fc_param
Rule 63    multiple_fc_param -> empty
Rule 64    multiple_fc_param -> COMMA func_call_param
Rule 65    read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH
Rule 66    variable -> ID array
Rule 67    array -> empty
Rule 68    array -> OPEN_SQR expression CLOSE_SQR matrix
Rule 69    matrix -> empty
Rule 70    matrix -> OPEN_SQR expression CLOSE_SQR
Rule 71    multiple_vars -> empty
Rule 72    multiple_vars -> COMMA variable
Rule 73    write -> WRITE OPEN_PTH expression CLOSE_PTH
Rule 74    if_stmnt -> IF con_expression stmnt else_stmnt
Rule 75    else_stmnt -> END
Rule 76    else_stmnt -> ELSE stmnt END
Rule 77    while_stmnt -> WHILE con_expression stmnt END
Rule 78    con_expression -> expression log_op expression
Rule 79    move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH
Rule 80    move_type -> CENTER
Rule 81    move_type -> FORWARD
Rule 82    move_type -> RIGHT
Rule 83    move_type -> LEFT
Rule 84    pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH
Rule 85    pen_func -> PEN_UP OPEN_PTH CLOSE_PTH
Rule 86    main -> MAIN stmnt END
Rule 87    empty -> <empty>

Terminals, with rules where they appear:

AND                  : 54
ASSIGN               : 31
BOOL                 : 6 11
CENTER               : 80
CLOSE_PTH            : 10 52 61 65 73 79 84 85
CLOSE_SQR            : 68 70
COMMA                : 5 18 64 72
CTE_NUM              : 35
CTE_STR              : 34
DIFFERENT_TO         : 58
DIV                  : 47
DRAWING              : 1
ELSE                 : 76
END                  : 10 75 76 77 86
EQUAL_TO             : 55
FALSE                : 37
FORWARD              : 81
FUNC                 : 10
ID                   : 1 3 5 10 16 29 30 61 66
IF                   : 74
LEFT                 : 83
LESS_OR_EQ_THAN      : 57
LESS_THAN            : 60
MAIN                 : 86
MORE_OR_EQ_THAN      : 56
MORE_THAN            : 59
MULT                 : 48
NUMBER               : 8 13
OPEN_PTH             : 10 52 61 65 73 79 84 85
OPEN_SQR             : 68 70
OR                   : 53
PEN_DOWN             : 84
PEN_UP               : 85
READ                 : 65
RIGHT                : 82
SUB                  : 43 49
SUM                  : 44 50
TRUE                 : 38
VOID                 : 14
WHILE                : 77
WORD                 : 7 12
WRITE                : 73
error                : 

Nonterminals, with rules where they appear:

array                : 66
assign               : 30
con_expression       : 74 77
cte_bool             : 33
declaration          : 1
else_stmnt           : 74
empty                : 4 9 15 17 19 63 67 69 71
exp                  : 39 40 40
expression           : 30 52 62 68 70 73 78 78
fact_op              : 46
factor               : 45 46 46
func_call            : 27 32
func_call_param      : 61 64 79
func_declaration     : 2
func_type            : 10
if_stmnt             : 24
log_op               : 78
main                 : 2
matrix               : 68
move_func            : 22
move_type            : 79
multiple_fc_param    : 62
multiple_parameters  : 16
multiple_var         : 3 5
multiple_vars        : 29 65
parameter            : 10 18
pen_func             : 21
program              : 0
read                 : 26
rel_op               : 40
stmnt                : 10 20 21 22 23 24 25 26 27 28 74 76 77 86
term_op              : 42
termino              : 41 42 42
var_assignation      : 28
var_cte              : 49 50 51
var_declaration      : 2
var_declaration_func : 20
var_type             : 3 16 29
variable             : 36 65 72
while_stmnt          : 23
write                : 25


state 0

    (0) S' -> . program
    (1) program -> . DRAWING ID declaration
    DRAWING         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .


state 2

    (1) program -> DRAWING . ID declaration
    ID              shift and go to state 3


state 3

    (1) program -> DRAWING ID . declaration
    (2) declaration -> . var_declaration func_declaration main
    (3) var_declaration -> . var_type ID multiple_var
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9

    declaration                    shift and go to state 4
    var_declaration                shift and go to state 5
    var_type                       shift and go to state 6

state 4

    (1) program -> DRAWING ID declaration .
    $end            reduce using rule 1 (program -> DRAWING ID declaration .)


state 5

    (2) declaration -> var_declaration . func_declaration main
    (9) func_declaration -> . empty
    (10) func_declaration -> . func_type FUNC ID OPEN_PTH parameter CLOSE_PTH stmnt END
    (87) empty -> .
    (11) func_type -> . BOOL
    (12) func_type -> . WORD
    (13) func_type -> . NUMBER
    (14) func_type -> . VOID
    MAIN            reduce using rule 87 (empty -> .)
    BOOL            shift and go to state 13
    WORD            shift and go to state 14
    NUMBER          shift and go to state 15
    VOID            shift and go to state 16

    func_declaration               shift and go to state 10
    empty                          shift and go to state 11
    func_type                      shift and go to state 12

state 6

    (3) var_declaration -> var_type . ID multiple_var
    ID              shift and go to state 17


state 7

    (6) var_type -> BOOL .
    ID              reduce using rule 6 (var_type -> BOOL .)


state 8

    (7) var_type -> WORD .
    ID              reduce using rule 7 (var_type -> WORD .)


state 9

    (8) var_type -> NUMBER .
    ID              reduce using rule 8 (var_type -> NUMBER .)


state 10

    (2) declaration -> var_declaration func_declaration . main
    (86) main -> . MAIN stmnt END
    MAIN            shift and go to state 19

    main                           shift and go to state 18

state 11

    (9) func_declaration -> empty .
    MAIN            reduce using rule 9 (func_declaration -> empty .)


state 12

    (10) func_declaration -> func_type . FUNC ID OPEN_PTH parameter CLOSE_PTH stmnt END
    FUNC            shift and go to state 20


state 13

    (11) func_type -> BOOL .
    FUNC            reduce using rule 11 (func_type -> BOOL .)


state 14

    (12) func_type -> WORD .
    FUNC            reduce using rule 12 (func_type -> WORD .)


state 15

    (13) func_type -> NUMBER .
    FUNC            reduce using rule 13 (func_type -> NUMBER .)


state 16

    (14) func_type -> VOID .
    FUNC            reduce using rule 14 (func_type -> VOID .)


state 17

    (3) var_declaration -> var_type ID . multiple_var
    (4) multiple_var -> . empty
    (5) multiple_var -> . COMMA ID multiple_var
    (87) empty -> .
    COMMA           shift and go to state 23
    BOOL            reduce using rule 87 (empty -> .)
    WORD            reduce using rule 87 (empty -> .)
    NUMBER          reduce using rule 87 (empty -> .)
    VOID            reduce using rule 87 (empty -> .)
    MAIN            reduce using rule 87 (empty -> .)

    multiple_var                   shift and go to state 21
    empty                          shift and go to state 22

state 18

    (2) declaration -> var_declaration func_declaration main .
    $end            reduce using rule 2 (declaration -> var_declaration func_declaration main .)


state 19

    (86) main -> MAIN . stmnt END
    (19) stmnt -> . empty
    (20) stmnt -> . var_declaration_func stmnt
    (21) stmnt -> . pen_func stmnt
    (22) stmnt -> . move_func stmnt
    (23) stmnt -> . while_stmnt stmnt
    (24) stmnt -> . if_stmnt stmnt
    (25) stmnt -> . write stmnt
    (26) stmnt -> . read stmnt
    (27) stmnt -> . func_call stmnt
    (28) stmnt -> . var_assignation stmnt
    (87) empty -> .
    (29) var_declaration_func -> . var_type ID multiple_vars
    (84) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (85) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (79) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (77) while_stmnt -> . WHILE con_expression stmnt END
    (74) if_stmnt -> . IF con_expression stmnt else_stmnt
    (73) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (65) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (61) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (30) var_assignation -> . ID assign expression
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    (80) move_type -> . CENTER
    (81) move_type -> . FORWARD
    (82) move_type -> . RIGHT
    (83) move_type -> . LEFT
    END             reduce using rule 87 (empty -> .)
    PEN_DOWN        shift and go to state 37
    PEN_UP          shift and go to state 38
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    WRITE           shift and go to state 42
    READ            shift and go to state 43
    ID              shift and go to state 36
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9
    CENTER          shift and go to state 44
    FORWARD         shift and go to state 45
    RIGHT           shift and go to state 46
    LEFT            shift and go to state 47

    stmnt                          shift and go to state 24
    empty                          shift and go to state 25
    var_declaration_func           shift and go to state 26
    pen_func                       shift and go to state 27
    move_func                      shift and go to state 28
    while_stmnt                    shift and go to state 29
    if_stmnt                       shift and go to state 30
    write                          shift and go to state 31
    read                           shift and go to state 32
    func_call                      shift and go to state 33
    var_assignation                shift and go to state 34
    var_type                       shift and go to state 35
    move_type                      shift and go to state 39

state 20

    (10) func_declaration -> func_type FUNC . ID OPEN_PTH parameter CLOSE_PTH stmnt END
    ID              shift and go to state 48


state 21

    (3) var_declaration -> var_type ID multiple_var .
    BOOL            reduce using rule 3 (var_declaration -> var_type ID multiple_var .)
    WORD            reduce using rule 3 (var_declaration -> var_type ID multiple_var .)
    NUMBER          reduce using rule 3 (var_declaration -> var_type ID multiple_var .)
    VOID            reduce using rule 3 (var_declaration -> var_type ID multiple_var .)
    MAIN            reduce using rule 3 (var_declaration -> var_type ID multiple_var .)


state 22

    (4) multiple_var -> empty .
    BOOL            reduce using rule 4 (multiple_var -> empty .)
    WORD            reduce using rule 4 (multiple_var -> empty .)
    NUMBER          reduce using rule 4 (multiple_var -> empty .)
    VOID            reduce using rule 4 (multiple_var -> empty .)
    MAIN            reduce using rule 4 (multiple_var -> empty .)


state 23

    (5) multiple_var -> COMMA . ID multiple_var
    ID              shift and go to state 49


state 24

    (86) main -> MAIN stmnt . END
    END             shift and go to state 50


state 25

    (19) stmnt -> empty .
    END             reduce using rule 19 (stmnt -> empty .)
    ELSE            reduce using rule 19 (stmnt -> empty .)


state 26

    (20) stmnt -> var_declaration_func . stmnt
    (19) stmnt -> . empty
    (20) stmnt -> . var_declaration_func stmnt
    (21) stmnt -> . pen_func stmnt
    (22) stmnt -> . move_func stmnt
    (23) stmnt -> . while_stmnt stmnt
    (24) stmnt -> . if_stmnt stmnt
    (25) stmnt -> . write stmnt
    (26) stmnt -> . read stmnt
    (27) stmnt -> . func_call stmnt
    (28) stmnt -> . var_assignation stmnt
    (87) empty -> .
    (29) var_declaration_func -> . var_type ID multiple_vars
    (84) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (85) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (79) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (77) while_stmnt -> . WHILE con_expression stmnt END
    (74) if_stmnt -> . IF con_expression stmnt else_stmnt
    (73) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (65) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (61) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (30) var_assignation -> . ID assign expression
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    (80) move_type -> . CENTER
    (81) move_type -> . FORWARD
    (82) move_type -> . RIGHT
    (83) move_type -> . LEFT
    END             reduce using rule 87 (empty -> .)
    ELSE            reduce using rule 87 (empty -> .)
    PEN_DOWN        shift and go to state 37
    PEN_UP          shift and go to state 38
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    WRITE           shift and go to state 42
    READ            shift and go to state 43
    ID              shift and go to state 36
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9
    CENTER          shift and go to state 44
    FORWARD         shift and go to state 45
    RIGHT           shift and go to state 46
    LEFT            shift and go to state 47

    var_declaration_func           shift and go to state 26
    stmnt                          shift and go to state 51
    empty                          shift and go to state 25
    pen_func                       shift and go to state 27
    move_func                      shift and go to state 28
    while_stmnt                    shift and go to state 29
    if_stmnt                       shift and go to state 30
    write                          shift and go to state 31
    read                           shift and go to state 32
    func_call                      shift and go to state 33
    var_assignation                shift and go to state 34
    var_type                       shift and go to state 35
    move_type                      shift and go to state 39

state 27

    (21) stmnt -> pen_func . stmnt
    (19) stmnt -> . empty
    (20) stmnt -> . var_declaration_func stmnt
    (21) stmnt -> . pen_func stmnt
    (22) stmnt -> . move_func stmnt
    (23) stmnt -> . while_stmnt stmnt
    (24) stmnt -> . if_stmnt stmnt
    (25) stmnt -> . write stmnt
    (26) stmnt -> . read stmnt
    (27) stmnt -> . func_call stmnt
    (28) stmnt -> . var_assignation stmnt
    (87) empty -> .
    (29) var_declaration_func -> . var_type ID multiple_vars
    (84) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (85) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (79) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (77) while_stmnt -> . WHILE con_expression stmnt END
    (74) if_stmnt -> . IF con_expression stmnt else_stmnt
    (73) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (65) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (61) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (30) var_assignation -> . ID assign expression
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    (80) move_type -> . CENTER
    (81) move_type -> . FORWARD
    (82) move_type -> . RIGHT
    (83) move_type -> . LEFT
    END             reduce using rule 87 (empty -> .)
    ELSE            reduce using rule 87 (empty -> .)
    PEN_DOWN        shift and go to state 37
    PEN_UP          shift and go to state 38
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    WRITE           shift and go to state 42
    READ            shift and go to state 43
    ID              shift and go to state 36
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9
    CENTER          shift and go to state 44
    FORWARD         shift and go to state 45
    RIGHT           shift and go to state 46
    LEFT            shift and go to state 47

    pen_func                       shift and go to state 27
    stmnt                          shift and go to state 52
    empty                          shift and go to state 25
    var_declaration_func           shift and go to state 26
    move_func                      shift and go to state 28
    while_stmnt                    shift and go to state 29
    if_stmnt                       shift and go to state 30
    write                          shift and go to state 31
    read                           shift and go to state 32
    func_call                      shift and go to state 33
    var_assignation                shift and go to state 34
    var_type                       shift and go to state 35
    move_type                      shift and go to state 39

state 28

    (22) stmnt -> move_func . stmnt
    (19) stmnt -> . empty
    (20) stmnt -> . var_declaration_func stmnt
    (21) stmnt -> . pen_func stmnt
    (22) stmnt -> . move_func stmnt
    (23) stmnt -> . while_stmnt stmnt
    (24) stmnt -> . if_stmnt stmnt
    (25) stmnt -> . write stmnt
    (26) stmnt -> . read stmnt
    (27) stmnt -> . func_call stmnt
    (28) stmnt -> . var_assignation stmnt
    (87) empty -> .
    (29) var_declaration_func -> . var_type ID multiple_vars
    (84) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (85) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (79) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (77) while_stmnt -> . WHILE con_expression stmnt END
    (74) if_stmnt -> . IF con_expression stmnt else_stmnt
    (73) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (65) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (61) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (30) var_assignation -> . ID assign expression
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    (80) move_type -> . CENTER
    (81) move_type -> . FORWARD
    (82) move_type -> . RIGHT
    (83) move_type -> . LEFT
    END             reduce using rule 87 (empty -> .)
    ELSE            reduce using rule 87 (empty -> .)
    PEN_DOWN        shift and go to state 37
    PEN_UP          shift and go to state 38
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    WRITE           shift and go to state 42
    READ            shift and go to state 43
    ID              shift and go to state 36
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9
    CENTER          shift and go to state 44
    FORWARD         shift and go to state 45
    RIGHT           shift and go to state 46
    LEFT            shift and go to state 47

    move_func                      shift and go to state 28
    stmnt                          shift and go to state 53
    empty                          shift and go to state 25
    var_declaration_func           shift and go to state 26
    pen_func                       shift and go to state 27
    while_stmnt                    shift and go to state 29
    if_stmnt                       shift and go to state 30
    write                          shift and go to state 31
    read                           shift and go to state 32
    func_call                      shift and go to state 33
    var_assignation                shift and go to state 34
    var_type                       shift and go to state 35
    move_type                      shift and go to state 39

state 29

    (23) stmnt -> while_stmnt . stmnt
    (19) stmnt -> . empty
    (20) stmnt -> . var_declaration_func stmnt
    (21) stmnt -> . pen_func stmnt
    (22) stmnt -> . move_func stmnt
    (23) stmnt -> . while_stmnt stmnt
    (24) stmnt -> . if_stmnt stmnt
    (25) stmnt -> . write stmnt
    (26) stmnt -> . read stmnt
    (27) stmnt -> . func_call stmnt
    (28) stmnt -> . var_assignation stmnt
    (87) empty -> .
    (29) var_declaration_func -> . var_type ID multiple_vars
    (84) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (85) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (79) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (77) while_stmnt -> . WHILE con_expression stmnt END
    (74) if_stmnt -> . IF con_expression stmnt else_stmnt
    (73) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (65) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (61) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (30) var_assignation -> . ID assign expression
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    (80) move_type -> . CENTER
    (81) move_type -> . FORWARD
    (82) move_type -> . RIGHT
    (83) move_type -> . LEFT
    END             reduce using rule 87 (empty -> .)
    ELSE            reduce using rule 87 (empty -> .)
    PEN_DOWN        shift and go to state 37
    PEN_UP          shift and go to state 38
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    WRITE           shift and go to state 42
    READ            shift and go to state 43
    ID              shift and go to state 36
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9
    CENTER          shift and go to state 44
    FORWARD         shift and go to state 45
    RIGHT           shift and go to state 46
    LEFT            shift and go to state 47

    while_stmnt                    shift and go to state 29
    stmnt                          shift and go to state 54
    empty                          shift and go to state 25
    var_declaration_func           shift and go to state 26
    pen_func                       shift and go to state 27
    move_func                      shift and go to state 28
    if_stmnt                       shift and go to state 30
    write                          shift and go to state 31
    read                           shift and go to state 32
    func_call                      shift and go to state 33
    var_assignation                shift and go to state 34
    var_type                       shift and go to state 35
    move_type                      shift and go to state 39

state 30

    (24) stmnt -> if_stmnt . stmnt
    (19) stmnt -> . empty
    (20) stmnt -> . var_declaration_func stmnt
    (21) stmnt -> . pen_func stmnt
    (22) stmnt -> . move_func stmnt
    (23) stmnt -> . while_stmnt stmnt
    (24) stmnt -> . if_stmnt stmnt
    (25) stmnt -> . write stmnt
    (26) stmnt -> . read stmnt
    (27) stmnt -> . func_call stmnt
    (28) stmnt -> . var_assignation stmnt
    (87) empty -> .
    (29) var_declaration_func -> . var_type ID multiple_vars
    (84) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (85) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (79) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (77) while_stmnt -> . WHILE con_expression stmnt END
    (74) if_stmnt -> . IF con_expression stmnt else_stmnt
    (73) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (65) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (61) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (30) var_assignation -> . ID assign expression
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    (80) move_type -> . CENTER
    (81) move_type -> . FORWARD
    (82) move_type -> . RIGHT
    (83) move_type -> . LEFT
    END             reduce using rule 87 (empty -> .)
    ELSE            reduce using rule 87 (empty -> .)
    PEN_DOWN        shift and go to state 37
    PEN_UP          shift and go to state 38
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    WRITE           shift and go to state 42
    READ            shift and go to state 43
    ID              shift and go to state 36
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9
    CENTER          shift and go to state 44
    FORWARD         shift and go to state 45
    RIGHT           shift and go to state 46
    LEFT            shift and go to state 47

    if_stmnt                       shift and go to state 30
    stmnt                          shift and go to state 55
    empty                          shift and go to state 25
    var_declaration_func           shift and go to state 26
    pen_func                       shift and go to state 27
    move_func                      shift and go to state 28
    while_stmnt                    shift and go to state 29
    write                          shift and go to state 31
    read                           shift and go to state 32
    func_call                      shift and go to state 33
    var_assignation                shift and go to state 34
    var_type                       shift and go to state 35
    move_type                      shift and go to state 39

state 31

    (25) stmnt -> write . stmnt
    (19) stmnt -> . empty
    (20) stmnt -> . var_declaration_func stmnt
    (21) stmnt -> . pen_func stmnt
    (22) stmnt -> . move_func stmnt
    (23) stmnt -> . while_stmnt stmnt
    (24) stmnt -> . if_stmnt stmnt
    (25) stmnt -> . write stmnt
    (26) stmnt -> . read stmnt
    (27) stmnt -> . func_call stmnt
    (28) stmnt -> . var_assignation stmnt
    (87) empty -> .
    (29) var_declaration_func -> . var_type ID multiple_vars
    (84) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (85) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (79) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (77) while_stmnt -> . WHILE con_expression stmnt END
    (74) if_stmnt -> . IF con_expression stmnt else_stmnt
    (73) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (65) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (61) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (30) var_assignation -> . ID assign expression
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    (80) move_type -> . CENTER
    (81) move_type -> . FORWARD
    (82) move_type -> . RIGHT
    (83) move_type -> . LEFT
    END             reduce using rule 87 (empty -> .)
    ELSE            reduce using rule 87 (empty -> .)
    PEN_DOWN        shift and go to state 37
    PEN_UP          shift and go to state 38
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    WRITE           shift and go to state 42
    READ            shift and go to state 43
    ID              shift and go to state 36
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9
    CENTER          shift and go to state 44
    FORWARD         shift and go to state 45
    RIGHT           shift and go to state 46
    LEFT            shift and go to state 47

    write                          shift and go to state 31
    stmnt                          shift and go to state 56
    empty                          shift and go to state 25
    var_declaration_func           shift and go to state 26
    pen_func                       shift and go to state 27
    move_func                      shift and go to state 28
    while_stmnt                    shift and go to state 29
    if_stmnt                       shift and go to state 30
    read                           shift and go to state 32
    func_call                      shift and go to state 33
    var_assignation                shift and go to state 34
    var_type                       shift and go to state 35
    move_type                      shift and go to state 39

state 32

    (26) stmnt -> read . stmnt
    (19) stmnt -> . empty
    (20) stmnt -> . var_declaration_func stmnt
    (21) stmnt -> . pen_func stmnt
    (22) stmnt -> . move_func stmnt
    (23) stmnt -> . while_stmnt stmnt
    (24) stmnt -> . if_stmnt stmnt
    (25) stmnt -> . write stmnt
    (26) stmnt -> . read stmnt
    (27) stmnt -> . func_call stmnt
    (28) stmnt -> . var_assignation stmnt
    (87) empty -> .
    (29) var_declaration_func -> . var_type ID multiple_vars
    (84) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (85) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (79) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (77) while_stmnt -> . WHILE con_expression stmnt END
    (74) if_stmnt -> . IF con_expression stmnt else_stmnt
    (73) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (65) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (61) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (30) var_assignation -> . ID assign expression
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    (80) move_type -> . CENTER
    (81) move_type -> . FORWARD
    (82) move_type -> . RIGHT
    (83) move_type -> . LEFT
    END             reduce using rule 87 (empty -> .)
    ELSE            reduce using rule 87 (empty -> .)
    PEN_DOWN        shift and go to state 37
    PEN_UP          shift and go to state 38
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    WRITE           shift and go to state 42
    READ            shift and go to state 43
    ID              shift and go to state 36
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9
    CENTER          shift and go to state 44
    FORWARD         shift and go to state 45
    RIGHT           shift and go to state 46
    LEFT            shift and go to state 47

    read                           shift and go to state 32
    stmnt                          shift and go to state 57
    empty                          shift and go to state 25
    var_declaration_func           shift and go to state 26
    pen_func                       shift and go to state 27
    move_func                      shift and go to state 28
    while_stmnt                    shift and go to state 29
    if_stmnt                       shift and go to state 30
    write                          shift and go to state 31
    func_call                      shift and go to state 33
    var_assignation                shift and go to state 34
    var_type                       shift and go to state 35
    move_type                      shift and go to state 39

state 33

    (27) stmnt -> func_call . stmnt
    (19) stmnt -> . empty
    (20) stmnt -> . var_declaration_func stmnt
    (21) stmnt -> . pen_func stmnt
    (22) stmnt -> . move_func stmnt
    (23) stmnt -> . while_stmnt stmnt
    (24) stmnt -> . if_stmnt stmnt
    (25) stmnt -> . write stmnt
    (26) stmnt -> . read stmnt
    (27) stmnt -> . func_call stmnt
    (28) stmnt -> . var_assignation stmnt
    (87) empty -> .
    (29) var_declaration_func -> . var_type ID multiple_vars
    (84) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (85) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (79) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (77) while_stmnt -> . WHILE con_expression stmnt END
    (74) if_stmnt -> . IF con_expression stmnt else_stmnt
    (73) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (65) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (61) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (30) var_assignation -> . ID assign expression
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    (80) move_type -> . CENTER
    (81) move_type -> . FORWARD
    (82) move_type -> . RIGHT
    (83) move_type -> . LEFT
    END             reduce using rule 87 (empty -> .)
    ELSE            reduce using rule 87 (empty -> .)
    PEN_DOWN        shift and go to state 37
    PEN_UP          shift and go to state 38
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    WRITE           shift and go to state 42
    READ            shift and go to state 43
    ID              shift and go to state 36
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9
    CENTER          shift and go to state 44
    FORWARD         shift and go to state 45
    RIGHT           shift and go to state 46
    LEFT            shift and go to state 47

    func_call                      shift and go to state 33
    stmnt                          shift and go to state 58
    empty                          shift and go to state 25
    var_declaration_func           shift and go to state 26
    pen_func                       shift and go to state 27
    move_func                      shift and go to state 28
    while_stmnt                    shift and go to state 29
    if_stmnt                       shift and go to state 30
    write                          shift and go to state 31
    read                           shift and go to state 32
    var_assignation                shift and go to state 34
    var_type                       shift and go to state 35
    move_type                      shift and go to state 39

state 34

    (28) stmnt -> var_assignation . stmnt
    (19) stmnt -> . empty
    (20) stmnt -> . var_declaration_func stmnt
    (21) stmnt -> . pen_func stmnt
    (22) stmnt -> . move_func stmnt
    (23) stmnt -> . while_stmnt stmnt
    (24) stmnt -> . if_stmnt stmnt
    (25) stmnt -> . write stmnt
    (26) stmnt -> . read stmnt
    (27) stmnt -> . func_call stmnt
    (28) stmnt -> . var_assignation stmnt
    (87) empty -> .
    (29) var_declaration_func -> . var_type ID multiple_vars
    (84) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (85) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (79) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (77) while_stmnt -> . WHILE con_expression stmnt END
    (74) if_stmnt -> . IF con_expression stmnt else_stmnt
    (73) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (65) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (61) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (30) var_assignation -> . ID assign expression
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    (80) move_type -> . CENTER
    (81) move_type -> . FORWARD
    (82) move_type -> . RIGHT
    (83) move_type -> . LEFT
    END             reduce using rule 87 (empty -> .)
    ELSE            reduce using rule 87 (empty -> .)
    PEN_DOWN        shift and go to state 37
    PEN_UP          shift and go to state 38
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    WRITE           shift and go to state 42
    READ            shift and go to state 43
    ID              shift and go to state 36
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9
    CENTER          shift and go to state 44
    FORWARD         shift and go to state 45
    RIGHT           shift and go to state 46
    LEFT            shift and go to state 47

    var_assignation                shift and go to state 34
    stmnt                          shift and go to state 59
    empty                          shift and go to state 25
    var_declaration_func           shift and go to state 26
    pen_func                       shift and go to state 27
    move_func                      shift and go to state 28
    while_stmnt                    shift and go to state 29
    if_stmnt                       shift and go to state 30
    write                          shift and go to state 31
    read                           shift and go to state 32
    func_call                      shift and go to state 33
    var_type                       shift and go to state 35
    move_type                      shift and go to state 39

state 35

    (29) var_declaration_func -> var_type . ID multiple_vars
    ID              shift and go to state 60


state 36

    (61) func_call -> ID . OPEN_PTH func_call_param CLOSE_PTH
    (30) var_assignation -> ID . assign expression
    (31) assign -> . ASSIGN
    OPEN_PTH        shift and go to state 61
    ASSIGN          shift and go to state 63

    assign                         shift and go to state 62

state 37

    (84) pen_func -> PEN_DOWN . OPEN_PTH CLOSE_PTH
    OPEN_PTH        shift and go to state 64


state 38

    (85) pen_func -> PEN_UP . OPEN_PTH CLOSE_PTH
    OPEN_PTH        shift and go to state 65


state 39

    (79) move_func -> move_type . OPEN_PTH func_call_param CLOSE_PTH
    OPEN_PTH        shift and go to state 66


state 40

    (77) while_stmnt -> WHILE . con_expression stmnt END
    (78) con_expression -> . expression log_op expression
    (39) expression -> . exp
    (40) expression -> . exp rel_op exp
    (41) exp -> . termino
    (42) exp -> . termino term_op termino
    (45) termino -> . factor
    (46) termino -> . factor fact_op factor
    (49) factor -> . SUB var_cte
    (50) factor -> . SUM var_cte
    (51) factor -> . var_cte
    (52) factor -> . OPEN_PTH expression CLOSE_PTH
    (32) var_cte -> . func_call
    (33) var_cte -> . cte_bool
    (34) var_cte -> . CTE_STR
    (35) var_cte -> . CTE_NUM
    (36) var_cte -> . variable
    (61) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (37) cte_bool -> . FALSE
    (38) cte_bool -> . TRUE
    (66) variable -> . ID array
    SUB             shift and go to state 72
    SUM             shift and go to state 74
    OPEN_PTH        shift and go to state 75
    CTE_STR         shift and go to state 78
    CTE_NUM         shift and go to state 79
    ID              shift and go to state 81
    FALSE           shift and go to state 82
    TRUE            shift and go to state 83

    con_expression                 shift and go to state 67
    expression                     shift and go to state 68
    exp                            shift and go to state 69
    termino                        shift and go to state 70
    factor                         shift and go to state 71
    var_cte                        shift and go to state 73
    func_call                      shift and go to state 76
    cte_bool                       shift and go to state 77
    variable                       shift and go to state 80

state 41

    (74) if_stmnt -> IF . con_expression stmnt else_stmnt
    (78) con_expression -> . expression log_op expression
    (39) expression -> . exp
    (40) expression -> . exp rel_op exp
    (41) exp -> . termino
    (42) exp -> . termino term_op termino
    (45) termino -> . factor
    (46) termino -> . factor fact_op factor
    (49) factor -> . SUB var_cte
    (50) factor -> . SUM var_cte
    (51) factor -> . var_cte
    (52) factor -> . OPEN_PTH expression CLOSE_PTH
    (32) var_cte -> . func_call
    (33) var_cte -> . cte_bool
    (34) var_cte -> . CTE_STR
    (35) var_cte -> . CTE_NUM
    (36) var_cte -> . variable
    (61) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (37) cte_bool -> . FALSE
    (38) cte_bool -> . TRUE
    (66) variable -> . ID array
    SUB             shift and go to state 72
    SUM             shift and go to state 74
    OPEN_PTH        shift and go to state 75
    CTE_STR         shift and go to state 78
    CTE_NUM         shift and go to state 79
    ID              shift and go to state 81
    FALSE           shift and go to state 82
    TRUE            shift and go to state 83

    con_expression                 shift and go to state 84
    expression                     shift and go to state 68
    exp                            shift and go to state 69
    termino                        shift and go to state 70
    factor                         shift and go to state 71
    var_cte                        shift and go to state 73
    func_call                      shift and go to state 76
    cte_bool                       shift and go to state 77
    variable                       shift and go to state 80

state 42

    (73) write -> WRITE . OPEN_PTH expression CLOSE_PTH
    OPEN_PTH        shift and go to state 85


state 43

    (65) read -> READ . OPEN_PTH variable multiple_vars CLOSE_PTH
    OPEN_PTH        shift and go to state 86


state 44

    (80) move_type -> CENTER .
    OPEN_PTH        reduce using rule 80 (move_type -> CENTER .)


state 45

    (81) move_type -> FORWARD .
    OPEN_PTH        reduce using rule 81 (move_type -> FORWARD .)


state 46

    (82) move_type -> RIGHT .
    OPEN_PTH        reduce using rule 82 (move_type -> RIGHT .)


state 47

    (83) move_type -> LEFT .
    OPEN_PTH        reduce using rule 83 (move_type -> LEFT .)


state 48

    (10) func_declaration -> func_type FUNC ID . OPEN_PTH parameter CLOSE_PTH stmnt END
    OPEN_PTH        shift and go to state 87


state 49

    (5) multiple_var -> COMMA ID . multiple_var
    (4) multiple_var -> . empty
    (5) multiple_var -> . COMMA ID multiple_var
    (87) empty -> .
    COMMA           shift and go to state 23
    BOOL            reduce using rule 87 (empty -> .)
    WORD            reduce using rule 87 (empty -> .)
    NUMBER          reduce using rule 87 (empty -> .)
    VOID            reduce using rule 87 (empty -> .)
    MAIN            reduce using rule 87 (empty -> .)

    multiple_var                   shift and go to state 88
    empty                          shift and go to state 22

state 50

    (86) main -> MAIN stmnt END .
    $end            reduce using rule 86 (main -> MAIN stmnt END .)


state 51

    (20) stmnt -> var_declaration_func stmnt .
    END             reduce using rule 20 (stmnt -> var_declaration_func stmnt .)
    ELSE            reduce using rule 20 (stmnt -> var_declaration_func stmnt .)


state 52

    (21) stmnt -> pen_func stmnt .
    END             reduce using rule 21 (stmnt -> pen_func stmnt .)
    ELSE            reduce using rule 21 (stmnt -> pen_func stmnt .)


state 53

    (22) stmnt -> move_func stmnt .
    END             reduce using rule 22 (stmnt -> move_func stmnt .)
    ELSE            reduce using rule 22 (stmnt -> move_func stmnt .)


state 54

    (23) stmnt -> while_stmnt stmnt .
    END             reduce using rule 23 (stmnt -> while_stmnt stmnt .)
    ELSE            reduce using rule 23 (stmnt -> while_stmnt stmnt .)


state 55

    (24) stmnt -> if_stmnt stmnt .
    END             reduce using rule 24 (stmnt -> if_stmnt stmnt .)
    ELSE            reduce using rule 24 (stmnt -> if_stmnt stmnt .)


state 56

    (25) stmnt -> write stmnt .
    END             reduce using rule 25 (stmnt -> write stmnt .)
    ELSE            reduce using rule 25 (stmnt -> write stmnt .)


state 57

    (26) stmnt -> read stmnt .
    END             reduce using rule 26 (stmnt -> read stmnt .)
    ELSE            reduce using rule 26 (stmnt -> read stmnt .)


state 58

    (27) stmnt -> func_call stmnt .
    END             reduce using rule 27 (stmnt -> func_call stmnt .)
    ELSE            reduce using rule 27 (stmnt -> func_call stmnt .)


state 59

    (28) stmnt -> var_assignation stmnt .
    END             reduce using rule 28 (stmnt -> var_assignation stmnt .)
    ELSE            reduce using rule 28 (stmnt -> var_assignation stmnt .)


state 60

    (29) var_declaration_func -> var_type ID . multiple_vars
    (71) multiple_vars -> . empty
    (72) multiple_vars -> . COMMA variable
    (87) empty -> .
    COMMA           shift and go to state 91
    PEN_DOWN        reduce using rule 87 (empty -> .)
    PEN_UP          reduce using rule 87 (empty -> .)
    WHILE           reduce using rule 87 (empty -> .)
    IF              reduce using rule 87 (empty -> .)
    WRITE           reduce using rule 87 (empty -> .)
    READ            reduce using rule 87 (empty -> .)
    ID              reduce using rule 87 (empty -> .)
    BOOL            reduce using rule 87 (empty -> .)
    WORD            reduce using rule 87 (empty -> .)
    NUMBER          reduce using rule 87 (empty -> .)
    CENTER          reduce using rule 87 (empty -> .)
    FORWARD         reduce using rule 87 (empty -> .)
    RIGHT           reduce using rule 87 (empty -> .)
    LEFT            reduce using rule 87 (empty -> .)
    END             reduce using rule 87 (empty -> .)
    ELSE            reduce using rule 87 (empty -> .)

    multiple_vars                  shift and go to state 89
    empty                          shift and go to state 90

state 61

    (61) func_call -> ID OPEN_PTH . func_call_param CLOSE_PTH
    (62) func_call_param -> . expression multiple_fc_param
    (39) expression -> . exp
    (40) expression -> . exp rel_op exp
    (41) exp -> . termino
    (42) exp -> . termino term_op termino
    (45) termino -> . factor
    (46) termino -> . factor fact_op factor
    (49) factor -> . SUB var_cte
    (50) factor -> . SUM var_cte
    (51) factor -> . var_cte
    (52) factor -> . OPEN_PTH expression CLOSE_PTH
    (32) var_cte -> . func_call
    (33) var_cte -> . cte_bool
    (34) var_cte -> . CTE_STR
    (35) var_cte -> . CTE_NUM
    (36) var_cte -> . variable
    (61) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (37) cte_bool -> . FALSE
    (38) cte_bool -> . TRUE
    (66) variable -> . ID array
    SUB             shift and go to state 72
    SUM             shift and go to state 74
    OPEN_PTH        shift and go to state 75
    CTE_STR         shift and go to state 78
    CTE_NUM         shift and go to state 79
    ID              shift and go to state 81
    FALSE           shift and go to state 82
    TRUE            shift and go to state 83

    func_call_param                shift and go to state 92
    expression                     shift and go to state 93
    exp                            shift and go to state 69
    termino                        shift and go to state 70
    factor                         shift and go to state 71
    var_cte                        shift and go to state 73
    func_call                      shift and go to state 76
    cte_bool                       shift and go to state 77
    variable                       shift and go to state 80

state 62

    (30) var_assignation -> ID assign . expression
    (39) expression -> . exp
    (40) expression -> . exp rel_op exp
    (41) exp -> . termino
    (42) exp -> . termino term_op termino
    (45) termino -> . factor
    (46) termino -> . factor fact_op factor
    (49) factor -> . SUB var_cte
    (50) factor -> . SUM var_cte
    (51) factor -> . var_cte
    (52) factor -> . OPEN_PTH expression CLOSE_PTH
    (32) var_cte -> . func_call
    (33) var_cte -> . cte_bool
    (34) var_cte -> . CTE_STR
    (35) var_cte -> . CTE_NUM
    (36) var_cte -> . variable
    (61) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (37) cte_bool -> . FALSE
    (38) cte_bool -> . TRUE
    (66) variable -> . ID array
    SUB             shift and go to state 72
    SUM             shift and go to state 74
    OPEN_PTH        shift and go to state 75
    CTE_STR         shift and go to state 78
    CTE_NUM         shift and go to state 79
    ID              shift and go to state 81
    FALSE           shift and go to state 82
    TRUE            shift and go to state 83

    expression                     shift and go to state 94
    exp                            shift and go to state 69
    termino                        shift and go to state 70
    factor                         shift and go to state 71
    var_cte                        shift and go to state 73
    func_call                      shift and go to state 76
    cte_bool                       shift and go to state 77
    variable                       shift and go to state 80

state 63

    (31) assign -> ASSIGN .
    SUB             reduce using rule 31 (assign -> ASSIGN .)
    SUM             reduce using rule 31 (assign -> ASSIGN .)
    OPEN_PTH        reduce using rule 31 (assign -> ASSIGN .)
    CTE_STR         reduce using rule 31 (assign -> ASSIGN .)
    CTE_NUM         reduce using rule 31 (assign -> ASSIGN .)
    ID              reduce using rule 31 (assign -> ASSIGN .)
    FALSE           reduce using rule 31 (assign -> ASSIGN .)
    TRUE            reduce using rule 31 (assign -> ASSIGN .)


state 64

    (84) pen_func -> PEN_DOWN OPEN_PTH . CLOSE_PTH
    CLOSE_PTH       shift and go to state 95


state 65

    (85) pen_func -> PEN_UP OPEN_PTH . CLOSE_PTH
    CLOSE_PTH       shift and go to state 96


state 66

    (79) move_func -> move_type OPEN_PTH . func_call_param CLOSE_PTH
    (62) func_call_param -> . expression multiple_fc_param
    (39) expression -> . exp
    (40) expression -> . exp rel_op exp
    (41) exp -> . termino
    (42) exp -> . termino term_op termino
    (45) termino -> . factor
    (46) termino -> . factor fact_op factor
    (49) factor -> . SUB var_cte
    (50) factor -> . SUM var_cte
    (51) factor -> . var_cte
    (52) factor -> . OPEN_PTH expression CLOSE_PTH
    (32) var_cte -> . func_call
    (33) var_cte -> . cte_bool
    (34) var_cte -> . CTE_STR
    (35) var_cte -> . CTE_NUM
    (36) var_cte -> . variable
    (61) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (37) cte_bool -> . FALSE
    (38) cte_bool -> . TRUE
    (66) variable -> . ID array
    SUB             shift and go to state 72
    SUM             shift and go to state 74
    OPEN_PTH        shift and go to state 75
    CTE_STR         shift and go to state 78
    CTE_NUM         shift and go to state 79
    ID              shift and go to state 81
    FALSE           shift and go to state 82
    TRUE            shift and go to state 83

    func_call_param                shift and go to state 97
    expression                     shift and go to state 93
    exp                            shift and go to state 69
    termino                        shift and go to state 70
    factor                         shift and go to state 71
    var_cte                        shift and go to state 73
    func_call                      shift and go to state 76
    cte_bool                       shift and go to state 77
    variable                       shift and go to state 80

state 67

    (77) while_stmnt -> WHILE con_expression . stmnt END
    (19) stmnt -> . empty
    (20) stmnt -> . var_declaration_func stmnt
    (21) stmnt -> . pen_func stmnt
    (22) stmnt -> . move_func stmnt
    (23) stmnt -> . while_stmnt stmnt
    (24) stmnt -> . if_stmnt stmnt
    (25) stmnt -> . write stmnt
    (26) stmnt -> . read stmnt
    (27) stmnt -> . func_call stmnt
    (28) stmnt -> . var_assignation stmnt
    (87) empty -> .
    (29) var_declaration_func -> . var_type ID multiple_vars
    (84) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (85) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (79) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (77) while_stmnt -> . WHILE con_expression stmnt END
    (74) if_stmnt -> . IF con_expression stmnt else_stmnt
    (73) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (65) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (61) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (30) var_assignation -> . ID assign expression
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    (80) move_type -> . CENTER
    (81) move_type -> . FORWARD
    (82) move_type -> . RIGHT
    (83) move_type -> . LEFT
    END             reduce using rule 87 (empty -> .)
    PEN_DOWN        shift and go to state 37
    PEN_UP          shift and go to state 38
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    WRITE           shift and go to state 42
    READ            shift and go to state 43
    ID              shift and go to state 36
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9
    CENTER          shift and go to state 44
    FORWARD         shift and go to state 45
    RIGHT           shift and go to state 46
    LEFT            shift and go to state 47

    stmnt                          shift and go to state 98
    empty                          shift and go to state 25
    var_declaration_func           shift and go to state 26
    pen_func                       shift and go to state 27
    move_func                      shift and go to state 28
    while_stmnt                    shift and go to state 29
    if_stmnt                       shift and go to state 30
    write                          shift and go to state 31
    read                           shift and go to state 32
    func_call                      shift and go to state 33
    var_assignation                shift and go to state 34
    var_type                       shift and go to state 35
    move_type                      shift and go to state 39

state 68

    (78) con_expression -> expression . log_op expression
    (53) log_op -> . OR
    (54) log_op -> . AND
    OR              shift and go to state 100
    AND             shift and go to state 101

    log_op                         shift and go to state 99

state 69

    (39) expression -> exp .
    (40) expression -> exp . rel_op exp
    (55) rel_op -> . EQUAL_TO
    (56) rel_op -> . MORE_OR_EQ_THAN
    (57) rel_op -> . LESS_OR_EQ_THAN
    (58) rel_op -> . DIFFERENT_TO
    (59) rel_op -> . MORE_THAN
    (60) rel_op -> . LESS_THAN
    OR              reduce using rule 39 (expression -> exp .)
    AND             reduce using rule 39 (expression -> exp .)
    COMMA           reduce using rule 39 (expression -> exp .)
    CLOSE_PTH       reduce using rule 39 (expression -> exp .)
    PEN_DOWN        reduce using rule 39 (expression -> exp .)
    PEN_UP          reduce using rule 39 (expression -> exp .)
    WHILE           reduce using rule 39 (expression -> exp .)
    IF              reduce using rule 39 (expression -> exp .)
    WRITE           reduce using rule 39 (expression -> exp .)
    READ            reduce using rule 39 (expression -> exp .)
    ID              reduce using rule 39 (expression -> exp .)
    BOOL            reduce using rule 39 (expression -> exp .)
    WORD            reduce using rule 39 (expression -> exp .)
    NUMBER          reduce using rule 39 (expression -> exp .)
    CENTER          reduce using rule 39 (expression -> exp .)
    FORWARD         reduce using rule 39 (expression -> exp .)
    RIGHT           reduce using rule 39 (expression -> exp .)
    LEFT            reduce using rule 39 (expression -> exp .)
    END             reduce using rule 39 (expression -> exp .)
    ELSE            reduce using rule 39 (expression -> exp .)
    CLOSE_SQR       reduce using rule 39 (expression -> exp .)
    EQUAL_TO        shift and go to state 103
    MORE_OR_EQ_THAN shift and go to state 104
    LESS_OR_EQ_THAN shift and go to state 105
    DIFFERENT_TO    shift and go to state 106
    MORE_THAN       shift and go to state 107
    LESS_THAN       shift and go to state 108

    rel_op                         shift and go to state 102

state 70

    (41) exp -> termino .
    (42) exp -> termino . term_op termino
    (43) term_op -> . SUB
    (44) term_op -> . SUM
    EQUAL_TO        reduce using rule 41 (exp -> termino .)
    MORE_OR_EQ_THAN reduce using rule 41 (exp -> termino .)
    LESS_OR_EQ_THAN reduce using rule 41 (exp -> termino .)
    DIFFERENT_TO    reduce using rule 41 (exp -> termino .)
    MORE_THAN       reduce using rule 41 (exp -> termino .)
    LESS_THAN       reduce using rule 41 (exp -> termino .)
    OR              reduce using rule 41 (exp -> termino .)
    AND             reduce using rule 41 (exp -> termino .)
    COMMA           reduce using rule 41 (exp -> termino .)
    CLOSE_PTH       reduce using rule 41 (exp -> termino .)
    PEN_DOWN        reduce using rule 41 (exp -> termino .)
    PEN_UP          reduce using rule 41 (exp -> termino .)
    WHILE           reduce using rule 41 (exp -> termino .)
    IF              reduce using rule 41 (exp -> termino .)
    WRITE           reduce using rule 41 (exp -> termino .)
    READ            reduce using rule 41 (exp -> termino .)
    ID              reduce using rule 41 (exp -> termino .)
    BOOL            reduce using rule 41 (exp -> termino .)
    WORD            reduce using rule 41 (exp -> termino .)
    NUMBER          reduce using rule 41 (exp -> termino .)
    CENTER          reduce using rule 41 (exp -> termino .)
    FORWARD         reduce using rule 41 (exp -> termino .)
    RIGHT           reduce using rule 41 (exp -> termino .)
    LEFT            reduce using rule 41 (exp -> termino .)
    END             reduce using rule 41 (exp -> termino .)
    ELSE            reduce using rule 41 (exp -> termino .)
    CLOSE_SQR       reduce using rule 41 (exp -> termino .)
    SUB             shift and go to state 110
    SUM             shift and go to state 111

    term_op                        shift and go to state 109

state 71

    (45) termino -> factor .
    (46) termino -> factor . fact_op factor
    (47) fact_op -> . DIV
    (48) fact_op -> . MULT
    SUB             reduce using rule 45 (termino -> factor .)
    SUM             reduce using rule 45 (termino -> factor .)
    EQUAL_TO        reduce using rule 45 (termino -> factor .)
    MORE_OR_EQ_THAN reduce using rule 45 (termino -> factor .)
    LESS_OR_EQ_THAN reduce using rule 45 (termino -> factor .)
    DIFFERENT_TO    reduce using rule 45 (termino -> factor .)
    MORE_THAN       reduce using rule 45 (termino -> factor .)
    LESS_THAN       reduce using rule 45 (termino -> factor .)
    OR              reduce using rule 45 (termino -> factor .)
    AND             reduce using rule 45 (termino -> factor .)
    COMMA           reduce using rule 45 (termino -> factor .)
    CLOSE_PTH       reduce using rule 45 (termino -> factor .)
    PEN_DOWN        reduce using rule 45 (termino -> factor .)
    PEN_UP          reduce using rule 45 (termino -> factor .)
    WHILE           reduce using rule 45 (termino -> factor .)
    IF              reduce using rule 45 (termino -> factor .)
    WRITE           reduce using rule 45 (termino -> factor .)
    READ            reduce using rule 45 (termino -> factor .)
    ID              reduce using rule 45 (termino -> factor .)
    BOOL            reduce using rule 45 (termino -> factor .)
    WORD            reduce using rule 45 (termino -> factor .)
    NUMBER          reduce using rule 45 (termino -> factor .)
    CENTER          reduce using rule 45 (termino -> factor .)
    FORWARD         reduce using rule 45 (termino -> factor .)
    RIGHT           reduce using rule 45 (termino -> factor .)
    LEFT            reduce using rule 45 (termino -> factor .)
    END             reduce using rule 45 (termino -> factor .)
    ELSE            reduce using rule 45 (termino -> factor .)
    CLOSE_SQR       reduce using rule 45 (termino -> factor .)
    DIV             shift and go to state 113
    MULT            shift and go to state 114

    fact_op                        shift and go to state 112

state 72

    (49) factor -> SUB . var_cte
    (32) var_cte -> . func_call
    (33) var_cte -> . cte_bool
    (34) var_cte -> . CTE_STR
    (35) var_cte -> . CTE_NUM
    (36) var_cte -> . variable
    (61) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (37) cte_bool -> . FALSE
    (38) cte_bool -> . TRUE
    (66) variable -> . ID array
    CTE_STR         shift and go to state 78
    CTE_NUM         shift and go to state 79
    ID              shift and go to state 81
    FALSE           shift and go to state 82
    TRUE            shift and go to state 83

    var_cte                        shift and go to state 115
    func_call                      shift and go to state 76
    cte_bool                       shift and go to state 77
    variable                       shift and go to state 80

state 73

    (51) factor -> var_cte .
    DIV             reduce using rule 51 (factor -> var_cte .)
    MULT            reduce using rule 51 (factor -> var_cte .)
    SUB             reduce using rule 51 (factor -> var_cte .)
    SUM             reduce using rule 51 (factor -> var_cte .)
    EQUAL_TO        reduce using rule 51 (factor -> var_cte .)
    MORE_OR_EQ_THAN reduce using rule 51 (factor -> var_cte .)
    LESS_OR_EQ_THAN reduce using rule 51 (factor -> var_cte .)
    DIFFERENT_TO    reduce using rule 51 (factor -> var_cte .)
    MORE_THAN       reduce using rule 51 (factor -> var_cte .)
    LESS_THAN       reduce using rule 51 (factor -> var_cte .)
    OR              reduce using rule 51 (factor -> var_cte .)
    AND             reduce using rule 51 (factor -> var_cte .)
    COMMA           reduce using rule 51 (factor -> var_cte .)
    CLOSE_PTH       reduce using rule 51 (factor -> var_cte .)
    PEN_DOWN        reduce using rule 51 (factor -> var_cte .)
    PEN_UP          reduce using rule 51 (factor -> var_cte .)
    WHILE           reduce using rule 51 (factor -> var_cte .)
    IF              reduce using rule 51 (factor -> var_cte .)
    WRITE           reduce using rule 51 (factor -> var_cte .)
    READ            reduce using rule 51 (factor -> var_cte .)
    ID              reduce using rule 51 (factor -> var_cte .)
    BOOL            reduce using rule 51 (factor -> var_cte .)
    WORD            reduce using rule 51 (factor -> var_cte .)
    NUMBER          reduce using rule 51 (factor -> var_cte .)
    CENTER          reduce using rule 51 (factor -> var_cte .)
    FORWARD         reduce using rule 51 (factor -> var_cte .)
    RIGHT           reduce using rule 51 (factor -> var_cte .)
    LEFT            reduce using rule 51 (factor -> var_cte .)
    END             reduce using rule 51 (factor -> var_cte .)
    ELSE            reduce using rule 51 (factor -> var_cte .)
    CLOSE_SQR       reduce using rule 51 (factor -> var_cte .)


state 74

    (50) factor -> SUM . var_cte
    (32) var_cte -> . func_call
    (33) var_cte -> . cte_bool
    (34) var_cte -> . CTE_STR
    (35) var_cte -> . CTE_NUM
    (36) var_cte -> . variable
    (61) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (37) cte_bool -> . FALSE
    (38) cte_bool -> . TRUE
    (66) variable -> . ID array
    CTE_STR         shift and go to state 78
    CTE_NUM         shift and go to state 79
    ID              shift and go to state 81
    FALSE           shift and go to state 82
    TRUE            shift and go to state 83

    var_cte                        shift and go to state 116
    func_call                      shift and go to state 76
    cte_bool                       shift and go to state 77
    variable                       shift and go to state 80

state 75

    (52) factor -> OPEN_PTH . expression CLOSE_PTH
    (39) expression -> . exp
    (40) expression -> . exp rel_op exp
    (41) exp -> . termino
    (42) exp -> . termino term_op termino
    (45) termino -> . factor
    (46) termino -> . factor fact_op factor
    (49) factor -> . SUB var_cte
    (50) factor -> . SUM var_cte
    (51) factor -> . var_cte
    (52) factor -> . OPEN_PTH expression CLOSE_PTH
    (32) var_cte -> . func_call
    (33) var_cte -> . cte_bool
    (34) var_cte -> . CTE_STR
    (35) var_cte -> . CTE_NUM
    (36) var_cte -> . variable
    (61) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (37) cte_bool -> . FALSE
    (38) cte_bool -> . TRUE
    (66) variable -> . ID array
    SUB             shift and go to state 72
    SUM             shift and go to state 74
    OPEN_PTH        shift and go to state 75
    CTE_STR         shift and go to state 78
    CTE_NUM         shift and go to state 79
    ID              shift and go to state 81
    FALSE           shift and go to state 82
    TRUE            shift and go to state 83

    expression                     shift and go to state 117
    exp                            shift and go to state 69
    termino                        shift and go to state 70
    factor                         shift and go to state 71
    var_cte                        shift and go to state 73
    func_call                      shift and go to state 76
    cte_bool                       shift and go to state 77
    variable                       shift and go to state 80

state 76

    (32) var_cte -> func_call .
    DIV             reduce using rule 32 (var_cte -> func_call .)
    MULT            reduce using rule 32 (var_cte -> func_call .)
    SUB             reduce using rule 32 (var_cte -> func_call .)
    SUM             reduce using rule 32 (var_cte -> func_call .)
    EQUAL_TO        reduce using rule 32 (var_cte -> func_call .)
    MORE_OR_EQ_THAN reduce using rule 32 (var_cte -> func_call .)
    LESS_OR_EQ_THAN reduce using rule 32 (var_cte -> func_call .)
    DIFFERENT_TO    reduce using rule 32 (var_cte -> func_call .)
    MORE_THAN       reduce using rule 32 (var_cte -> func_call .)
    LESS_THAN       reduce using rule 32 (var_cte -> func_call .)
    OR              reduce using rule 32 (var_cte -> func_call .)
    AND             reduce using rule 32 (var_cte -> func_call .)
    COMMA           reduce using rule 32 (var_cte -> func_call .)
    CLOSE_PTH       reduce using rule 32 (var_cte -> func_call .)
    PEN_DOWN        reduce using rule 32 (var_cte -> func_call .)
    PEN_UP          reduce using rule 32 (var_cte -> func_call .)
    WHILE           reduce using rule 32 (var_cte -> func_call .)
    IF              reduce using rule 32 (var_cte -> func_call .)
    WRITE           reduce using rule 32 (var_cte -> func_call .)
    READ            reduce using rule 32 (var_cte -> func_call .)
    ID              reduce using rule 32 (var_cte -> func_call .)
    BOOL            reduce using rule 32 (var_cte -> func_call .)
    WORD            reduce using rule 32 (var_cte -> func_call .)
    NUMBER          reduce using rule 32 (var_cte -> func_call .)
    CENTER          reduce using rule 32 (var_cte -> func_call .)
    FORWARD         reduce using rule 32 (var_cte -> func_call .)
    RIGHT           reduce using rule 32 (var_cte -> func_call .)
    LEFT            reduce using rule 32 (var_cte -> func_call .)
    END             reduce using rule 32 (var_cte -> func_call .)
    ELSE            reduce using rule 32 (var_cte -> func_call .)
    CLOSE_SQR       reduce using rule 32 (var_cte -> func_call .)


state 77

    (33) var_cte -> cte_bool .
    DIV             reduce using rule 33 (var_cte -> cte_bool .)
    MULT            reduce using rule 33 (var_cte -> cte_bool .)
    SUB             reduce using rule 33 (var_cte -> cte_bool .)
    SUM             reduce using rule 33 (var_cte -> cte_bool .)
    EQUAL_TO        reduce using rule 33 (var_cte -> cte_bool .)
    MORE_OR_EQ_THAN reduce using rule 33 (var_cte -> cte_bool .)
    LESS_OR_EQ_THAN reduce using rule 33 (var_cte -> cte_bool .)
    DIFFERENT_TO    reduce using rule 33 (var_cte -> cte_bool .)
    MORE_THAN       reduce using rule 33 (var_cte -> cte_bool .)
    LESS_THAN       reduce using rule 33 (var_cte -> cte_bool .)
    OR              reduce using rule 33 (var_cte -> cte_bool .)
    AND             reduce using rule 33 (var_cte -> cte_bool .)
    COMMA           reduce using rule 33 (var_cte -> cte_bool .)
    CLOSE_PTH       reduce using rule 33 (var_cte -> cte_bool .)
    PEN_DOWN        reduce using rule 33 (var_cte -> cte_bool .)
    PEN_UP          reduce using rule 33 (var_cte -> cte_bool .)
    WHILE           reduce using rule 33 (var_cte -> cte_bool .)
    IF              reduce using rule 33 (var_cte -> cte_bool .)
    WRITE           reduce using rule 33 (var_cte -> cte_bool .)
    READ            reduce using rule 33 (var_cte -> cte_bool .)
    ID              reduce using rule 33 (var_cte -> cte_bool .)
    BOOL            reduce using rule 33 (var_cte -> cte_bool .)
    WORD            reduce using rule 33 (var_cte -> cte_bool .)
    NUMBER          reduce using rule 33 (var_cte -> cte_bool .)
    CENTER          reduce using rule 33 (var_cte -> cte_bool .)
    FORWARD         reduce using rule 33 (var_cte -> cte_bool .)
    RIGHT           reduce using rule 33 (var_cte -> cte_bool .)
    LEFT            reduce using rule 33 (var_cte -> cte_bool .)
    END             reduce using rule 33 (var_cte -> cte_bool .)
    ELSE            reduce using rule 33 (var_cte -> cte_bool .)
    CLOSE_SQR       reduce using rule 33 (var_cte -> cte_bool .)


state 78

    (34) var_cte -> CTE_STR .
    DIV             reduce using rule 34 (var_cte -> CTE_STR .)
    MULT            reduce using rule 34 (var_cte -> CTE_STR .)
    SUB             reduce using rule 34 (var_cte -> CTE_STR .)
    SUM             reduce using rule 34 (var_cte -> CTE_STR .)
    EQUAL_TO        reduce using rule 34 (var_cte -> CTE_STR .)
    MORE_OR_EQ_THAN reduce using rule 34 (var_cte -> CTE_STR .)
    LESS_OR_EQ_THAN reduce using rule 34 (var_cte -> CTE_STR .)
    DIFFERENT_TO    reduce using rule 34 (var_cte -> CTE_STR .)
    MORE_THAN       reduce using rule 34 (var_cte -> CTE_STR .)
    LESS_THAN       reduce using rule 34 (var_cte -> CTE_STR .)
    OR              reduce using rule 34 (var_cte -> CTE_STR .)
    AND             reduce using rule 34 (var_cte -> CTE_STR .)
    COMMA           reduce using rule 34 (var_cte -> CTE_STR .)
    CLOSE_PTH       reduce using rule 34 (var_cte -> CTE_STR .)
    PEN_DOWN        reduce using rule 34 (var_cte -> CTE_STR .)
    PEN_UP          reduce using rule 34 (var_cte -> CTE_STR .)
    WHILE           reduce using rule 34 (var_cte -> CTE_STR .)
    IF              reduce using rule 34 (var_cte -> CTE_STR .)
    WRITE           reduce using rule 34 (var_cte -> CTE_STR .)
    READ            reduce using rule 34 (var_cte -> CTE_STR .)
    ID              reduce using rule 34 (var_cte -> CTE_STR .)
    BOOL            reduce using rule 34 (var_cte -> CTE_STR .)
    WORD            reduce using rule 34 (var_cte -> CTE_STR .)
    NUMBER          reduce using rule 34 (var_cte -> CTE_STR .)
    CENTER          reduce using rule 34 (var_cte -> CTE_STR .)
    FORWARD         reduce using rule 34 (var_cte -> CTE_STR .)
    RIGHT           reduce using rule 34 (var_cte -> CTE_STR .)
    LEFT            reduce using rule 34 (var_cte -> CTE_STR .)
    END             reduce using rule 34 (var_cte -> CTE_STR .)
    ELSE            reduce using rule 34 (var_cte -> CTE_STR .)
    CLOSE_SQR       reduce using rule 34 (var_cte -> CTE_STR .)


state 79

    (35) var_cte -> CTE_NUM .
    DIV             reduce using rule 35 (var_cte -> CTE_NUM .)
    MULT            reduce using rule 35 (var_cte -> CTE_NUM .)
    SUB             reduce using rule 35 (var_cte -> CTE_NUM .)
    SUM             reduce using rule 35 (var_cte -> CTE_NUM .)
    EQUAL_TO        reduce using rule 35 (var_cte -> CTE_NUM .)
    MORE_OR_EQ_THAN reduce using rule 35 (var_cte -> CTE_NUM .)
    LESS_OR_EQ_THAN reduce using rule 35 (var_cte -> CTE_NUM .)
    DIFFERENT_TO    reduce using rule 35 (var_cte -> CTE_NUM .)
    MORE_THAN       reduce using rule 35 (var_cte -> CTE_NUM .)
    LESS_THAN       reduce using rule 35 (var_cte -> CTE_NUM .)
    OR              reduce using rule 35 (var_cte -> CTE_NUM .)
    AND             reduce using rule 35 (var_cte -> CTE_NUM .)
    COMMA           reduce using rule 35 (var_cte -> CTE_NUM .)
    CLOSE_PTH       reduce using rule 35 (var_cte -> CTE_NUM .)
    PEN_DOWN        reduce using rule 35 (var_cte -> CTE_NUM .)
    PEN_UP          reduce using rule 35 (var_cte -> CTE_NUM .)
    WHILE           reduce using rule 35 (var_cte -> CTE_NUM .)
    IF              reduce using rule 35 (var_cte -> CTE_NUM .)
    WRITE           reduce using rule 35 (var_cte -> CTE_NUM .)
    READ            reduce using rule 35 (var_cte -> CTE_NUM .)
    ID              reduce using rule 35 (var_cte -> CTE_NUM .)
    BOOL            reduce using rule 35 (var_cte -> CTE_NUM .)
    WORD            reduce using rule 35 (var_cte -> CTE_NUM .)
    NUMBER          reduce using rule 35 (var_cte -> CTE_NUM .)
    CENTER          reduce using rule 35 (var_cte -> CTE_NUM .)
    FORWARD         reduce using rule 35 (var_cte -> CTE_NUM .)
    RIGHT           reduce using rule 35 (var_cte -> CTE_NUM .)
    LEFT            reduce using rule 35 (var_cte -> CTE_NUM .)
    END             reduce using rule 35 (var_cte -> CTE_NUM .)
    ELSE            reduce using rule 35 (var_cte -> CTE_NUM .)
    CLOSE_SQR       reduce using rule 35 (var_cte -> CTE_NUM .)


state 80

    (36) var_cte -> variable .
    DIV             reduce using rule 36 (var_cte -> variable .)
    MULT            reduce using rule 36 (var_cte -> variable .)
    SUB             reduce using rule 36 (var_cte -> variable .)
    SUM             reduce using rule 36 (var_cte -> variable .)
    EQUAL_TO        reduce using rule 36 (var_cte -> variable .)
    MORE_OR_EQ_THAN reduce using rule 36 (var_cte -> variable .)
    LESS_OR_EQ_THAN reduce using rule 36 (var_cte -> variable .)
    DIFFERENT_TO    reduce using rule 36 (var_cte -> variable .)
    MORE_THAN       reduce using rule 36 (var_cte -> variable .)
    LESS_THAN       reduce using rule 36 (var_cte -> variable .)
    OR              reduce using rule 36 (var_cte -> variable .)
    AND             reduce using rule 36 (var_cte -> variable .)
    COMMA           reduce using rule 36 (var_cte -> variable .)
    CLOSE_PTH       reduce using rule 36 (var_cte -> variable .)
    PEN_DOWN        reduce using rule 36 (var_cte -> variable .)
    PEN_UP          reduce using rule 36 (var_cte -> variable .)
    WHILE           reduce using rule 36 (var_cte -> variable .)
    IF              reduce using rule 36 (var_cte -> variable .)
    WRITE           reduce using rule 36 (var_cte -> variable .)
    READ            reduce using rule 36 (var_cte -> variable .)
    ID              reduce using rule 36 (var_cte -> variable .)
    BOOL            reduce using rule 36 (var_cte -> variable .)
    WORD            reduce using rule 36 (var_cte -> variable .)
    NUMBER          reduce using rule 36 (var_cte -> variable .)
    CENTER          reduce using rule 36 (var_cte -> variable .)
    FORWARD         reduce using rule 36 (var_cte -> variable .)
    RIGHT           reduce using rule 36 (var_cte -> variable .)
    LEFT            reduce using rule 36 (var_cte -> variable .)
    END             reduce using rule 36 (var_cte -> variable .)
    ELSE            reduce using rule 36 (var_cte -> variable .)
    CLOSE_SQR       reduce using rule 36 (var_cte -> variable .)


state 81

    (61) func_call -> ID . OPEN_PTH func_call_param CLOSE_PTH
    (66) variable -> ID . array
    (67) array -> . empty
    (68) array -> . OPEN_SQR expression CLOSE_SQR matrix
    (87) empty -> .
    OPEN_PTH        shift and go to state 61
    OPEN_SQR        shift and go to state 120
    DIV             reduce using rule 87 (empty -> .)
    MULT            reduce using rule 87 (empty -> .)
    SUB             reduce using rule 87 (empty -> .)
    SUM             reduce using rule 87 (empty -> .)
    EQUAL_TO        reduce using rule 87 (empty -> .)
    MORE_OR_EQ_THAN reduce using rule 87 (empty -> .)
    LESS_OR_EQ_THAN reduce using rule 87 (empty -> .)
    DIFFERENT_TO    reduce using rule 87 (empty -> .)
    MORE_THAN       reduce using rule 87 (empty -> .)
    LESS_THAN       reduce using rule 87 (empty -> .)
    OR              reduce using rule 87 (empty -> .)
    AND             reduce using rule 87 (empty -> .)
    COMMA           reduce using rule 87 (empty -> .)
    CLOSE_PTH       reduce using rule 87 (empty -> .)
    PEN_DOWN        reduce using rule 87 (empty -> .)
    PEN_UP          reduce using rule 87 (empty -> .)
    WHILE           reduce using rule 87 (empty -> .)
    IF              reduce using rule 87 (empty -> .)
    WRITE           reduce using rule 87 (empty -> .)
    READ            reduce using rule 87 (empty -> .)
    ID              reduce using rule 87 (empty -> .)
    BOOL            reduce using rule 87 (empty -> .)
    WORD            reduce using rule 87 (empty -> .)
    NUMBER          reduce using rule 87 (empty -> .)
    CENTER          reduce using rule 87 (empty -> .)
    FORWARD         reduce using rule 87 (empty -> .)
    RIGHT           reduce using rule 87 (empty -> .)
    LEFT            reduce using rule 87 (empty -> .)
    END             reduce using rule 87 (empty -> .)
    ELSE            reduce using rule 87 (empty -> .)
    CLOSE_SQR       reduce using rule 87 (empty -> .)

    array                          shift and go to state 118
    empty                          shift and go to state 119

state 82

    (37) cte_bool -> FALSE .
    DIV             reduce using rule 37 (cte_bool -> FALSE .)
    MULT            reduce using rule 37 (cte_bool -> FALSE .)
    SUB             reduce using rule 37 (cte_bool -> FALSE .)
    SUM             reduce using rule 37 (cte_bool -> FALSE .)
    EQUAL_TO        reduce using rule 37 (cte_bool -> FALSE .)
    MORE_OR_EQ_THAN reduce using rule 37 (cte_bool -> FALSE .)
    LESS_OR_EQ_THAN reduce using rule 37 (cte_bool -> FALSE .)
    DIFFERENT_TO    reduce using rule 37 (cte_bool -> FALSE .)
    MORE_THAN       reduce using rule 37 (cte_bool -> FALSE .)
    LESS_THAN       reduce using rule 37 (cte_bool -> FALSE .)
    OR              reduce using rule 37 (cte_bool -> FALSE .)
    AND             reduce using rule 37 (cte_bool -> FALSE .)
    COMMA           reduce using rule 37 (cte_bool -> FALSE .)
    CLOSE_PTH       reduce using rule 37 (cte_bool -> FALSE .)
    PEN_DOWN        reduce using rule 37 (cte_bool -> FALSE .)
    PEN_UP          reduce using rule 37 (cte_bool -> FALSE .)
    WHILE           reduce using rule 37 (cte_bool -> FALSE .)
    IF              reduce using rule 37 (cte_bool -> FALSE .)
    WRITE           reduce using rule 37 (cte_bool -> FALSE .)
    READ            reduce using rule 37 (cte_bool -> FALSE .)
    ID              reduce using rule 37 (cte_bool -> FALSE .)
    BOOL            reduce using rule 37 (cte_bool -> FALSE .)
    WORD            reduce using rule 37 (cte_bool -> FALSE .)
    NUMBER          reduce using rule 37 (cte_bool -> FALSE .)
    CENTER          reduce using rule 37 (cte_bool -> FALSE .)
    FORWARD         reduce using rule 37 (cte_bool -> FALSE .)
    RIGHT           reduce using rule 37 (cte_bool -> FALSE .)
    LEFT            reduce using rule 37 (cte_bool -> FALSE .)
    END             reduce using rule 37 (cte_bool -> FALSE .)
    ELSE            reduce using rule 37 (cte_bool -> FALSE .)
    CLOSE_SQR       reduce using rule 37 (cte_bool -> FALSE .)


state 83

    (38) cte_bool -> TRUE .
    DIV             reduce using rule 38 (cte_bool -> TRUE .)
    MULT            reduce using rule 38 (cte_bool -> TRUE .)
    SUB             reduce using rule 38 (cte_bool -> TRUE .)
    SUM             reduce using rule 38 (cte_bool -> TRUE .)
    EQUAL_TO        reduce using rule 38 (cte_bool -> TRUE .)
    MORE_OR_EQ_THAN reduce using rule 38 (cte_bool -> TRUE .)
    LESS_OR_EQ_THAN reduce using rule 38 (cte_bool -> TRUE .)
    DIFFERENT_TO    reduce using rule 38 (cte_bool -> TRUE .)
    MORE_THAN       reduce using rule 38 (cte_bool -> TRUE .)
    LESS_THAN       reduce using rule 38 (cte_bool -> TRUE .)
    OR              reduce using rule 38 (cte_bool -> TRUE .)
    AND             reduce using rule 38 (cte_bool -> TRUE .)
    COMMA           reduce using rule 38 (cte_bool -> TRUE .)
    CLOSE_PTH       reduce using rule 38 (cte_bool -> TRUE .)
    PEN_DOWN        reduce using rule 38 (cte_bool -> TRUE .)
    PEN_UP          reduce using rule 38 (cte_bool -> TRUE .)
    WHILE           reduce using rule 38 (cte_bool -> TRUE .)
    IF              reduce using rule 38 (cte_bool -> TRUE .)
    WRITE           reduce using rule 38 (cte_bool -> TRUE .)
    READ            reduce using rule 38 (cte_bool -> TRUE .)
    ID              reduce using rule 38 (cte_bool -> TRUE .)
    BOOL            reduce using rule 38 (cte_bool -> TRUE .)
    WORD            reduce using rule 38 (cte_bool -> TRUE .)
    NUMBER          reduce using rule 38 (cte_bool -> TRUE .)
    CENTER          reduce using rule 38 (cte_bool -> TRUE .)
    FORWARD         reduce using rule 38 (cte_bool -> TRUE .)
    RIGHT           reduce using rule 38 (cte_bool -> TRUE .)
    LEFT            reduce using rule 38 (cte_bool -> TRUE .)
    END             reduce using rule 38 (cte_bool -> TRUE .)
    ELSE            reduce using rule 38 (cte_bool -> TRUE .)
    CLOSE_SQR       reduce using rule 38 (cte_bool -> TRUE .)


state 84

    (74) if_stmnt -> IF con_expression . stmnt else_stmnt
    (19) stmnt -> . empty
    (20) stmnt -> . var_declaration_func stmnt
    (21) stmnt -> . pen_func stmnt
    (22) stmnt -> . move_func stmnt
    (23) stmnt -> . while_stmnt stmnt
    (24) stmnt -> . if_stmnt stmnt
    (25) stmnt -> . write stmnt
    (26) stmnt -> . read stmnt
    (27) stmnt -> . func_call stmnt
    (28) stmnt -> . var_assignation stmnt
    (87) empty -> .
    (29) var_declaration_func -> . var_type ID multiple_vars
    (84) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (85) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (79) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (77) while_stmnt -> . WHILE con_expression stmnt END
    (74) if_stmnt -> . IF con_expression stmnt else_stmnt
    (73) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (65) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (61) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (30) var_assignation -> . ID assign expression
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    (80) move_type -> . CENTER
    (81) move_type -> . FORWARD
    (82) move_type -> . RIGHT
    (83) move_type -> . LEFT
    END             reduce using rule 87 (empty -> .)
    ELSE            reduce using rule 87 (empty -> .)
    PEN_DOWN        shift and go to state 37
    PEN_UP          shift and go to state 38
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    WRITE           shift and go to state 42
    READ            shift and go to state 43
    ID              shift and go to state 36
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9
    CENTER          shift and go to state 44
    FORWARD         shift and go to state 45
    RIGHT           shift and go to state 46
    LEFT            shift and go to state 47

    stmnt                          shift and go to state 121
    empty                          shift and go to state 25
    var_declaration_func           shift and go to state 26
    pen_func                       shift and go to state 27
    move_func                      shift and go to state 28
    while_stmnt                    shift and go to state 29
    if_stmnt                       shift and go to state 30
    write                          shift and go to state 31
    read                           shift and go to state 32
    func_call                      shift and go to state 33
    var_assignation                shift and go to state 34
    var_type                       shift and go to state 35
    move_type                      shift and go to state 39

state 85

    (73) write -> WRITE OPEN_PTH . expression CLOSE_PTH
    (39) expression -> . exp
    (40) expression -> . exp rel_op exp
    (41) exp -> . termino
    (42) exp -> . termino term_op termino
    (45) termino -> . factor
    (46) termino -> . factor fact_op factor
    (49) factor -> . SUB var_cte
    (50) factor -> . SUM var_cte
    (51) factor -> . var_cte
    (52) factor -> . OPEN_PTH expression CLOSE_PTH
    (32) var_cte -> . func_call
    (33) var_cte -> . cte_bool
    (34) var_cte -> . CTE_STR
    (35) var_cte -> . CTE_NUM
    (36) var_cte -> . variable
    (61) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (37) cte_bool -> . FALSE
    (38) cte_bool -> . TRUE
    (66) variable -> . ID array
    SUB             shift and go to state 72
    SUM             shift and go to state 74
    OPEN_PTH        shift and go to state 75
    CTE_STR         shift and go to state 78
    CTE_NUM         shift and go to state 79
    ID              shift and go to state 81
    FALSE           shift and go to state 82
    TRUE            shift and go to state 83

    expression                     shift and go to state 122
    exp                            shift and go to state 69
    termino                        shift and go to state 70
    factor                         shift and go to state 71
    var_cte                        shift and go to state 73
    func_call                      shift and go to state 76
    cte_bool                       shift and go to state 77
    variable                       shift and go to state 80

state 86

    (65) read -> READ OPEN_PTH . variable multiple_vars CLOSE_PTH
    (66) variable -> . ID array
    ID              shift and go to state 124

    variable                       shift and go to state 123

state 87

    (10) func_declaration -> func_type FUNC ID OPEN_PTH . parameter CLOSE_PTH stmnt END
    (15) parameter -> . empty
    (16) parameter -> . var_type ID multiple_parameters
    (87) empty -> .
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    CLOSE_PTH       reduce using rule 87 (empty -> .)
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9

    parameter                      shift and go to state 125
    empty                          shift and go to state 126
    var_type                       shift and go to state 127

state 88

    (5) multiple_var -> COMMA ID multiple_var .
    BOOL            reduce using rule 5 (multiple_var -> COMMA ID multiple_var .)
    WORD            reduce using rule 5 (multiple_var -> COMMA ID multiple_var .)
    NUMBER          reduce using rule 5 (multiple_var -> COMMA ID multiple_var .)
    VOID            reduce using rule 5 (multiple_var -> COMMA ID multiple_var .)
    MAIN            reduce using rule 5 (multiple_var -> COMMA ID multiple_var .)


state 89

    (29) var_declaration_func -> var_type ID multiple_vars .
    PEN_DOWN        reduce using rule 29 (var_declaration_func -> var_type ID multiple_vars .)
    PEN_UP          reduce using rule 29 (var_declaration_func -> var_type ID multiple_vars .)
    WHILE           reduce using rule 29 (var_declaration_func -> var_type ID multiple_vars .)
    IF              reduce using rule 29 (var_declaration_func -> var_type ID multiple_vars .)
    WRITE           reduce using rule 29 (var_declaration_func -> var_type ID multiple_vars .)
    READ            reduce using rule 29 (var_declaration_func -> var_type ID multiple_vars .)
    ID              reduce using rule 29 (var_declaration_func -> var_type ID multiple_vars .)
    BOOL            reduce using rule 29 (var_declaration_func -> var_type ID multiple_vars .)
    WORD            reduce using rule 29 (var_declaration_func -> var_type ID multiple_vars .)
    NUMBER          reduce using rule 29 (var_declaration_func -> var_type ID multiple_vars .)
    CENTER          reduce using rule 29 (var_declaration_func -> var_type ID multiple_vars .)
    FORWARD         reduce using rule 29 (var_declaration_func -> var_type ID multiple_vars .)
    RIGHT           reduce using rule 29 (var_declaration_func -> var_type ID multiple_vars .)
    LEFT            reduce using rule 29 (var_declaration_func -> var_type ID multiple_vars .)
    END             reduce using rule 29 (var_declaration_func -> var_type ID multiple_vars .)
    ELSE            reduce using rule 29 (var_declaration_func -> var_type ID multiple_vars .)


state 90

    (71) multiple_vars -> empty .
    PEN_DOWN        reduce using rule 71 (multiple_vars -> empty .)
    PEN_UP          reduce using rule 71 (multiple_vars -> empty .)
    WHILE           reduce using rule 71 (multiple_vars -> empty .)
    IF              reduce using rule 71 (multiple_vars -> empty .)
    WRITE           reduce using rule 71 (multiple_vars -> empty .)
    READ            reduce using rule 71 (multiple_vars -> empty .)
    ID              reduce using rule 71 (multiple_vars -> empty .)
    BOOL            reduce using rule 71 (multiple_vars -> empty .)
    WORD            reduce using rule 71 (multiple_vars -> empty .)
    NUMBER          reduce using rule 71 (multiple_vars -> empty .)
    CENTER          reduce using rule 71 (multiple_vars -> empty .)
    FORWARD         reduce using rule 71 (multiple_vars -> empty .)
    RIGHT           reduce using rule 71 (multiple_vars -> empty .)
    LEFT            reduce using rule 71 (multiple_vars -> empty .)
    END             reduce using rule 71 (multiple_vars -> empty .)
    ELSE            reduce using rule 71 (multiple_vars -> empty .)
    CLOSE_PTH       reduce using rule 71 (multiple_vars -> empty .)


state 91

    (72) multiple_vars -> COMMA . variable
    (66) variable -> . ID array
    ID              shift and go to state 124

    variable                       shift and go to state 128

state 92

    (61) func_call -> ID OPEN_PTH func_call_param . CLOSE_PTH
    CLOSE_PTH       shift and go to state 129


state 93

    (62) func_call_param -> expression . multiple_fc_param
    (63) multiple_fc_param -> . empty
    (64) multiple_fc_param -> . COMMA func_call_param
    (87) empty -> .
    COMMA           shift and go to state 132
    CLOSE_PTH       reduce using rule 87 (empty -> .)

    multiple_fc_param              shift and go to state 130
    empty                          shift and go to state 131

state 94

    (30) var_assignation -> ID assign expression .
    PEN_DOWN        reduce using rule 30 (var_assignation -> ID assign expression .)
    PEN_UP          reduce using rule 30 (var_assignation -> ID assign expression .)
    WHILE           reduce using rule 30 (var_assignation -> ID assign expression .)
    IF              reduce using rule 30 (var_assignation -> ID assign expression .)
    WRITE           reduce using rule 30 (var_assignation -> ID assign expression .)
    READ            reduce using rule 30 (var_assignation -> ID assign expression .)
    ID              reduce using rule 30 (var_assignation -> ID assign expression .)
    BOOL            reduce using rule 30 (var_assignation -> ID assign expression .)
    WORD            reduce using rule 30 (var_assignation -> ID assign expression .)
    NUMBER          reduce using rule 30 (var_assignation -> ID assign expression .)
    CENTER          reduce using rule 30 (var_assignation -> ID assign expression .)
    FORWARD         reduce using rule 30 (var_assignation -> ID assign expression .)
    RIGHT           reduce using rule 30 (var_assignation -> ID assign expression .)
    LEFT            reduce using rule 30 (var_assignation -> ID assign expression .)
    END             reduce using rule 30 (var_assignation -> ID assign expression .)
    ELSE            reduce using rule 30 (var_assignation -> ID assign expression .)


state 95

    (84) pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .
    PEN_DOWN        reduce using rule 84 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    PEN_UP          reduce using rule 84 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    WHILE           reduce using rule 84 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    IF              reduce using rule 84 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    WRITE           reduce using rule 84 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    READ            reduce using rule 84 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    ID              reduce using rule 84 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    BOOL            reduce using rule 84 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    WORD            reduce using rule 84 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    NUMBER          reduce using rule 84 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    CENTER          reduce using rule 84 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    FORWARD         reduce using rule 84 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    RIGHT           reduce using rule 84 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    LEFT            reduce using rule 84 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    END             reduce using rule 84 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)
    ELSE            reduce using rule 84 (pen_func -> PEN_DOWN OPEN_PTH CLOSE_PTH .)


state 96

    (85) pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .
    PEN_DOWN        reduce using rule 85 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    PEN_UP          reduce using rule 85 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    WHILE           reduce using rule 85 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    IF              reduce using rule 85 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    WRITE           reduce using rule 85 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    READ            reduce using rule 85 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    ID              reduce using rule 85 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    BOOL            reduce using rule 85 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    WORD            reduce using rule 85 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    NUMBER          reduce using rule 85 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    CENTER          reduce using rule 85 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    FORWARD         reduce using rule 85 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    RIGHT           reduce using rule 85 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    LEFT            reduce using rule 85 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    END             reduce using rule 85 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)
    ELSE            reduce using rule 85 (pen_func -> PEN_UP OPEN_PTH CLOSE_PTH .)


state 97

    (79) move_func -> move_type OPEN_PTH func_call_param . CLOSE_PTH
    CLOSE_PTH       shift and go to state 133


state 98

    (77) while_stmnt -> WHILE con_expression stmnt . END
    END             shift and go to state 134


state 99

    (78) con_expression -> expression log_op . expression
    (39) expression -> . exp
    (40) expression -> . exp rel_op exp
    (41) exp -> . termino
    (42) exp -> . termino term_op termino
    (45) termino -> . factor
    (46) termino -> . factor fact_op factor
    (49) factor -> . SUB var_cte
    (50) factor -> . SUM var_cte
    (51) factor -> . var_cte
    (52) factor -> . OPEN_PTH expression CLOSE_PTH
    (32) var_cte -> . func_call
    (33) var_cte -> . cte_bool
    (34) var_cte -> . CTE_STR
    (35) var_cte -> . CTE_NUM
    (36) var_cte -> . variable
    (61) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (37) cte_bool -> . FALSE
    (38) cte_bool -> . TRUE
    (66) variable -> . ID array
    SUB             shift and go to state 72
    SUM             shift and go to state 74
    OPEN_PTH        shift and go to state 75
    CTE_STR         shift and go to state 78
    CTE_NUM         shift and go to state 79
    ID              shift and go to state 81
    FALSE           shift and go to state 82
    TRUE            shift and go to state 83

    expression                     shift and go to state 135
    exp                            shift and go to state 69
    termino                        shift and go to state 70
    factor                         shift and go to state 71
    var_cte                        shift and go to state 73
    func_call                      shift and go to state 76
    cte_bool                       shift and go to state 77
    variable                       shift and go to state 80

state 100

    (53) log_op -> OR .
    SUB             reduce using rule 53 (log_op -> OR .)
    SUM             reduce using rule 53 (log_op -> OR .)
    OPEN_PTH        reduce using rule 53 (log_op -> OR .)
    CTE_STR         reduce using rule 53 (log_op -> OR .)
    CTE_NUM         reduce using rule 53 (log_op -> OR .)
    ID              reduce using rule 53 (log_op -> OR .)
    FALSE           reduce using rule 53 (log_op -> OR .)
    TRUE            reduce using rule 53 (log_op -> OR .)


state 101

    (54) log_op -> AND .
    SUB             reduce using rule 54 (log_op -> AND .)
    SUM             reduce using rule 54 (log_op -> AND .)
    OPEN_PTH        reduce using rule 54 (log_op -> AND .)
    CTE_STR         reduce using rule 54 (log_op -> AND .)
    CTE_NUM         reduce using rule 54 (log_op -> AND .)
    ID              reduce using rule 54 (log_op -> AND .)
    FALSE           reduce using rule 54 (log_op -> AND .)
    TRUE            reduce using rule 54 (log_op -> AND .)


state 102

    (40) expression -> exp rel_op . exp
    (41) exp -> . termino
    (42) exp -> . termino term_op termino
    (45) termino -> . factor
    (46) termino -> . factor fact_op factor
    (49) factor -> . SUB var_cte
    (50) factor -> . SUM var_cte
    (51) factor -> . var_cte
    (52) factor -> . OPEN_PTH expression CLOSE_PTH
    (32) var_cte -> . func_call
    (33) var_cte -> . cte_bool
    (34) var_cte -> . CTE_STR
    (35) var_cte -> . CTE_NUM
    (36) var_cte -> . variable
    (61) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (37) cte_bool -> . FALSE
    (38) cte_bool -> . TRUE
    (66) variable -> . ID array
    SUB             shift and go to state 72
    SUM             shift and go to state 74
    OPEN_PTH        shift and go to state 75
    CTE_STR         shift and go to state 78
    CTE_NUM         shift and go to state 79
    ID              shift and go to state 81
    FALSE           shift and go to state 82
    TRUE            shift and go to state 83

    exp                            shift and go to state 136
    termino                        shift and go to state 70
    factor                         shift and go to state 71
    var_cte                        shift and go to state 73
    func_call                      shift and go to state 76
    cte_bool                       shift and go to state 77
    variable                       shift and go to state 80

state 103

    (55) rel_op -> EQUAL_TO .
    SUB             reduce using rule 55 (rel_op -> EQUAL_TO .)
    SUM             reduce using rule 55 (rel_op -> EQUAL_TO .)
    OPEN_PTH        reduce using rule 55 (rel_op -> EQUAL_TO .)
    CTE_STR         reduce using rule 55 (rel_op -> EQUAL_TO .)
    CTE_NUM         reduce using rule 55 (rel_op -> EQUAL_TO .)
    ID              reduce using rule 55 (rel_op -> EQUAL_TO .)
    FALSE           reduce using rule 55 (rel_op -> EQUAL_TO .)
    TRUE            reduce using rule 55 (rel_op -> EQUAL_TO .)


state 104

    (56) rel_op -> MORE_OR_EQ_THAN .
    SUB             reduce using rule 56 (rel_op -> MORE_OR_EQ_THAN .)
    SUM             reduce using rule 56 (rel_op -> MORE_OR_EQ_THAN .)
    OPEN_PTH        reduce using rule 56 (rel_op -> MORE_OR_EQ_THAN .)
    CTE_STR         reduce using rule 56 (rel_op -> MORE_OR_EQ_THAN .)
    CTE_NUM         reduce using rule 56 (rel_op -> MORE_OR_EQ_THAN .)
    ID              reduce using rule 56 (rel_op -> MORE_OR_EQ_THAN .)
    FALSE           reduce using rule 56 (rel_op -> MORE_OR_EQ_THAN .)
    TRUE            reduce using rule 56 (rel_op -> MORE_OR_EQ_THAN .)


state 105

    (57) rel_op -> LESS_OR_EQ_THAN .
    SUB             reduce using rule 57 (rel_op -> LESS_OR_EQ_THAN .)
    SUM             reduce using rule 57 (rel_op -> LESS_OR_EQ_THAN .)
    OPEN_PTH        reduce using rule 57 (rel_op -> LESS_OR_EQ_THAN .)
    CTE_STR         reduce using rule 57 (rel_op -> LESS_OR_EQ_THAN .)
    CTE_NUM         reduce using rule 57 (rel_op -> LESS_OR_EQ_THAN .)
    ID              reduce using rule 57 (rel_op -> LESS_OR_EQ_THAN .)
    FALSE           reduce using rule 57 (rel_op -> LESS_OR_EQ_THAN .)
    TRUE            reduce using rule 57 (rel_op -> LESS_OR_EQ_THAN .)


state 106

    (58) rel_op -> DIFFERENT_TO .
    SUB             reduce using rule 58 (rel_op -> DIFFERENT_TO .)
    SUM             reduce using rule 58 (rel_op -> DIFFERENT_TO .)
    OPEN_PTH        reduce using rule 58 (rel_op -> DIFFERENT_TO .)
    CTE_STR         reduce using rule 58 (rel_op -> DIFFERENT_TO .)
    CTE_NUM         reduce using rule 58 (rel_op -> DIFFERENT_TO .)
    ID              reduce using rule 58 (rel_op -> DIFFERENT_TO .)
    FALSE           reduce using rule 58 (rel_op -> DIFFERENT_TO .)
    TRUE            reduce using rule 58 (rel_op -> DIFFERENT_TO .)


state 107

    (59) rel_op -> MORE_THAN .
    SUB             reduce using rule 59 (rel_op -> MORE_THAN .)
    SUM             reduce using rule 59 (rel_op -> MORE_THAN .)
    OPEN_PTH        reduce using rule 59 (rel_op -> MORE_THAN .)
    CTE_STR         reduce using rule 59 (rel_op -> MORE_THAN .)
    CTE_NUM         reduce using rule 59 (rel_op -> MORE_THAN .)
    ID              reduce using rule 59 (rel_op -> MORE_THAN .)
    FALSE           reduce using rule 59 (rel_op -> MORE_THAN .)
    TRUE            reduce using rule 59 (rel_op -> MORE_THAN .)


state 108

    (60) rel_op -> LESS_THAN .
    SUB             reduce using rule 60 (rel_op -> LESS_THAN .)
    SUM             reduce using rule 60 (rel_op -> LESS_THAN .)
    OPEN_PTH        reduce using rule 60 (rel_op -> LESS_THAN .)
    CTE_STR         reduce using rule 60 (rel_op -> LESS_THAN .)
    CTE_NUM         reduce using rule 60 (rel_op -> LESS_THAN .)
    ID              reduce using rule 60 (rel_op -> LESS_THAN .)
    FALSE           reduce using rule 60 (rel_op -> LESS_THAN .)
    TRUE            reduce using rule 60 (rel_op -> LESS_THAN .)


state 109

    (42) exp -> termino term_op . termino
    (45) termino -> . factor
    (46) termino -> . factor fact_op factor
    (49) factor -> . SUB var_cte
    (50) factor -> . SUM var_cte
    (51) factor -> . var_cte
    (52) factor -> . OPEN_PTH expression CLOSE_PTH
    (32) var_cte -> . func_call
    (33) var_cte -> . cte_bool
    (34) var_cte -> . CTE_STR
    (35) var_cte -> . CTE_NUM
    (36) var_cte -> . variable
    (61) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (37) cte_bool -> . FALSE
    (38) cte_bool -> . TRUE
    (66) variable -> . ID array
    SUB             shift and go to state 72
    SUM             shift and go to state 74
    OPEN_PTH        shift and go to state 75
    CTE_STR         shift and go to state 78
    CTE_NUM         shift and go to state 79
    ID              shift and go to state 81
    FALSE           shift and go to state 82
    TRUE            shift and go to state 83

    termino                        shift and go to state 137
    factor                         shift and go to state 71
    var_cte                        shift and go to state 73
    func_call                      shift and go to state 76
    cte_bool                       shift and go to state 77
    variable                       shift and go to state 80

state 110

    (43) term_op -> SUB .
    SUB             reduce using rule 43 (term_op -> SUB .)
    SUM             reduce using rule 43 (term_op -> SUB .)
    OPEN_PTH        reduce using rule 43 (term_op -> SUB .)
    CTE_STR         reduce using rule 43 (term_op -> SUB .)
    CTE_NUM         reduce using rule 43 (term_op -> SUB .)
    ID              reduce using rule 43 (term_op -> SUB .)
    FALSE           reduce using rule 43 (term_op -> SUB .)
    TRUE            reduce using rule 43 (term_op -> SUB .)


state 111

    (44) term_op -> SUM .
    SUB             reduce using rule 44 (term_op -> SUM .)
    SUM             reduce using rule 44 (term_op -> SUM .)
    OPEN_PTH        reduce using rule 44 (term_op -> SUM .)
    CTE_STR         reduce using rule 44 (term_op -> SUM .)
    CTE_NUM         reduce using rule 44 (term_op -> SUM .)
    ID              reduce using rule 44 (term_op -> SUM .)
    FALSE           reduce using rule 44 (term_op -> SUM .)
    TRUE            reduce using rule 44 (term_op -> SUM .)


state 112

    (46) termino -> factor fact_op . factor
    (49) factor -> . SUB var_cte
    (50) factor -> . SUM var_cte
    (51) factor -> . var_cte
    (52) factor -> . OPEN_PTH expression CLOSE_PTH
    (32) var_cte -> . func_call
    (33) var_cte -> . cte_bool
    (34) var_cte -> . CTE_STR
    (35) var_cte -> . CTE_NUM
    (36) var_cte -> . variable
    (61) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (37) cte_bool -> . FALSE
    (38) cte_bool -> . TRUE
    (66) variable -> . ID array
    SUB             shift and go to state 72
    SUM             shift and go to state 74
    OPEN_PTH        shift and go to state 75
    CTE_STR         shift and go to state 78
    CTE_NUM         shift and go to state 79
    ID              shift and go to state 81
    FALSE           shift and go to state 82
    TRUE            shift and go to state 83

    factor                         shift and go to state 138
    var_cte                        shift and go to state 73
    func_call                      shift and go to state 76
    cte_bool                       shift and go to state 77
    variable                       shift and go to state 80

state 113

    (47) fact_op -> DIV .
    SUB             reduce using rule 47 (fact_op -> DIV .)
    SUM             reduce using rule 47 (fact_op -> DIV .)
    OPEN_PTH        reduce using rule 47 (fact_op -> DIV .)
    CTE_STR         reduce using rule 47 (fact_op -> DIV .)
    CTE_NUM         reduce using rule 47 (fact_op -> DIV .)
    ID              reduce using rule 47 (fact_op -> DIV .)
    FALSE           reduce using rule 47 (fact_op -> DIV .)
    TRUE            reduce using rule 47 (fact_op -> DIV .)


state 114

    (48) fact_op -> MULT .
    SUB             reduce using rule 48 (fact_op -> MULT .)
    SUM             reduce using rule 48 (fact_op -> MULT .)
    OPEN_PTH        reduce using rule 48 (fact_op -> MULT .)
    CTE_STR         reduce using rule 48 (fact_op -> MULT .)
    CTE_NUM         reduce using rule 48 (fact_op -> MULT .)
    ID              reduce using rule 48 (fact_op -> MULT .)
    FALSE           reduce using rule 48 (fact_op -> MULT .)
    TRUE            reduce using rule 48 (fact_op -> MULT .)


state 115

    (49) factor -> SUB var_cte .
    DIV             reduce using rule 49 (factor -> SUB var_cte .)
    MULT            reduce using rule 49 (factor -> SUB var_cte .)
    SUB             reduce using rule 49 (factor -> SUB var_cte .)
    SUM             reduce using rule 49 (factor -> SUB var_cte .)
    EQUAL_TO        reduce using rule 49 (factor -> SUB var_cte .)
    MORE_OR_EQ_THAN reduce using rule 49 (factor -> SUB var_cte .)
    LESS_OR_EQ_THAN reduce using rule 49 (factor -> SUB var_cte .)
    DIFFERENT_TO    reduce using rule 49 (factor -> SUB var_cte .)
    MORE_THAN       reduce using rule 49 (factor -> SUB var_cte .)
    LESS_THAN       reduce using rule 49 (factor -> SUB var_cte .)
    OR              reduce using rule 49 (factor -> SUB var_cte .)
    AND             reduce using rule 49 (factor -> SUB var_cte .)
    COMMA           reduce using rule 49 (factor -> SUB var_cte .)
    CLOSE_PTH       reduce using rule 49 (factor -> SUB var_cte .)
    PEN_DOWN        reduce using rule 49 (factor -> SUB var_cte .)
    PEN_UP          reduce using rule 49 (factor -> SUB var_cte .)
    WHILE           reduce using rule 49 (factor -> SUB var_cte .)
    IF              reduce using rule 49 (factor -> SUB var_cte .)
    WRITE           reduce using rule 49 (factor -> SUB var_cte .)
    READ            reduce using rule 49 (factor -> SUB var_cte .)
    ID              reduce using rule 49 (factor -> SUB var_cte .)
    BOOL            reduce using rule 49 (factor -> SUB var_cte .)
    WORD            reduce using rule 49 (factor -> SUB var_cte .)
    NUMBER          reduce using rule 49 (factor -> SUB var_cte .)
    CENTER          reduce using rule 49 (factor -> SUB var_cte .)
    FORWARD         reduce using rule 49 (factor -> SUB var_cte .)
    RIGHT           reduce using rule 49 (factor -> SUB var_cte .)
    LEFT            reduce using rule 49 (factor -> SUB var_cte .)
    END             reduce using rule 49 (factor -> SUB var_cte .)
    ELSE            reduce using rule 49 (factor -> SUB var_cte .)
    CLOSE_SQR       reduce using rule 49 (factor -> SUB var_cte .)


state 116

    (50) factor -> SUM var_cte .
    DIV             reduce using rule 50 (factor -> SUM var_cte .)
    MULT            reduce using rule 50 (factor -> SUM var_cte .)
    SUB             reduce using rule 50 (factor -> SUM var_cte .)
    SUM             reduce using rule 50 (factor -> SUM var_cte .)
    EQUAL_TO        reduce using rule 50 (factor -> SUM var_cte .)
    MORE_OR_EQ_THAN reduce using rule 50 (factor -> SUM var_cte .)
    LESS_OR_EQ_THAN reduce using rule 50 (factor -> SUM var_cte .)
    DIFFERENT_TO    reduce using rule 50 (factor -> SUM var_cte .)
    MORE_THAN       reduce using rule 50 (factor -> SUM var_cte .)
    LESS_THAN       reduce using rule 50 (factor -> SUM var_cte .)
    OR              reduce using rule 50 (factor -> SUM var_cte .)
    AND             reduce using rule 50 (factor -> SUM var_cte .)
    COMMA           reduce using rule 50 (factor -> SUM var_cte .)
    CLOSE_PTH       reduce using rule 50 (factor -> SUM var_cte .)
    PEN_DOWN        reduce using rule 50 (factor -> SUM var_cte .)
    PEN_UP          reduce using rule 50 (factor -> SUM var_cte .)
    WHILE           reduce using rule 50 (factor -> SUM var_cte .)
    IF              reduce using rule 50 (factor -> SUM var_cte .)
    WRITE           reduce using rule 50 (factor -> SUM var_cte .)
    READ            reduce using rule 50 (factor -> SUM var_cte .)
    ID              reduce using rule 50 (factor -> SUM var_cte .)
    BOOL            reduce using rule 50 (factor -> SUM var_cte .)
    WORD            reduce using rule 50 (factor -> SUM var_cte .)
    NUMBER          reduce using rule 50 (factor -> SUM var_cte .)
    CENTER          reduce using rule 50 (factor -> SUM var_cte .)
    FORWARD         reduce using rule 50 (factor -> SUM var_cte .)
    RIGHT           reduce using rule 50 (factor -> SUM var_cte .)
    LEFT            reduce using rule 50 (factor -> SUM var_cte .)
    END             reduce using rule 50 (factor -> SUM var_cte .)
    ELSE            reduce using rule 50 (factor -> SUM var_cte .)
    CLOSE_SQR       reduce using rule 50 (factor -> SUM var_cte .)


state 117

    (52) factor -> OPEN_PTH expression . CLOSE_PTH
    CLOSE_PTH       shift and go to state 139


state 118

    (66) variable -> ID array .
    DIV             reduce using rule 66 (variable -> ID array .)
    MULT            reduce using rule 66 (variable -> ID array .)
    SUB             reduce using rule 66 (variable -> ID array .)
    SUM             reduce using rule 66 (variable -> ID array .)
    EQUAL_TO        reduce using rule 66 (variable -> ID array .)
    MORE_OR_EQ_THAN reduce using rule 66 (variable -> ID array .)
    LESS_OR_EQ_THAN reduce using rule 66 (variable -> ID array .)
    DIFFERENT_TO    reduce using rule 66 (variable -> ID array .)
    MORE_THAN       reduce using rule 66 (variable -> ID array .)
    LESS_THAN       reduce using rule 66 (variable -> ID array .)
    OR              reduce using rule 66 (variable -> ID array .)
    AND             reduce using rule 66 (variable -> ID array .)
    COMMA           reduce using rule 66 (variable -> ID array .)
    CLOSE_PTH       reduce using rule 66 (variable -> ID array .)
    PEN_DOWN        reduce using rule 66 (variable -> ID array .)
    PEN_UP          reduce using rule 66 (variable -> ID array .)
    WHILE           reduce using rule 66 (variable -> ID array .)
    IF              reduce using rule 66 (variable -> ID array .)
    WRITE           reduce using rule 66 (variable -> ID array .)
    READ            reduce using rule 66 (variable -> ID array .)
    ID              reduce using rule 66 (variable -> ID array .)
    BOOL            reduce using rule 66 (variable -> ID array .)
    WORD            reduce using rule 66 (variable -> ID array .)
    NUMBER          reduce using rule 66 (variable -> ID array .)
    CENTER          reduce using rule 66 (variable -> ID array .)
    FORWARD         reduce using rule 66 (variable -> ID array .)
    RIGHT           reduce using rule 66 (variable -> ID array .)
    LEFT            reduce using rule 66 (variable -> ID array .)
    END             reduce using rule 66 (variable -> ID array .)
    ELSE            reduce using rule 66 (variable -> ID array .)
    CLOSE_SQR       reduce using rule 66 (variable -> ID array .)


state 119

    (67) array -> empty .
    DIV             reduce using rule 67 (array -> empty .)
    MULT            reduce using rule 67 (array -> empty .)
    SUB             reduce using rule 67 (array -> empty .)
    SUM             reduce using rule 67 (array -> empty .)
    EQUAL_TO        reduce using rule 67 (array -> empty .)
    MORE_OR_EQ_THAN reduce using rule 67 (array -> empty .)
    LESS_OR_EQ_THAN reduce using rule 67 (array -> empty .)
    DIFFERENT_TO    reduce using rule 67 (array -> empty .)
    MORE_THAN       reduce using rule 67 (array -> empty .)
    LESS_THAN       reduce using rule 67 (array -> empty .)
    OR              reduce using rule 67 (array -> empty .)
    AND             reduce using rule 67 (array -> empty .)
    COMMA           reduce using rule 67 (array -> empty .)
    CLOSE_PTH       reduce using rule 67 (array -> empty .)
    PEN_DOWN        reduce using rule 67 (array -> empty .)
    PEN_UP          reduce using rule 67 (array -> empty .)
    WHILE           reduce using rule 67 (array -> empty .)
    IF              reduce using rule 67 (array -> empty .)
    WRITE           reduce using rule 67 (array -> empty .)
    READ            reduce using rule 67 (array -> empty .)
    ID              reduce using rule 67 (array -> empty .)
    BOOL            reduce using rule 67 (array -> empty .)
    WORD            reduce using rule 67 (array -> empty .)
    NUMBER          reduce using rule 67 (array -> empty .)
    CENTER          reduce using rule 67 (array -> empty .)
    FORWARD         reduce using rule 67 (array -> empty .)
    RIGHT           reduce using rule 67 (array -> empty .)
    LEFT            reduce using rule 67 (array -> empty .)
    END             reduce using rule 67 (array -> empty .)
    ELSE            reduce using rule 67 (array -> empty .)
    CLOSE_SQR       reduce using rule 67 (array -> empty .)


state 120

    (68) array -> OPEN_SQR . expression CLOSE_SQR matrix
    (39) expression -> . exp
    (40) expression -> . exp rel_op exp
    (41) exp -> . termino
    (42) exp -> . termino term_op termino
    (45) termino -> . factor
    (46) termino -> . factor fact_op factor
    (49) factor -> . SUB var_cte
    (50) factor -> . SUM var_cte
    (51) factor -> . var_cte
    (52) factor -> . OPEN_PTH expression CLOSE_PTH
    (32) var_cte -> . func_call
    (33) var_cte -> . cte_bool
    (34) var_cte -> . CTE_STR
    (35) var_cte -> . CTE_NUM
    (36) var_cte -> . variable
    (61) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (37) cte_bool -> . FALSE
    (38) cte_bool -> . TRUE
    (66) variable -> . ID array
    SUB             shift and go to state 72
    SUM             shift and go to state 74
    OPEN_PTH        shift and go to state 75
    CTE_STR         shift and go to state 78
    CTE_NUM         shift and go to state 79
    ID              shift and go to state 81
    FALSE           shift and go to state 82
    TRUE            shift and go to state 83

    expression                     shift and go to state 140
    exp                            shift and go to state 69
    termino                        shift and go to state 70
    factor                         shift and go to state 71
    var_cte                        shift and go to state 73
    func_call                      shift and go to state 76
    cte_bool                       shift and go to state 77
    variable                       shift and go to state 80

state 121

    (74) if_stmnt -> IF con_expression stmnt . else_stmnt
    (75) else_stmnt -> . END
    (76) else_stmnt -> . ELSE stmnt END
    END             shift and go to state 142
    ELSE            shift and go to state 143

    else_stmnt                     shift and go to state 141

state 122

    (73) write -> WRITE OPEN_PTH expression . CLOSE_PTH
    CLOSE_PTH       shift and go to state 144


state 123

    (65) read -> READ OPEN_PTH variable . multiple_vars CLOSE_PTH
    (71) multiple_vars -> . empty
    (72) multiple_vars -> . COMMA variable
    (87) empty -> .
    COMMA           shift and go to state 91
    CLOSE_PTH       reduce using rule 87 (empty -> .)

    multiple_vars                  shift and go to state 145
    empty                          shift and go to state 90

state 124

    (66) variable -> ID . array
    (67) array -> . empty
    (68) array -> . OPEN_SQR expression CLOSE_SQR matrix
    (87) empty -> .
    OPEN_SQR        shift and go to state 120
    COMMA           reduce using rule 87 (empty -> .)
    CLOSE_PTH       reduce using rule 87 (empty -> .)
    PEN_DOWN        reduce using rule 87 (empty -> .)
    PEN_UP          reduce using rule 87 (empty -> .)
    WHILE           reduce using rule 87 (empty -> .)
    IF              reduce using rule 87 (empty -> .)
    WRITE           reduce using rule 87 (empty -> .)
    READ            reduce using rule 87 (empty -> .)
    ID              reduce using rule 87 (empty -> .)
    BOOL            reduce using rule 87 (empty -> .)
    WORD            reduce using rule 87 (empty -> .)
    NUMBER          reduce using rule 87 (empty -> .)
    CENTER          reduce using rule 87 (empty -> .)
    FORWARD         reduce using rule 87 (empty -> .)
    RIGHT           reduce using rule 87 (empty -> .)
    LEFT            reduce using rule 87 (empty -> .)
    END             reduce using rule 87 (empty -> .)
    ELSE            reduce using rule 87 (empty -> .)

    array                          shift and go to state 118
    empty                          shift and go to state 119

state 125

    (10) func_declaration -> func_type FUNC ID OPEN_PTH parameter . CLOSE_PTH stmnt END
    CLOSE_PTH       shift and go to state 146


state 126

    (15) parameter -> empty .
    CLOSE_PTH       reduce using rule 15 (parameter -> empty .)


state 127

    (16) parameter -> var_type . ID multiple_parameters
    ID              shift and go to state 147


state 128

    (72) multiple_vars -> COMMA variable .
    PEN_DOWN        reduce using rule 72 (multiple_vars -> COMMA variable .)
    PEN_UP          reduce using rule 72 (multiple_vars -> COMMA variable .)
    WHILE           reduce using rule 72 (multiple_vars -> COMMA variable .)
    IF              reduce using rule 72 (multiple_vars -> COMMA variable .)
    WRITE           reduce using rule 72 (multiple_vars -> COMMA variable .)
    READ            reduce using rule 72 (multiple_vars -> COMMA variable .)
    ID              reduce using rule 72 (multiple_vars -> COMMA variable .)
    BOOL            reduce using rule 72 (multiple_vars -> COMMA variable .)
    WORD            reduce using rule 72 (multiple_vars -> COMMA variable .)
    NUMBER          reduce using rule 72 (multiple_vars -> COMMA variable .)
    CENTER          reduce using rule 72 (multiple_vars -> COMMA variable .)
    FORWARD         reduce using rule 72 (multiple_vars -> COMMA variable .)
    RIGHT           reduce using rule 72 (multiple_vars -> COMMA variable .)
    LEFT            reduce using rule 72 (multiple_vars -> COMMA variable .)
    END             reduce using rule 72 (multiple_vars -> COMMA variable .)
    ELSE            reduce using rule 72 (multiple_vars -> COMMA variable .)
    CLOSE_PTH       reduce using rule 72 (multiple_vars -> COMMA variable .)


state 129

    (61) func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .
    PEN_DOWN        reduce using rule 61 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    PEN_UP          reduce using rule 61 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    WHILE           reduce using rule 61 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    IF              reduce using rule 61 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    WRITE           reduce using rule 61 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    READ            reduce using rule 61 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    ID              reduce using rule 61 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    BOOL            reduce using rule 61 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    WORD            reduce using rule 61 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    NUMBER          reduce using rule 61 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    CENTER          reduce using rule 61 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    FORWARD         reduce using rule 61 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    RIGHT           reduce using rule 61 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    LEFT            reduce using rule 61 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    END             reduce using rule 61 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    ELSE            reduce using rule 61 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    DIV             reduce using rule 61 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    MULT            reduce using rule 61 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    SUB             reduce using rule 61 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    SUM             reduce using rule 61 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    EQUAL_TO        reduce using rule 61 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    MORE_OR_EQ_THAN reduce using rule 61 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    LESS_OR_EQ_THAN reduce using rule 61 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    DIFFERENT_TO    reduce using rule 61 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    MORE_THAN       reduce using rule 61 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    LESS_THAN       reduce using rule 61 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    OR              reduce using rule 61 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    AND             reduce using rule 61 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    COMMA           reduce using rule 61 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    CLOSE_PTH       reduce using rule 61 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)
    CLOSE_SQR       reduce using rule 61 (func_call -> ID OPEN_PTH func_call_param CLOSE_PTH .)


state 130

    (62) func_call_param -> expression multiple_fc_param .
    CLOSE_PTH       reduce using rule 62 (func_call_param -> expression multiple_fc_param .)


state 131

    (63) multiple_fc_param -> empty .
    CLOSE_PTH       reduce using rule 63 (multiple_fc_param -> empty .)


state 132

    (64) multiple_fc_param -> COMMA . func_call_param
    (62) func_call_param -> . expression multiple_fc_param
    (39) expression -> . exp
    (40) expression -> . exp rel_op exp
    (41) exp -> . termino
    (42) exp -> . termino term_op termino
    (45) termino -> . factor
    (46) termino -> . factor fact_op factor
    (49) factor -> . SUB var_cte
    (50) factor -> . SUM var_cte
    (51) factor -> . var_cte
    (52) factor -> . OPEN_PTH expression CLOSE_PTH
    (32) var_cte -> . func_call
    (33) var_cte -> . cte_bool
    (34) var_cte -> . CTE_STR
    (35) var_cte -> . CTE_NUM
    (36) var_cte -> . variable
    (61) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (37) cte_bool -> . FALSE
    (38) cte_bool -> . TRUE
    (66) variable -> . ID array
    SUB             shift and go to state 72
    SUM             shift and go to state 74
    OPEN_PTH        shift and go to state 75
    CTE_STR         shift and go to state 78
    CTE_NUM         shift and go to state 79
    ID              shift and go to state 81
    FALSE           shift and go to state 82
    TRUE            shift and go to state 83

    func_call_param                shift and go to state 148
    expression                     shift and go to state 93
    exp                            shift and go to state 69
    termino                        shift and go to state 70
    factor                         shift and go to state 71
    var_cte                        shift and go to state 73
    func_call                      shift and go to state 76
    cte_bool                       shift and go to state 77
    variable                       shift and go to state 80

state 133

    (79) move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .
    PEN_DOWN        reduce using rule 79 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    PEN_UP          reduce using rule 79 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    WHILE           reduce using rule 79 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    IF              reduce using rule 79 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    WRITE           reduce using rule 79 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    READ            reduce using rule 79 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    ID              reduce using rule 79 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    BOOL            reduce using rule 79 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    WORD            reduce using rule 79 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    NUMBER          reduce using rule 79 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    CENTER          reduce using rule 79 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    FORWARD         reduce using rule 79 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    RIGHT           reduce using rule 79 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    LEFT            reduce using rule 79 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    END             reduce using rule 79 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)
    ELSE            reduce using rule 79 (move_func -> move_type OPEN_PTH func_call_param CLOSE_PTH .)


state 134

    (77) while_stmnt -> WHILE con_expression stmnt END .
    PEN_DOWN        reduce using rule 77 (while_stmnt -> WHILE con_expression stmnt END .)
    PEN_UP          reduce using rule 77 (while_stmnt -> WHILE con_expression stmnt END .)
    WHILE           reduce using rule 77 (while_stmnt -> WHILE con_expression stmnt END .)
    IF              reduce using rule 77 (while_stmnt -> WHILE con_expression stmnt END .)
    WRITE           reduce using rule 77 (while_stmnt -> WHILE con_expression stmnt END .)
    READ            reduce using rule 77 (while_stmnt -> WHILE con_expression stmnt END .)
    ID              reduce using rule 77 (while_stmnt -> WHILE con_expression stmnt END .)
    BOOL            reduce using rule 77 (while_stmnt -> WHILE con_expression stmnt END .)
    WORD            reduce using rule 77 (while_stmnt -> WHILE con_expression stmnt END .)
    NUMBER          reduce using rule 77 (while_stmnt -> WHILE con_expression stmnt END .)
    CENTER          reduce using rule 77 (while_stmnt -> WHILE con_expression stmnt END .)
    FORWARD         reduce using rule 77 (while_stmnt -> WHILE con_expression stmnt END .)
    RIGHT           reduce using rule 77 (while_stmnt -> WHILE con_expression stmnt END .)
    LEFT            reduce using rule 77 (while_stmnt -> WHILE con_expression stmnt END .)
    END             reduce using rule 77 (while_stmnt -> WHILE con_expression stmnt END .)
    ELSE            reduce using rule 77 (while_stmnt -> WHILE con_expression stmnt END .)


state 135

    (78) con_expression -> expression log_op expression .
    PEN_DOWN        reduce using rule 78 (con_expression -> expression log_op expression .)
    PEN_UP          reduce using rule 78 (con_expression -> expression log_op expression .)
    WHILE           reduce using rule 78 (con_expression -> expression log_op expression .)
    IF              reduce using rule 78 (con_expression -> expression log_op expression .)
    WRITE           reduce using rule 78 (con_expression -> expression log_op expression .)
    READ            reduce using rule 78 (con_expression -> expression log_op expression .)
    ID              reduce using rule 78 (con_expression -> expression log_op expression .)
    BOOL            reduce using rule 78 (con_expression -> expression log_op expression .)
    WORD            reduce using rule 78 (con_expression -> expression log_op expression .)
    NUMBER          reduce using rule 78 (con_expression -> expression log_op expression .)
    CENTER          reduce using rule 78 (con_expression -> expression log_op expression .)
    FORWARD         reduce using rule 78 (con_expression -> expression log_op expression .)
    RIGHT           reduce using rule 78 (con_expression -> expression log_op expression .)
    LEFT            reduce using rule 78 (con_expression -> expression log_op expression .)
    END             reduce using rule 78 (con_expression -> expression log_op expression .)
    ELSE            reduce using rule 78 (con_expression -> expression log_op expression .)


state 136

    (40) expression -> exp rel_op exp .
    OR              reduce using rule 40 (expression -> exp rel_op exp .)
    AND             reduce using rule 40 (expression -> exp rel_op exp .)
    COMMA           reduce using rule 40 (expression -> exp rel_op exp .)
    CLOSE_PTH       reduce using rule 40 (expression -> exp rel_op exp .)
    PEN_DOWN        reduce using rule 40 (expression -> exp rel_op exp .)
    PEN_UP          reduce using rule 40 (expression -> exp rel_op exp .)
    WHILE           reduce using rule 40 (expression -> exp rel_op exp .)
    IF              reduce using rule 40 (expression -> exp rel_op exp .)
    WRITE           reduce using rule 40 (expression -> exp rel_op exp .)
    READ            reduce using rule 40 (expression -> exp rel_op exp .)
    ID              reduce using rule 40 (expression -> exp rel_op exp .)
    BOOL            reduce using rule 40 (expression -> exp rel_op exp .)
    WORD            reduce using rule 40 (expression -> exp rel_op exp .)
    NUMBER          reduce using rule 40 (expression -> exp rel_op exp .)
    CENTER          reduce using rule 40 (expression -> exp rel_op exp .)
    FORWARD         reduce using rule 40 (expression -> exp rel_op exp .)
    RIGHT           reduce using rule 40 (expression -> exp rel_op exp .)
    LEFT            reduce using rule 40 (expression -> exp rel_op exp .)
    END             reduce using rule 40 (expression -> exp rel_op exp .)
    ELSE            reduce using rule 40 (expression -> exp rel_op exp .)
    CLOSE_SQR       reduce using rule 40 (expression -> exp rel_op exp .)


state 137

    (42) exp -> termino term_op termino .
    EQUAL_TO        reduce using rule 42 (exp -> termino term_op termino .)
    MORE_OR_EQ_THAN reduce using rule 42 (exp -> termino term_op termino .)
    LESS_OR_EQ_THAN reduce using rule 42 (exp -> termino term_op termino .)
    DIFFERENT_TO    reduce using rule 42 (exp -> termino term_op termino .)
    MORE_THAN       reduce using rule 42 (exp -> termino term_op termino .)
    LESS_THAN       reduce using rule 42 (exp -> termino term_op termino .)
    OR              reduce using rule 42 (exp -> termino term_op termino .)
    AND             reduce using rule 42 (exp -> termino term_op termino .)
    COMMA           reduce using rule 42 (exp -> termino term_op termino .)
    CLOSE_PTH       reduce using rule 42 (exp -> termino term_op termino .)
    PEN_DOWN        reduce using rule 42 (exp -> termino term_op termino .)
    PEN_UP          reduce using rule 42 (exp -> termino term_op termino .)
    WHILE           reduce using rule 42 (exp -> termino term_op termino .)
    IF              reduce using rule 42 (exp -> termino term_op termino .)
    WRITE           reduce using rule 42 (exp -> termino term_op termino .)
    READ            reduce using rule 42 (exp -> termino term_op termino .)
    ID              reduce using rule 42 (exp -> termino term_op termino .)
    BOOL            reduce using rule 42 (exp -> termino term_op termino .)
    WORD            reduce using rule 42 (exp -> termino term_op termino .)
    NUMBER          reduce using rule 42 (exp -> termino term_op termino .)
    CENTER          reduce using rule 42 (exp -> termino term_op termino .)
    FORWARD         reduce using rule 42 (exp -> termino term_op termino .)
    RIGHT           reduce using rule 42 (exp -> termino term_op termino .)
    LEFT            reduce using rule 42 (exp -> termino term_op termino .)
    END             reduce using rule 42 (exp -> termino term_op termino .)
    ELSE            reduce using rule 42 (exp -> termino term_op termino .)
    CLOSE_SQR       reduce using rule 42 (exp -> termino term_op termino .)


state 138

    (46) termino -> factor fact_op factor .
    SUB             reduce using rule 46 (termino -> factor fact_op factor .)
    SUM             reduce using rule 46 (termino -> factor fact_op factor .)
    EQUAL_TO        reduce using rule 46 (termino -> factor fact_op factor .)
    MORE_OR_EQ_THAN reduce using rule 46 (termino -> factor fact_op factor .)
    LESS_OR_EQ_THAN reduce using rule 46 (termino -> factor fact_op factor .)
    DIFFERENT_TO    reduce using rule 46 (termino -> factor fact_op factor .)
    MORE_THAN       reduce using rule 46 (termino -> factor fact_op factor .)
    LESS_THAN       reduce using rule 46 (termino -> factor fact_op factor .)
    OR              reduce using rule 46 (termino -> factor fact_op factor .)
    AND             reduce using rule 46 (termino -> factor fact_op factor .)
    COMMA           reduce using rule 46 (termino -> factor fact_op factor .)
    CLOSE_PTH       reduce using rule 46 (termino -> factor fact_op factor .)
    PEN_DOWN        reduce using rule 46 (termino -> factor fact_op factor .)
    PEN_UP          reduce using rule 46 (termino -> factor fact_op factor .)
    WHILE           reduce using rule 46 (termino -> factor fact_op factor .)
    IF              reduce using rule 46 (termino -> factor fact_op factor .)
    WRITE           reduce using rule 46 (termino -> factor fact_op factor .)
    READ            reduce using rule 46 (termino -> factor fact_op factor .)
    ID              reduce using rule 46 (termino -> factor fact_op factor .)
    BOOL            reduce using rule 46 (termino -> factor fact_op factor .)
    WORD            reduce using rule 46 (termino -> factor fact_op factor .)
    NUMBER          reduce using rule 46 (termino -> factor fact_op factor .)
    CENTER          reduce using rule 46 (termino -> factor fact_op factor .)
    FORWARD         reduce using rule 46 (termino -> factor fact_op factor .)
    RIGHT           reduce using rule 46 (termino -> factor fact_op factor .)
    LEFT            reduce using rule 46 (termino -> factor fact_op factor .)
    END             reduce using rule 46 (termino -> factor fact_op factor .)
    ELSE            reduce using rule 46 (termino -> factor fact_op factor .)
    CLOSE_SQR       reduce using rule 46 (termino -> factor fact_op factor .)


state 139

    (52) factor -> OPEN_PTH expression CLOSE_PTH .
    DIV             reduce using rule 52 (factor -> OPEN_PTH expression CLOSE_PTH .)
    MULT            reduce using rule 52 (factor -> OPEN_PTH expression CLOSE_PTH .)
    SUB             reduce using rule 52 (factor -> OPEN_PTH expression CLOSE_PTH .)
    SUM             reduce using rule 52 (factor -> OPEN_PTH expression CLOSE_PTH .)
    EQUAL_TO        reduce using rule 52 (factor -> OPEN_PTH expression CLOSE_PTH .)
    MORE_OR_EQ_THAN reduce using rule 52 (factor -> OPEN_PTH expression CLOSE_PTH .)
    LESS_OR_EQ_THAN reduce using rule 52 (factor -> OPEN_PTH expression CLOSE_PTH .)
    DIFFERENT_TO    reduce using rule 52 (factor -> OPEN_PTH expression CLOSE_PTH .)
    MORE_THAN       reduce using rule 52 (factor -> OPEN_PTH expression CLOSE_PTH .)
    LESS_THAN       reduce using rule 52 (factor -> OPEN_PTH expression CLOSE_PTH .)
    OR              reduce using rule 52 (factor -> OPEN_PTH expression CLOSE_PTH .)
    AND             reduce using rule 52 (factor -> OPEN_PTH expression CLOSE_PTH .)
    COMMA           reduce using rule 52 (factor -> OPEN_PTH expression CLOSE_PTH .)
    CLOSE_PTH       reduce using rule 52 (factor -> OPEN_PTH expression CLOSE_PTH .)
    PEN_DOWN        reduce using rule 52 (factor -> OPEN_PTH expression CLOSE_PTH .)
    PEN_UP          reduce using rule 52 (factor -> OPEN_PTH expression CLOSE_PTH .)
    WHILE           reduce using rule 52 (factor -> OPEN_PTH expression CLOSE_PTH .)
    IF              reduce using rule 52 (factor -> OPEN_PTH expression CLOSE_PTH .)
    WRITE           reduce using rule 52 (factor -> OPEN_PTH expression CLOSE_PTH .)
    READ            reduce using rule 52 (factor -> OPEN_PTH expression CLOSE_PTH .)
    ID              reduce using rule 52 (factor -> OPEN_PTH expression CLOSE_PTH .)
    BOOL            reduce using rule 52 (factor -> OPEN_PTH expression CLOSE_PTH .)
    WORD            reduce using rule 52 (factor -> OPEN_PTH expression CLOSE_PTH .)
    NUMBER          reduce using rule 52 (factor -> OPEN_PTH expression CLOSE_PTH .)
    CENTER          reduce using rule 52 (factor -> OPEN_PTH expression CLOSE_PTH .)
    FORWARD         reduce using rule 52 (factor -> OPEN_PTH expression CLOSE_PTH .)
    RIGHT           reduce using rule 52 (factor -> OPEN_PTH expression CLOSE_PTH .)
    LEFT            reduce using rule 52 (factor -> OPEN_PTH expression CLOSE_PTH .)
    END             reduce using rule 52 (factor -> OPEN_PTH expression CLOSE_PTH .)
    ELSE            reduce using rule 52 (factor -> OPEN_PTH expression CLOSE_PTH .)
    CLOSE_SQR       reduce using rule 52 (factor -> OPEN_PTH expression CLOSE_PTH .)


state 140

    (68) array -> OPEN_SQR expression . CLOSE_SQR matrix
    CLOSE_SQR       shift and go to state 149


state 141

    (74) if_stmnt -> IF con_expression stmnt else_stmnt .
    PEN_DOWN        reduce using rule 74 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    PEN_UP          reduce using rule 74 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    WHILE           reduce using rule 74 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    IF              reduce using rule 74 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    WRITE           reduce using rule 74 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    READ            reduce using rule 74 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    ID              reduce using rule 74 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    BOOL            reduce using rule 74 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    WORD            reduce using rule 74 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    NUMBER          reduce using rule 74 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    CENTER          reduce using rule 74 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    FORWARD         reduce using rule 74 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    RIGHT           reduce using rule 74 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    LEFT            reduce using rule 74 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    END             reduce using rule 74 (if_stmnt -> IF con_expression stmnt else_stmnt .)
    ELSE            reduce using rule 74 (if_stmnt -> IF con_expression stmnt else_stmnt .)


state 142

    (75) else_stmnt -> END .
    PEN_DOWN        reduce using rule 75 (else_stmnt -> END .)
    PEN_UP          reduce using rule 75 (else_stmnt -> END .)
    WHILE           reduce using rule 75 (else_stmnt -> END .)
    IF              reduce using rule 75 (else_stmnt -> END .)
    WRITE           reduce using rule 75 (else_stmnt -> END .)
    READ            reduce using rule 75 (else_stmnt -> END .)
    ID              reduce using rule 75 (else_stmnt -> END .)
    BOOL            reduce using rule 75 (else_stmnt -> END .)
    WORD            reduce using rule 75 (else_stmnt -> END .)
    NUMBER          reduce using rule 75 (else_stmnt -> END .)
    CENTER          reduce using rule 75 (else_stmnt -> END .)
    FORWARD         reduce using rule 75 (else_stmnt -> END .)
    RIGHT           reduce using rule 75 (else_stmnt -> END .)
    LEFT            reduce using rule 75 (else_stmnt -> END .)
    END             reduce using rule 75 (else_stmnt -> END .)
    ELSE            reduce using rule 75 (else_stmnt -> END .)


state 143

    (76) else_stmnt -> ELSE . stmnt END
    (19) stmnt -> . empty
    (20) stmnt -> . var_declaration_func stmnt
    (21) stmnt -> . pen_func stmnt
    (22) stmnt -> . move_func stmnt
    (23) stmnt -> . while_stmnt stmnt
    (24) stmnt -> . if_stmnt stmnt
    (25) stmnt -> . write stmnt
    (26) stmnt -> . read stmnt
    (27) stmnt -> . func_call stmnt
    (28) stmnt -> . var_assignation stmnt
    (87) empty -> .
    (29) var_declaration_func -> . var_type ID multiple_vars
    (84) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (85) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (79) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (77) while_stmnt -> . WHILE con_expression stmnt END
    (74) if_stmnt -> . IF con_expression stmnt else_stmnt
    (73) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (65) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (61) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (30) var_assignation -> . ID assign expression
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    (80) move_type -> . CENTER
    (81) move_type -> . FORWARD
    (82) move_type -> . RIGHT
    (83) move_type -> . LEFT
    END             reduce using rule 87 (empty -> .)
    PEN_DOWN        shift and go to state 37
    PEN_UP          shift and go to state 38
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    WRITE           shift and go to state 42
    READ            shift and go to state 43
    ID              shift and go to state 36
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9
    CENTER          shift and go to state 44
    FORWARD         shift and go to state 45
    RIGHT           shift and go to state 46
    LEFT            shift and go to state 47

    stmnt                          shift and go to state 150
    empty                          shift and go to state 25
    var_declaration_func           shift and go to state 26
    pen_func                       shift and go to state 27
    move_func                      shift and go to state 28
    while_stmnt                    shift and go to state 29
    if_stmnt                       shift and go to state 30
    write                          shift and go to state 31
    read                           shift and go to state 32
    func_call                      shift and go to state 33
    var_assignation                shift and go to state 34
    var_type                       shift and go to state 35
    move_type                      shift and go to state 39

state 144

    (73) write -> WRITE OPEN_PTH expression CLOSE_PTH .
    PEN_DOWN        reduce using rule 73 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    PEN_UP          reduce using rule 73 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    WHILE           reduce using rule 73 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    IF              reduce using rule 73 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    WRITE           reduce using rule 73 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    READ            reduce using rule 73 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    ID              reduce using rule 73 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    BOOL            reduce using rule 73 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    WORD            reduce using rule 73 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    NUMBER          reduce using rule 73 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    CENTER          reduce using rule 73 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    FORWARD         reduce using rule 73 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    RIGHT           reduce using rule 73 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    LEFT            reduce using rule 73 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    END             reduce using rule 73 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)
    ELSE            reduce using rule 73 (write -> WRITE OPEN_PTH expression CLOSE_PTH .)


state 145

    (65) read -> READ OPEN_PTH variable multiple_vars . CLOSE_PTH
    CLOSE_PTH       shift and go to state 151


state 146

    (10) func_declaration -> func_type FUNC ID OPEN_PTH parameter CLOSE_PTH . stmnt END
    (19) stmnt -> . empty
    (20) stmnt -> . var_declaration_func stmnt
    (21) stmnt -> . pen_func stmnt
    (22) stmnt -> . move_func stmnt
    (23) stmnt -> . while_stmnt stmnt
    (24) stmnt -> . if_stmnt stmnt
    (25) stmnt -> . write stmnt
    (26) stmnt -> . read stmnt
    (27) stmnt -> . func_call stmnt
    (28) stmnt -> . var_assignation stmnt
    (87) empty -> .
    (29) var_declaration_func -> . var_type ID multiple_vars
    (84) pen_func -> . PEN_DOWN OPEN_PTH CLOSE_PTH
    (85) pen_func -> . PEN_UP OPEN_PTH CLOSE_PTH
    (79) move_func -> . move_type OPEN_PTH func_call_param CLOSE_PTH
    (77) while_stmnt -> . WHILE con_expression stmnt END
    (74) if_stmnt -> . IF con_expression stmnt else_stmnt
    (73) write -> . WRITE OPEN_PTH expression CLOSE_PTH
    (65) read -> . READ OPEN_PTH variable multiple_vars CLOSE_PTH
    (61) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (30) var_assignation -> . ID assign expression
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    (80) move_type -> . CENTER
    (81) move_type -> . FORWARD
    (82) move_type -> . RIGHT
    (83) move_type -> . LEFT
    END             reduce using rule 87 (empty -> .)
    PEN_DOWN        shift and go to state 37
    PEN_UP          shift and go to state 38
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    WRITE           shift and go to state 42
    READ            shift and go to state 43
    ID              shift and go to state 36
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9
    CENTER          shift and go to state 44
    FORWARD         shift and go to state 45
    RIGHT           shift and go to state 46
    LEFT            shift and go to state 47

    stmnt                          shift and go to state 152
    empty                          shift and go to state 25
    var_declaration_func           shift and go to state 26
    pen_func                       shift and go to state 27
    move_func                      shift and go to state 28
    while_stmnt                    shift and go to state 29
    if_stmnt                       shift and go to state 30
    write                          shift and go to state 31
    read                           shift and go to state 32
    func_call                      shift and go to state 33
    var_assignation                shift and go to state 34
    var_type                       shift and go to state 35
    move_type                      shift and go to state 39

state 147

    (16) parameter -> var_type ID . multiple_parameters
    (17) multiple_parameters -> . empty
    (18) multiple_parameters -> . COMMA parameter
    (87) empty -> .
    COMMA           shift and go to state 155
    CLOSE_PTH       reduce using rule 87 (empty -> .)

    multiple_parameters            shift and go to state 153
    empty                          shift and go to state 154

state 148

    (64) multiple_fc_param -> COMMA func_call_param .
    CLOSE_PTH       reduce using rule 64 (multiple_fc_param -> COMMA func_call_param .)


state 149

    (68) array -> OPEN_SQR expression CLOSE_SQR . matrix
    (69) matrix -> . empty
    (70) matrix -> . OPEN_SQR expression CLOSE_SQR
    (87) empty -> .
    OPEN_SQR        shift and go to state 156
    DIV             reduce using rule 87 (empty -> .)
    MULT            reduce using rule 87 (empty -> .)
    SUB             reduce using rule 87 (empty -> .)
    SUM             reduce using rule 87 (empty -> .)
    EQUAL_TO        reduce using rule 87 (empty -> .)
    MORE_OR_EQ_THAN reduce using rule 87 (empty -> .)
    LESS_OR_EQ_THAN reduce using rule 87 (empty -> .)
    DIFFERENT_TO    reduce using rule 87 (empty -> .)
    MORE_THAN       reduce using rule 87 (empty -> .)
    LESS_THAN       reduce using rule 87 (empty -> .)
    OR              reduce using rule 87 (empty -> .)
    AND             reduce using rule 87 (empty -> .)
    COMMA           reduce using rule 87 (empty -> .)
    CLOSE_PTH       reduce using rule 87 (empty -> .)
    PEN_DOWN        reduce using rule 87 (empty -> .)
    PEN_UP          reduce using rule 87 (empty -> .)
    WHILE           reduce using rule 87 (empty -> .)
    IF              reduce using rule 87 (empty -> .)
    WRITE           reduce using rule 87 (empty -> .)
    READ            reduce using rule 87 (empty -> .)
    ID              reduce using rule 87 (empty -> .)
    BOOL            reduce using rule 87 (empty -> .)
    WORD            reduce using rule 87 (empty -> .)
    NUMBER          reduce using rule 87 (empty -> .)
    CENTER          reduce using rule 87 (empty -> .)
    FORWARD         reduce using rule 87 (empty -> .)
    RIGHT           reduce using rule 87 (empty -> .)
    LEFT            reduce using rule 87 (empty -> .)
    END             reduce using rule 87 (empty -> .)
    ELSE            reduce using rule 87 (empty -> .)
    CLOSE_SQR       reduce using rule 87 (empty -> .)

    matrix                         shift and go to state 157
    empty                          shift and go to state 158

state 150

    (76) else_stmnt -> ELSE stmnt . END
    END             shift and go to state 159


state 151

    (65) read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .
    PEN_DOWN        reduce using rule 65 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    PEN_UP          reduce using rule 65 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    WHILE           reduce using rule 65 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    IF              reduce using rule 65 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    WRITE           reduce using rule 65 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    READ            reduce using rule 65 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    ID              reduce using rule 65 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    BOOL            reduce using rule 65 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    WORD            reduce using rule 65 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    NUMBER          reduce using rule 65 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    CENTER          reduce using rule 65 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    FORWARD         reduce using rule 65 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    RIGHT           reduce using rule 65 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    LEFT            reduce using rule 65 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    END             reduce using rule 65 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)
    ELSE            reduce using rule 65 (read -> READ OPEN_PTH variable multiple_vars CLOSE_PTH .)


state 152

    (10) func_declaration -> func_type FUNC ID OPEN_PTH parameter CLOSE_PTH stmnt . END
    END             shift and go to state 160


state 153

    (16) parameter -> var_type ID multiple_parameters .
    CLOSE_PTH       reduce using rule 16 (parameter -> var_type ID multiple_parameters .)


state 154

    (17) multiple_parameters -> empty .
    CLOSE_PTH       reduce using rule 17 (multiple_parameters -> empty .)


state 155

    (18) multiple_parameters -> COMMA . parameter
    (15) parameter -> . empty
    (16) parameter -> . var_type ID multiple_parameters
    (87) empty -> .
    (6) var_type -> . BOOL
    (7) var_type -> . WORD
    (8) var_type -> . NUMBER
    CLOSE_PTH       reduce using rule 87 (empty -> .)
    BOOL            shift and go to state 7
    WORD            shift and go to state 8
    NUMBER          shift and go to state 9

    parameter                      shift and go to state 161
    empty                          shift and go to state 126
    var_type                       shift and go to state 127

state 156

    (70) matrix -> OPEN_SQR . expression CLOSE_SQR
    (39) expression -> . exp
    (40) expression -> . exp rel_op exp
    (41) exp -> . termino
    (42) exp -> . termino term_op termino
    (45) termino -> . factor
    (46) termino -> . factor fact_op factor
    (49) factor -> . SUB var_cte
    (50) factor -> . SUM var_cte
    (51) factor -> . var_cte
    (52) factor -> . OPEN_PTH expression CLOSE_PTH
    (32) var_cte -> . func_call
    (33) var_cte -> . cte_bool
    (34) var_cte -> . CTE_STR
    (35) var_cte -> . CTE_NUM
    (36) var_cte -> . variable
    (61) func_call -> . ID OPEN_PTH func_call_param CLOSE_PTH
    (37) cte_bool -> . FALSE
    (38) cte_bool -> . TRUE
    (66) variable -> . ID array
    SUB             shift and go to state 72
    SUM             shift and go to state 74
    OPEN_PTH        shift and go to state 75
    CTE_STR         shift and go to state 78
    CTE_NUM         shift and go to state 79
    ID              shift and go to state 81
    FALSE           shift and go to state 82
    TRUE            shift and go to state 83

    expression                     shift and go to state 162
    exp                            shift and go to state 69
    termino                        shift and go to state 70
    factor                         shift and go to state 71
    var_cte                        shift and go to state 73
    func_call                      shift and go to state 76
    cte_bool                       shift and go to state 77
    variable                       shift and go to state 80

state 157

    (68) array -> OPEN_SQR expression CLOSE_SQR matrix .
    DIV             reduce using rule 68 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    MULT            reduce using rule 68 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    SUB             reduce using rule 68 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    SUM             reduce using rule 68 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    EQUAL_TO        reduce using rule 68 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    MORE_OR_EQ_THAN reduce using rule 68 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    LESS_OR_EQ_THAN reduce using rule 68 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    DIFFERENT_TO    reduce using rule 68 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    MORE_THAN       reduce using rule 68 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    LESS_THAN       reduce using rule 68 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    OR              reduce using rule 68 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    AND             reduce using rule 68 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    COMMA           reduce using rule 68 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    CLOSE_PTH       reduce using rule 68 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    PEN_DOWN        reduce using rule 68 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    PEN_UP          reduce using rule 68 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    WHILE           reduce using rule 68 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    IF              reduce using rule 68 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    WRITE           reduce using rule 68 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    READ            reduce using rule 68 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    ID              reduce using rule 68 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    BOOL            reduce using rule 68 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    WORD            reduce using rule 68 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    NUMBER          reduce using rule 68 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    CENTER          reduce using rule 68 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    FORWARD         reduce using rule 68 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    RIGHT           reduce using rule 68 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    LEFT            reduce using rule 68 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    END             reduce using rule 68 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    ELSE            reduce using rule 68 (array -> OPEN_SQR expression CLOSE_SQR matrix .)
    CLOSE_SQR       reduce using rule 68 (array -> OPEN_SQR expression CLOSE_SQR matrix .)


state 158

    (69) matrix -> empty .
    DIV             reduce using rule 69 (matrix -> empty .)
    MULT            reduce using rule 69 (matrix -> empty .)
    SUB             reduce using rule 69 (matrix -> empty .)
    SUM             reduce using rule 69 (matrix -> empty .)
    EQUAL_TO        reduce using rule 69 (matrix -> empty .)
    MORE_OR_EQ_THAN reduce using rule 69 (matrix -> empty .)
    LESS_OR_EQ_THAN reduce using rule 69 (matrix -> empty .)
    DIFFERENT_TO    reduce using rule 69 (matrix -> empty .)
    MORE_THAN       reduce using rule 69 (matrix -> empty .)
    LESS_THAN       reduce using rule 69 (matrix -> empty .)
    OR              reduce using rule 69 (matrix -> empty .)
    AND             reduce using rule 69 (matrix -> empty .)
    COMMA           reduce using rule 69 (matrix -> empty .)
    CLOSE_PTH       reduce using rule 69 (matrix -> empty .)
    PEN_DOWN        reduce using rule 69 (matrix -> empty .)
    PEN_UP          reduce using rule 69 (matrix -> empty .)
    WHILE           reduce using rule 69 (matrix -> empty .)
    IF              reduce using rule 69 (matrix -> empty .)
    WRITE           reduce using rule 69 (matrix -> empty .)
    READ            reduce using rule 69 (matrix -> empty .)
    ID              reduce using rule 69 (matrix -> empty .)
    BOOL            reduce using rule 69 (matrix -> empty .)
    WORD            reduce using rule 69 (matrix -> empty .)
    NUMBER          reduce using rule 69 (matrix -> empty .)
    CENTER          reduce using rule 69 (matrix -> empty .)
    FORWARD         reduce using rule 69 (matrix -> empty .)
    RIGHT           reduce using rule 69 (matrix -> empty .)
    LEFT            reduce using rule 69 (matrix -> empty .)
    END             reduce using rule 69 (matrix -> empty .)
    ELSE            reduce using rule 69 (matrix -> empty .)
    CLOSE_SQR       reduce using rule 69 (matrix -> empty .)


state 159

    (76) else_stmnt -> ELSE stmnt END .
    PEN_DOWN        reduce using rule 76 (else_stmnt -> ELSE stmnt END .)
    PEN_UP          reduce using rule 76 (else_stmnt -> ELSE stmnt END .)
    WHILE           reduce using rule 76 (else_stmnt -> ELSE stmnt END .)
    IF              reduce using rule 76 (else_stmnt -> ELSE stmnt END .)
    WRITE           reduce using rule 76 (else_stmnt -> ELSE stmnt END .)
    READ            reduce using rule 76 (else_stmnt -> ELSE stmnt END .)
    ID              reduce using rule 76 (else_stmnt -> ELSE stmnt END .)
    BOOL            reduce using rule 76 (else_stmnt -> ELSE stmnt END .)
    WORD            reduce using rule 76 (else_stmnt -> ELSE stmnt END .)
    NUMBER          reduce using rule 76 (else_stmnt -> ELSE stmnt END .)
    CENTER          reduce using rule 76 (else_stmnt -> ELSE stmnt END .)
    FORWARD         reduce using rule 76 (else_stmnt -> ELSE stmnt END .)
    RIGHT           reduce using rule 76 (else_stmnt -> ELSE stmnt END .)
    LEFT            reduce using rule 76 (else_stmnt -> ELSE stmnt END .)
    END             reduce using rule 76 (else_stmnt -> ELSE stmnt END .)
    ELSE            reduce using rule 76 (else_stmnt -> ELSE stmnt END .)


state 160

    (10) func_declaration -> func_type FUNC ID OPEN_PTH parameter CLOSE_PTH stmnt END .
    MAIN            reduce using rule 10 (func_declaration -> func_type FUNC ID OPEN_PTH parameter CLOSE_PTH stmnt END .)


state 161

    (18) multiple_parameters -> COMMA parameter .
    CLOSE_PTH       reduce using rule 18 (multiple_parameters -> COMMA parameter .)


state 162

    (70) matrix -> OPEN_SQR expression . CLOSE_SQR
    CLOSE_SQR       shift and go to state 163


state 163

    (70) matrix -> OPEN_SQR expression CLOSE_SQR .
    DIV             reduce using rule 70 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    MULT            reduce using rule 70 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    SUB             reduce using rule 70 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    SUM             reduce using rule 70 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    EQUAL_TO        reduce using rule 70 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    MORE_OR_EQ_THAN reduce using rule 70 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    LESS_OR_EQ_THAN reduce using rule 70 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    DIFFERENT_TO    reduce using rule 70 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    MORE_THAN       reduce using rule 70 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    LESS_THAN       reduce using rule 70 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    OR              reduce using rule 70 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    AND             reduce using rule 70 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    COMMA           reduce using rule 70 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    CLOSE_PTH       reduce using rule 70 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    PEN_DOWN        reduce using rule 70 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    PEN_UP          reduce using rule 70 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    WHILE           reduce using rule 70 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    IF              reduce using rule 70 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    WRITE           reduce using rule 70 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    READ            reduce using rule 70 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    ID              reduce using rule 70 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    BOOL            reduce using rule 70 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    WORD            reduce using rule 70 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    NUMBER          reduce using rule 70 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    CENTER          reduce using rule 70 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    FORWARD         reduce using rule 70 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    RIGHT           reduce using rule 70 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    LEFT            reduce using rule 70 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    END             reduce using rule 70 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    ELSE            reduce using rule 70 (matrix -> OPEN_SQR expression CLOSE_SQR .)
    CLOSE_SQR       reduce using rule 70 (matrix -> OPEN_SQR expression CLOSE_SQR .)
